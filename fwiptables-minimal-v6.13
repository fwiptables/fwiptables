#!/bin/bash
#### #### #### #### for shell bash:
#### #### #### #### #!/bin/bash 
####
#### #### #### #### for shell zsh:
#### #### #### #### #!/bin/zsh
#### #### #### #### emulate -L bash
####
#### File:        fwiptables-mini
#### Description: Mini Fran FireWall fwiptables Generator
#### Author:      Francisco Garcia <fwiptables@gmx.com>
#### Copyright:   (c) 2020-2023 Francisco Garcia <fwiptables@gmx.com>
####
#### This program is free software; you can redistribute it and/or modify
#### it under the terms of the GNU General Public License as published by
#### the Free Software Foundation; either version 2 of the License, or
#### (at your option) any later version.
####
#### This program is distributed in the hope that it will be useful,
#### but WITHOUT ANY WARRANTY; without even the implied warranty of
#### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#### GNU General Public License for more details.
####
#### You should have received a copy of the GNU General Public License along
#### with this program; if not, write to the Free Software Foundation, Inc.,
#### 51 Franklin St, Fifth Floor, Boston MA 02110-1301 USA
####
####
####                 ## fwiptables license in source program
####   English: This program has gpl license GPL v2, this program is copyleft, it is free.
####   Spanish: Este programa tiene licencia GPL v2, este programa es copyleft, esto es libre.
####
####
####                 ## fwiptables comments in source program
####   English: The comments are in english language and spanish language
####   Spanish: Los comentarios estan en idioma ingles y en idioma español
####
####
####                 ## Report bugs and Sum ideas
####   Email: fwiptables@gmx.com
####
####
##########    english: are you root: uid 0 ?                ##########
##########    spanish: eres admnistrador: identificador 0 ? ##########
#### :rutina-inicial-admin:
####
####
if [ "$(id -u)" != "0" ] ; then echo
echo
echo "### [ info ] [ fwiptables needs to be root to work ]"
echo
echo "### [ fail ] [ Be root to work with fwiptables in your system ] [ Try with root user ]"
exit ; fi
####
####
#### :rutina-final-admin:
##########     english name, description and version    ##########
##########     spanish: nombre, descripcion y version   ##########
#### :rutina-inicial-name:
####
####
cmd_binary="$0" ;
cmd_config="fwiptables-mini" ;
cmd_version="minimal-6.13" ;
cmd_name="Fran Mini FireWall FWiptables Generator" ;
cmd_description="One Mini Script in bash for iptables firewall" ;
cmd_license="GPL v2" ;
cmd_homepage="https://sourceforge.net/projects/f-iptables/" ;
####
####
#### :rutina-final-name:
##########    english: options priority        ##########
##########    spanish: prioridad de opciones   ##########
#### :rutina-inicial-order-options:
####
####
command_sed="$(command -v sed)"
#### #### english: option for default    #### spanish: opcion por defecto
zero_dir="$(pwd)" ;
#### #### english: option for default    #### spanish: opcion por defecto
zero_option="$0" ;
#### #### english: variables to launch   #### spanish: variables a lanzar
first_option="$(echo $1 | $command_sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
second_option="$(echo $2 | $command_sed s/\\///g -)" ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
third_option="$(echo $3 | $command_sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
quarter_option="$(echo $4 | $command_sed s/\\///g -)"  ;                     
####
####
#### :rutina-final-order-options:
##########   english: profile y support X11       ##########
##########   spanish: profile y soporte de X11    ##########
#### :rutina-inicial-x11:
####
####
####     #### english: program version            #### spanish: Version del programa
####     #### english: launch profile             #### spanish: lanza profile
####
####
if [ -f /etc/profile ] ; then . /etc/profile ; fi
####
####     #### english: launch completion          #### spanish: lanza autocompletar
####
####
#### if [ -f "/etc/bash_completion.d/$cmd_binary" ] ; then . /etc/bash_completion.d/$cmd_binary ; fi
####
####
####     #### english: stablished the path        #### spanish: establece el path
####
####
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
####
####     #### english: add auth xhost for root    #### spanish: añade autorización xhost para root
####     #### code for add xhost to root for graphicall use
####
####
##########  english: permanent files: files and folders from fwiptables          ##########
##########  spanish: archivos permanentes: archivos y carpetas desde fwiptables  ##########
#### :rutina-inicial-files:
####
####
#### english: permanent directory:   permanent directory and path directory config files
#### spanish: directorio permanente: directorios permanentes y ruta de directorios de los archivos de configuracion
####
####
directory_data="$HOME/.config/$cmd_config"
####
####
#### english: directory tree 
#### spanish: arbol de directorio
####
####
directory_fwrecover="$directory_data/fwiptables-fwrecover"
directory_default="$directory_data/fwiptables-default"
directory_config="$directory_data/fwiptables-config"
directory_log="$directory_data/fwiptables-log"
directory_shell="$directory_data/fwiptables-shell"
####
####
#### english: templates cfg
#### spanish: plantillas cfg
####
####
defaultcfg="$directory_config/default-full-english.cfg"             
defaultfullcfg_eng="$directory_config/default-full-english.cfg"     
defaultfullcfg_spa="$directory_config/default-full-spanish.cfg"     
defaultminicfg_eng="$directory_config/default-mini-english.cfg"     
defaultminicfg_spa="$directory_config/default-mini-spanish.cfg"
####
####
#### english: default config to shell
#### spanish: default config to shell
####
####
default_preferences="$directory_shell/default_preferences"
####
####
#### english: file log:     log files and path files config files
#### spanish: archivos log: archivos log y ruta de los archivos de configuracion
####
####
default_filelog="$directory_log/default_filelog"
default_autolog="$directory_log/default_autolog"
####
####
##########    english: temporal files
##########    spanish: archivos temporales
####
####
#### for tmp in /tmp  , old-use ,  then directory_temporal_path="/tmp/$cmd_binary-$cmd_version-tmp"
#### for tmp in /root , new-use ,  then directory_temporal_path="$HOME/.$cmd_binary-$cmd_version-tmp"
####
####
#### english: temporal directory
#### spanish: directorio temporal
####
####
directory_tmp="$HOME/.cache/$cmd_config"
directory_temporal="$directory_tmp/.$cmd_config-$cmd_version-tmp"
####
####
#### english: temporal files
#### spanish: archivos temporales
####
####
temporal_text="$directory_temporal/$first_option-$second_option-$third_option"
temporal_textfinal="$directory_temporal/$first_option-$second_option-$third_option-textfinal"
temporal_gui="$directory_temporal/$first_option-$second_option-$third_option"
temporal_guifinal="$directory_temporal/$first_option-$second_option-$third_option-guifinal"
output_log="$directory_temporal/$first_option-$second_option-$third_option"
output_logfinal="$directory_temporal/$first_option-$second_option-$third_option-logfinal"
####
####
#### :rutina-final-files:
##########   english: if sane config directory                       ##########
##########   spanish: comprobar sanos directorios de configuracion   ##########
#### :rutina-inicial-dir-sane:
####
####
command_mkdir="$(command -v mkdir)"
####
####
if [ ! -d "$directory_temporal" ]; then $command_mkdir -p $directory_temporal &> /dev/null ; fi
if [ ! -d "$directory_data" ]; then $command_mkdir -p $directory_data &> /dev/null ; fi
if [ ! -d "$directory_temporal" ]; then $command_mkdir -p $directory_temporal &> /dev/null ; fi
if [ ! -d "$directory_config" ]; then $command_mkdir -p "$directory_config" &> /dev/null ; fi
if [ ! -d "$directory_fwrecover" ]; then $command_mkdir -p "$directory_fwrecover" &> /dev/null ; fi
if [ ! -d "$directory_default" ]; then $command_mkdir -p "$directory_default" &> /dev/null ; fi
if [ ! -d "$directory_log" ]; then $command_mkdir -p "$directory_log" &> /dev/null ; fi
if [ ! -d "$directory_shell" ]; then $command_mkdir -p "$directory_shell" &> /dev/null ; fi
####
####
#### :rutina-final-dir-sane:
##########   english: search programs: programs path           ##########
##########   spanish: busca los programas: ruta de programas   ##########
#### :rutina-inicial-command:
####
####
command_editor="$(command -v editor)"
command_vi="$(command -v vi)"
command_vim="$(command -v vim)"
command_pico="$(command -v pico)"
command_nano="$(command -v nano)"
command_arp="$(command -v arp)"
command_arp_scan="$(command -v arp-scan)"
command_arptables="$(command -v arptables)"
command_bash="$(command -v bash)"
command_bc="$(command -v bc)"
command_curl="$(command -v curl)"
command_cut="$(command -v cut)"
command_date="$(command -v date)"
command_dd="$(command -v dd)"
command_dhclient="$(command -v dhclient)"
command_dhclient_script="$(command -v dhclient-script)"
command_dhcpcd="$(command -v dhcpcd)"
command_dialog="$(command -v dialog)"
command_whiptail="$(command -v whiptail)"
command_dig="$(command -v dig)"
command_ebtables="$(command -v ebtables)"
command_elinks="$(command -v elinks)"
command_find="$(command -v find)"
command_fmt="$(command -v fmt)"
command_geoiplookup="$(command -v geoiplookup)"
command_glxgears="$(command -v glxgears)"
command_gpg="$(command -v gpg)"
command_grep="$(command -v grep)"
command_halt="$(command -v halt)"
command_host="$(command -v host)"
command_ifconfig="$(command -v ifconfig)"
command_ip="$(command -v ip)"
command_ip6tables_legacy="$(command -v ip6tables-legacy)"
command_ip6tables_nft="$(command -v ip6tables-nft)"
command_iperf="$(command -v iperf)"
command_iptables_legacy="$(command -v iptables-legacy)"
command_iptables_nft="$(command -v iptables-nft)"
command_iw="$(command -v iw)"
command_links="$(command -v links)"
command_links2="$(command -v links2)"
command_ls="$(command -v ls)"
command_lsof="$(command -v lsof)"
command_lynx="$(command -v lynx)"
command_m2r="$(command -v m2r)"
command_md5sum="$(command -v md5sum)"
command_mdp="$(command -v mdp)"
command_mpg123="$(command -v mpg123)"
command_mpg321="$(command -v mpg321)"
command_netstat="$(command -v netstat)"
command_netstat_nat="$(command -v netstat-nat)"
command_nmap="$(command -v nmap)"
command_ntpdate="$(command -v ntpdate)"
command_openssl="$(command -v openssl)"
command_ping="$(command -v ping)"
command_rdate="$(command -v rdate)"
command_reboot="$(command -v reboot)"
command_resolveip="$(command -v resolveip)"
command_route="$(command -v route)"
command_sed="$(command -v sed)"
command_shc="$(command -v shc)"
command_shutdown="$(command -v shutdown)"
command_sleep="$(command -v sleep)"
command_sntp="$(command -v sntp) -S"
command_ss="$(command -v ss)"
command_sysctl="$(command -v sysctl)"
command_tcpdump="$(command -v tcpdump)"
command_tee="$(command -v tee)"
command_torify="$(command -v torify)"
command_traceroute="$(command -v traceroute)"
command_txt2html="$(command -v txt2html)"
command_uname="$(command -v uname)"
command_wget="$(command -v wget)"
command_wpa_passphrase="$(command -v wpa_passphrase)"
command_wpa_supplicant="$(command -v wpa_supplicant)"
command_xrandr="$(command -v xrandr)"
command_zenity="$(command -v zenity)"
command_yad="$(command -v yad)"
command_zgrep="$(command -v zgrep)"
command_lpinfo="$(command -v lpinfo)"
command_lpstat="$(command -v lpstat)"
command_lsblk="$(command -v lsblk)"
command_lsusb="$(command -v lsusb)"
command_lscpu="$(command -v lscpu)"
command_lspci="$(command -v lspci)"
command_lsgpu="$(command -v lsgpu)"
command_lshw="$(command -v lshw)"
####
####
#### :rutina-final-command:
##########  english: variables: variables to declare     ##########
##########  spanish: variables: variables para declarar  ##########
#### :rutina-inicial-config-variables:
####
####
list_rules_conceptual="" ;
config_ip4_localhost="127.0.0.1" ;
config_ip6_localhost="::1" ;
allow_dmz_ip4="no" ; 
allow_dmz_ip6="no" ;
allow_forward_ip4="no" ; 
allow_forward_ip6="no" ; 
allow_gateway_ip4="no" ;
allow_gateway_ip6="no" ;
allow_input_all="no" ;
allow_input_bandwidth="no" ; 
allow_input_maxconnect="no" ;
allow_input_ping="no" ;
allow_input_state="no" ;
allow_mac_blacklist="no" ; 
allow_mac_whitelist="no" ;
allow_shield_maxtries="no"
allow_net_blacklist="no" ;
allow_net_vpn="no" ; 
allow_others_protocols="no" ;
allow_output_all="no" ; 
allow_output_bandwidth="no" ;
allow_output_gid="no" ;
allow_output_maxconnect="no" ;
allow_output_ping="no" ;
allow_output_state="no" ;
allow_output_uid="no" ; 
client_tcp="ssh,http,https" ;
client_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
config_dmz_ip4="" ;
config_dmz_ip6="" ;
config_input_bandwidth="12512" ; 
config_input_maxconnect="72" ; 
config_input_state="new,related,established" ;
config_mac_blacklist=""
config_mac_whitelist="" ;
config_shield_maxtries="12" ;
config_net_blacklist="yandex.com" ;
config_net_vpn="wesnoth.org" ; 
config_others_protocols="icmp,igmp" ;
config_output_bandwidth="512" ;
config_output_gid="root" ;
config_output_maxconnect="72" ;
config_output_state="new,related,established" ;
config_output_uid="root" ;
logserver_prefix_input="fwlog-input::" ; 
logserver_prefix_output="fwlog-output::" ;
logserver_tcp="no" ;
logserver_udp="no" ;
net_ipv4_client="0/0" ; 
net_ipv4_server="0/0" ;
net_ipv6_client="::/0" ;
net_ipv6_server="::/0" ;
server_tcp="" ;
server_udp="" ; 
####
####
#### :rutina-final-config-variables:
##########   english: the basic system variables         ##########
##########   spanish: las variables basicas del sistema  ##########
#### :rutina-inicial-system-variables:
####
####
####       #### english: for all predefined system firewall: EXCEPT custom, and wizards, and load
####       #### spanish: para todos los cortafuegos predefinidos del sistema: EXCEPTO custom, y wizards, y load
allow_legacy=""                     ## fwiptables-file-default ## void or no
allow_nft="no"                          ## fwiptables-file-default ## void or no
allow_ipv4=""                         ## fwiptables-file-default ## void or no
allow_ipv6=""                         ## fwiptables-file-default ## void or no
####       #### english: separate all rules: separate all rules, void or no
####       #### spanish: separar todas las reglas: separar todas las reglas, vacio o no
allow_separate_rules="no"                         ## fwiptables-file-default ## void or no
####       #### english: ssh shield configured to works with ports choose ports tcp
####       #### spanish: ssh escudo configurado para funcionar con elegidos puertos tcp
config_shield_port="22"                   ## fwiptables-file-default ##  void o ports
####       #### english: ssh tries per ip before shield per hour
####       #### spanish: intentos ssh por ip antes del escudo por hora
config_shield_maxtries="10"                   ## fwiptables-file-default ## void or no
####       #### english: close with deny is or DROP or REJECT
####       #### spanish: cierra con denegacion es o DROP or REJECT
config_close_deny="DROP"                   ## fwiptables-file-default ## DROP or REJECT
####       #### english: auto log from command input
####       #### spanish: automatico log de linea introducida
allow_autolog=""                    ## fwiptables-file-default ## void or no
####       #### english: show date and show time
####       #### spanish: muestra la fecha y el tiempo
allow_showtime="no"                    ## fwiptables-file-default ## void or no
####       #### english: configure a one stablished command or void for automatic command
####       #### spanish: configura un establecido comando o vacio para comando automatico
favorite_text_editor=""          ## fwiptables-file-default ## void or command
favorite_text_dialog=""          ## fwiptables-file-default ## void or command
favorite_graphicall_dialog=""    ## fwiptables-file-default ## void or command
favorite_text_browser=""         ## fwiptables-file-default ## void or command
#### #### english: look  #### spanish: apariencia
graphic_dimension="--width=950 --height=650"   ## fwiptables-file-default ## default: "--width=950 --height=650"
#### #### english: look  #### spanish: apariencia
quad="####" ; 
cinco="#####" ;
tab="     " ;
rallica="_____" ;
sinco=" || " ;
title_md="### " ;
text_md="  " ;
brake_md="---" ;
tabz="### _ _ _ _ _ _ _ " ;
ralla="______________________" ;
duo_md="###" ;
header_ok="### || || [ ok ] ||" ;
cincuenta="##################################################" ;
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_waiting_cli="$duo_md [ info ] [ cli ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_gui="$duo_md [ info ] [ gui ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_log="$duo_md [ info ] [ log ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_web="$duo_md [ info ] [ web ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_help="$duo_md [ info ] [ help: help in rst txt format ] [ Loading.. ]"
head_waiting_info="$duo_md  [ info ] [ info: info in plain txt format ] [ loading.. ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_autolog="[ $cmd_binary ] [ $cmd_version ] [ $(date) ] [ $first_option $second_option $third_option ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_cover="$duo_md || || [ ok ] || [ Firewall ] [ Program: $cmd_config $cmd_version ] || || "
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_load="$duo_md || || [ ok ] || [ Load firewall ] [ netfilter iptables ] || ||"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_preferences="$duo_md [ info ] [ Configure ] [ Configure: $cmd_binary preferences-modify ]"
#### #### english: echo void            #### spanish: impresion vacia
nada="echo -n" ; 
#### #### english: echo void            #### spanish: impresion vacia
nada="$(echo -n)" ; 
#### #### several languages 
tab_lang_english=" eng "
tab_lang_spanish=" spa "
#### #### your language 
#### show_lang_english=""
#### show_lang_spanish="##"
#### #### info list rules
message_info_rules="$duo_md || || [ ok ] || [ Configure ] [ Configure: $cmd_binary preferences-modify ] || ||"
#### #### english: without cli or gui   #### spanish: sin cli o gui
message_without_cli="$duo_md [ fail ] [ cli ] [ Without support for output cli for this option ]"
message_without_gui="$duo_md [ fail ] [ gui ] [ Without support for output gui for this option ]"
message_without_web="$duo_md [ fail ] [ web ] [ Without support for output web for this option ]"
message_without_help="$duo_md [ fail ] [ help in rst ] [ Without support for output rst for this option ]"
message_without_info="$duo_md [ fail ] [ info in txt ] [ Without support for output info for this option ]"
message_without_info="$duo_md [ fail ] [ log ] [ Without support for output log for this option ]"
message_without_info="$duo_md [ fail ] [ null ] [ Without support for output null for this option ]"
####       #### english: close from graphicall with timeout in seconds #####
####       #### spanish: cierre desde graficos con retardo en segundos #####
close_graphicall="1"
####       #### english: message to close graphicall with timeout in seconds #####
####       #### spanish: mensage de cierre para graficos con retardo en segundos #####
mensage_timeout="Closing gui menu in $close_graphicall seconds"
####       #### english: autovariables        #### spanish: autovariables
launch_firewall="no" ;   #  autoconfigure with launch iptables rules
####       #### english: [download web link]  #### spanish: [descarga del enlace web]
url_web_main="https://sourceforge.net/projects/f-iptables/"
url_web_latest="https://sourceforge.net/projects/f-iptables/files/latest/download" ;
url_web_changes="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-changes?format=raw" ;
url_index_files="https://sourceforge.net/projects/f-iptables/files/" ;
url_complete_files="https://sourceforge.net/projects/f-iptables/files/fwiptables-complete-v6" ;
url_minimal_files="https://sourceforge.net/projects/f-iptables/files/fwiptables-minimal-v6" ;
url_web_fulldevelopment="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-fwiptables?format=raw" ;
url_web_minidevelopment="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-minimal-fwiptables?format=raw" ;
url_web_actualfull="https://sourceforge.net/projects/f-iptables/files/fwiptables-complete-actual/download" ;
url_web_actualmini="https://sourceforge.net/projects/f-iptables/files/fwiptables-minimal-actual/download" ;
url_web_tree="https://sourceforge.net/p/f-iptables/code/ci/master/tree/" ;
url_web_git="https://git.code.sf.net/p/f-iptables/code f-iptables-code" ;
flicense="Copyleft, without warranty, gnu license GPL v2."
license_gpl="https://sourceforge.net/p/f-iptables/code/ci/master/tree/LICENSE.txt?format=raw"
url_web_domain="https://sourceforge.net/p/f-iptables/code/ci/master/tree/domain-list?format=raw"
####
####
#### english: if wrong in whithout_option
#### spanish: si esta mal definidad definida whithout_option
####
####
default_security="mini-options"
####
####
#### :rutina-final-system-variables:
##########    english: Update variables             ##########
##########    spanish: Actualiza variables          ##########
#### :rutina-inicial-update-variables:
####
####
####     #### english: launch default for update variables
####     #### spanish: lanza default para actualizar variables
####
####
if [ -f "$default_preferences" ]; then source $default_preferences ; fi
####
####
####  realice sane very important variables post by default_preferences
####
####
case "$program_minimal"       in "no") ;; *) program_minimal="" ;; esac
case "$allow_legacy"          in "no") ;; *) allow_legacy=""    ;; esac
case "$allow_nft"             in "no") ;; *) allow_nft=""       ;; esac
case "$allow_ipv4"            in "no") ;; *) allow_ipv4=""      ;; esac
case "$allow_ipv6"            in "no") ;; *) allow_ipv6=""      ;; esac
case "$config_close_deny"      in
"ACCEPT") ;;
"DROP")   ;;
"REJECT") ;;
"RETURN") ;;
"LOG")    ;;
*) config_close_deny="REJECT"  ;; esac
####
####
#### english: if null option is void return default to mini-options
#### spanish: si la opcion por defecto esta vacia vuelve a mini-options
####
####
if [ "$whithout_option" = "$NULL" ] ; then whithout_option="$default_security" ; fi
####
####
#### :rutina-final-update-variables:
##########      english: search favorite text editor: favorite editor text     ##########
##########      spanish: busca preferido editor: favorite editor de texto     ##########
#### :rutina-inicial-favorite-text-editor:
####
####
if [ "$favorite_text_editor" == "$NULL" ]; then
if [ "$command_vi"  != "$NULL" ]  ; then    favorite_text_editor="$command_vi"      ; fi
if [ "$command_vim"  != "$NULL" ]  ; then   favorite_text_editor="$command_vim"     ; fi
if [ "$command_nano"  != "$NULL" ] ; then   favorite_text_editor="$command_nano"    ; fi
if [ "$command_pico" != "$NULL" ] ; then  favorite_text_editor="$command_pico"      ; fi
if [ "$command_editor" != "$NULL" ] ; then  favorite_text_editor="$command_editor"  ; fi
fi
####
####
#### :rutina-inicial-favorite-text-editor:
##########      english: search favorite text dialog: favorite text dialog     ##########
##########      spanish: busca preferido text dialogo: favorite text dialog    ##########
#### :rutina-inicial-favorite-text-dialog:
####
####
if [ "$favorite_text_dialog" == "$NULL" ]; then
if [ "$command_dialog"  != "$NULL" ]  ; then  favorite_text_dialog="$command_dialog"    ; fi
if [ "$command_whiptail" != "$NULL" ] ; then  favorite_text_dialog="$command_whiptail"  ; fi
fi
####
####
#### :rutina-inicial-favorite-text-dialog:
##########      english: search favorite dialog: favorite dialog     ##########
##########      spanish: busca preferido dialogo: favorite dialog   ##########
#### :rutina-inicial-favorite-graphicall-dialog:
####
####
if [ "$favorite_graphicall_dialog" == "$NULL" ]; then
if [ "$command_yad"     != "$NULL" ] ; then  favorite_graphicall_dialog="$command_yad"      ; fi
if [ "$command_zenity"  != "$NULL" ] ; then  favorite_graphicall_dialog="$command_zenity"   ; fi
fi
####
####
#### :rutina-inicial-favorite-graphicall-dialog:
##########      english: search favorite browser: favorite browser     ##########
##########      spanish: busca preferido navegador: favorite browser   ##########
#### :rutina-inicial-favorite-text-browser:
####
####
if [ "$favorite_text_browser" == "$NULL" ]; then
if [ "$command_links"  != "$NULL" ] ; then  favorite_text_browser="$command_links"   ; fi
if [ "$command_links2" != "$NULL" ] ; then  favorite_text_browser="$command_links2"  ; fi
if [ "$command_lynx"   != "$NULL" ] ; then  favorite_text_browser="$command_lynx"    ; fi
if [ "$command_elinks" != "$NULL" ] ; then  favorite_text_browser="$command_elinks"  ; fi
fi
####
####
#### :rutina-inicial-favorite-text-browser:
##########      english: search favorite dhcp Discover ip net     ##########
##########      spanish: busca preferido dhcp Descubre la ip      ##########
#### :rutina-inicial-favorite-dhcp-command:
####
####
if [ "$favorite_dhcp_command" == "$NULL" ]; then
if [ "$command_dhcpcd"  != "$NULL" ] ;         then  favorite_dhcp_command="$command_dhcpcd"           ; fi
if [ "$command_dhclient_script" != "$NULL" ] ; then  favorite_dhcp_command="$command_dhclient_script"  ; fi
if [ "$command_dhclient"   != "$NULL" ] ;      then  favorite_dhcp_command="$command_dhclient"         ; fi
fi
####
####
#### :rutina-final-favorite-dhcp-command:
##########      english: search favorite date: favorite date command        ##########
##########      spanish: busca preferida fecha: favorita comando de fecha   ##########
#### :rutina-inicial-favorite-date-command:
####
####
if [ "$favorite_date_command" == "$NULL" ]; then
if [ "$command_rdate"   != "$NULL" ]; then  favorite_date_command="$command_rdate -4 -a -n"  ; fi
if [ "$command_sntp"    != "$NULL" ]; then  favorite_date_command="$command_sntp"            ; fi
if [ "$command_ntpdate" != "$NULL" ]; then  favorite_date_command="$command_ntpdate"         ; fi
fi
####
####
#### :rutina-final-favorite-date-command:
##########      english: search favorite music player            ##########
##########      spanish: busca preferida reproductor de musica   ##########
#### :rutina-inicial-favorite-radio-command:
####
####
if [ "$favorite_radio_command" == "$NULL" ]; then
if [ "$command_cvlc" != "$NULL" ]; then  favorite_radio_command="$command_cvlc"     ; fi
if [ "$command_mpg321" != "$NULL" ]; then  favorite_radio_command="$command_mpg321" ; fi
if [ "$command_mpg123" != "$NULL" ]; then  favorite_radio_command="$command_mpg123" ; fi
fi
####
####
#### :rutina-final-favorite-radio-command:
##########    english: ALIAS  simple y firewall y campus       ##########
##########    spanish: ALIAS  simple y cortafuegos y campo     ##########
#### :rutina-inicial-alias-simple:
####
####
##########     ALIAS SIMPLE
##########     ALIAS SIMPLE
####
####
#### english:  alias firewall-list with conceputal firewall-conceptual:
####
####
#### english:  alias firewall-list with numeral firewall-numeral:
####
####
case "$first_option" in
"ls4")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="list4"  ;;
"ls6")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="list6"  ;;
"list4")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="list4"  ;;
"list6")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="list6"  ;;
"status") list_rules_conceptual="no" ; first_option="status" ;;
"ls4")    list_rules_conceptual="" ;;
"ls6")    list_rules_conceptual="" ;;
"list4")  list_rules_conceptual="" ;;
"list6")  list_rules_conceptual="" ;;
"status") list_rules_conceptual="" ;;
"list-alltables") list_rules_conceptual="" ;;
"list-filter4")   list_rules_conceptual="" ;;
"list-filter5")   list_rules_conceptual="" ;;
"list-nat4")   list_rules_conceptual="" ;;
"list-nat6")   list_rules_conceptual="" ;;
"list-raw4")   list_rules_conceptual="" ;;
"list-raw6")   list_rules_conceptual="" ;;
"list-mangle4")   list_rules_conceptual="" ;;
"list-mangle6")   list_rules_conceptual="" ;;
"list-security4")   list_rules_conceptual="" ;;
"list-security6")   list_rules_conceptual="" ;;
"lsn4")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn4"  ;;
"lsn6")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn6"  ;;
"listn4")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn4"  ;;
"listn6")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn6"  ;;
"statusn") list_rules_conceptual="no" ; first_option="statusn"  ;;
"listn-alltables") list_rules_conceptual="no" ; first_option="list-alltables" ;;
"listn-filter4")   list_rules_conceptual="no" ; first_option="list-filter4"   ;;
"listn-filter6")   list_rules_conceptual="no" ; first_option="list-filter6"   ;;
"listn-nat4")   list_rules_conceptual="no" ; first_option="list-nat4" ;;
"listn-nat6")   list_rules_conceptual="no" ; first_option="list-nat6" ;;
"listn-raw4")   list_rules_conceptual="no" ; first_option="list-raw4" ;;
"listn-raw6")   list_rules_conceptual="no" ; first_option="list-raw6" ;;
"listn-mangle4")   list_rules_conceptual="no" ; first_option="list-mangle4"     ;;
"listn-mangle6")   list_rules_conceptual="no" ; first_option="list-mangle6"     ;;
"listn-security4")   list_rules_conceptual="no" ; first_option="list-security4" ;;
"listn-security6")   list_rules_conceptual="no" ; first_option="list-security6" ;;
esac
case "$list_rules_conceptual" in "$NULL") list_rules_conceptual="" ;; *) list_rules_conceptual=" -n"  ;; esac
####
####
#### english:  alias alias simple for output gui, -txt or -cli or -gui and more
####
####
if [ "$first_option" = "tui-menu"  ] ; then first_option="cli-menu"  ; fi
if [ "$first_option" = "text" ] || [ "$first_option" = "-text" ]   ; then first_option="-txt"  ; fi
if [ "$first_option" = "tui"  ] || [ "$first_option" = "-tui" ]    ; then first_option="-cli"  ; fi
if [ "$first_option" = "txt"  ] || [ "$first_option" = "-txt"  ]   ; then first_option="-txt"  ; fi
if [ "$first_option" = "cli"  ] || [ "$first_option" = "-cli"  ]   ; then first_option="-cli"  ; fi
if [ "$first_option" = "gui"  ] || [ "$first_option" = "-gui"  ]   ; then first_option="-gui"  ; fi
if [ "$first_option" = "web"  ] || [ "$first_option" = "-web"  ]   ; then first_option="-web"  ; fi
if [ "$first_option" = "tor"  ] || [ "$first_option" = "-tor"  ]   ; then first_option="-tor"  ; fi
if [ "$first_option" = "help" ] || [ "$first_option" = "-help"  ]  ; then first_option="-help" ; fi
if [ "$first_option" = "-h"   ] || [ "$first_option" = "--help"  ] ; then first_option="-help" ; fi
if [ "$first_option" = "-t"   ] || [ "$first_option" = "--txt"  ]  ; then first_option="-txt"  ; fi
if [ "$first_option" = "-c"   ] || [ "$first_option" = "--cli"  ]  ; then first_option="-cli"  ; fi
if [ "$first_option" = "-g"   ] || [ "$first_option" = "--gui"  ]  ; then first_option="-gui"  ; fi
if [ "$first_option" = "-i"   ] || [ "$first_option" = "--info"  ] ; then first_option="-info" ; fi
if [ "$first_option" = "-w"   ] || [ "$first_option" = "--web"  ]  ; then first_option="-web"  ; fi
if [ "$first_option" = "-l"   ] || [ "$first_option" = "--log"  ]  ; then first_option="-log"  ; fi
if [ "$first_option" = "-n"   ] || [ "$first_option" = "--null"  ] ; then first_option="-null" ; fi
####
####
#### english: alias simple for options commons
####
####
if [ "$first_option" = "$NULL" ]  ; then first_option="options-mini" ; fi
####
####
if [ "$first_option" = "options" ] ; then first_option="options-all" ; fi
if [ "$first_option" = "mini-options" ] ; then first_option="options-mini" ; fi
if [ "$first_option" = "examples" ] ; then first_option="options-examples"; fi
if [ "$first_option" = "sentlog" ] ; then first_option="filelog"; fi
if [ "$first_option" = "radio" ] ; then first_option="radio-mp3"; fi
if [ "$first_option" = "regen" ] ; then first_option="regen-config"; fi
if [ "$first_option" = "cfg" ] ; then first_option="names-config" ; fi
if [ "$first_option" = "cfg-custom" ] ; then first_option="custom" ; fi
if [ "$first_option" = "list-fw" ] ; then first_option="names"; fi
if [ "$first_option" = "ram-free" ] ; then first_option="free-ram"; fi
if [ "$first_option" = "list-allrules" ] ; then first_option="list-alltables"; fi
####
####
####  english: $1 or or $2 or $3 for complete path per file and other excepcions
####
####
if [ "$1" = "-n" ] ; then first_option="-null" ; fi
if [ "$first_option" = "md5sum"  ] ; then second_option="$2" ; third_option="$3" ; fi
if [ "$second_option" = "md5sum" ] ; then third_option="$3"  ; quad_option="$4"  ; fi
####
####
#### english:  alias simple for firewall names 
####
####

if [ "$first_option" = "erase-rules" ] ; then first_option="eraserules" ; fi
if [ "$first_option" = "offline" ] ; then first_option="off-line" ; fi
if [ "$first_option" = "clientweb" ] ; then first_option="client-web" ; fi
if [ "$first_option" = "clientvpn" ] ; then first_option="client-vpn" ; fi
if [ "$first_option" = "game-minecraft" ] ; then first_option="game-minetest" ; fi
if [ "$first_option" = "game-westnoth" ] ; then first_option="game-wesnoth" ; fi
if [ "$first_option" = "allpermisive" ] ; then first_option="all-permisive" ; fi
if [ "$first_option" = "torbrowser" ] ; then first_option="client-tor" ; fi
if [ "$first_option" = "tor-browser" ] ; then first_option="client-tor" ; fi
if [ "$first_option" = "client-email" ] ; then first_option="client-mail" ; fi
if [ "$first_option" = "onlyweb-tor" ] ; then first_option="lan-tor" ; fi
if [ "$first_option" = "serversamba" ] ; then first_option="server-samba" ; fi
if [ "$first_option" = "serverprint" ] ; then first_option="server-print" ; fi
if [ "$first_option" = "serverweb" ] ; then first_option="server-web" ; fi
if [ "$first_option" = "serverssh" ] ; then first_option="server-ssh" ; fi
if [ "$first_option" = "serverlamp" ] ; then first_option="server-lamp" ; fi
if [ "$first_option" = "server-ts" ] ; then first_option="server-teamspeak" ; fi
if [ "$first_option" = "server-email" ] ; then first_option="server-mail" ; fi
####
####
#### english:  alias simple for regenerate configurations templates
####
####
case "$first_option" in
"wizard-mini"|"wizard-full"|"new-mini-config"|"new-full-config"|"nueva-mini-config"|"nueva-completa-config")
$zero_option regen-config ;; esac
case "$second_option" in
"wizard-mini"|"wizard-full"|"new-mini-config"|"new-full-config"|"nueva-mini-config"|"nueva-completa-config")
$zero_option regen-config ;; esac
####
####
#### :rutina-final-alias-simple:
##########    ALIAS CAMPUS
##########    ALIAS CAMPUS
#### :rutina-inicial-alias-campus:
####
####
#### output txt:   |||    General text without warnings
####
####
if [ "$first_option" = "-txt" ]; then case "$second_option" in
####
####
"list4") $cmd_binary list4-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
"list6") $cmd_binary list6-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
"listn4") $cmd_binary listn4-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
"listn6") $cmd_binary listn6-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
esac ; $cmd_binary "$second_option" "$third_option" "$quad_option"
####
####
exit; fi
####
####
#### output cli:
####
####
if [ "$first_option" = "-cli" ]
then echo "$head_waiting_cli"
case "$second_option" in
wizard-*) echo "$message_without_cli" ; $zero_option $second_option $third_option ;  exit ;;
"nueva-mini-config")  $zero_option $second_option $third_option ;  exit ;;
"nueva-completa-config") $zero_option $second_option $third_option ;  exit ;;
"new-mini-config") $zero_option $second_option $third_option ;  exit ;;
"new-full-config") $zero_option $second_option $third_option ;  exit ;;
"preferences-modify") $zero_option preferences-modify ; exit ;;
nmap-*) echo "$message_without_cli" ; $zero_option $second_option $third_option  ;  exit ;;
"radio") echo "$message_without_cli" ; $zero_option $second_option $third_option ;  exit ;;
"speed-cpu") echo "$message_without_cli" ; $zero_option $second_option $third_option ;  exit ;;
"info-nodes") echo "$message_without_cli" ;  exit ;;
"game-domain") $zero_option game-domain -cli ; exit ;;
"game-word") $zero_option game-word -cli ; exit ;;
"game-number") $zero_option game-number -cli ; exit ;;
"addblock-on") echo "$message_without_cli" ; $zero_option $second_option $third_option  ;  exit ;;
"gpg-notes") $zero_option $second_option $third_option ; exit ;;
"clean-tmp") $zero_option $second_option $third_option ; exit ;;
"log-search") 
pattern="$($favorite_text_dialog --stdout --title "type the pattern to search" --inputbox "example: sshd" 0 0)" 
clear; $zero_option log-search $pattern ; exit ;; 
log-*) echo "$message_without_cli" ; $zero_option $second_option $third_option ;  exit ;;
fw-*)  echo "$message_without_cli" ; $zero_option $second_option $third_option  ;  exit ;;
"hosts") echo "$message_without_cli" ; $zero_option hosts ; exit ;;
*) $favorite_text_dialog --title "  Cli Output || $zero_option ||" \
--msgbox "$($zero_option $second_option $third_option)" 0 0 ;  clear ; exit ;;
####
####
esac ; fi
####
####
#### output log
####
####
if [ "$first_option" = "-log" ]
then case "$second_option" in 
"wizard") echo "$message_without_log" ; exit ;;
"wizard-full") echo "$message_without_log" ; exit ;;
"new-mini-config") echo "$message_without_log" ; exit ;;
"nueva-mini-config") echo "$message_without_log" ; exit ;;
"new-full-config") echo "$message_without_log" ; exit ;;
"nueva-completa-config") echo "$message_without_log" ; exit ;;
"modify-config")  echo "$message_without_log" ; exit ;;
"gpg-notes") echo "$message_without_log" ; exit ;;
"wpa-save") echo "$message_without_log" ; exit ;;
pc-*) echo "$message_without_log" ; exit ;;
game-*) echo "$message_without_log" ; exit ;;
radio-*) echo "$message_without_log" ; exit ;;
rule-*) echo "$message_without_log" ; exit ;;
esac 
####
####
echo "$head_waiting_log"
echo "### ### [ info ] [ $second_option $third_option $quad_option ] [ $($command_date) ]" &> $output_log
$zero_option $second_option $third_option $quad_option &>> $output_log
cat $output_log | $command_grep -iv Warning: &>> $default_filelog
echo "$duo_md [  ok  ] [ Output sended to $default_filelog ] [ show file: fwiptables filelog ]" ;
exit ; fi
####
####
#### output null
####
####
if [ "$first_option" = "-null" ]
then case "$second_option" in 
"wizard") echo "$message_without_null" ; exit ;;
"wizard-full") echo "$message_without_null" ; exit ;;
"new-mini-config") echo "$message_without_null" ; exit ;;
"nueva-mini-config") echo "$message_without_null" ; exit ;;
"new-full-config") echo "$message_without_null" ; exit ;;
"nueva-completa-config") echo "$message_without_null" ; exit ;;
"gpg-notes") echo "$message_without_null" ; exit ;;
"wpa-save") echo "$message_without_null" ; exit ;;
pc-*) echo "$message_without_null" ; exit ;;
game-*) echo "$message_without_null" ; exit ;;
radio-*) echo "$message_without_null" ; exit ;;
rule-*) echo "$message_without_null" ; exit ;;
esac
####
####
$zero_option "$second_option" "$third_option" &> /dev/null
exit ; fi
####
####
#### :rutina-final-alias-campus:
##########     english: autolog:         ##########
##########     spanish: autoguardado     ##########
#### :rutina-inicial-allow-autolog:
####
####
if [ "$allow_autolog" != "no" ]; then 
head_autolog="[ $cmd_binary ] [ $cmd_version ] [ $(date) ] [ $first_option $second_option $third_option ]"
echo $head_autolog >> $default_autolog ; fi
####
####
#### :rutina-final-allow-autolog:
##########     english: timespam          ##########
##########     spanish: mostrar fecha     ##########
#### :rutina-inicial-allow-timespam:
####
####
if [ "$allow_showtime" != "no" ] ; then
head_timespam="$duo_md || || [ ok ] || [ Date and Time ] [ $(date) ] || || "
echo $head_timespam ; fi
####
####
#### :rutina-final-allow-timespam:
##########   english: filelog: Read log fwiptables-filelog  ##########
##########   spanish: filelog: Lee log  fwiptables-filelog  ##########
#### :rutina-inicial-filelog:
####
####
if [ "$first_option" = "filelog" ] ; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show $default_filelog ] || ||"
if [ ! -f $default_filelog ]; then touch $default_filelog ; fi
echo
cat  "$default_filelog"
echo 
echo "### ### [ this file is: ] [ $default_filelog ]"
exit; fi
####
####
#### :rutina-final-fw-filelog:
##########    english: autolog: Read log fwiptables-autolog   ##########
##########    spanish: autolog: Lee log  fwiptables-autolog   ##########
#### :rutina-inicial-autolog:
####
####
if [ "$first_option" = "autolog" ] ; then  echo $give_cover
echo "$header_ok [ $first_option ] [ show "$default_autolog" ] || ||"
if [ ! -f $default_autolog ]; then touch $default_autolog ; fi
echo
cat  "$default_autolog"
echo
echo "$duo_md [ info ] [ last end of file showed ] [ $default_autolog ]"
exit; fi
####
####
#### :rutina-final-autolog:
##########   english: default:  fwiptables preferences      ##########
##########   spanish: defecto:  fwiptables preferences      ##########
#### :rutina-inicial-default:
####
####
if [ "$first_option" = "default" ] ; then echo $give_cover
echo "$header_ok [ $first_option ] [ $cmd_binary default ] [ default md ] || ||"
echo "$duo_md [ info ] [ $cmd_binary default.. ]"
echo "$duo_md [ info ] [ Autoregenerate default config for fwiptables: ] [ fwiptables preferences-regen  ]"
echo "$duo_md [ info ] [ Show   default config for fwiptables:         ] [ fwiptables preferences-read   ]"
echo "$duo_md [ info ] [ Modify default config for fwiptables:         ] [ fwiptables preferences-modify ]"
exit; fi
####
####
#### :rutina-final-default:
##########    english: preferences-read: show preferences   ##########
##########    spanish: preferences-read: show preferences   ##########
#### :rutina-inicial-preferences-read:
####
####
if [ "$first_option" = "preferences-read" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ show the default fwiptables ] || ||"
echo 
cat $default_preferences
echo
echo "$duo_md [ info ] [ Change variables with: $cmd_binary preferences-modify ]"
echo "$duo_md [ info ] [ file: $default_preferences ]"
exit; fi
####
####
#### :rutina-final-preferences-read:
##########    english: preferences-modify: modify preferences   ##########
##########    spanish: preferences-modify: modify preferences   ##########
#### :rutina-inicial-preferences-modify:
####
####
if [ "$first_option" = "preferences-modify" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ modify the default fwiptables ] || ||"
echo 
$favorite_text_editor $default_preferences
echo "$duo_md [ info ] [ edit file $default_preferences to change variables ]"
exit; fi
####
####
#### :rutina-final-preferences-modify:
##########    english: dialog-modify: modify dialog   ##########
##########    spanish: dialog-modify: modify dialog   ##########
#### :rutina-inicial-dialog-modify:
####
####
if [ "$first_option" = "dialog-modify" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ modify the default dialog ] || ||"
echo 
$favorite_text_editor $default_dialogrc
echo "$duo_md [ info ] [ edit file $default_dialogrc to change variables ]"
exit; fi
####
####
#### :rutina-final-dialog-modify:
##########    english: preferences-read: modify  preferences         ##########
##########    spanish: preferences-read: modifica preferencias       ##########
#### :rutina-inicial-preferences-read:
####
####
if [ "$first_option" = "preferences-read" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ read the default fwiptables ] || ||"
echo "$duo_md [ info ] [ Show file $default_preferences to read variables ]"
####
####
#### english: show file
#### spanish: muestra el archivo
####
####
cat $default_preferences
####
####
exit; fi
####
####
#### :rutina-final-preferences-read:
##########   english: preferences-regen:  regen preferences       ##########
##########   spanish: preferences-regen:  regenera preferencias   ##########
#### :rutina-inicial-preferences-regen:
####
####
if [ "$first_option" = "preferences-regen" ] ; then echo $give_cover
echo "$header_ok [ $first_option ] [ $cmd_binary preferences-regen ] [ preferences-regen md ] || ||"
echo "$duo_md [ info ] [ $cmd_binary preferences-regen.. ]"
echo "$($0 config-regen)"  &> /dev/null
echo "$(head -500 $0 | $command_grep -B 2 fwiptables-file-default)" &> $default_preferences
echo "$duo_md [  ok  ] [ Updated values for default in $default_preferences ]"
exit; fi
####
####
#### :rutina-final-preferences-regen:
##########    english: ip4 : get net info               ##########
##########    spanish: ip4 : da informacion de la red   ##########
#### :sicontarrutina-inicial-ip4:
####
####
if [ "$first_option" = "ip4" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show info about net ip4 ] || ||"
echo
echo "$duo_md [ info ] ### [ Network Route ] [ Route ipv4 ] ###"
if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else $command_ip -4 route ; fi
echo
echo "$duo_md [ info ] ### [ Network Listen ] [ Listen ipv4 ] ###"
if [ "$command_ss" = "$NULL" ] ; then echo "$tab [ info ] [ install ss command ]"
else $command_ss -l4 | $command_sed 's/   / /g' ; fi
echo
echo "$duo_md [ info ] ### [ Private ip ] [ Address ipv4 ] ###"
if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else  $command_ip -4 address | $command_grep -i  inet | $command_grep -iv 127.0.0.1 | $command_sed 's/inet//g' | cut -d "/" -f 1 ; fi
echo
echo "$duo_md [ info ] ### [ Public ip ] [ Address ipv4 ] ###"
if [ "$command_curl" = "$NULL" ] ; then echo "$tab [ info ] [ install curl command ]" ; else
public_ip4="$(timeout -s SIGINT -v 8 $command_curl -s -4 http://ifconfig.co/ip -w "\n"| head -1)"
if [ "$public_ip4" == "<!DOCTYPE html>" ] ; then echo "fail: public ip hidden for dns server" ;
else echo "$tab $public_ip4"; fi; fi
echo
echo "$duo_md [ info ] ### [ Proxy ip ] [ Address proxy ] ###"
echo "$duo_md [ info ] Proxy http:    $http_proxy"
echo "$duo_md [ info ] Proxy https:   $https_proxy"
echo
echo "$duo_md [ info ] ### [ domain resolve ] [ Resolv.conf ] ###"
cat /etc/resolv.conf | $command_grep -i nameserver | $command_grep -iv ^# | sed 's/nameserver/     nameserver/g'
exit; fi
####
####
#### :rutina-final-ip4:
##########    english: ip6 : get net info               ##########
##########    spanish: ip6 : da informacion de la red   ##########
#### :rutina-inicial-ip6:
####
####
if [ "$first_option" = "ip6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show info about net ip6 ] || ||"
echo
echo "$duo_md [ info ] ### [ Network Route ] [ Route ipv6 ] ###"
if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else $command_ip -6 route ; fi
echo
echo "$duo_md [ info ] ### [ Network Listen ] [ Listen ipv6 ] ###"
if [ "$command_ss" = "$NULL" ] ; then echo "$tab [ info ] [ install ss command ]"
else $command_ss -l6 | $command_sed 's/   / /g' ; fi
echo
echo "$duo_md [ info ] ### [ Private ip ] [ Address ipv6 ] ###"
if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else  $command_ip -6 address | $command_grep -i  inet | $command_grep -iv  "inet6 ::1" | $command_sed 's/inet6//g' | cut -d "/" -f 1 ; fi
echo
echo "$duo_md [ info ] ### [ Public ip ] [ Address ipv6 ] ###"
if [ "$command_curl" = "$NULL" ] ; then echo "$tab [ info ] [ install curl command ]" ; else
public_ip6="$(timeout -s SIGINT -v 8 $command_curl -s -6 http://ifconfig.co/ip -w "\n"| head -1)"
if [ "$public_ip6" == "<!DOCTYPE html>" ] ; then echo "fail: public ip hidden for dns server" ;
else echo "$tab $public_ip6"; fi; fi
echo
echo "$duo_md [ info ] ### [ Proxy ip ] [ Address proxy ] ###"
echo "$duo_md [ info ] Proxy http:    $http_proxy"
echo "$duo_md [ info ] Proxy https:   $https_proxy"
echo
echo "$duo_md [ info ] ### [ domain resolve ] [ Resolv.conf ] ###"
cat /etc/resolv.conf | $command_grep -i nameserver | $command_grep -iv ^# | sed 's/nameserver/     nameserver/g'
exit; fi
####
####
#### :rutina-final-ip6:
##########    english: depends: depends            ##########
##########    spanish: dependencias: dependencias  ##########
#### :rutina-inicial-depends:
####
####
if [ "$first_option" = "depends" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List for depends programs ] [ depends md ] || ||"
echo
echo "$title_md [ Configuration files ]"
echo "$text_md Directory data:          $directory_data"
echo "$text_md Directory temp:          $directory_tmp"
echo "$text_md File Preferences:        $default_preferences"
echo
echo "$title_md [ Log files ]"
echo "$text_md File autolog:            $default_autolog"
echo "$text_md File filelog:            $default_filelog"
echo
echo "$title_md [ Automatic interfaces  ]"
echo "$text_md Interface txt:           $command_bash"
echo "$text_md Interface cli:           $favorite_text_dialog"
echo "$text_md Interface gui:           $favorite_graphicall_dialog"
echo 
echo "$title_md [ Automatic iptables ]"
echo "$text_md iptables legacy:         $command_iptables_legacy"
echo "$text_md iptables nft:            $command_iptables_nft"
echo "$text_md ip6tables legacy:        $command_ip6tables_legacy"
echo "$text_md ip6tables nft:           $command_ip6tables_nft"
echo "$text_md arptables:               $command_arptables"
echo "$text_md ebtables:                $command_ebtables"
echo
echo "$title_md [ Automatic favorites ]"
echo "$text_md Automatic text editor:    Text editor command      :   $favorite_text_editor"
echo "$text_md Automatic text browser:   Text browser command     :   $favorite_text_browser"
# echo "$text_md Automatic text music:     mpg321 or mpg123         :   $favorite_radio_command"
# echo "$text_md Automatic text date:      rdate or sntp or ntpdate :   $favorite_date_command"
# echo "$text_md Automatic text dhcp:      dhcpcd or dhclient       :   $favorite_dhcp_command" 
echo 
exit; fi
####
####
#### :rutina-final-depends:
##########    english: version: system script, the version option              ##########
##########    spanish: version: script de sistema, la opcion mostrar version   ##########
#### :rutina-inicial-version:
####
####
if [ "$first_option" = "version" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ Show version about ] [ version.md] || ||"
echo "$title_md [ Name program ]"
echo "$text_md $cmd_name"
echo
echo "$title_md [ Version program ]"
echo "$text_md $cmd_version"
echo
echo "$title_md [ Description program ]"
echo "$text_md $cmd_description"
echo
echo "$title_md [ Launched program ]"
echo "$text_md $zero_option"
echo
echo "$title_md [ File format ]"
echo "$text_md $(file $zero_option | cut -d "," -f 1-2)"
echo
echo "$title_md [ MD5 sum ]"
echo "$text_md $($command_md5sum $0)"
echo
echo "$title_md [ Temp directory ]"
echo "$text_md $directory_tmp"
echo
echo "$title_md [ Data directory ]"
echo "$text_md $directory_data"
echo
echo "$title_md [ Default preferences ]"
echo "$text_md $default_preferences"
echo
echo "$title_md [ Default autolog ]"
echo "$text_md $default_autolog"
echo
echo "$title_md [ Default filelog ]"
echo "$text_md $default_filelog"
echo
echo "$title_md [ Web page ]"
echo "$text_md $cmd_homepage"
exit ; fi
####
####
#### :rutina-final-version:
##########    english: notes: notes to configure iptables      ##########
##########    spanish: notes: notas para configurar iptables   ##########
#### :rutina-inicial-notes:
####
####
if [ "$first_option" = "notes" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List notes about ] [ notes md ] || ||"
echo "$text_md"
echo "$text_md  [ legacy or nft ] [ whith one of them is sufficent ] [ becouse when one accept then go to the other one ]"
echo "$text_md  [ legacy or nft ] [ con uno de ellos es suficiente ] [ porque cuando uno acepta despues va a la otro ]" 
echo "$text_md"
echo "$text_md  [ allow_shield_maxtries ] [ limit a attack per bruteforce to us ssh server] "
echo "$text_md  [ allow_shield_maxtries ] [ limita un ataque por fuerza bruta a nuestro servidor ssh ]"
echo "$text_md"
echo "$text_md  [ net vpn ]  [ virtual private network ] [ whitelist ]"
echo "$text_md  [ net vpn ] [ red privada virtual ]     [ lista blanca ]"
echo "$text_md"
echo "$text_md  Host [net vpn] excepcionals hosts has conection allowed in firewall"
echo "$text_md  Host [net vpn] excepcionales hosts tienen la conexion permitida en el firewall"
echo "$text_md"
echo "$text_md  [net blacklist] [deny host]"
echo "$text_md  [net blacklist] [Lista negra]"
echo "$text_md"  
echo "$text_md  Host [ net blacklist ] excepcionals hosts has conection dropped in firewall"
echo "$text_md  Host [ net blacklist ] expcecionales hosts tienen la conexion denegada en firewall"
echo "$text_md"
echo "$text_md  [ allow output uid ] [user and group]"
echo "$text_md  [ allow output uid ] [usuario y grupo]"
echo "$text_md"
echo "$text_md  User and/or group excepcional have output conection allowed in firewall"
echo "$text_md  Usuario y/o grupo excepcional tienen la salida permitida en firewall"
echo "$text_md"
echo "$text_md  [ Notes ] [ Two iptables netfilter ]"
echo "$text_md  [ Notas ] [ Dos iptables netfilter ]"
echo "$text_md"
echo "$text_md  iptables-legacy   is    support for xtables "
echo "$text_md  iptables-nft      is    support for nftables "
echo "$text_md"
echo "$text_md  [ Notes ] [necesary ports to connect with ipv4 and ipv6 in UDP protocol]"
echo "$text_md  [ Notas ] [puertos necesarios para conectar con ipv4 y ipv6 en UDP protocolo]"
echo "$text_md"
echo "$text_md  ntp    : Port necesary to update the time and date"
echo "$text_md         : Puerto necesario para actualizar la hora y fecha"
echo "$text_md  bootpc : Port necesary to dhcp and get ip"
echo "$text_md         : Puerto necesario para actualizar y conseguir la ip"
echo "$text_md  domain : This port is necesary to domain resolver"
echo "$text_md         : Puerto necesario para resolver dominios"
echo "$text_md  https  : This port is necesary for udp named web html5"
echo "$text_md         : Puerto necesario para udp llamado web html5"
echo "$text_md"
echo "$text_md  [ Notes ] [necesary protocols for ip v6]"
echo "$text_md  [ Notas ] [protocolos necesarios para ip v6]"
echo "$text_md"
echo "$text_md  ipv6-icmp : Necesary protocol in ipv6"
echo "$text_md        : Protocolo necesario en ipv6"
echo "$text_md  ipv4 protocols : ipv6 works too with old ipv4 procotols"
echo "$text_md        : ipv6 funciona tambien con viejos ipv4 protocolos"
echo "$text_md"
echo "$text_md  [ License ]"
echo "$text_md"
echo "$text_md  Download the latest version $cmd_name from sourceforge"
echo "$text_md  $fweb_latest"
echo "$text_md  $flicense"
echo "$text_md  $license_gpl"
echo "$text_md"
echo  
exit; fi
####
####
#### :rutina-final-notes:
##########   english: regen-config: regen-config template wizard files       ##########
##########   spanish: regen-config: regen-configera template wizard archivos ##########
#### :rutina-inicial-regen-config:
####
####
if [ "$first_option" = "regen-config" ]; then echo "$give_cover"
echo "$header_ok [ $first_option ] [ Generate templates wizard and cfg ] || ||"
echo "$duo_md [ info ] [ regenerating template wizard and template cfg ]"
####
####
####    english: variables to prepare to gen files
####    spanish: variables para preparar para generar archivos
####
####
####    english: basic options in configuration file cfg
####    spanish: opciones basicas en configuracion de archivo cfg
####
####
var0="$(echo $cinco $cmd_name from $cmd_binary version $cmd_version $cinco )"
var1="$(echo $cinco BEGIN NECESARY $cinco )"
eng1="$(echo $cinco  .......... BEGIN Necesary options .......... .......... $cinco )"
spa1="$(echo $cinco INICIO .......... Opciones Necesarias .......... .......... $cinco )"
var2="$(echo $cinco NETFILTER $cinco )"
eng2="$(echo $cinco the iptables firewall netfilter, choose one or two )"
spa2="$(echo $cinco el iptables firewall netfilter, elige uno o dos )"
var3="$(echo allow_legacy= )"
eng3="$(echo $cinco launch xtables, void to yes or type no )"
spa3="$(echo $cinco lanza xtables, vacio para si, o escribe no )"
var4="$(echo allow_nft=no )"
eng4="$(echo $cinco launch nftables, void to yes or type no )"
spa4="$(echo $cinco lanza nftables, vacio para si, o escribe no )"
var5="$(echo $cinco PROTOCOL IP $cinco )"
eng5="$(echo $cinco ip protocol, modify with void or no )"
spa5="$(echo $cinco procolo ip, modificar con vacio o no )"
var6="$(echo allow_ipv4= )"
eng6="$(echo $cinco void to config firewall with ipv4 or no to dont configure ipv4 )"
spa6="$(echo $cinco varcio para ejecutar el firewall con ipv4 o no para no )"
var7="$(echo allow_ipv6=no )"
eng7="$(echo $cinco void to config firewall with ipv6 or no to dont configure ipv6 )"
spa7="$(echo $cinco varcio para ejecutar el firewall con ipv6 o no para no )"
var8="$(echo $cinco CLIENT PORTS $cinco )"
eng8="$(echo $cinco Client ports, add with ',' and join ranges with  : )"
spa8="$(echo $cinco puertos Cliente, añadir con ',' y poner rangos con : )"
var9="$(echo client_tcp=http,https,ssh )"
eng9="$(echo $cinco tcp ports for client )"
spa9="$(echo $cinco puertos tcp para ser cliente )"
var10="$(echo client_udp=domain,domain-s,bootpc,bootps,ntp,https )"
eng10="$(echo $cinco udp ports for client )"
spa10="$(echo $cinco puertos udp para ser cliente )"
var11="$(echo $cinco SERVER PORTS $cinco )"
eng11="$(echo $cinco Server ports, add with ',' and join ranges with : )"
spa11="$(echo $cinco Puertos Servidor, añadir con ',' y poner rangos con  : )"
var12="$(echo server_tcp=ssh )"
eng12="$(echo $cinco tcp ports for server )"
spa12="$(echo $cinco puertos tcp para servidor )"
var13="$(echo server_udp= )"
eng13="$(echo $cinco udp ports for server )"
spa13="$(echo $cinco puertos udp para servidor )"
var14="$(echo $cinco LOG TO SERVER PORTS $cinco )"
eng14="$(echo $cinco Log to server ports, add with ',' and join ranges with : )"
spa14="$(echo $cinco logear para puertos de Servidor, añadir con ',' y poner rangos con : )"
var15="$(echo logserver_tcp= )"
eng15="$(echo $cinco the tcp ports to log server )"
spa15="$(echo $cinco puertos tcp para logear servidor )"
var16="$(echo logserver_udp= )"
eng16="$(echo $cinco the udp ports to log server )"
spa16="$(echo $cinco puertos udp para logear servidor )"
var17="$(echo $cinco LOG PREFIX TO SERVER $cinco )"
eng17="$(echo $cinco Log to server ports with prefix )"
spa17="$(echo $cinco logear para puertos de servidor con prefijo )"
var18="$(echo logserver_prefix_input=fwlog-input:: )"
eng18="$(echo $cinco type input prefix for logserver )"
spa18="$(echo $cinco especifica prefijo de entrada para logserver )"
var19="$(echo logserver_prefix_output=fwlog-output:: )"
eng19="$(echo $cinco type output prefix for logserver )"
spa19="$(echo $cinco especifica prefijo de salida para logserver )"
var20="$(echo $cinco ALLOW MAXTRIES SHIELD $cinco )"
eng20="$(echo $cinco Put one shield for ports to new connecting, with max ip to each hour )"
spa20="$(echo $cinco Pone un escudo para los peuertos de nueva conexion, con maximo ip cada hora )"
var21="$(echo allow_shield_maxtries=no )"
eng21="$(echo $cinco void to allow one shield with max tries login in ssh for ip to each hour or no )"
spa21="$(echo $cinco vacio para permitir un escudo con los intentos maximos de logins in ssh por ip a cada hora o no )"
var22="$(echo config_shield_maxtries=12 )"
eng22="$(echo $cinco modify shield with number max of tries to log in us ssh server for ip at each hour )"
spa22="$(echo $cinco modificar escudo con los maximos intentos de logeo a nuestro servidor ssh por ip a cada hora )"
var23="$(echo config_shield_port=22 )"
eng23="$(echo $cinco modify shield ssh chaging maxtries port ssh o several ports with comma separate )"
spa23="$(echo $cinco modificar escudo ssh cambiando puerto de intentos ssh o varios puertos separados por comma )"
var24="$(echo $cinco GENERAL RULES $cinco )"
eng24="$(echo $cinco General rules in table )"
spa24="$(echo $cinco Regla general en tabla )"
var25="$(echo allow_separate_rules=no )"
eng25="$(echo $cinco Void to separate the rules for each port or no )"
spa25="$(echo $cinco Vacio para separar reglas por cada puerto o no )"
var26="$(echo config_close_deny=DROP )"
eng26="$(echo $cinco choose close deny with or DROP or REJECT )"
spa26="$(echo $cinco Elige cerrar denegacion con o DROP or REJECT )"
var27="$(echo $cinco END NECESARY $cinco )"
eng27="$(echo $cinco .......... END Necesary options .......... .......... $cinco )"
spa27="$(echo $cinco FINAL .......... Opciones Necesarias .......... .......... $cinco )"
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var31="$(echo $cinco BEGIN OPTIONAL $cinco )"
eng31="$(echo $cinco .......... BEGIN Optional options .......... .......... $cinco )"
spa31="$(echo $cinco INICIO .......... Opciones opcionales .......... .......... $cinco )"
var32="$(echo $cinco choose void or no $cinco )"
eng32="$(echo $cinco Allow Other Options,  modify with void, or no )"
spa32="$(echo $cinco Permitir Otras Opciones, modificar con vacio o no )"
# var33="$(echo allow_separate_rules=no )"
# eng33="$(echo $cinco Separate the rules for each port or no )"
# spa33="$(echo $cinco separar reglas por cada puerto o no )"
# var34="$(echo allow_shield_maxtries=no )"
# eng34="$(echo $cinco void to allow one shield with max tries login in ssh for ip to each hour or no )"
# spa34="$(echo $cinco vacio para permitir un escudo con los intentos maximos de logins in ssh por ip a cada hora o no )"
var35="$(echo allow_forward_ip4=no )"
eng35="$(echo $cinco void to yes to forward ip4, or no to no )"
spa35="$(echo $cinco vacio para reenvios ip4, o no para no )"
var36="$(echo allow_forward_ip6=no )"
eng36="$(echo $cinco void to allow ip forward ip6 or no )"
spa36="$(echo $cinco vacio para permitir reenvio ip6, o no )"
var37="$(echo allow_gateway_ip4=no )"
eng37="$(echo $cinco void to allow gateway ip4 to others nets or no )"
spa37="$(echo $cinco vacio para permitir gateway ip4  a otras redes, o no )"
var38="$(echo allow_gateway_ip6=no )"
eng38="$(echo $cinco void to allow gateway ip6 to other nets or no )"
spa38="$(echo $cinco vacio para hacer gateway ip6 a otras redes o no )"
var39="$(echo allow_dmz_ip4=no )"
eng39="$(echo $cinco void to allow dmz ip4 to one host local or no )"
spa39="$(echo $cinco vacio para permitir dmz ip4  a una host local, o no )"
var40="$(echo allow_dmz_ip6=no )"
eng40="$(echo $cinco void to allow dmz ip6 to one host local or no )"
spa40="$(echo $cinco vacio para hacer dmz ip6 a una host local o no )"
var41="$(echo allow_input_all=no )"
eng41="$(echo $cinco void when the rules are to allow input to all or no )"
spa41="$(echo $cinco vacio, reglas para permitir toda entrada o no )"
var42="$(echo allow_output_all=no )"
eng42="$(echo $cinco void when the rules are to allow output to all or no )"
spa42="$(echo $cinco vacio, reglas para permitir toda salida o no )"
var43="$(echo allow_input_state=no )"
eng43="$(echo $cinco Selective Input state with void or no )"
spa43="$(echo $cinco Estado de entrada selectivo con vacio o no )"
var44="$(echo allow_output_state=no )"
eng44="$(echo $cinco Selective Output state with void or no )"
spa44="$(echo $cinco Estado de salida selectivo con vacio o no )"
var45="$(echo allow_input_bandwidth=no )"
eng45="$(echo $cinco void to limit bandwidth input in kbits/sec for all sources or no )"
spa45="$(echo $cinco vacio para limitar ancho de banda de entrada para todas las fuentes en kbits/sec o no )"
var46="$(echo allow_output_bandwidth=no )"
eng46="$(echo $cinco void to limit bandwidth output in kbits/sec for each destination or no )"
spa46="$(echo $cinco vacio limitar ancho de banda de salida en kbits/sec por cada destino o no )"
var47="$(echo allow_input_maxconnect=no )"
eng47="$(echo $cinco void to limit max number for input simultaneous connections or no )"
spa47="$(echo $cinco vacio para limitar numero de conexiones simultaneas de entrada o no )"
var48="$(echo allow_output_maxconnect=no )"
eng48="$(echo $cinco void to limit max number for output simultaneous connections or no )"
spa48="$(echo $cinco vacio para limitar numero de conexiones simultaneas de salida o no )"
var49="$(echo allow_input_ping=no )"
eng49="$(echo $cinco void to allow RECIVE PING or no )"
spa49="$(echo $cinco vacio para permitir RECIVIR PING o no )"
var50="$(echo allow_output_ping=no )"
eng50="$(echo $cinco void to allow SEND PING or no )"
spa50="$(echo $cinco vacio para permitir ENVIAR PING o no )"
var51="$(echo allow_mac_whitelist=no )"
eng51="$(echo $cinco void to allow some exceptional MAC-ADDRESS or no )"
spa51="$(echo $cinco vacio para permitir DIRECCION-MAC excepcionales o no )"
var52="$(echo allow_mac_blacklist=no )"
eng52="$(echo $cinco void to drop some excepcional MAC-ADDRESS or no )"
spa52="$(echo $cinco vacio para denegar DIRECCION-MAC excepcionales o no )"
var53="$(echo allow_net_vpn=no )"
eng53="$(echo $cinco void to allow some exceptional HOST/IP or no )"
spa53="$(echo $cinco vacio para permitir HOST/IP excepcionales o no )"
var54="$(echo allow_net_blacklist=no )"
eng54="$(echo $cinco void to drop some excepcional HOST/IP or no )"
spa54="$(echo $cinco vacio para denegar HOST/IP excepcionales o no )"
var55="$(echo allow_output_uid=no )"
eng55="$(echo $cinco void to allow excepcional USER or no )"
spa55="$(echo $cinco vacio permite salida de paquetes de un USUARIO excepcional o no )"
var56="$(echo allow_output_gid=no )"
eng56="$(echo $cinco void to allow excepcional GROUP or no )"
spa56="$(echo $cinco vacio permite salida de paquetes de un GRUPO excepcional o no )"
var57="$(echo allow_others_protocols=no )"
eng57="$(echo $cinco void to allow other POTOCOL-IP excepcional or no )"
spa57="$(echo $cinco vacio para permitir otro PROTOCOLO-IP excepcional o no )"
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var58="$(echo $cinco Begin Variables $cinco.......... .......... $cinco.......... )"
eng58="$(echo $cinco Fill Variables )"
spa58="$(echo $cinco Rellena Variables )"
var59="$(echo $cinco Options )"
eng59="$(echo $cinco Other Options, add with , and join ranges with : )"
spa59="$(echo $cinco Otras Opciones, añadir con , y poner rangos con : )"
# var60="$(echo config_shield_maxtries=12 )"
# eng60="$(echo $cinco modify shield with number max of tries to log in us ssh server for ip at each hour )"
# spa60="$(echo $cinco modificar escudo con los maximos intentos de logeo a nuestro servidor ssh por ip a cada hora )"
# var61="$(echo config_shield_port=22 )"
# eng61="$(echo $cinco modify shield ssh chaging maxtries port ssh o several ports with comma separate )"
# spa61="$(echo $cinco modificar escudo ssh cambiando puerto de intentos ssh o varios puertos separados por comma )"
var62="$(echo config_dmz_ip4=192.168.1.7 )"
eng62="$(echo $cinco ip server ip lan to other external nets, nat prerouting )"
spa62="$(echo $cinco servidor ip lan para otras redes esternas, nat prerouting )"
var63="$(echo config_dmz_ip6=d4:12:43:01:36:2e )"
eng63="$(echo $cinco ip server ip lan to other external nets, nat prerouting )"
spa63="$(echo $cinco servidor ip lan para otras redes esternas, nat prerouting )"
var64="$(echo config_input_state=new,related,established )"
eng64="$(echo $cinco void for all or new,related,established,untracked,invalid )"
spa64="$(echo $cinco modificar con vacio o new,related,established,untracked,invalid )"
var65="$(echo config_output_state=new,related,established )"
eng65="$(echo $cinco void for all or new,related,established,untracked,invalid )"
spa65="$(echo $cinco modificar con vacio o new,related,established,untracked,invalid )"
var66="$(echo config_input_bandwidth=12512 )"
eng66="$(echo $cinco max input bandwidth in kbits/sec for all )"
spa66="$(echo $cinco maximo entrada de ancho de banda en kbit/sec para todos )"
var67="$(echo config_output_bandwidth=512 )"
eng67="$(echo $cinco max output bandwidth in kbits/sec for each ip )"
spa67="$(echo $cinco maximo salida de ancho de banda en kbits/sec para cada ip )"
var68="$(echo config_input_maxconnect=72 )"
eng68="$(echo $cinco max number for input simultaneous connections )"
spa68="$(echo $cinco maximo numero de conexiones simultaneas de entrada )"
var69="$(echo config_output_maxconnect=72 )"
eng69="$(echo $cinco max number for output simultaneous connections )"
spa69="$(echo $cinco maximo numero de conexiones simultaneas de salida )"
var70="$(echo config_mac_whitelist=d4:12:43:01:36:2e )"
eng70="$(echo $cinco allow this excepcitonal MAC-ADRESS )"
spa70="$(echo $cinco permitir estos MAC-ADDRESS excepcionales )"
var71="$(echo config_mac_blacklist=d4:12:43:01:36:2e )"
eng71="$(echo $cinco drop this excepcional MAC-ADDRESS )"
spa71="$(echo $cinco deniega estos MAC-ADDRESS excepcionales )"
var72="$(echo config_net_vpn=wesnoth.org,sf.net )"
eng72="$(echo $cinco allow this excepcitonal HOST/IP )"
spa72="$(echo $cinco permitir estos HOST/IP excepcionales )"
var73="$(echo config_net_blacklist=facebook.com,www.facebook.com )"
eng73="$(echo $cinco drop this excepcional HOST/IP )"
spa73="$(echo $cinco deniega estos HOST/IP excepcionales )"
var74="$(echo config_output_uid=root )"
eng74="$(echo $cinco allow out packages excepcional from this USER excepcional )"
spa74="$(echo $cinco permite salida de paquetes de este USUARIO excepcional )"
var75="$(echo config_output_gid=root )"
eng75="$(echo $cinco allow out packages excepcional from this GROUP excepcional )"
spa75="$(echo $cinco permite salida de paquetes de este GRUPO excepcional )"
var76="$(echo config_others_protocols=icmp,igmp )"
eng76="$(echo $cinco allow others protocols from /etc/protocolos )"
spa76="$(echo $cinco permitir otros protocolos desde /etc/protocols )"
var77="$(echo $cinco NET CLIENT AND NET SERVER $cinco )"
eng77="$(echo $cinco Net to connect likes client or server )"
spa77="$(echo $cinco Red para conectar como cliente o server )"
var78="$(echo net_ipv4_client=0/0 )"
eng78="$(echo $cinco the net to client ipv4, all is 0/0 )"
spa78="$(echo $cinco la red cual cliente ipv4, todos es 0/0 )"
var79="$(echo net_ipv4_server=0/0 )"
eng79="$(echo $cinco the net to server ipv4, all is 0/0 )"
spa79="$(echo $cinco la red cual servidor ipv4, todos es 0/0 )"
var80="$(echo net_ipv6_client=::/0 )"
eng80="$(echo $cinco the net to client ipv6, all is ::/0 )"
spa80="$(echo $cinco la red cual cliente ipv6, todos es ::/0 )"
var81="$(echo net_ipv6_server=::/0 )"
eng81="$(echo $cinco the net to server ipv6, all is ::/0 )"
spa81="$(echo $cinco la red cual servidor ipv6, todos es ::/0 )"
var82="$(echo $cinco $cinco )"
eng82="$(echo $cinco .......... END Optional options .......... .......... $cinco )"
spa82="$(echo $cinco FINAL .......... Opciones opcionales .......... .......... $cinco )"
####
####
##########   english: continue with autogen defaults configs cfg
##########   spanish: continua con auto genera configs cfg por defecto
####
####
#### english: where save default files #### spanish: donde se guardan los archivos
####
####
me="$defaultminicfg_eng"
ms="$defaultminicfg_spa"
fe="$defaultfullcfg_eng"
fs="$defaultfullcfg_spa"
####
####
#### wizard mini-english
####
####
echo -E "$var0"  &> $me
echo -E "$var1"  "$tabz" "$eng1"  &>> "$me"
echo -E "$var2"  "$tabz" "$eng2"  &>> "$me"
echo -E "$var3"  "$tabz" "$eng3"  &>> "$me"
echo -E "$var4"  "$tabz" "$eng4"  &>> "$me"
echo -E "$var5"  "$tabz" "$eng5"  &>> "$me"
echo -E "$var6"  "$tabz" "$eng6"  &>> "$me"
echo -E "$var7"  "$tabz" "$eng7"  &>> "$me"
echo -E "$var8"  "$tabz" "$eng8"  &>> "$me"
echo -E "$var9"  "$tabz" "$eng9"  &>> "$me"
echo -E "$var10" "$tabz" "$eng10" &>> "$me"
echo -E "$var11" "$tabz" "$eng11" &>> "$me"
echo -E "$var12" "$tabz" "$eng12" &>> "$me"
echo -E "$var13" "$tabz" "$eng13" &>> "$me"
echo -E "$var14" "$tabz" "$eng14" &>> "$me"
echo -E "$var15" "$tabz" "$eng15" &>> "$me"
echo -E "$var16" "$tabz" "$eng16" &>> "$me"
echo -E "$var17" "$tabz" "$eng17" &>> "$me"
echo -E "$var18" "$tabz" "$eng18" &>> "$me"
echo -E "$var19" "$tabz" "$eng19" &>> "$me"
echo -E "$var20" "$tabz" "$eng20" &>> "$me"
echo -E "$var21" "$tabz" "$eng21" &>> "$me"
echo -E "$var22" "$tabz" "$eng22" &>> "$me"
echo -E "$var23" "$tabz" "$eng23" &>> "$me"
echo -E "$var24" "$tabz" "$eng24" &>> "$me"
echo -E "$var25" "$tabz" "$eng25" &>> "$me"
echo -E "$var26" "$tabz" "$eng26" &>> "$me"
echo -E "$var27" "$tabz" "$eng27" &>> "$me"
####
####
#### wizard mini-spanish
####
####
echo "$var0"  &> "$ms"
echo "$var1"  "$tabz" "$spa1"  &>> "$ms"
echo "$var2"  "$tabz" "$spa2"  &>> "$ms"
echo "$var3"  "$tabz" "$spa3"  &>> "$ms"
echo "$var4"  "$tabz" "$spa4"  &>> "$ms"
echo "$var5"  "$tabz" "$spa5"  &>> "$ms"
echo "$var6"  "$tabz" "$spa6"  &>> "$ms"
echo "$var7"  "$tabz" "$spa7"  &>> "$ms"
echo "$var8"  "$tabz" "$spa8"  &>> "$ms"
echo "$var9"  "$tabz" "$spa9"  &>> "$ms"
echo "$var10" "$tabz" "$spa10" &>> "$ms"
echo "$var11" "$tabz" "$spa11" &>> "$ms"
echo "$var12" "$tabz" "$spa12" &>> "$ms"
echo "$var13" "$tabz" "$spa13" &>> "$ms"
echo "$var14" "$tabz" "$spa14" &>> "$ms"
echo "$var15" "$tabz" "$spa15" &>> "$ms"
echo "$var16" "$tabz" "$spa16" &>> "$ms"
echo "$var17" "$tabz" "$spa17" &>> "$ms"
echo "$var18" "$tabz" "$spa18" &>> "$ms"
echo "$var19" "$tabz" "$spa19" &>> "$ms"
echo "$var20" "$tabz" "$spa20" &>> "$ms"
echo "$var21" "$tabz" "$spa21" &>> "$ms"
echo "$var22" "$tabz" "$spa22" &>> "$ms"
echo "$var23" "$tabz" "$spa23" &>> "$ms"
echo "$var24" "$tabz" "$spa24" &>> "$ms"
echo "$var25" "$tabz" "$spa25" &>> "$ms"
echo "$var26" "$tabz" "$spa26" &>> "$ms"
echo "$var27" "$tabz" "$spa27" &>> "$ms"
####
####
#### wizard full-english
####
####
echo -E "$var0"  &> "$fe"
echo -E "$var1"  "$tabz" "$eng1"  &>> "$fe"
echo -E "$var2"  "$tabz" "$eng2"  &>> "$fe"
echo -E "$var3"  "$tabz" "$eng3"  &>> "$fe"
echo -E "$var4"  "$tabz" "$eng4"  &>> "$fe"
echo -E "$var5"  "$tabz" "$eng5"  &>> "$fe"
echo -E "$var6"  "$tabz" "$eng6"  &>> "$fe"
echo -E "$var7"  "$tabz" "$eng7"  &>> "$fe"
echo -E "$var8"  "$tabz" "$eng8"  &>> "$fe"
echo -E "$var9"  "$tabz" "$eng9"  &>> "$fe"
echo -E "$var10" "$tabz" "$eng10" &>> "$fe"
echo -E "$var11" "$tabz" "$eng11" &>> "$fe"
echo -E "$var12" "$tabz" "$eng12" &>> "$fe"
echo -E "$var13" "$tabz" "$eng13" &>> "$fe"
echo -E "$var14" "$tabz" "$eng14" &>> "$fe"
echo -E "$var15" "$tabz" "$eng15" &>> "$fe"
echo -E "$var16" "$tabz" "$eng16" &>> "$fe"
echo -E "$var17" "$tabz" "$eng17" &>> "$fe"
echo -E "$var18" "$tabz" "$eng18" &>> "$fe"
echo -E "$var19" "$tabz" "$eng19" &>> "$fe"
echo -E "$var20" "$tabz" "$eng20" &>> "$fe"
echo -E "$var21" "$tabz" "$eng21" &>> "$fe"
echo -E "$var22" "$tabz" "$eng22" &>> "$fe"
echo -E "$var23" "$tabz" "$eng23" &>> "$fe"
echo -E "$var24" "$tabz" "$eng24" &>> "$fe"
echo -E "$var25" "$tabz" "$eng25" &>> "$fe"
echo -E "$var26" "$tabz" "$eng26" &>> "$fe"
echo -E "$var27" "$tabz" "$eng27" &>> "$fe"
##### english: advance variables
##### spanish: avanzadas variables
echo -E "$var30" "$tabz" "$eng30" &>> "$fe"
echo -E "$var31" "$tabz" "$eng31" &>> "$fe"
echo -E "$var32" "$tabz" "$eng32" &>> "$fe"
echo -E "$var33" "$tabz" "$eng33" &>> "$fe"
echo -E "$var34" "$tabz" "$eng34" &>> "$fe"
echo -E "$var35" "$tabz" "$eng35" &>> "$fe"
echo -E "$var36" "$tabz" "$eng36" &>> "$fe"
echo -E "$var37" "$tabz" "$eng37" &>> "$fe"
echo -E "$var38" "$tabz" "$eng38" &>> "$fe"
echo -E "$var39" "$tabz" "$eng39" &>> "$fe"
echo -E "$var40" "$tabz" "$eng40" &>> "$fe"
echo -E "$var41" "$tabz" "$eng41" &>> "$fe"
echo -E "$var42" "$tabz" "$eng42" &>> "$fe"
echo -E "$var43" "$tabz" "$eng43" &>> "$fe"
echo -E "$var44" "$tabz" "$eng44" &>> "$fe"
echo -E "$var45" "$tabz" "$eng45" &>> "$fe"
echo -E "$var46" "$tabz" "$eng46" &>> "$fe"
echo -E "$var47" "$tabz" "$eng47" &>> "$fe"
echo -E "$var48" "$tabz" "$eng48" &>> "$fe"
echo -E "$var49" "$tabz" "$eng49" &>> "$fe"
echo -E "$var50" "$tabz" "$eng50" &>> "$fe"
echo -E "$var51" "$tabz" "$eng51" &>> "$fe"
echo -E "$var52" "$tabz" "$eng52" &>> "$fe"
echo -E "$var53" "$tabz" "$eng53" &>> "$fe"
echo -E "$var54" "$tabz" "$eng54" &>> "$fe"
echo -E "$var55" "$tabz" "$eng55" &>> "$fe"
echo -E "$var56" "$tabz" "$eng56" &>> "$fe"
echo -E "$var57" "$tabz" "$eng57" &>> "$fe"
echo -E "$var58" "$tabz" "$eng58" &>> "$fe"
echo -E "$var59" "$tabz" "$eng59" &>> "$fe"
echo -E "$var60" "$tabz" "$eng60" &>> "$fe"
echo -E "$var61" "$tabz" "$eng61" &>> "$fe"
echo -E "$var62" "$tabz" "$eng62" &>> "$fe"
echo -E "$var63" "$tabz" "$eng63" &>> "$fe"
echo -E "$var64" "$tabz" "$eng64" &>> "$fe"
echo -E "$var65" "$tabz" "$eng65" &>> "$fe"
echo -E "$var66" "$tabz" "$eng66" &>> "$fe"
echo -E "$var67" "$tabz" "$eng67" &>> "$fe"
echo -E "$var68" "$tabz" "$eng68" &>> "$fe"
echo -E "$var69" "$tabz" "$eng69" &>> "$fe"
echo -E "$var70" "$tabz" "$eng70" &>> "$fe"
echo -E "$var71" "$tabz" "$eng71" &>> "$fe"
echo -E "$var72" "$tabz" "$eng72" &>> "$fe"
echo -E "$var73" "$tabz" "$eng73" &>> "$fe"
echo -E "$var74" "$tabz" "$eng74" &>> "$fe"
echo -E "$var75" "$tabz" "$eng75" &>> "$fe"
echo -E "$var76" "$tabz" "$eng76" &>> "$fe"
echo -E "$var77" "$tabz" "$eng77" &>> "$fe"
echo -E "$var78" "$tabz" "$eng78" &>> "$fe"
echo -E "$var79" "$tabz" "$eng79" &>> "$fe"
echo -E "$var80" "$tabz" "$eng80" &>> "$fe"
echo -E "$var81" "$tabz" "$eng81" &>> "$fe"
echo -E "$var82" "$tabz" "$eng82" &>> "$fe"
####
####
#### wizard full-spanish
####
####
echo -E "$var0"  &> "$fs"
echo -E "$var1"  "$tabz" "$spa1" &>> "$fs"
echo -E "$var2"  "$tabz" "$spa2" &>> "$fs"
echo -E "$var3"  "$tabz" "$spa3" &>> "$fs"
echo -E "$var4"  "$tabz" "$spa4" &>> "$fs"
echo -E "$var5"  "$tabz" "$spa5" &>> "$fs"
echo -E "$var6"  "$tabz" "$spa6" &>> "$fs"
echo -E "$var7"  "$tabz" "$spa7" &>> "$fs"
echo -E "$var8"  "$tabz" "$spa8" &>> "$fs"
echo -E "$var9"  "$tabz" "$spa9" &>> "$fs"
echo -E "$var10" "$tabz" "$spa10" &>> "$fs"
echo -E "$var11" "$tabz" "$spa11" &>> "$fs"
echo -E "$var12" "$tabz" "$spa12" &>> "$fs"
echo -E "$var13" "$tabz" "$spa13" &>> "$fs"
echo -E "$var14" "$tabz" "$spa14" &>> "$fs"
echo -E "$var15" "$tabz" "$spa15" &>> "$fs"
echo -E "$var16" "$tabz" "$spa16" &>> "$fs"
echo -E "$var17" "$tabz" "$spa17" &>> "$fs"
echo -E "$var18" "$tabz" "$spa18" &>> "$fs"
echo -E "$var19" "$tabz" "$spa19" &>> "$fs"
echo -E "$var20" "$tabz" "$spa20" &>> "$fs"
echo -E "$var21" "$tabz" "$spa21" &>> "$fs"
echo -E "$var22" "$tabz" "$spa22" &>> "$fs"
echo -E "$var23" "$tabz" "$spa23" &>> "$fs"
echo -E "$var24" "$tabz" "$spa24" &>> "$fs"
echo -E "$var25" "$tabz" "$spa25" &>> "$fs"
echo -E "$var26" "$tabz" "$spa26" &>> "$fs"
echo -E "$var27" "$tabz" "$spa27" &>> "$fs"
##### english: advance variables
##### spanish: avanzadas variables
echo -E "$var30" "$tabz" "$spa30" &>> "$fs"
echo -E "$var31" "$tabz" "$spa31" &>> "$fs"
echo -E "$var32" "$tabz" "$spa32" &>> "$fs"
echo -E "$var33" "$tabz" "$spa33" &>> "$fs"
echo -E "$var34" "$tabz" "$spa34" &>> "$fs"
echo -E "$var35" "$tabz" "$spa35" &>> "$fs"
echo -E "$var36" "$tabz" "$spa36" &>> "$fs"
echo -E "$var37" "$tabz" "$spa37" &>> "$fs"
echo -E "$var38" "$tabz" "$spa38" &>> "$fs"
echo -E "$var39" "$tabz" "$spa39" &>> "$fs"
echo -E "$var40" "$tabz" "$spa40" &>> "$fs"
echo -E "$var41" "$tabz" "$spa41" &>> "$fs"
echo -E "$var42" "$tabz" "$spa42" &>> "$fs"
echo -E "$var43" "$tabz" "$spa43" &>> "$fs"
echo -E "$var44" "$tabz" "$spa44" &>> "$fs"
echo -E "$var45" "$tabz" "$spa45" &>> "$fs"
echo -E "$var46" "$tabz" "$spa46" &>> "$fs"
echo -E "$var47" "$tabz" "$spa47" &>> "$fs"
echo -E "$var48" "$tabz" "$spa48" &>> "$fs"
echo -E "$var49" "$tabz" "$spa49" &>> "$fs"
echo -E "$var50" "$tabz" "$spa50" &>> "$fs"
echo -E "$var51" "$tabz" "$spa51" &>> "$fs"
echo -E "$var52" "$tabz" "$spa52" &>> "$fs"
echo -E "$var53" "$tabz" "$spa53" &>> "$fs"
echo -E "$var54" "$tabz" "$spa54" &>> "$fs"
echo -E "$var55" "$tabz" "$spa55" &>> "$fs"
echo -E "$var56" "$tabz" "$spa56" &>> "$fs"
echo -E "$var57" "$tabz" "$spa57" &>> "$fs"
echo -E "$var58" "$tabz" "$spa58" &>> "$fs"
echo -E "$var59" "$tabz" "$spa59" &>> "$fs"
echo -E "$var60" "$tabz" "$spa60" &>> "$fs"
echo -E "$var61" "$tabz" "$spa61" &>> "$fs"
echo -E "$var62" "$tabz" "$spa62" &>> "$fs"
echo -E "$var63" "$tabz" "$spa63" &>> "$fs"
echo -E "$var64" "$tabz" "$spa64" &>> "$fs"
echo -E "$var65" "$tabz" "$spa65" &>> "$fs"
echo -E "$var66" "$tabz" "$spa66" &>> "$fs"
echo -E "$var67" "$tabz" "$spa67" &>> "$fs"
echo -E "$var68" "$tabz" "$spa68" &>> "$fs"
echo -E "$var69" "$tabz" "$spa69" &>> "$fs"
echo -E "$var70" "$tabz" "$spa70" &>> "$fs"
echo -E "$var71" "$tabz" "$spa71" &>> "$fs"
echo -E "$var72" "$tabz" "$spa72" &>> "$fs"
echo -E "$var73" "$tabz" "$spa73" &>> "$fs"
echo -E "$var74" "$tabz" "$spa74" &>> "$fs"
echo -E "$var75" "$tabz" "$spa75" &>> "$fs"
echo -E "$var76" "$tabz" "$spa76" &>> "$fs"
echo -E "$var77" "$tabz" "$spa77" &>> "$fs"
echo -E "$var78" "$tabz" "$spa78" &>> "$fs"
echo -E "$var79" "$tabz" "$spa79" &>> "$fs"
echo -E "$var80" "$tabz" "$spa80" &>> "$fs"
echo -E "$var81" "$tabz" "$spa81" &>> "$fs"
echo -E "$var82" "$tabz" "$spa82" &>> "$fs"
####
####
echo "$duo_md [  ok  ] [ Wizard and templates cfg regenerated ]"
exit ; fi
####
####
#### :rutina-final-regen-config:
##########  english:  sane variables: for working sane         ########## 
##########  spanish:  sana variables: para funcionamiento sano ##########
#### :rutina-inicial-sane:
####
####
case "$NULL" in "$allow_autosave")         ;;  *)  allow_autosave="no" ;;  esac
case "$NULL" in "$allow_dmz_ip4")          ;;  *)  allow_dmz_ip4="no" ;; esac
case "$NULL" in "$allow_dmz_ip6")          ;;  *)  allow_dmz_ip6="no" ;; esac
case "$NULL" in "$allow_forward_ip4")      ;;  *)  allow_forward_ip4="no" ;; esac
case "$NULL" in "$allow_forward_ip6")      ;;  *)  allow_forward_ip6="no" ;; esac
case "$NULL" in "$allow_gateway_ip4")      ;;  *)  allow_gateway_ip4="no" ;; esac
case "$NULL" in "$allow_gateway_ip6")      ;;  *)  allow_gateway_ip6="no" ;; esac
case "$NULL" in "$allow_input_all")        ;;  *)  allow_input_all="no";; esac
case "$NULL" in "$allow_input_bandwidth")  ;;  *)  allow_input_bandwidth="no";; esac
case "$NULL" in "$allow_input_maxconnect") ;;  *)  allow_input_maxconnect="no";; esac
case "$NULL" in "$allow_input_ping")       ;;  *)  allow_input_ping="no";; esac
case "$NULL" in "$allow_input_state")      ;;  *)  allow_input_state="no";; esac
case "$NULL" in "$allow_ipv4")             ;;  *)  allow_ipv4="no" ;; esac
case "$NULL" in "$allow_ipv6")             ;;  *)  allow_ipv6="no" ;; esac
case "$NULL" in "$allow_legacy")           ;;  *)  allow_legacy="no" ;; esac
case "$NULL" in "$allow_mac_blacklist")    ;;  *)  allow_mac_blacklist="no" ;; esac
case "$NULL" in "$allow_mac_whitelist")    ;;  *)  allow_mac_whitelist="no" ;; esac
case "$NULL" in "$allow_shield_maxtries")  ;;  *)  allow_shield_maxtries="no" ;; esac
case "$NULL" in "$allow_net_blacklist")    ;;  *)  allow_net_blacklist="no";; esac
case "$NULL" in "$allow_net_vpn")          ;;  *)  allow_net_vpn="no";; esac
case "$NULL" in "$allow_nft")              ;;  *)  allow_nft="no" ;; esac
case "$NULL" in "$allow_only_output")      ;;  *)  allow_only_output="no" ;; esac
case "$NULL" in "$allow_other_protocols")  ;;  *)  allow_other_protocols="no";; esac
case "$NULL" in "$allow_others_protocols") ;;  *)  allow_others_protocols="no" ;; esac
case "$NULL" in "$allow_output_all")       ;;  *)  allow_output_all="no";; esac
case "$NULL" in "$allow_output_bandwidth") ;;  *)  allow_output_bandwidth="no";; esac
case "$NULL" in "$allow_output_gid")       ;;  *)  allow_output_gid="no";; esac
case "$NULL" in "$allow_output_maxconnect");;  *)  allow_output_maxconnect="no";; esac
case "$NULL" in "$allow_output_ping")      ;;  *)  allow_output_ping="no";; esac
case "$NULL" in "$allow_output_state")     ;;  *)  allow_output_state="no";; esac
case "$NULL" in "$allow_output_uid")       ;;  *)  allow_output_uid="no";; esac
case "$NULL" in "$choosed_iptables")       ;;  *)  choosed_iptables="no";; esac
case "$NULL" in "$launch_firewall")        ;;  *)  launch_firewall="no" ;; esac
####  case "$NULL" in "$list_rules_conceptual")  ;;  *)  list_rules_conceptual="-n";; esac
case "$NULL" in "$name_firewall")          ;;  *)  name_firewall="no" ;; esac
case "$NULL" in "$type_firewall")          ;;  *)  type_firewall="no" ;; esac
####
####
#### :rutina-final-sane:
##########    english: autosave: autosave of firewall to restore standard rules                 ##########
##########    english: autosave: autoguardado de firewall para recuperador de reglas estandar   ##########
#### :rutina-inicial-autosave:
####
####
#### english: iptables saved
#### spanish: iptables guardado
####
####
#### english: autosave with name autosave
#### spanish: autoguardado con nombre autosave
####
####
if [ "$first_option" = "autosave" ] && [ "$allow_autosave" = "$NULL" ]; then 
echo "$duo_md [ autosave ] [ firewall saved ] [ autosave-fwiptables ]" ;
$zero_option save autosave-fwiptables &> /dev/null ; exit; fi
####
####
#### :rutina-final-autosave:
##########    english: ready system rules con its option               ##########
##########    spanish: preprara reglas del sistema con sus opciones    ##########
####
####
####   #### english: The first        firewall of system  
####   #### spanish: El primero       cortafuego del sistema
####
####
####
####
####   #### english: firewall of system custom:
####   #### spanish: cortafuego del sistema custom:
####
####
##########   english: custom firewall      ##########
##########   spanish: custom cortafuegos   ##########
#### :rutina-inicial-custom-rules:
####
####
if [ "$first_option" = "custom" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall custom ]" ;
launch_firewall="yes" ;
type_firewall="custom" ;
name_firewall="$second_option" ;
####
####
#### english: configure custom variables if there are
#### spanish: configura variables modificadas si estan ahi
####
####
if [ -f "$directory_config/$second_option" ]; then . "$directory_config/$second_option" ; fi
####
####
if [ ! -f "$directory_config/$second_option" ]; then  $zero_option cfg ; 
echo "$duo_md [ info ] [ $zero_option custom file-cfg ]"
echo "$duo_md [ info ] [ $zero_option firewall-custom ]"
exit; fi
####
####
fi
####
####
#### :rutina-final-custom-rules:
##########   english: system firewall           ##########
##########   spanish: cortafuegos del sistema   ##########
#### :rutina-inicial-system-rules:
####
####
####   #### english: firewall of system off-line:
####   #### spanish: cortafuego del sistema off-line:
####
####
if [ "$first_option" = "off-line" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall off-line ]" ;
launch_firewall="yes" ;
type_firewall="off-line";
name_firewall="$first_option";
fi
####
####
####   #### english: firewall of system all-permisive:
####   #### spanish: cortafuego del sistema all-permisive:
####
####
if [ "$first_option" = "all-permisive" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall all-permisive ]" ;
launch_firewall="yes" ;
type_firewall="all-permisive" ;
name_firewall="$first_option";
fi
####
####
####   #### english: firewall of system shield-ssh:
####   #### spanish: cortafuego del sistema shield-ssh:
####
####
if [ "$first_option" = "shield-ssh" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall shield-ssh ]" ;
launch_firewall="yes" ;
type_firewall="shield-ssh"    ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_maxtries="5" ;
#### english: ports client and ports server
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh" ;
fi
####
####
####   #### english: firewall of system client-web:
####   #### spanish: cortafuego del sistema client-web:
####
####
if [ "$first_option" = "client-web" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-web ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect normal web
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-vnc:
####   #### spanish: cortafuego del sistema client-vnc:
####
####
if [ "$first_option" = "client-vnc" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-vnc ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect normal web and vnc
server_port_udp="" ;
client_port_tcp="http,https,ssh,5900:5910" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-torrent:
####   #### spanish: cortafuego del sistema client-torrent:
####
####
if [ "$first_option" = "client-torrent" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-torrent ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect web normal and bittorrent too
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,9091,51413" ;
server_port_tcp="9091,51413" ;
fi
####
####
####   #### english: firewall of system client-vpn:
####   #### spanish: cortafuego del sistema client-vpn:
####
####
if [ "$first_option" = "client-vpn" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-vpn ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect web normal and web vpn
server_port_udp="" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,500,1194,1701,4500" ; 
client_port_tcp="http,https,ssh,443,1701,1723" ; 
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-tor:
####   #### spanish: cortafuego del sistema client-tor:
####
####
if [ "$first_option" = "client-tor" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-tor ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect web normal and web tor
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,9000:9170" ;
server_port_tcp="9000:9170" ;
fi
####
####
####   #### english: firewall of system client-news:
####   #### spanish: cortafuego del sistema client-news:
####
####
if [ "$first_option" = "client-news" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-news ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,119,433,563" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-mail:
####   #### spanish: cortafuego del sistema client-mail:
####
####
if [ "$first_option" = "client-mail" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-mail ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
#### client mail:
#### SMTP (sending mail)	Unencrypted	25* (or 26)
#### POP3 (receiving mail)	Encrypted - TLS	995
#### POP3 (receiving mail)	Encrypted - SSL	995
#### POP3 (receiving mail)	Unencrypted	110
#### negotiation submission     tls             465 and 587
#### 
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,25,119,433,563,25:26,995,110,465,587" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-ftp:
####   #### spanish: cortafuego del sistema client-ftp:
####
####
if [ "$first_option" = "client-ftp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-ftp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### client ftp:
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-squid:
####   #### spanish: cortafuego del sistema client-squid:
####
####
if [ "$first_option" = "client-squid" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-squid ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,8080,3128" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system lan-vpn:
####   #### spanish: cortafuego del sistema lan-vpn:
####
####
if [ "$first_option" = "lan-vpn" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall lan-vpn ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### vpn ports to connects ports vpn
#### with necesary ports to connect gatway and date, domain for your ip
server_port_udp="" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,500,1194,1701,4500" ; 
client_port_tcp="1701,1723" ; 
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system lan-tor:
####   #### spanish: cortafuego del sistema lan-tor:
####
####
if [ "$first_option" = "lan-tor" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall lan-tor ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### lan tor, 9000:9170 for connect to tor
#### with necesary ports to connect gatway and date, domain for your ip
server_port_udp="" ;
client_port_udp="bootpc,domain,domain-s,ntp" ;
client_port_tcp="9000:9170" ;
server_port_tcp="9000:9170" ;
fi
####
####
####   #### english: firewall of system games-shooter:
####   #### spanish: cortafuego del sistema games-shooter:
####
####
if [ "$first_option" = "games-shooter" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall games-shooter ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### games shooter 3D all udp without the root ports 1:1024 and ftp for download maps
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system games-udp:
####   #### spanish: cortafuego del sistema games-udp:
####
####
if [ "$first_option" = "games-udp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall games-udp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### games shooter 3D all udp without the root ports 1:1024 and ftp for download maps
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system game-wesnoth:
####   #### spanish: cortafuego del sistema game-wesnoth:
####
####
if [ "$first_option" = "game-wesnoth" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-wesnoth ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### game wesnoth port 14999 and 15001 usually
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ; 
server_port_udp="" ;
client_port_tcp="http,https,ssh,14950:15050" ;
server_port_tcp="14950:15050" ;
fi
####
####
####   #### english: firewall of system game-minetest:
####   #### spanish: cortafuego del sistema game-minetest:
####
####
if [ "$first_option" = "game-minetest" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-minetest ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### game minetest and minecraft porst 25k and 35k /udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,25000:35000" ; 
server_port_udp="" ;
client_port_tcp="http,https,ssh,25000:35000" ;
server_port_tcp="25000:35000" ;
fi
####
####
####   #### english: firewall of system game-freeciv:
####   #### spanish: cortafuego del sistema game-freeciv:
####
####
if [ "$first_option" = "game-freeciv" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-freeciv ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
alllow_shield_ssh="no" ;
config_shield_port="" ;
#### for default 5556 port tcp perhaps 5555 too
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ; 
server_port_udp="" ;
client_port_tcp="http,https,ssh,5555:5556" ;
server_port_tcp="5555:5556" ;
fi
####
####
####   #### english: firewall of system game-widelands:
####   #### spanish: cortafuego del sistema game-widelands:
####
####
if [ "$first_option" = "game-widelands" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-widelands ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### for default 7396 port tcp and 7396 udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,7396" ; 
server_port_udp="7396" ;
client_port_tcp="http,https,ssh,7396" ;
server_port_tcp="7396" ;
fi
####
####
####   #### english: firewall of system server-web:
####   #### spanish: cortafuego del sistema server-web:
####
####
if [ "$first_option" = "server-web" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-web ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="https" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="http,https,ssh" ;
fi
####
####
####   #### english: firewall of system server-vnc:
####   #### spanish: cortafuego del sistema server-vnc:
####
####
if [ "$first_option" = "server-vnc" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-vnc ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_maxtries="20" ;
config_shield_port="22,5900:5910"
#### you can connect normal web and vnc
server_port_udp="" ;
client_port_tcp="http,https,ssh,5900:5910" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_tcp="ssh,5900:5910" ;
fi
####
####
####   #### english: firewall of system server-ftp:
####   #### spanish: cortafuego del sistema server-ftp:
####
####
if [ "$first_option" = "server-ftp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-ftp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
fi
####
####
####   #### english: firewall of system server-squid:
####   #### spanish: cortafuego del sistema server-squid:
####
####
if [ "$first_option" = "server-squid" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-squid ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,8080,3128" ;
server_port_tcp="http,https,ssh,8080,3128" ;
fi
####
####
####   #### english: firewall of system server-news:
####   #### spanish: cortafuego del sistema server-news:
####
####
if [ "$first_option" = "server-news" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-news ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,119,433,563" ;
server_port_tcp="http,https,ssh,119,433,563" ;
fi
####
####
####   #### english: firewall of system server-mail:
####   #### spanish: cortafuego del sistema server-mail:
####
####
if [ "$first_option" = "server-mail" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-mail ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
#### client mail:
#### SMTP (sending mail)	Unencrypted	25* (or 26)
#### POP3 (receiving mail)	Encrypted - TLS	995
#### POP3 (receiving mail)	Encrypted - SSL	995
#### POP3 (receiving mail)	Unencrypted	110
#### negotiation submission     tls             465 and 587
#### 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="https" ;
client_port_tcp="http,https,ssh,25,119,433,563,25:26,995,110,465,587" ;
server_port_tcp="http,https,ssh,25,119,433,563,25:26,995,110,465,587" ;
fi
####
####
####   #### english: firewall of system server-samba:
####   #### spanish: cortafuego del sistema server-samba:
####
####
if [ "$first_option" = "server-samba" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-samba ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server samba and active directory
client_port_tcp="http,https,ssh,ldap,636,microsoft-ds" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,ldap,636,137:139" ;
server_port_tcp="ssh,ldap,636,microsoft-ds" ; 
server_port_udp="ntp,domain,domain-s,ldap,636,137:139" ;
fi
####
####
####   #### english: firewall of system server-print:
####   #### spanish: cortafuego del sistema server-print:
####
####
if [ "$first_option" = "server-print" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-print ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server ipp and printer
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh,printer,ipp" ;
fi
####
####
####   #### english: firewall of system server-ssh:
####   #### spanish: cortafuego del sistema server-ssh:
####
####
if [ "$first_option" = "server-ssh" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-ssh ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server ssh 22/tcp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh" ;
fi
####
####
####   #### english: firewall of system server-lamp:
####   #### spanish: cortafuego del sistema server-lamp:
####
####
if [ "$first_option" = "server-lamp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-lamp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
####  english: udp: 20 is ftp-data, 21 is ftp, 989 is ftps-data y 990 is ftps
####  english: tcp: 10000 is webmin, 3306 is mysql, 5432 is postgresql
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="https" ;
client_port_tcp="http,https,ssh,20,21,989,990" ;
server_port_tcp="http,https,ssh,10000,3306,5432" ;
fi
####
####
####   #### english: firewall of system server-asterisk:
####   #### spanish: cortafuego del sistema server-asterisk:
####
####
if [ "$first_option" = "server-asterisk" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-asterisk ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
####    UDP:5060 SIP (sip.conf), newer Versions support TCP:5060
####    UDP:10000-20000 RTP (rtp.conf) for the media stream, a higher Portrange
####    UDP:5036 IAX2
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,5060,10000:20000,5036" ;
server_port_udp="5060,10000:20000,5036" ;
client_port_tcp="http,https,ssh,5060" ;
server_port_tcp="ssh,5060" ;
fi
####
####
####   #### english: firewall of system server-mumble:
####   #### spanish: cortafuego del sistema server-mumble:
####
####
if [ "$first_option" = "server-mumble" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-mumble ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### mumble port 64738 tcp and 64738 udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,64738" ;
server_port_udp="64738" ;
client_port_tcp="http,https,ssh,64738" ;
server_port_tcp="ssh,64738" ;
fi
####
####
####   #### english: firewall of system server-teamspeak:
####   #### spanish: cortafuego del sistema server-teamspeak:
####
####
if [ "$first_option" = "server-teamspeak" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-teamspeak ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### Service	        Protocol	Local Port (Server)
#### Voice	        UDP	9987
#### Filetransfer	TCP	30033
#### ServerQuery (raw)	TCP	10011
#### ServerQuery (SSH)	TCP	10022
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,9987" ;
server_port_udp="9987" ;
client_port_tcp="http,https,ssh,30033,10011,10022" ;
server_port_tcp="ssh,30033,10011,10022" ;
fi
####
####
####   #### english: firewall of system server-sql:
####   #### spanish: cortafuego del sistema server-sql:
####
####
if [ "$first_option" = "server-sql" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-sql ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
####  POSTGRESQL 5432/tcp and 5432/udp
####  Technology	Default Port	Required
####  MySQL Client to Server - MySQL Protocol – 3306	3306/tcp	Optional - pick at least 1
####  MySQL Client to Server – New X Protocol – 33060	33060/tcp	Optional - pick at least 1
####  Connects via SSH Tunnel	22/tcp	Optional - pick at least 1
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,5432" ;
server_port_udp="5432" ;
client_port_tcp="http,https,ssh,5432,3306,3360" ;
server_port_tcp="ssh,5432,3306,3360" ;
fi
####
####
#### :rutina-final-system-rules:
##########    english: new-versions: about of program      ##########
##########    spanish: new-versions: acerca del programa   ##########
#### :rutina-inicial-new-versions:
####
####
if   [ "$first_option" = "new-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the versions in the web ] || ||"
echo
echo "$duo_md [ info ] [ new versions ]"
echo "$duo_md [ info ] [ latest version ] [ $url_web_latest ]"
echo "$duo_md [ info ] [ index version  ] [ $url_index_files ]"
echo
$cmd_binary index-versions
echo
echo "$duo_md [ info ] [ Show the last minimal version ]"
echo "$duo_md [ info ] [ $url_minimal_files ]"
echo
$cmd_binary minimal-versions
echo
echo "$duo_md [ info ] [ Show the last complete version ]"
echo "$duo_md [ info ] [ $url_complete_files ]"
echo
$cmd_binary complete-versions
exit; fi
####
####
#### :rutina-final-new-versions:
##########    english: index-versions: about of program      ##########
##########    spanish: index-versions: acerca del programa   ##########
#### :rutina-inicial-complete-versions:
####
####
if   [ "$first_option" = "index-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the new versions in the web ] || ||"
case $favorite_text_browser in 
"$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
$favorite_text_browser -dump $url_index_files | $command_grep -i fwiptables | $command_grep -E " ago |[0123456789]-[0123456789][0123456789]-[0123456789]"
exit; fi
####
####
#### :rutina-final-complete-versions:
##########    english: complete-versions: about of program      ##########
##########    spanish: complete-versions: acerca del programa   ##########
#### :rutina-inicial-complete-versions:
####
####
if   [ "$first_option" = "complete-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the new versions in the web ] || ||"
case $favorite_text_browser in 
"$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
$favorite_text_browser -dump $url_complete_files | $command_grep -i fwiptables | $command_grep -E " ago |[0123456789]-[0123456789][0123456789]-[0123456789]" | $command_sed s/\<//g | $command_sed s/\>//g 
exit; fi
####
####
#### :rutina-final-complete-versions:
##########    english: minimal-versions: about of program      ##########
##########    spanish: minimal-versions: acerca del programa   ##########
#### :rutina-inicial-minimal-versions:
####
####
if   [ "$first_option" = "minimal-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the new versions in the web ] || ||"
case $favorite_text_browser in 
"$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
$favorite_text_browser -dump $url_minimal_files | $command_grep -i fwiptables | $command_grep -E " ago |[0123456789]-[0123456789][0123456789]-[0123456789]" | $command_sed s/\<//g | $command_sed s/\>//g 
exit; fi
####
####
#### :rutina-final-minimal-versions:
##########    english: options-mini: wellcome with semi help    ##########
##########    spanish: options-mini: bienvenida con semi ayuda  ##########
#### :rutina-inicial-mini-options:
####
####
if [ "$first_option" = "options-mini" ] ; then echo $give_cover ; echo "$message_info_rules"
echo "$header_ok [ $first_option ] [ List mini options ] [ mini-options md ] || ||"
echo "    Launch: $cmd_binary [ -t|-txt -c|-cli -g|-gui -l|-log -n|-null ] first_option [ second_option ]            " 
echo "$duo_md || || [ firewall ]  ### [  Control firewalls and rules to manage iptables ] ### || ||                  "
echo "$text_md      firewall-control |  stop continue reset names actual show save load                              "
echo "$text_md   firewall-conceptual |  ls4 ls6 list4 list6 status list-alltables list-filter4 list-filter6          "
echo "$text_md                          list-nat4 list-nat6 list-raw4 list-raw6 list-mangle4 list-mangle6            "
echo "$text_md                          list-security4 list-security6 list-ebtables list-arptables                   "
echo "$text_md      firewall-numeral |  lsn4 lsn6 listn4 listn6 statusn listn-alltables listn-filter4 listn-filter6  "
echo "$text_md                          listn-nat4 listn-nat6 listn-raw4 listn-raw6 listn-mangle4 listn-mangle6      "
echo "$text_md                          listn-security4 listn-security6 list-ebtables list-arptables                 "
echo "$text_md       firewall-custom |  new-full-config nueva-completa-config regen-config                           "
echo "$text_md                          new-mini-config nueva-mini-config examples-config                            "
echo "$text_md                          show-config modify-config del-config names-config                            "
echo "$text_md       firewall-launch |  eraserules custom wizard-mini wizard-full off-line all-permisive games-udp   "
echo "$text_md                          games-shooter game-wesnoth game-minetest game-freeciv game-widelands         "
echo "$text_md                          client-web client-vnc client-mail client-news client-torrent client-vpn      "
echo "$text_md                          client-tor client-ftp client-squid lan-tor lan-vpn shield-ssh server-ssh     "
echo "$text_md                          server-vnc server-web server-samba server-print server-lamp server-news      "
echo "$text_md                          server-mail server-ftp server-teamspeak server-mumble server-sql             "
echo "$text_md                          server-asterisk server-squid                                                 "
echo "$text_md         options-state |  preferences-read preferences-modify preferences-regen filelog autolog        "
echo "$text_md                          install uninstall actualmini-upgrade actualfull-upgrade                      "
echo "$text_md                          ip4 ip6 version notes depends license new-versions                           "
exit ; fi
####
####
#### :rutina-final-mini-options:
##########    english: names-config: list some config       ##########
##########    spanish: names-config: lista alguna config    ##########
#### :rutina-inicial-names-config:
####
####
if [ "$first_option" = "names-config" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List configs cfg ] || ||"
echo "$duo_md [ info ] [ list configs files in cfg format ]"
echo "$duo_md [ info ] [ folder ] [ $directory_config ]"
echo 
default_files_cfg="default-full-english.cfg|default-full-spanish.cfg\
|default-mini-english|default-mini-spanish|wizard-full|wizard-mini|nodefault-tmp"
echo "$tab"
echo "$tab [ System files ]"
$command_ls -1 $directory_config/ | $command_grep -E -i $default_files_cfg
echo "$tab"
echo "$tab [ User files ]"
$command_ls -1 $directory_config/ | $command_grep -E -iv $default_files_cfg
echo "$tab"
echo "$tab [ OK CFG FILES NAMES ]"
echo 
exit; fi
####
####
#### :rutina-final-names-config:
##########    english: text-pause: do pause     ##########
##########    spanish: text-pause: hace pausa   ##########
#### :rutina-inicial-text-pause:
####
####
if [ "$first_option" = "text-pause" ]; then $nada
read -p '##### [ ok ] ##### Press [enter] to continue now with the cli-menu ##### '
exit; fi
####
####
#### :rutina-final-text-pause:
##########     english: examples-config: Show config files examples            ##########
##########     spanish: examples-config: Muestra ejemplos de configuraciones   ##########
#### :rutina-inicial-examples-config:
####
####
if [ "$first_option" = "examples-config" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ Show examples ] || ||"
echo 
echo "[ examples ] [ examples for some services in client mode ]"
echo
####
####
#### config: web example ####
####
####
echo
echo "# config web example #" 
echo "config_client_tcp=http,https ;"
echo "config_client_udp=domain,domain-s,ntp,bootpc,http ;"
####
####
#### config:  games example  ####
####
####
echo
echo "# config games example #"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,1025:65499; "
echo "config_client_tcp=http,https"
####
####
#### config: wesnoth game example ####
####
####
echo
echo "# config web example #" 
echo "config_client_tcp=http,https,14995:15000 ;"
echo "config_client_udp=domain,domain-s,ntp,bootpc,http ;"
####
####
#### config:  torrent-example1 ####
####
####
echo
echo "# config torrent example #"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,1025:65499; "
echo "config_client_tcp=http,https"
####
####
#### config: samba-example1 ####
####
####
echo
echo "# config samba example #"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,137:139 ; "
echo "config_client_tcp=http,https,ipp,microsoft-ds"
echo "allow_output_ping= ; allow_input_ping= ; "
####
####
#### config: server gateway masquerade ##
####
####
echo
echo "# config vpn example #"
echo "allow_gateway_ip4= ; "
####
####
#### config: vpn-sample1 ##
####
####
echo
echo "# config vpn example #"
echo "allow_forward_ip4= ; "
echo "allow_net_vpn= ; "
echo "config_net_vpn=wesnoth.org,sourceforge.net"
####
####
#### config: email-example1 ####
####
####
echo
echo "# config email example #"
echo "config_client_tcp=http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps"
####
####
#### config: ssh-example1 ####
####
####
echo
echo "# config ssh example #"
echo "config_client_tcp=http,https,printer,ipp,ssh,rsync,git"
####
####
#### config: vnc-example1 ####
####
####
echo
echo "# config vnc example #"
echo "config_client_tcp=http,https,ssh,5900:5910"
####
####
#### config: ftp-example1 ####
####
####
echo
echo "# config ftp example #"
echo "config_client_tcp=http,https,ftp,ftp-data,ftps,ftps-data,gsiftp,zope-ftp"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,tftp"
####
####
#### config: printer-example1 ####
####
####
echo
echo "# config printer example #"
echo "config_client_tcp=http,https,ipp,printer"
####
####
#### config: irc-example1 ####
####
####
echo
echo "# config irc example #"
echo "config_client_tcp=http,https,ircd,ircs-u"
####
####
#### config: sql-example1 ####
####
####
echo
echo "# config sql example #"
echo "config_client_tcp=http,https,mysql,postgresql,mysql-proxy,ms-sql-s"
####
####
echo
exit ; fi
####
####
#### :rutina-final-examples-config:
##########    english: eraserules: Erase rules option   ##########
##########    spanish: eraserules: Opcion borra reglas  ##########
#### :rutina-inicial-eraserules:
####
####
if [ "$first_option" = "eraserules" ]; then echo $give_cover 
echo "$header_ok [ $first_option ] [ erase all iptables rules ] || ||"
####
####
#### english: table policy 
#### spanish: table policy
####
####
rule_table_policy="ACCEPT"
$command_iptables_legacy   -t filter  -P INPUT    $rule_table_policy
$command_iptables_nft      -t filter  -P INPUT    $rule_table_policy
$command_ip6tables_legacy  -t filter  -P INPUT    $rule_table_policy
$command_ip6tables_nft     -t filter  -P INPUT    $rule_table_policy
$command_iptables_legacy   -t filter  -P FORWARD  $rule_table_policy
$command_iptables_nft      -t filter  -P FORWARD  $rule_table_policy
$command_ip6tables_legacy  -t filter  -P FORWARD  $rule_table_policy
$command_ip6tables_nft     -t filter  -P FORWARD  $rule_table_policy
$command_iptables_legacy   -t filter  -P OUTPUT   $rule_table_policy
$command_iptables_nft      -t filter  -P OUTPUT   $rule_table_policy
$command_ip6tables_legacy  -t filter  -P OUTPUT   $rule_table_policy
$command_ip6tables_nft     -t filter  -P OUTPUT   $rule_table_policy
####
####
#### english: erase the rules
#### spanish: borra las reglas
####
####
$command_arptables -F  &> /dev/null
$command_ebtables -t filter -F &> /dev/null
$command_ebtables -t nat -F &> /dev/null
$command_iptables_nft -t filter -F &> /dev/null
$command_ip6tables_nft -t filter  -F &> /dev/null
$command_iptables_legacy -t filter -F &> /dev/null
$command_ip6tables_legacy -t filter -F &> /dev/null
$command_iptables_nft -t nat -F &> /dev/null
$command_ip6tables_nft -t nat  -F &> /dev/null
$command_iptables_legacy -t nat -F &> /dev/null
$command_ip6tables_legacy -t nat -F &> /dev/null
$command_iptables_nft -t mangle -F &> /dev/null
$command_ip6tables_nft -t mangle  -F &> /dev/null
$command_iptables_legacy -t mangle -F &> /dev/null
$command_ip6tables_legacy -t mangle -F &> /dev/null
$command_iptables_nft -t raw -F &> /dev/null
$command_ip6tables_nft -t raw  -F &> /dev/null
$command_iptables_legacy -t raw -F &> /dev/null
$command_ip6tables_legacy -t raw -F &> /dev/null
$command_iptables_nft -t security -F &> /dev/null
$command_ip6tables_nft -t security -F &> /dev/null
$command_iptables_legacy -t security -F &> /dev/null
$command_ip6tables_legacy -t security -F &> /dev/null
####
####
$command_ebtables -t filter -P INPUT ACCEPT  &> /dev/null
$command_ebtables -t filter -P FORWARD ACCEPT &> /dev/null 
$command_ebtables -t filter -P OUTPUT ACCEPT &> /dev/null
$command_ebtables -t nat -P PREROUTING ACCEPT &> /dev/null
$command_ebtables -t nat -P OUTPUT ACCEPT  &> /dev/null
$command_ebtables -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_nft -t filter -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t filter -P FORWARD ACCEPT &> /dev/null
$command_iptables_nft -t filter -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t filter -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t filter -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_nft -t filter -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t filter -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t filter -P FORWARD ACCEPT &> /dev/null
$command_iptables_legacy -t filter -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t filter -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t filter -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_legacy -t filter -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t nat -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t nat -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t nat -P PREROUTING ACCEPT &> /dev/null
$command_iptables_nft -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P PREROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P FORWARD ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P FORWARD ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_nft -t raw -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t raw -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t raw -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t raw -P PREROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t raw -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t raw -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t raw -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t raw -P PREROUTING ACCEPT &> /dev/null
$command_iptables_nft -t security -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t security -P FORWARD ACCEPT &> /dev/null
$command_iptables_nft -t security -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t security -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t security -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_nft -t security -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t security -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t security -P FORWARD ACCEPT &> /dev/null
$command_iptables_legacy -t security -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t security -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t security -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_legacy -t security -P OUTPUT ACCEPT &> /dev/null
####
####
echo "$duo_md [ info ] [ Deleting the iptables rules firewall ]" 
echo "$duo_md [  ok  ] [ Firewall is erased ] [ Deleted rules ]"
exit; fi
####
####
#### :rutina-final-eraserules:
##########     english: list-alltables: list all rules         ##########
##########     spanish: list-alltables: list todas las reglas  ##########
#### :rutina-inicial-list-alltables:
####
####
if [ "$first_option" = "list-alltables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List all rules ] || ||"
echo 
echo; echo; echo "### LIST ARPTABLES ###"
$zero_option list-arptables
echo; echo; echo "### LIST EBTABLES ###"
$zero_option list-ebtables
echo; echo; echo "### LIST FILTER IP4 TABLE ###"
$zero_option list-filter4
echo; echo; echo "### LIST FILTER IP6 TABLE ###"
$zero_option list-filter6
echo; echo; echo "### LIST NAT IP4 TABLE ###"
$zero_option list-nat4
echo; echo; echo "### LIST NAT IP6 TABLE ###"
$zero_option list-nat6
echo; echo; echo "### LIST SECURITY IP4 TABLE ###"
$zero_option list-security4
echo; echo; echo "### LIST SECURITY IP6 TABLE ###"
$zero_option list-security6
echo; echo; echo "### LIST RAW IP4 TABLE ###"
$zero_option list-raw4
echo; echo; echo "### LIST RAW IP6 TABLE ###"
$zero_option list-raw6
echo; echo; echo "### LIST MANGLE IP4 TABLE ###"
$zero_option list-mangle4
echo; echo; echo "### LIST MANGLE IP6 TABLE ###"
$zero_option list-mangle6
echo 
exit; fi
####
####
#### :rutina-final-list-alltables:
##########     english: listn-alltables: list all rules         ##########
##########     spanish: listn-alltables: list todas las reglas  ##########
#### :rutina-inicial-listn-alltables:
####
####
if [ "$first_option" = "listn-alltables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List all rules ] || ||"
echo 
echo; echo; echo "### LIST EBTABLES ###"
$zero_option list-ebtables
echo; echo; echo "### LIST ARPTABLES ###"
$zero_option listn-arptables
echo; echo; echo "### LIST FILTER IP4 TABLE ###"
$zero_option listn-filter4
echo; echo; echo "### LIST FILTER IP6 TABLE ###"
$zero_option listn-filter6
echo; echo; echo "### LIST NAT IP4 TABLE ###"
$zero_option listn-nat4
echo; echo; echo "### LIST NAT IP6 TABLE ###"
$zero_option listn-nat6
echo; echo; echo "### LIST SECURITY IP4 TABLE ###"
$zero_option listn-security4
echo; echo; echo "### LIST SECURITY IP6 TABLE ###"
$zero_option listn-security6
echo; echo; echo "### LIST RAW IP4 TABLE ###"
$zero_option listn-raw4
echo; echo; echo "### LIST RAW IP6 TABLE ###"
$zero_option listn-raw6
echo; echo; echo "### LIST MANGLE IP4 TABLE ###"
$zero_option listn-mangle4
echo; echo; echo "### LIST MANGLE IP6 TABLE ###"
$zero_option listn-mangle6
echo 
exit; fi
####
####
#### :rutina-final-listn-alltables:
##########    english: list4-ip: The list option   ##########
##########    spanish: list4-ip: La opcion lista   ##########
#### :rutina-inicial-list4:
####
####
if [ "$first_option" = "list4-ip" ]; then echo $give_cover ; echo "$message_info_rules"
echo "$header_ok [ list4 ] [ List filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
"$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
"$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-ip4"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]"
echo
$command_iptables_legacy -t filter -v -L $list_rules_conceptual
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_iptables_nft -t filter -v -L $list_rules_conceptual
;;
esac
exit; fi
####
####
#### :rutina-final-list4:
##########    english: list6-ip: list ipv6 rules filter           ##########
##########    spanish: list6-ip: lista reglas de filtros de ipv6  ##########
#### :rutina-inicial-list6:
####
####
if [ "$first_option" = "list6-ip" ]; then  echo $give_cover ; echo "$message_info_rules"
echo "$header_ok [ list6 ] [ List filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacyseis=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
"$command_ip6tables_legacy" -t filter -L OUTPUT 1 )
nftseis=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 )
fromrules="filter-ip6"
echo
case $legacyseis in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_legacy -v -L $list_rules_conceptual
;;
esac
echo $tab
case $nftseis in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_nft -v -L $list_rules_conceptual
;;
esac
####
####
exit; fi
####
####
#### :rutina-final-list6:
##########    english: listn4-ip: The list option   ##########
##########    spanish: listn4-ip: La opcion lista   ##########
#### :rutina-inicial-listn4-ip:
####
####
if [ "$first_option" = "listn4-ip" ]; then echo $give_cover ; echo "$message_info_rules"
echo "$header_ok [ list4 ] [ List filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
"$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
"$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-ip4"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]"
echo
$command_iptables_legacy -t filter -v -L -n
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_iptables_nft -t filter -v -L -n
;;
esac
exit; fi
####
####
#### :rutina-final-listn4-ip:
##########    english: listn6-ip: list ipv6 rules filter           ##########
##########    spanish: listn6-ip: lista reglas de filtros de ipv6  ##########
#### :rutina-inicial-listn6-ip:
####
####
if [ "$first_option" = "listn6-ip" ]; then  echo $give_cover ; echo "$message_info_rules"
echo "$header_ok [ list6 ] [ List filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacyseis=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
"$command_ip6tables_legacy" -t filter -L OUTPUT 1 )
nftseis=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 )
fromrules="filter-ip6"
echo
case $legacyseis in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_legacy -v -L -n
;;
esac
echo $tab
case $nftseis in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_nft -v -L -n
;;
esac
####
####
exit; fi
####
####
#### :rutina-final-listn6-ip:
##########    english: status: The list option ipv4 and ipv6    ##########
##########    spanish: status: La opcion lista ipv4 y ipv6      ##########
#### :rutina-inicial-status:
####
####
if [ "$first_option" = "status" ]; then
####
####
$zero_option list4
####
####
$zero_option list6
####
####
exit; fi
####
####
#### :rutina-final-satus:
##########    english: statusn: The list option ipv4 and ipv6    ##########
##########    spanish: statusn: La opcion lista ipv4 y ipv6      ##########
#### :rutina-inicial-statusn:
####
####
if [ "$first_option" = "statusn" ]; then
####
####
$zero_option listn4
####
####
$zero_option listn6
####
####
exit; fi
####
####
#### :rutina-final-satusn:
##########    english: listnum: The list option   ##########
##########    spanish: listnum: La opcion lista   ##########
#### :rutina-inicial-listnum:
####
####
if [ "$first_option" = "listnum" ]; then echo $give_cover
echo "$header_ok [ list ] [ List numerical filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
"$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
"$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-numerical-ip4"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]"
echo
$command_iptables_legacy -t filter -v -L -n
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_iptables_nft -t filter -v -L -n
;;
esac
exit; fi
####
####
#### :rutina-final-listnum:
##########    english: listnum6: The list option   ##########
##########    spanish: listnum6: La opcion lista   ##########
#### :rutina-inicial-listnum-filter6:
####
####
if [ "$first_option" = "listnum6" ]; then echo $give_cover
echo "$header_ok [ list ] [ List numerical filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
"$command_ip6tables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-numerical-ip6"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L -n
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]" 
echo
$command_iptables_nft -t filter -v -L -n
;;
esac
exit; fi
####
####
#### :rutina-final-listnum6:
##########    english: list-filter4: The list option   ##########
##########    spanish: list-filter4: La opcion lista   ##########
#### :rutina-inicial-list-filter4:
####
####
if [ "$first_option" = "list-filter4" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]" 
echo
$command_iptables_nft -t filter -v -L $list_rules_conceptual
####
####
exit; fi
####
####
#### :rutina-final-list-filter4:
##########    english: list-forward: List filter forward rules       ##########
##########    spanish: list-forward: lista reglas de iptables filter forward  ##########
#### :rutina-inicial-list-forward:
####
####
if [ "$first_option" = "list-forward" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List filter forward ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-forward-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L FORWARD $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t filter -v -L FORWARD $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-forward:
##########    english: list-filter6: list ipv6 rules filter           ##########
##########    spanish: list-filter6: lista reglas de filtros de ipv6  ##########
#### :rutina-inicial-list-filter6:
####
####
if [ "$first_option" = "list-filter6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]" 
echo
$command_ip6tables_legacy -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]" 
echo
$command_ip6tables_nft -v -L $list_rules_conceptual
####
####
exit; fi
####
####
#### :rutina-final-list-filter6:
##########    english: list-forward6: List filter forward rules ipv6        ##########
##########    spanish: list-forward6: lista reglas de iptables filter forward ipv6   ##########
#### :rutina-inicial-list-forward6:
####
####
if [ "$first_option" = "list-forward6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List filter forward ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-forward-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t filter -v -L FORWARD $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t filter -v -L FORWARD $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-forward6:
##########    english: list-nat4: list NAT rules of ipv4       ##########
##########    spanish: list-nat4: lista reglas de NAT de ipv4  ##########
#### :rutina-inicial-list-nat-4:
####
####
 if [ "$first_option" = "list-nat4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List nat ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="nat-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t nat -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t nat -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-nat-4:
##########    english: list-nat6: list NAT rules of ipv6       ##########
##########    spanish: list-nat6: lista reglas de NAT de ipv6  ##########
#### :rutina-inicial-list-nat6:
####
####
if [ "$first_option" = "list-nat6" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List nat ipv6] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="nat-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t nat -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t nat -v -L $list_rules_conceptual 
#### echo 
exit; fi
####
####
#### :rutina-final-list-nat6:
##########    english: listnum-filter4: list option numerical filter ipv4   ##########
##########    spanish: listnum-filter4: lista numeral filter ipv4           ##########
#### :rutina-inicial-listnum-filter4:
####
####
if [ "$first_option" = "listnum-filter4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List filter ipv4 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-ip4"
echo
echo "$duo_md [ info ] [ With rules netfilter ] [ iptables-nft ] [ $fromrules ]"  
echo
$command_iptables_legacy -v -L -n 
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -v -L -n
exit; fi
####
####
#### :rutina-final-listnum-filter4:
##########    english: list-forwardnum: List filter forward rules in numerical     ##########
##########    spanish: list-forwardnum: lista reglas de iptables filter forward in numeros  ##########
#### :rutina-inicial-list-forwardnum:
####
####
if [ "$first_option" = "list-forwardnum" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List filter forward ipv4 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-forward-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L FORWARD -n
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t filter -v -L FORWARD -n
exit; fi
####
####
#### :rutina-final-list-forwardnum:
##########    english: listnum-filter6: list option numerical filter ipv6   ##########
##########    spanish: listnum-filter6: lista numeral filter ipv6           ##########
#### :rutina-inicial-listnum-filter6:
####
####
if [ "$first_option" = "listnum-filter6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List filter ipv6 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]" 
echo
$command_ip6tables_legacy -v -L -n
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]" 
echo
$command_ip6tables_nft -v -L -n
exit; fi
####
####
#### :rutina-final-listnum-filter6:
##########    english: list-forwardnum6: List filter forward rules in numerical ipv6      ##########
##########    spanish: list-forwardnum6: lista reglas de iptables filter forward in numeros ipv6   ##########
#### :rutina-inicial-list-forwardnum6:
####
####
if [ "$first_option" = "list-forwardnum6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List filter forward ipv6 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-forward-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t filter -v -L FORWARD -n
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t filter -v -L FORWARD -n
exit; fi
####
####
#### :rutina-final-list-forwardnum6:
##########    english: list-mangle4: list mangle rules from ipv4      ##########
##########    spanish: list-mangle4: lista reglas de mangle de ipv4   ##########
#### :rutina-inicial-list-mangle4:
####
####
if [ "$first_option" = "list-mangle4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List mangle ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="mangle-ip4"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t mangle -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t mangle -v -L $list_rules_conceptual
echo 
exit; fi
####
####
#### :rutina-final-list-mangle4:
##########    english: list-mangle6: list mangle rules from ipv6     ##########
##########    spanish: list-mangle6: lista reglas de mangle de ipv6  ##########
#### :rutina-inicial-list-mangle6:
####
####
if [ "$first_option" = "list-mangle6" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List mangle ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="mangle-ip6"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t mangle -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t mangle -v -L $list_rules_conceptual
#### echo 
exit; fi
####
####
#### :rutina-final-list-mangle6:
##########    english: list-raw4: list raw rules from ipv4  ##########
##########    spanish: list-raw4: lista reglas raw de ipv4  ##########
#### :rutina-inicial-list-raw4:
####
####
if [ "$first_option" = "list-raw4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List raw ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="raw-ip4"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t raw -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t raw -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-raw4:
##########    english: list-raw6: list raw rules from ipv6  ##########
##########    spanish: list-raw6: lista reglas raw de ipv6  ##########
#### :rutina-inicial-list-raw6:
####
####
if [ "$first_option" = "list-raw6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List raw ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="raw-ip6"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t raw -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t raw -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-raw6:
##########    english: list-security4: list security rules from ipv4     ##########
##########    spanish: list-security4: lista reglas de security de ipv4  ##########
#### :rutina-inicial-list-security4:
####
####
if [ "$first_option" = "list-security4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List security ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="security-ip4"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t security -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t security -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-security4:
##########    english: list-security6: list security rules from ipv6     ##########
##########    spanish: list-security6: lista reglas de security de ipv6  ##########
#### :rutina-inicial-list-security6:
####
####
if [ "$first_option" = "list-security6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List security ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="security-ip6"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t security -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t security -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-security6:
##########    english: list-ebtables: list ebtables rules with mac adress       ##########
##########    spanish: list-ebtables: lista reglas de ebtables with mac adress  ##########
#### :rutina-inicial-list-ebtables:
####
####
if [ "$first_option" = "list-ebtables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List ebtables ] || ||"
fromrules="ebtables"
echo
echo "$duo_md [ info ] [ ebtables: filter ethernet ] [ $fromrules ]"
echo
$command_ebtables -L -t filter
echo
echo "$duo_md [ info ] [ ebtables: nat ethernet ] [ $fromrules ]"
echo
$command_ebtables -L -t nat
exit; fi
####
####
#### :rutina-final-list-ebtables:
##########    english: list-arptables: list rules arptables with arp        ##########
##########    spanish: list-arptables: lista reglas de arptables with arp   ##########
#### :rutina-inicial-list-arptables:
####
####
if [ "$first_option" = "list-arptables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List arptables ipv4 ] || ||"
fromrules="arptables"
echo
echo "$duo_md [ info ] [ arptables: filter arptables ] [ $fromrules ]"
echo
$command_arptables -L
exit; fi
####
####
#### :rutina-final-list-arptables:
##########    english: list-arptables: list rules arptables with arp        ##########
##########    spanish: list-arptables: lista reglas de arptables with arp   ##########
#### :rutina-inicial-list-arptables:
####
####
if [ "$first_option" = "listn-arptables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List arptables ipv4 ] || ||"
fromrules="arptables"
echo
echo "$duo_md [ info ] [ arptables: filter arptables ] [ $fromrules ]"
echo
$command_arptables -L -n
exit; fi
####
####
#### :rutina-final-list-arptables:
##########    english: new-full-config: new-full-config option to create new configs   ##########
##########    spanish: new-full-config: new-full-config para cear nuevas config        ##########
#### :rutina-inicial-new-full-config:
####
####
if [ "$first_option" = "new-full-config" ] && [ "$second_option" = "$NULL" ]  ; then echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary new-full-config config-new ]"
exit; fi
####
####
if [ "$first_option" = "new-full-config" ] && [ "$second_option" != "$NULL" ] ; then echo $give_cover
archivo="$second_option"
cp "$defaultfullcfg_eng" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-new-full-config:
##########    english: nueva-completa-config: create new configs                             ##########
##########    spanish: nueva-completa-config: nueva-completa-config para cear nuevas config  ##########
#### :rutina-inicial-nueva-completa-config:
####
####
if [ "$first_option" = "nueva-completa-config" ] && [ "$second_option" = "$NULL" ]  ; then echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary nueva-completa-config config-nueva ]"
exit; fi
####
####
if [ "$first_option" = "nueva-completa-config" ] && [ "$second_option" != "$NULL" ] ; then echo $give_cover
archivo="$second_option"
cp "$defaultfullcfg_spa" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-nueva-completa-config:
##########    english: new-mini-config: create new configs   ##########
##########    spanish: new--mini config: cea nuevas config   ##########
#### :rutina-inicial-new-mini-config:
####
####
if [ "$first_option" = "new-mini-config" ] && [ "$second_option" = "$NULL" ]  ; then echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary new-mini-config config-new ]"
exit; fi
####
####
if [ "$first_option" = "new-mini-config" ] && [ "$second_option" != "$NULL" ] ; then echo $give_cover
archivo="$second_option"
cp "$defaultminicfg_eng" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-new-mini-config:
##########    english: nueva-mini-config: create new configs   ##########
##########    spanish: nueva-mini-config: crea nuevas config   ##########
#### :rutina-inicial-nueva-mini-config:
####
####
if [ "$first_option" = "nueva-mini-config" ] && [ "$second_option" = "$NULL" ]  ; then  echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary nueva-mini-config config-nueva ]"
exit; fi
####
####
if [ "$first_option" = "nueva-mini-config" ] && [ "$second_option" != "$NULL" ] ; then  echo $give_cover
archivo="$second_option"
cp "$defaultminicfg_spa" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-nueva-mini-config:
##########    english: modify-config: modify a one config.cfg        ##########
##########    spanish: modify-config: modify una configuracion.cfg   ##########
#### :rutina-inicial-modify-config:
####
####
if [ "$first_option" = "modify-config" ]; then  echo $give_cover
####
###
if [ ! -f "$directory_config/$second_option" ] ; then $nada
$zero_option names-config
echo "$tab [ info ] [ usage: ] [ $cmd_binary modify-config config-existent ]" ; exit; fi
####
####
if [ -f "$directory_config/$second_option" ] ; then $nada
cp "$directory_config/$second_option" "$directory_temporal/$second_option" &> /dev/null
$favorite_text_editor "$directory_config/$second_option"
echo "$duo_md [  ok  ] [ Custom file $second_option ]"
clear; fi
####
####
clear ; exit ; fi
####
####
#### :rutina-final-modify-config:
##########    english: show-config: show a one config          ##########
##########    spanish: show-config: muestra una configuracion  ##########
#### :rutina-inicial-show-config:
####
####
if [ "$first_option" = "show-config" ] ; then echo $give_cover
####
####
if [ ! -f "$directory_config"/"$second_option" ] ; then 
echo "$duo_md [ info ] [ Usage: $cmd_binary show-config config-cfg ]" ; exit; fi
####
####
if [ -f "$directory_config"/"$second_option" ] ; then 
cat $directory_config/$second_option ;
echo  ; exit ; fi
####
####
exit; fi
####
####
#### :rutina-final-show-config:
##########    english: del-config: delete a old config               ##########
##########    spanish: del-config: elimina una vieja configuracion   ##########
#### :rutina-inicial-del-config:
####
####
if [ "$first_option" = "del-config" ]; then echo $give_cover
####
####
if [ ! -f $directory_config/$second_option ] ; then
echo "$duo_md [ info ] [ usage: ] [ $cmd_binary del-config config-old ]" ; exit ; fi
####
####
if [ -f $directory_config/$second_option ] ; then
rm $directory_config/$second_option
echo "$directory_config/$second_option Deleted"
echo  ; exit ; fi
####
####
exit ; fi
####
####
#### :rutina-final-del-config:
##########    english: names: file list whith rules in iptables format          ##########
##########    spanish: names: lista de archivos con reglas en formato iptables  ##########
#### :rutina-inicial-names:
####
####
if [ "$first_option" = "names" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List names from firewall saved ] || ||"
echo "$duo_md [ info ] [ list configs files in standard format ]"
echo "$duo_md [ info ] [ folder ] [ $directory_fwrecover ]"
echo 
echo "$duo_md [ info ] [ Listing firewall names ]"
$command_ls -1 $directory_fwrecover | $command_sed s/\-legacy\-ipv6//g | $command_sed s/\-nft\-ipv6//g | \
$command_sed s/\-legacy\-ipv4//g | $command_sed s/\-nft\-ipv4//g | \
$command_sed s/\-arptables//g | $command_sed s/\-ebtables//g | sort -u 
echo
echo "$duo_md [  ok  ] [ Listed firewall names ]"
exit; fi
####
####
#### :rutina-final-names:
##########    english: reset: reset counter rules            ##########
##########    spanish: reset: resetea contadores de reglas   ##########
#### :rutina-inicial-reset:
####
####
if [ "$first_option" = "reset" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ Reset the firewall ] || ||"
echo "$duo_md [ info ] [ Reseting the firewall ]"
$zero_option stop &> /dev/null
$zero_option continue &> /dev/null
echo "$duo_md [  ok  ] [ firewall reseted ]"
exit; fi
####
####
#### :rutina-final-reset:
##########    english: install: install fwiptables-minimal    ##########
##########    spanish: install: instala fwiptables-minimal    ##########
#### :rutina-inicial-install:
####
####
if [ "$first_option" = "install" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ Install fwiptables ] || ||"
echo "$duo_md [ info ] [ Installing the firewall ]"
cp "$zero_option" "/usr/bin/fwiptables-mini" &> /dev/null
$cmd_binary preferences-regen &> /dev/null
$cmd_binary regen-config &> /dev/null
echo "$duo_md [ info ] [ The config dir:        ] [ $directory_data ]"
echo "$duo_md [ info ] [ The tmp dir:           ] [ $directory_tmp  ]"
echo "$duo_md [ info ] [ The Command shell:     ] [ /usr/bin/fwiptables-mini ]"
echo "$duo_md [  ok  ] [ Update configs and variables     ]"
echo "$duo_md [  ok  ] [ Now. Ready to run fwiptables-cmd ]"
exit; fi
####
####
#### :rutina-final-install:
##########    english: install: uninstall fwiptables-minimal    ##########
##########    spanish: install: uninstala fwiptables-minimal    ##########
#### :rutina-inicial-uninstall:
####
####
if [ "$first_option" = "uninstall" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ Uninstall fwiptables ] || ||"
echo "$duo_md [ info ] [ Uninstalling fwiptables-minimal ]"
rm "/usr/bin/fwiptables-mini" &> /dev/null
echo "$duo_md [  ok  ] [ Uninstalled /usr/bin/fwiptables-mini ]"
exit; fi
####
####
#### :rutina-final-install:
##########    english: license: license gpl v2   ##########
##########    spanish: license: license gpl v2   ##########
#### :rutina-inicial-license:
####
####
if [ "$first_option" = "license" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show license from git sourceforge for $cmd_binary ] || ||"
echo "license text for gpl v2 downloading from .. $license_gpl "
$favorite_text_browser -source "$license_gpl" | more
exit;  fi
####
####
#### :rutina-final-license:
##########    english: wizard-mini: wizard-mini      ##########
##########    spanish: wizard-mini: mini-asistente   ##########
#### :rutina-inicial-wizard-mini:
####
####
if [ "$first_option" = "wizard-mini" ]; then echo 
archivo="$first_option" ; launch_firewall=yes ; type_firewall="wizard-mini" ; name_firewall="wizard-mini"
cp "$defaultminicfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_text_editor "$directory_temporal/$cmd_config-$archivo"
clear
$favorite_text_dialog --clear --title "Run this wizard" --yesno "Run this wizard" 0 0 && clear \
&& cp "$directory_temporal/$cmd_config-$archivo" "$directory_config/$archivo" && $zero_option custom $archivo || clear
####
####
exit; fi
####
####
#### :rutina-final-wizard-mini:
##########    english: wizard-full: wizard-full     ##########
##########    spanish: wizard-full: asistente       ##########
#### :rutina-inicial-wizard-full:
####
####
if [ "$first_option" = "wizard-full" ]; then $nada
archivo="$first_option" ; launch_firewall=yes ; type_firewall="wizard-full" ; name_firewall="wizard-full"
cp "$defaultfullcfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_text_editor "$directory_temporal/$cmd_config-$archivo"
clear
$favorite_text_dialog --clear --title "Run this wizard" --yesno "Run this wizard" 0 0 && clear \
&& cp "$directory_temporal/$cmd_config-$archivo" "$directory_config/$archivo" && $zero_option custom $archivo || clear 
####
####
exit; fi
####
####
#### :rutina-final-wizard-full:
##########    english: load: load the rules in iptables format      ##########
##########    spanish: load: carga las reglas en formato iptables   ##########
#### :rutina-inicial-load:
####
####
if [ "$first_option" = "load" ]; then 
####
####
#### English: Void in second option
####
####
if [ "second_option" = "$NULL" ]; then
$cmd_binary names ; echo "$tab [ info ] [ usage: $cmd_binary load fw-to-load ] [ See: $cmd_binary names ]" ; exit ; fi
####
####
#### English if do exist second option in load
####
####
if [ -f $directory_fwrecover/$second_option-nft-ipv4 ] || [ -f $directory_fwrecover/$second_option-legacy-ipv4 ] ; then echo $give_cover
echo $give_load
####
####
#### English: show message
####
####
echo "$duo_md [ info ] [ Loading rules ]"
####
####
#### English: Remove all rules
####
####
$cmd_binary eraserules &> /dev/null
####
####
#### English: Load all rules 
####
####
if [ -f "$directory_fwrecover/$second_option-ebtables" ]; then
cat $directory_fwrecover/$second_option-ebtables | $command_ebtables-restore &> /dev/null; fi
####
####
if [ -f "$directory_fwrecover/$second_option-arptables" ]; then
cat $directory_fwrecover/$second_option-arptables | $command_arptables-restore &> /dev/null; fi
####
#### 
cat $directory_fwrecover/$second_option-nft-ipv4 |  $command_iptables_nft-restore       
cat $directory_fwrecover/$second_option-legacy-ipv4 | $command_iptables_legacy-restore  
cat $directory_fwrecover/$second_option-nft-ipv6 | $command_ip6tables_nft-restore       
cat $directory_fwrecover/$second_option-legacy-ipv6 | $command_ip6tables_legacy-restore 
echo "$duo_md [  ok  ] [ firewall loaded ] [ $second_option ]"
####
####
#### english: if no found #### spanish: si no encuentra
####
####
else
$cmd_binary names
echo "$tab [ info ] [ usage: $cmd_binary load fw-to-load ] [ See: $cmd_binary names ]"
fi 
####
####
#### echo 
exit; fi
####
####
#### :rutina-final-load:
##########    english: save: save the rules in iptables format      ##########
##########    spanish: save: guarda las reglas en formato iptables  ##########
#### :rutina-inicial-save:
####
####
if [ "$first_option" = "save" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ save one firewall with one name ] || ||"
case "$second_option" in
"$NULL") echo "$tab [ info ] [ Usage: $cmd_binary save fw-to-save ]" ; exit ;;
*) archivofin="$second_option" ;; 
esac
####
####
echo "$duo_md [ info ] [ saving firewall ] [ $archivofin ]"
if [ "$command_arptables" = "$NULL"  ]; then $nada ; else
$command_arptables-save          &> $directory_fwrecover/$archivofin-arptables; fi
if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
$command_ebtables-save           &> $directory_fwrecover/$archivofin-ebtables; fi
####
####
if [ "$command_iptables_nft"  = "$NULL"  ]; then $nada ; else
$command_iptables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv4 ; fi
if [ "$command_ip6tables_nft"  = "$NULL"  ]; then $nada ; else
$command_ip6tables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv6 ; fi
if [ "$command_iptables_legacy"  = "$NULL"  ]; then $nada ; else
$command_iptables_legacy-save    &> $directory_fwrecover/$archivofin-legacy-ipv4 ; fi
if [ "$command_ip6tables_legacy"  = "$NULL"  ]; then $nada ; else
$command_ip6tables_legacy-save   &> $directory_fwrecover/$archivofin-legacy-ipv6 ; fi
####
####
echo "$duo_md [  ok  ] [ firewall saved ] [ $archivofin ]"
if [ "$command_arptables" = "$NULL"  ]; then $nada ; else
$command_ls -l $directory_fwrecover/$archivofin-arptables; fi
if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
$command_ls -l $directory_fwrecover/$archivofin-ebtables; fi
####
####
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv4
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv6
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv4
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv6
echo "$duo_md [  ok  ] [ firewall listed ] [ $archivofin ]"
exit; fi
####
####
#### :rutina-final-save:
##########    english: show: show the rules from one firewall in iptables format    ##########
##########    spanish: show: muestra las reglas de un firewall en formato iptables  ##########
#### :rutina-inicial-show:
####
####
if [ "$first_option" = "show" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show one firewall saved ] || ||"
echo 
case "$second_option" in
"$NULL") $cmd_binary names; echo "$tab [ info ] [ Use: $cmd_binary show file-to-show ]" ; exit ;;
*) archivofin=$($command_sed 's/\///g' <<< "$second_option") ;;
esac
$command_ls -l $directory_fwrecover/$archivofin-arptables
$command_ls -l $directory_fwrecover/$archivofin-ebtables
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv4
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv6
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv4
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv6
echo "$duo_md [ ok ] [ FIREWALL LISTED ] [ $archivofin ]"
echo "$cincuenta $archivofin-arptables"
cat $directory_fwrecover/$archivofin-arptables
echo "$cincuenta $archivofin-ebtables"
cat $directory_fwrecover/$archivofin-ebtables
echo "$cincuenta $archivofin-nft-ipv4"
cat $directory_fwrecover/$archivofin-nft-ipv4
echo "$cincuenta $archivofin-legacy-ipv4"
cat $directory_fwrecover/$archivofin-legacy-ipv4
echo "$cincuenta $archivofin-nft-ipv6"
cat $directory_fwrecover/$archivofin-nft-ipv6
echo "$cincuenta archivofin-legacy-ipv6"
cat $directory_fwrecover/$archivofin-legacy-ipv6
echo "$duo_md [ ok ] [ firewall readed ] [ $archivofin ]"
echo 
exit; fi
####
####
#### :rutina-final-show:
##########    english: actual: show actual firewall          ##########
##########    spanish: actual: muestra las reglas actuales   ##########
#### :rutina-inicial-actual:
####
####
if [ "$first_option" = "actual" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show the last firewall saved ] || ||"
echo 
$command_arptables-save          &> $directory_fwrecover/$cmd_config-actual-arptables
$command_ebtables-save           &> $directory_fwrecover/$cmd_config-actual-ebtables   
$command_iptables_nft-save       &> $directory_fwrecover/$cmd_config-actual-nft-ipv4   
$command_iptables_legacy-save    &> $directory_fwrecover/$cmd_config-actual-legacy-ipv4
$command_ip6tables_nft-save      &> $directory_fwrecover/$cmd_config-actual-nft-ipv6   
$command_ip6tables_legacy-save   &> $directory_fwrecover/$cmd_config-actual-legacy-ipv6
echo "$cincuenta arptables $cinco"
cat $directory_fwrecover/$cmd_config-actual-arptables
echo "$cincuenta ebtables $cinco"
cat $directory_fwrecover/$cmd_config-actual-ebtables
echo "$cincuenta nft with ipv4 $cinco"
cat $directory_fwrecover/$cmd_config-actual-nft-ipv4
echo "$cincuenta legacy with ipv4 $cinco"
cat $directory_fwrecover/$cmd_config-actual-legacy-ipv4
echo "$cincuenta nft with ipv6 $cinco"
cat $directory_fwrecover/$cmd_config-actual-nft-ipv6
echo "$cincuenta legacy with ipv6 $cinco"
cat $directory_fwrecover/$cmd_config-actual-legacy-ipv6
echo
echo "$tab  [ ok ] [ readed firewall actual ]"
exit; fi
####
####
#### :rutina-final-actual:
##########    english: stop: stop firewall      ##########
##########    spanish: stop: para el firewall   ##########
#### :rutina-inicial-stop:
####
####
if [ "$first_option" = "stop" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Stop the firewall ] || ||"
####
####
#### english: save actual fw #### spanish: guarda actual fw
####
####
$command_arptables-save &> $directory_fwrecover/$cmd_config-stoped-arptables
$command_ebtables-save &> $directory_fwrecover/$cmd_config-stoped-ebtables             
$command_iptables_nft-save &> $directory_fwrecover/$cmd_config-stoped-nft-ipv4         
$command_iptables_legacy-save &> $directory_fwrecover/$cmd_config-stoped-legacy-ipv4   
$command_ip6tables_nft-save &> $directory_fwrecover/$cmd_config-stoped-nft-ipv6        
$command_ip6tables_legacy-save &> $directory_fwrecover/$cmd_config-stoped-legacy-ipv6  
####
####
#### english: erase the rules #### spanish: borra las reglas
####
####
$cmd_binary eraserules &> /dev/null
echo "$duo_md [ info ] [ stopping firewall ]"
echo "$duo_md [  ok  ] [ firewall stopped  ]"
exit; fi
####
####
#### :rutina-final-stop:
##########    english: continue: continue the firewall      ##########
##########    spanish: continue: continua el cortafuegos    ##########
#### :rutina-inicial-continue:
####
####
if [ "$first_option" = "continue" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Continue the stoped firewall ] || ||"
####
####
#### english: restore last fw #### spanish: restaura el ultimo fw
####
####
cat $directory_fwrecover/$cmd_config-stoped-arptables | $command_arptables-restore
cat $directory_fwrecover/$cmd_config-stoped-ebtables | $command_ebtables-restore
cat $directory_fwrecover/$cmd_config-stoped-nft-ipv4 | $command_iptables_nft-restore  
cat $directory_fwrecover/$cmd_config-stoped-legacy-ipv4 | $command_iptables_legacy-restore  
cat $directory_fwrecover/$cmd_config-stoped-nft-ipv6 | $command_ip6tables_nft-restore  
cat $directory_fwrecover/$cmd_config-stoped-legacy-ipv6 | $command_ip6tables_legacy-restore  
echo "$duo_md [ info ] [ continue firewall  ]"
echo "$duo_md [  ok  ] [ firewall continued ]"
exit; fi
####
####
#### :rutina-final-continue:

##########    english: actualfull-upgrade: upgrade in the file /usr/bin/fwiptables       ##########
##########    spanish: actualfull-upgrade: actualiza en el archivo /usr/bin/fwiptables   ##########
#### :rutina-inicial-actualfull-upgrade:
####
####
if   [ "$first_option" == "actualfull-upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ upgrade development version from web ] [ upgrade md ] || ||"
echo "$duo_md [ info ] [ upgrade  ] [ upgrade $cmd_config at development version from sourceforge.net git ]"
case "$favorite_text_browser" in "$NULL") echo "$duo_md [ notice  ] [ Install a text web browser for upgrade $cmd_binary ]"; exit ;; esac
echo "$duo_md [ info ] [ upgrade  ] [ upgrade The $cmd_config in file /usr/bin/fwiptables-cmd with $favorite_text_browser command ]"
echo "$duo_md [ info ] [ download ] [ downloading $cmd_config with the command $favorite_text_browser browser ]"
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$duo_md [ info ] [ download ] [ $url_web_minidevelopment ]"
echo "$duo_md [ info ] [ download ] [ Waiting several seconds .. ]"
$favorite_text_browser -source $url_web_actualfull &> $directory_temporal/$cmd_config-installer || echo "[ fail ] [ disconnected ]"
chmod ugo+rwx $directory_temporal/$cmd_config-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "$directory_temporal/$cmd_config-installer" ] ;
then echo "$duo_md [  ok  ] [ downloaded $cmd_config mini developer version ]" ;
$directory_temporal/$cmd_config-installer install ; 
else echo "$duo_md [ fail ] [ install fail ]"; fi ;
####
####
exit ; fi
####
####
#### :rutina-final-actualfull-upgrade:
##########    english: actualmini-upgrade: upgrade in the file /usr/bin/fwiptables       ##########
##########    spanish: actualmini-upgrade: actualiza en el archivo /usr/bin/fwiptables   ##########
#### :rutina-inicial-actualmini-upgrade:
####
####
if   [ "$first_option" == "actualmini-upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ upgrade development version from web ] [ upgrade md ] || ||"
echo "$duo_md [ info ] [ upgrade  ] [ upgrade $cmd_config at development version from sourceforge.net git ]"
case "$favorite_text_browser" in "$NULL") echo "$duo_md [ notice  ] [ Install a text web browser for upgrade $cmd_binary ]"; exit ;; esac
echo "$duo_md [ info ] [ upgrade  ] [ upgrade The $cmd_config in file /usr/bin/fwiptables-cmd with $favorite_text_browser command ]"
echo "$duo_md [ info ] [ download ] [ downloading $cmd_config with the command $favorite_text_browser browser ]"
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$duo_md [ info ] [ download ] [ $url_web_minidevelopment ]"
echo "$duo_md [ info ] [ download ] [ Waiting several seconds .. ]"
$favorite_text_browser -source $url_web_actualmini &> $directory_temporal/$cmd_config-installer || echo "[ fail ] [ disconnected ]"
chmod ugo+rwx $directory_temporal/$cmd_config-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "$directory_temporal/$cmd_config-installer" ] ;
then echo "$duo_md [  ok  ] [ downloaded $cmd_config mini developer version ]" ;
$directory_temporal/$cmd_config-installer install ; 
else echo "$duo_md [ fail ] [ install fail ]"; fi ;
####
####
exit ; fi
####
####
#### :rutina-final-actualmini-upgrade:
##########    english: devfull-upgrade: upgrade in the file /usr/bin/fwiptables       ##########
##########    spanish: devfull-upgrade: actualiza en el archivo /usr/bin/fwiptables   ##########
#### :rutina-inicial-devfull-upgrade:
####
####
if  [ "$first_option" == "devfull-upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ upgrade development version from web ] [ upgrade md ] || ||"
echo "$duo_md [ info ] [ upgrade  ] [ upgrade $cmd_config at development version from sourceforge.net git ]"
case "$favorite_text_browser" in "$NULL") echo "$duo_md [ notice  ] [ Install a text web browser for upgrade $cmd_binary ]"; exit ;; esac
echo "$duo_md [ info ] [ upgrade  ] [ upgrade The $cmd_config in file /usr/bin/fwiptables-cmd with $favorite_text_browser command ]"
echo "$duo_md [ info ] [ download ] [ downloading $cmd_config with the command $favorite_text_browser browser ]"
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$duo_md [ info ] [ download ] [ $url_web_fulldevelopment ]"
echo "$duo_md [ info ] [ download ] [ Waiting several seconds .. ]"
$favorite_text_browser -source $url_web_fulldevelopment &> $directory_temporal/$cmd_config-installer || echo "[ fail ] [ disconnected ]"
chmod ugo+rwx $directory_temporal/$cmd_config-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "$directory_temporal/$cmd_config-installer" ] ;
then echo "$duo_md [  ok  ] [ downloaded $cmd_config developer version ]" ;
$directory_temporal/$cmd_config-installer install ; 
else echo "$duo_md [ fail ] [ install fail ]"; fi ;
####
####
exit ; fi
####
####
#### :rutina-final-devfull-upgrade:
##########    english: devmini-upgrade: upgrade in the file /usr/bin/fwiptables       ##########
##########    spanish: devmini-upgrade: actualiza en el archivo /usr/bin/fwiptables   ##########
#### :rutina-inicial-devmini-upgrade:
####
####
if   [ "$first_option" == "devmini-upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ upgrade development version from web ] [ upgrade md ] || ||"
echo "$duo_md [ info ] [ upgrade  ] [ upgrade $cmd_config at development version from sourceforge.net git ]"
case "$favorite_text_browser" in "$NULL") echo "$duo_md [ notice  ] [ Install a text web browser for upgrade $cmd_binary ]"; exit ;; esac
echo "$duo_md [ info ] [ upgrade  ] [ upgrade The $cmd_config in file /usr/bin/fwiptables-cmd with $favorite_text_browser command ]"
echo "$duo_md [ info ] [ download ] [ downloading $cmd_config with the command $favorite_text_browser browser ]"
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$duo_md [ info ] [ download ] [ $url_web_minidevelopment ]"
echo "$duo_md [ info ] [ download ] [ Waiting several seconds .. ]"
$favorite_text_browser -source $url_web_minidevelopment &> $directory_temporal/$cmd_config-installer || echo "[ fail ] [ disconnected ]"
chmod ugo+rwx $directory_temporal/$cmd_config-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "$directory_temporal/$cmd_config-installer" ] ;
then echo "$duo_md [  ok  ] [ downloaded $cmd_config mini developer version ]" ;
$directory_temporal/$cmd_config-installer install ; 
else echo "$duo_md [ fail ] [ install fail ]"; fi ;
####
####
exit ; fi
####
####
#### :rutina-final-devmini-upgrade:
##########    english: -gui: Manage gui con three options  ##########
##########    spanish: -gui: Maneja gui con tres opciones  ##########
####
####
#### english: with third option
#### spanish: con tercera opcion
####
####
if [ "$first_option" = "-gui" ] && [ "$third_option" != "$NULL" ] ; then $nada
echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity or yad to work ]" ; exit ;; esac
case $second_option in
#### 
#### 
"new-mini-config")
cp "$defaultminicfg_eng" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NEW MINI CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"new-full-config")
cp "$defaultfullcfg_eng" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NEW FULL CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-mini-config")
cp "$defaultminicfg_spa" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NUEVA MINI CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-completa-config")
cp "$defaultfullcfg_spa" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NUEVA COMPLETA CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"modify-config")
if [ -f "$directory_config/$third_option" ] ; then $nada
else $favorite_graphicall_dialog  --forms $graphic_dimension --text="file not found: $third_option" ; exit ; fi 
cp "$directory_config/$third_option" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="MODIFY CONFIG" 1> "$directory_config/$third_option"
if [ -s "$directory_config/$third_option" ]; then $nada ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK. file: $third_option"
else cp "$directory_temporal/$cmd_config-$third_option" "$directory_config/$third_option"
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled. file: $third_option"; fi
;;
#### 
####
"game-word")$cmd_binary game-word -gui ; exit ;;
"game-number")$cmd_binary game-number -gui ; exit ;;
"game-domain")$cmd_binary game-domain -gui ; exit ;;
####
####
*)$cmd_binary "$second_option" "$third_option" "$quad_option" &> "$temporal_guifinal"
$favorite_graphicall_dialog  --text-info $graphic_dimension --title="Gui Output || $cmd_binary ||" \
--filename="$temporal_guifinal" --auto-scroll ;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
##########    english: -gui: with second option    ##########
##########    spanish: -gui: con segunda opcion    ##########
####
####
if [ "$first_option" = "-gui" ] && [ "$second_option" != "$NULL" ] ; then echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity or yad to work ]" ; exit ;; esac
####
case $second_option in
#### 
#### 
"wizard-mini")
archivo="wizard-mini"
cp "$defaultminicfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$archivo" \
--editable --title="WIZARD MINI" 1> "$directory_config/$archivo"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$cmd_binary -gui custom $archivo ; $cmd_binary -gui list4;
else rm "$directory_config/$archivo" ;
$favorite_graphicall_dialog --info $graphic_dimension --text "Ok. $archivo canceled"; fi
;;
#### 
#### 
"wizard-full")
archivo="wizard-full"
cp "$defaultfullcfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$archivo" \
--editable --title="WIZARD FULL" 1> "$directory_config/$archivo"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$cmd_binary -gui custom $archivo ; $cmd_binary -gui list4;
else rm "$directory_config/$archivo" ;
$favorite_graphicall_dialog  --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
####
#### 
#### 
"modify-config")
if [ -f "$directory_config/$third_option" ] ; then $nada
else $favorite_graphicall_dialog  --forms $graphic_dimension --text="file not found: $third_option" ; exit ; fi 
cp "$directory_config/$third_option" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="MODIFY CONFIG" 1> "$directory_config/$third_option"
if [ -s "$directory_config/$third_option" ]; then $nada ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK. file: $third_option"
else cp "$directory_temporal/$cmd_binary-$third_option" "$directory_config/$third_option"
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled. file: $third_option"; fi
;;
#### 
####
"preferences-modify")
archivo="default"
cp "$default_preferences" "$default_preferences.old"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$default_preferences.old" \
--editable --title="MODIFY CONFIG" 1> "$default_preferences"
if [ ! -s "$default_preferences" ]; then cp "$default_preferences.old" "$default_preferences" ;
$favorite_graphicall_dialog  --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
####
"game-word")$cmd_binary game-word -gui ; exit ;;
"game-number")$cmd_binary game-number -gui ; exit ;;
"game-domain")$cmd_binary game-domain -gui ; exit ;;
####
####
*)$cmd_binary $second_option $third_option &> $temporal_guifinal
$favorite_graphicall_dialog  --text-info $graphic_dimension --title="Gui Output || $cmd_binary ||" \
--filename="$temporal_guifinal" --auto-scroll ;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
##########    english: -gui: without more options    ##########
##########    spanish: -gui: sin mas opcion          ##########
####
####
if [ "$first_option" = "-gui" ] && [ "$second_option" = "$NULL" ] ; then echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity or yad to work ]" ; exit ;; esac
$favorite_graphicall_dialog  --forms $graphic_dimension --title="Gui Output || $cmd_binary || " --text="$($cmd_binary mini-options)"
exit; fi
####
####
##########    english: config-eng: several options to config in english        ##########
##########    spanish: config-eng: varias opciones para configurar en ingles   ##########
#### :rutina-inicial-config-eng:
####
####
if [ "$first_option" = "config-eng" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show variables cfg from english configuration ] || ||"
cat  $defaultfullcfg_eng
exit; fi
####
####
#### :rutina-final-config-eng:
##########    english: config-spa: several options to config in spanish         ##########
##########    spanish: config-spa: varias opciones para configurar en spanish   ##########
#### :rutina-inicial-config-spa:
####
####
if [ "$first_option" = "config-spa" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show variables cfg from spanish configuration ] || ||"
cat $defaultfullcfg_spa
exit; fi
####
####
#### :rutina-final-config-spa:
###############################################################################################################
###############################################################################################################
############################       english: default: without other valid options
############################	   spanish: default: sin otra valida opcion
####
####
if [ "$launch_firewall" != "yes" ] ; then
echo "### ### [ fail ] [ Option: $first_option ] ### [ it is not valid option. ]  ###  [ Choose a one valid option ... ] ###" ;
$zero_option $default_security ;
exit ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####           Knowed now sure that:         launch_firewall="yes"                              ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules ..                                                          ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall with designed previous             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema con diseño previo             ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
########################################     english: ipv4 iptables all-permisive:
########################################     spanish: ipv4 iptables todo permisivo
#### :rutina-inicial-code-allpermisive:
####
####
#### legacy ip4
####
####
if [ "$type_firewall" = "all-permisive" ]; then $zero_option eraserules &> /dev/null ;
####
####
#### english: legacy ipv4 127.0.0.1 acept and the others legacy ipv4 accept too
#### spanish: legacy ipv4 127.0.0.1 acepta y los otros legacy ipv4 acepta tambien
####
####
$allow_legacy  $command_iptables_legacy -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy  $command_iptables_legacy -A INPUT \
$input_state  -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_legacy  $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy  $command_iptables_legacy -A OUTPUT \
-j ACCEPT \
-m comment --comment "all output" &> /dev/null
$allow_legacy  $command_iptables_legacy -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
#### english: nft ipv4 127.0.0.1 acept and the others nft ipv4 accept too
#### spanish: nft ipv4 127.0.0.1 acepta y los otros nft ipv4 acepta tambien
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
-m state --state NEW,RELATED,ESTABLISHED -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT \
-j ACCEPT \
-m comment --comment "all output" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
########################################     english: ipv6 iptables all-permisive:
########################################     spanish: ipv6 iptables todo permisivo
####
####
#### english: legacy ipv6 127.0.0.1 acept and the others legacy ipv6 accept too
#### spanish: legacy ipv6 127.0.0.1 acepta y los otros legacy ipv6 acepta tambien
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT  \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT \
-m state --state NEW,RELATED,ESTABLISHED -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT \
-j ACCEPT \
-m comment --comment "all otuput" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
#### english: nft ipv6 127.0.0.1 acept and the others nft ipv6 accept too
#### spanish: nft ipv6 127.0.0.1 acepta y los otros nft ipv6 acepta tambien
####
####
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
-m state --state NEW,RELATED,ESTABLISHED -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A OUTPUT  \
-j ACCEPT \
-m comment --comment "all output" &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
#### english: ipv6-icmp accept in legacy and accept in nft
#### spanish: ipv6-icmp acepta en legacy y acepta en nft
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
####
####
#### english: close with drop legacy and close with drop nft
#### spanish: cierra con drop legacy y cierra con drop nft
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
$allow_legacy $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-allpermisive:
########################################     english: ipv4 iptables off-line:
########################################     spanish: ipv4 iptables desconectado
#### :rutina-inicial-code-off-line:
####
####
#### legacy ip4
####
####
if [ "$type_firewall" = "off-line" ];  then $zero_option eraserules &> /dev/null ;
####
####
#### english: legacy ipv4 127.0.0.1 acept
#### spanish: legacy ipv4 127.0.0.1 acepta
####
####
$allow_legacy $command_iptables_legacy -A INPUT  \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost"  &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy ipv4 127.0.0.1 acept
#### spanish: nft ipv4 127.0.0.1 acepta
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
########################################     english: ipv6 iptables off-line
########################################     spanish: ipv6 iptables desconectado
####
####
#### english: legacy ipv6 127.0.0.1 acept
#### spanish: legacy ipv6 127.0.0.1 acepta
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT  \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: nft ipv6 127.0.0.1 acept
#### spanish: nft ipv6 127.0.0.1 acepta
####
####
$allow_nft $command_ip6tables_nft -A INPUT  \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
########################################     english: close in off-line
########################################     spanish: cierra en off-line
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
ç-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####  
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-off-line:
########################################     english: ipv4 iptables shield-ssh:
########################################     spanish: ipv4 iptables shield-ssh:
#### :rutina-inicial-code-shield-ssh:
####
####
if [ "$type_firewall" = "shield-ssh" ];  then $zero_option eraserules &> /dev/null ;
####
####
#### loopback localhost legacy ip4
####
####
$allow_legacy $command_iptables_legacy -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv4
#### escudo ssh legacy ipv4 
####
####
$allow_shield_maxtries $allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv4
#### log servidor legacy ipv4
####
#### 
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null &> /dev/null
####
####
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv4
#### reglas de filtros legacy ipv4 
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp"&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
#### loopback localhost nft ip4
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv4
#### escudo ssh nft ipv4 
####
####
$allow_shield_maxtries $allow_nft  $allow_ipv4  $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft $allow_ipv4  $command_iptables_nft -A INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server nft ipv4
#### log servidor nft ipv4
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv4
#### reglas de filtros nft ipv4 
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
########################################     english: ipv6 iptables 
########################################     spanish: ipv6 iptables 
####
####
#### loopback localhost legacy ip6
####
####
$allow_legacy  $command_ip6tables_legacy -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy  $command_ip6tables_legacy -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv6
#### escudo ssh legacy ipv6 
####
####
$allow_shield_maxtries $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports ssh -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv6
#### log servidor legacy ipv6 
####
####
#### $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv6
#### reglas de filtros legacy ipv6 
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
#### loopback localhost nft ip6
#### loopback localhost nft ipv6
####
####
$allow_nft $command_ip6tables_nft -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv6
#### escudo ssh nft ipv6 
####
####
$allow_shield_maxtries $allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft     $allow_ipv6  $command_ip6tables_nft -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server nft ipv6
#### log servidor nft ipv6
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv6
#### reglas de filtros nft ipv6 
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
########################################     english: close iptables 
########################################     spanish: cierra iptables 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny   \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny  \
-m comment --comment "close rule" &> /dev/null
$allow_nft  $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft  $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft  $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft  $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
$allow_nft  $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-shield-ssh:
########################################     english: ipv4 iptables legacy rules default predesignated
########################################     spanish: ipv4 iptables legacy reglas predesignadas por defecto
#### :rutina-inicial-code-rulesdefault:
####
####
if [ "$type_firewall" = "predesignated" ];  then $cmd_binary eraserules &> /dev/null ;
####
####
#### loopback localhost legacy ip4
####
####
$allow_legacy $command_iptables_legacy -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv4
#### escudo ssh legacy ipv4 
####
####
$allow_shield_maxtries $allow_legacy $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy $allow_ipv4 $command_iptables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv4
#### log servidor legacy ipv4
####
#### 
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null &> /dev/null
####
####
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv4 without separate rules
#### reglas de filtros legacy ipv4 sin separar reglas
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp"&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
fi
####
####
####
#### filter rules legacy ipv4 with separte rules
#### reglas de filtros legacy ipv4 con separar reglas
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
for client_portudp in $(echo $client_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
for client_porttcp in $(echo $client_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp"&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
####
fi
####
####
########################################     english: ipv4 iptables nft
########################################     spanish: ipv4 iptables nft
####
####
#### loopback localhost nft ip4
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv4
#### escudo ssh nft ipv4 
####
####
$allow_shield_maxtries $allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent --set --name "shield-tries" \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-m recent --name "shield-tries" --update --seconds 3600 --hitcount "$config_shield_maxtries" -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
#### 
####
#### log server nft ipv4
#### log servidor nft ipv4
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv4 with separate rules
#### reglas de filtros nft ipv4 with separate rules
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
fi
####
####
#### filter rules nft ipv4 without separate rules
#### reglas de filtros nft ipv4 without separate rules
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
####
for client_portudp in $(echo $client_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
####
for client_porttcp in $(echo $client_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
####
####
fi
####
####
########################################     english: ipv6 iptables legacy
########################################     spanish: ipv6 iptables legacy
####
####
#### loopback localhost legacy ip6
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv6
#### escudo ssh legacy ipv6 
####
####
$allow_shield_maxtries $allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv6
#### log servidor legacy ipv6 
####
####
#### $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv6
#### reglas de filtros legacy ipv6 
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
fi
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
####
####
for clientport_udp in $(echo $client_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
for client_porttcp in $(echo $client_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
fi
####
####
########################################     english: ipv6 iptables nft
########################################     spanish: ipv6 iptables nft
####
####
#### loopback localhost nft ip6
#### loopback localhost nft ipv6
####
####
$allow_nft $command_ip6tables_nft -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv6
#### escudo ssh nft ipv6 
####
####
$allow_shield_maxtries $allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server nft ipv6
#### log servidor nft ipv6
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv6
#### reglas de filtros nft ipv6 
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
fi
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
####
fi
####
####
########################################     english: close iptables 
########################################     spanish: cierra iptables 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny   \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny  \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-rulesdefault:
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules CUSTOM                                                      ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall custom                             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema custom                        ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
#### :rutina-inicial-code-wizard:
####
####
##############################       english: overwrite system varibles with the config cfg
##############################       spanish: sobreescribe las variables con la config cfg
####
####
if [ "$first_option" = "custom" ]; then if [ -f $directory_config/$second_option ]; 
then source $directory_config/$second_option &> /dev/null ; else echo "$tab [ fail ] [ Config file not found ]"; exit ; fi ; fi
####
####
##############################      english: selective state of intput/oputut          #####################
##############################      spanish: estado selectivo de entrada/salida        #####################
####
####
if [ "$allow_input_state" = "$NULL" ]  ; then config_input_state="-m state --state $config_input_state"   ;
else config_input_state="$NULL"  ; fi
if [ "$allow_output_state" = "$NULL" ] ; then config_output_state="-m state --state $config_output_state" ;
else config_output_state="$NULL" ; fi
####
####
##############################      english: output_uid or output_gid for input established status        #####################
##############################      spanish: usuario o grupo para establecidos de entrada de estado        #####################
####
####
config_uid_gid=no
if [ "$allow_output_uid" = "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
if [ "$allow_output_gid" = "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          launching rules ..                                                                ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
############################       english: iptables rules ipv4  iptables-legacy
############################       spanish: reglas de iptables ipv4   iptables-legacy
####
####
#### english: erase all rules
#### spanish: borra todas las reglas
####
####
$zero_option eraserules &> /dev/null
####
####
#######################################        english: ebtables mac rules
#######################################        spanish: ebtables mac rules
####
####
$allow_mac_whitelist $command_ebtables -A INPUT  -s $config_mac_whitelist  -j ACCEPT \
-m comment --comment "mac whitelist" &> /dev/null
$allow_mac_whitelist $command_ebtables -A OUTPUT -d $config_mac_whitelist  -j ACCEPT \
-m comment --comment "mac whitelist" &> /dev/null
####
####
$allow_mac_blacklist $command_ebtables -A INPUT  -s $config_mac_blacklist  -j $config_close_deny \
-m comment --comment "mac blacklist"  &> /dev/null
$allow_mac_blacklist $command_ebtables -A OUTPUT -d $config_mac_blacklist  -j $config_close_deny \
-m comment --comment "mac blacklist" &> /dev/null
####
####
#######################################        english: Accept  localhost rules
#######################################        spanish: aceptar reglas localhost
####
####
$allow_legacy $command_iptables_legacy -A INPUT  -s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -s $config_ip4_localhost -d $config_ip4_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT  -s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -s $config_ip6_localhost -d $config_ip6_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
$allow_nft $command_iptables_nft -A INPUT  -s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
$allow_nft $command_ip6tables_nft -A INPUT  -s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -s $config_ip6_localhost -d $config_ip6_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
####################################### english: rules for max tries for ssh
####################################### spanish: reglas for max ties for ssh
####
####
if [ "$allow_shield_maxtries" = "" ]; then $nada
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
$allow_nft  $allow_ipv4  $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dport $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$allow_nft     $allow_ipv6  $command_ip6tables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
fi
####
####
#######################################        english: limit bandwidth in kb/s
#######################################        spanish: limitar ancho de banda en kb/s
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
####
####
$allow_ipv4 $allow_legacy $allow_input_bandwidth $command_iptables_legacy     -A  INPUT \
-m hashlimit --hashlimit-above   "$config_input_bandwidth"kb/sec \
--hashlimit-name maxinputlegacy  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_bandwidth $command_iptables_legacy    -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip --hashlimit-name maxoutputlegacy -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_bandwidth $command_iptables_nft           -A INPUT \
-m hashlimit    --hashlimit-above "$config_input_bandwidth"kb/sec  \
--hashlimit-name maxinputnft  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_bandwidth $command_iptables_nft          -A OUTPUT \
-m hashlimit  --hashlimit-above "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip  --hashlimit-name maxoutputnft -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
#######################################        english: ipv6 bandwidth
#######################################        spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_bandwidth $command_ip6tables_legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_bandwidth $command_ip6tables_legacy -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_bandwidth $command_ip6tables_nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_bandwidth $command_ip6tables_nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
#######################################        english: limit number of all connections
#######################################        spanish: limitar numero de conexiones totales
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
$allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect   -j $config_close_deny  \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_maxconnect $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
#### english: ipv6 bandwidth
#### spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect  -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_maxconnect $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
####################################### english: Drop rules for blacklist
####################################### spanish: reglas de denegar para lista negra
####
####
for one_blacklist in $(echo $config_net_blacklist | $command_sed 's/,/ /g')
####
####
#### ipv4
####
####
do
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
done
#### 
####
####################################### english: Accept rules for vpn
####################################### spanish: reglas de aceptar para vpn
####
####
for one_vpn in $(echo $config_net_vpn | $command_sed 's/,/ /g') 
#### ipv4
####
do
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
done
####
####
####################################### english: rules to allow client ports with without separate rules
####################################### spanish: reglas para permitir puertos cliente without separate rules
####
####
if [ "$allow_separate_rules" = "no" ]; then 
####
####
####    CLIENT  UDP
####
#### ipv4 legacy udp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
#### 
#### ipv4 nft udp
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 legacy udp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 nft udp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
####    CLIENT  TCP
####
#### ipv4 legacy tcp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
#### 
#### ipv4 nft tcp
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 legacy tcp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 nft tcp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
fi
####
####
####################################### english: rules to allow client ports with with separate rules
####################################### spanish: reglas para permitir puertos cliente with separate rules
####
####
if [ "$allow_separate_rules" = "" ]; then 
for one_udp in $(echo $client_udp | $command_sed 's/,/ /g') ;
do
####
####
####    CLIENT  UDP
####
#### ipv4 legacy udp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
#### 
#### ipv4 nft udp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft $allow_ipv4     $command_iptables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 legacy udp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 nft udp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
done; fi
####
####
if [ "$allow_separate_rules" = "" ]; then 
for one_tcp in $(echo $client_tcp | $command_sed 's/,/ /g') ;
do
####
####
####    CLIENT TCP
####
#### ipv4 legacy tcp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
#### 
#### ipv4 nft tcp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft $allow_ipv4     $command_iptables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 legacy tcp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 nft tcp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
done ; fi
####
####
####################################### english: rules to log servers
####################################### spanish: reglas para logear servers
####
####
#### ipv4
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
#### ipv6
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
####################################### english: rules allow server ports
####################################### spanish: reglas para permitir puertos servidor 
####
####
#### ipv4 legacy
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
#### 
#### ipv4 nft
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
#### ipv6 legacy
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
#### ipv6 nft
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
####################################### english: rules from input of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de entrada de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy -A INPUT  \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp resquest" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $config_uid_gid $command_iptables_legacy -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "state uid-gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols $command_iptables_legacy -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
####################################### english: rules from output of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de salida de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping  $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_uid $command_iptables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "state uid" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_gid $command_iptables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "state gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols      $command_iptables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
####################################### english: ipv6 filter legacy rules input and output for ping, uid, gid and protocols
####################################### spanish: ipv6 filtros legacy reglas de entrada y salida para ping, uid, gid y protocolos
####
#### 
#### english: ipv6 filter legacy rules input 
#### spanish: ipv6 filtros de legacy reglas de entrada
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping      $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping    $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $config_uid_gid $command_ip6tables_legacy -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "state uid-gid" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
#### english: ipv6 filter legacy rules output
#### spanish: ipv6 filtros legacy reglas de salida
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping  $command_ip6tables_legacy   -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping  $command_ip6tables_legacy -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_uid $command_ip6tables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "state uid" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_gid $command_ip6tables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "state gid" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy6  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
############################       english: iptables rules ipv4  iptables-nft for ping, uid, gid and protocols
############################       spanish: reglas de iptables ipv4 iptables-nft para ping, uid, gid y protocolos
####
####
#### english: ipv4 filter nft rules input
#### spanish: ipv4 filter nft reglas de entrada
####
####
$allow_nft $allow_ipv4 $allow_output_ping     $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_nft $allow_ipv4 $config_uid_gid $command_iptables_nft -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "state uid-gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols       $command_iptables_nft -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
#### english: ipv4 filter nft rules output
#### spanish: ipv4 filter nft reglas de salida
####
####
$allow_nft $allow_ipv4 $allow_output_ping    $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping  $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_uid $command_iptables_nft   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "status uid" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_gid $command_iptables_nft   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "status gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols      $command_iptables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
########## english: ipv6 filter nft rules input and output for ping, uid, gid and protocols
########## spanish: ipv6 filtros nft relgas de entrada y salida para ping, uid, gid y protocolos
####
####
#### ipv6 filter nft rules input
#### ipv6 filtros nft reglas d entrada
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "imcp request" &> /dev/null
####
####
$allow_nft $allow_ipv6 $config_uid_gid $command_ip6tables_nft -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "status uid-gid" &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
#### english: ipv6 filter nft rules output
#### spanish: ipv6 filtros nft reglas de salida
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_uid     $command_ip6tables_nft -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "status uid" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_gid     $command_ip6tables_nft -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "status gid" &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
########################################## english: nat for ipv4 and ipv6
########################################## spanish: nat para ipv4 y ipv6
####
####
#### english: nat DELETED
#### spanish: borrado nat
####
####
#### $command_iptables_nft -t nat -F
#### $command_iptables_legacy -t nat -F
#### $command_ip6tables_nft -t nat -F
#### $command_ip6tables_legacy -t nat -F
####
####
#### english: do masquerade nat ip4 and ip6 ALLOW GATEWAY
#### spanish: hace nat masquerade ip4 y ip6 PERMITIR GATEWAY
####
####
$allow_nft    $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
$allow_legacy $allow_ipv4 $allow_gateway_ip4 $command_iptables_legacy -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
####
####
$allow_nft $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gateway"  &>/dev/null
$allow_legacy $allow_ipv4     $allow_gateway_ip4 $command_iptables_legacy -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gateway" &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gateway" &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gatway" &>/dev/null
####
####
####
####
#### english: do DMZ nat ip4 and ip6 ALLOW GATEWAY SERVER IN LAN
#### spanish: hace nat DMZ ip4 y ip6 PERMITIR GATEWAY SERVER IN LAN
####
####
$allow_nft    $allow_ipv4    $allow_dmz_ip4 $command_iptables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4 \
-m comment --comment "ip dmz" &>/dev/null
$allow_legacy $allow_ipv4    $allow_dmz_ip4 $command_iptables_legacy -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4 \
-m comment --comment "ip dmz" &>/dev/null
####
####
$allow_nft $allow_ipv6    $allow_dmz_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip6 \
-m comment --comment "ip dmz" &>/dev/null
$allow_legacy $allow_ipv6 $allow_dmz_ip6 $command_ip6tables_legacy -t nat \
-A PERROUTING -j DNAT --to-destination $config_dmz_ip6 \
-m comment --comment "ip dmz" &>/dev/null
####
####
######################################## english: iptables ipv4 and ipv6 with forward rules ALLOW FORWARD
######################################## spanish: iptables ipv4 y ipv6 con reglas de reenvio PERMITIR FORWARD
####
####
#### english: deactive for default with forward or without forward
#### spanish: desactiva por defecto con reenvio o sin reenvio
####
####
$command_sysctl -w net.ipv4.conf.all.forwarding=0 &> /dev/null
$command_sysctl -w net.ipv6.conf.all.forwarding=0 &> /dev/null
####
####
####   Active when there is forward
$ipv4 $allow_forward $command_sysctl -w net.ipv4.conf.all.forwarding=1 &> /dev/null
$ipv6 $allow_forward $command_sysctl -w net.ipv6.conf.all.forwarding=1 &> /dev/null
####
####
####   ipv4 filter legacy rules forward
$allow_legacy $allow_forward_ip4 $command_iptables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter legacy rules forward
$allow_legacy $allow_forward_ip6 $command_ip6tables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv4 filter nft rules forward
$allow_nft $allow_forward_ip4 $command_iptables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter nft rules forward
$allow_nft $allow_forward_ip6 $command_ip6tables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
#######################################       iptables ipv4 and ipv6 closed with drop input, and drop forward, and drop output rules
#######################################       iptables ipv4 y ipv6 cierran la entrada, reemvio y salida con reglas de dropeo
####
####
#### ipv4 drop rules iptables-legacy
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### ipv6 drop rules iptables-legacy
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### ipv4 drop rules iptables-nft
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
#### ipv6 drop rules iptables-nft
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
########################################       english: iptables ipv4 and ipv6 with variable input_all
########################################       english: iptables ipv4 y ipv6 con variable input_all
####
####
#### english: nft INPUT deleted
#### spanish: nft INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F INPUT  &> /dev/null
####
####
#### english: legacy INPUT deleted
#### spanish: legacy INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F INPUT  &> /dev/null
####
####
#### english: nft INPUT 127.0.0.1 accept
#### spanish: nft INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy INPUT 127.0.0.1 accept
#### spanish: legacy INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost -j ACCEPT \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost -j ACCEPT \
-m comment --comment "close rule" &> /dev/null
####
####
#### english: legacy4 INPUT  limit bandwidth
#### spanish: legacy6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_bandwidth iptables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_bandwidth ip6tables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
####
####
#### english: nft4 INPUT limit bandwidth
#### spanish: nft6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_bandwidth iptables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_bandwidth ip6tables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
####
####
#### english: nft INPUT ACCEPT all or input_state
#### spanish: nft INPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_ipv4 $command_iptables_nft -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
####
####
########################################       english: iptables ipv4 and ipv6 with variable output_all
########################################       english: iptables ipv4 y ipv6 con variable output_all
####
####
#### english: nft OUTPUT deleted
#### spanish: nft OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F OUTPUT  &> /dev/null
####
####
#### english: legacy OUTPUT deleted
#### spanish: legacy OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F OUTPUT  &> /dev/null
####
####
#### english: nft OUTPUT 127.0.0.1 accept
#### spanish: nft OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy OUTPUT 127.0.0.1 accept
#### spanish: legacy OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy4 OUTPUT  limit bandwidth
#### spanish: legacy6 OUTPUT limita ancho de banda
####
#### 
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_bandwidth iptables-legacy -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_bandwidth ip6tables-legacy -A  OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
####
####
#### english: nft4 OUTPUT limit bandwidth
#### spanish: nft6 OUTPUT limita ancho de banda
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_bandwidth iptables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_bandwidth ip6tables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_maxconnect  $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_maxconnect  $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
####
####
#### english: nft OUTPUT ACCEPT all or input_state
#### spanish: nft OUTPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter  -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy  -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
########################################       english: show text when active custom rules
########################################       spanish: muestra texto cuando activas las custom reglas
####
####  
####
if [ -f "$directory_config/$second_option" ]; then $cmd_binary reset
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit ; else $nada ; fi
####
####
#### :rutina-final-code-wizard:
#######################
####     left script
#######################
####
####
#######################         english: End of script
#######################         spanish: Fin del script
####    
####
####    ### Git mini tutorial: with fwiptables.
####
####
####    # Download repository: tree methods with clone/pull/fetch https:// or ssh://
####
####    First time, download repository to folder user            :  git clone https://git.code.sf.net/p/f-iptables/code
####    Download updates from repository to folder user           :  git pull  https://f-iptables@git.code.sf.net/p/f-iptables/code
####    Recover repository from server repository to folder user  :  git fetch https://f-iptables@git.code.sf.net/p/f-iptables/code
####
####    # upload repository: update commit and push
####
####    Update files from local repository                        :  git commit -a 
####    Upload files to repository from local repository          :  git push ssh://f-iptables@git.code.sf.net/p/f-iptables/code
####
####
####    # Create repository local: with folder /var/git/repository.localhost
####
####    mkdir /var/git/repository.localhost
####    cd /var/git/repository.localhost
####    git init --bare
####    chmod user /var/git/repository.localhost -R
####    service ssh start or systemctl restart ssh
####
####
#######################
#######################
####
####
exit
