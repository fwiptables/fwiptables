#!/bin/bash
#### #### #### #### for shell bash:
#### #### #### #### #!/bin/bash
####
#### #### #### #### for shell zsh:
#### #### #### #### #!/bin/zsh
#### #### #### #### emulate -L bash
####
#### File:        fwiptables-cmd
#### Description: Fran FireWall fwiptables Generator
#### Author:      Francisco Garcia <fwiptables@gmx.com>
#### Copyright:   (c) 2020-2023 Francisco Garcia <fwiptables@gmx.com>
####
#### This program is free software; you can redistribute it and/or modify
#### it under the terms of the GNU General Public License as published by
#### the Free Software Foundation; either version 2 of the License, or
#### (at your option) any later version.
####
#### This program is distributed in the hope that it will be useful,
#### but WITHOUT ANY WARRANTY; without even the implied warranty of
#### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#### GNU General Public License for more details.
####
#### You should have received a copy of the GNU General Public License along
#### with this program; if not, write to the Free Software Foundation, Inc.,
#### 51 Franklin St, Fifth Floor, Boston MA 02110-1301 USA
####
####
####                 ## fwiptables license in source program
####   English: This program has gpl license GPL v2, this program is copyleft, it is free.
####   Spanish: Este programa tiene licencia GPL v2, este programa es copyleft, esto es libre.
####
####
####                 ## fwiptables comments in source program
####   English: The comments are in english language and spanish language
####   Spanish: Los comentarios estan en idioma ingles y en idioma español
####
####
####                 ## Report bugs and Sum ideas
####   Email: fwiptables@gmx.com
####
####
##########    english: are you root: uid 0 ?                ##########
##########    spanish: eres admnistrador: identificador 0 ? ##########
#### :rutina-inicial-admin:
####
####
if [ "$(id -u)" != "0" ] ; then echo
echo
echo "### [ info ] [ fwiptables needs to be root to work ]"
echo
echo "### [ fail ] [ Be root to work with fwiptables in your system ] [ Try with root user ]"
exit ; fi
####
####
#### :rutina-final-admin:
##########     english name, description and version    ##########
##########     spanish: nombre, descripcion y version   ##########
#### :rutina-inicial-name:
####
####
#### english: permanent files: and where are file path: name, command and icon
#### spanish: archivos permanentes: donde estan las rutas de archivo: nombre, comando e icono
####
#### english: program name #### spanish: nombre del programa
#### english: program exec #### spanish: programa ejectutable
#### name_fwiptables="fwiptables-cmd"
####
####
cmd_binary="$0" ;
cmd_config="fwiptables-cmd" ;
cmd_version="complete-6.09" ;
cmd_name="Fran Complete FireWall FWiptables Generator" ;
cmd_description="One Script in bash for iptables firewall" ;
cmd_license="GPL v2" ;
cmd_homepage="https://sourceforge.net/projects/f-iptables/" ;
####
####
#### #### english: program description   #### spanish: descripcion del programa
#fdescription="One Script in bash for iptables firewall" ;
#### #### english: program name          #### spanish: nombre del porgrama
#fprogram="Fran FireWall FWiptables Generator" ;
#### #### english: version program name          #### spanish: version del porgrama
#fversion="complete-5.05" ;
####
####
#### :rutina-final-name:
##########    english: options priority        ##########
##########    spanish: prioridad de opciones   ##########
#### :rutina-inicial-order-options:
####
####
command_sed="$(command -v sed)"
#### #### english: option for default    #### spanish: opcion por defecto
zero_dir="$(pwd)" ;
#### #### english: option for default    #### spanish: opcion por defecto
zero_option="$0" ;
#### #### english: variables to launch   #### spanish: variables a lanzar
first_option="$(echo $1 | $command_sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
second_option="$(echo $2 | $command_sed s/\\///g -)" ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
third_option="$(echo $3 | $command_sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
quad_option="$(echo $4 | $command_sed s/\\///g -)"  ;                     
####
####
#### :rutina-final-order-options:
##########   english: profile y support X11       ##########
##########   spanish: profile y soporte de X11    ##########
#### :rutina-inicial-x11:
####
####
####     #### english: stablished the path        #### spanish: establece el path
####
####
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
####
####     #### english: add auth xhost for root for graphicall use 
####     #### spanish: añade autorización xhost para root para uso grafico
####
####
command_xhost="$(command -v xhost)" ;
$command_xhost +SI:localuser:root &> /dev/null ;
####
####
#### deprecated
## sudo -u "$(logname)" $command_xhost +SI:localuser:root &> /dev/null
## sudo -u "$(logname)" command_xhost +root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +INET:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +INET6:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +DNET:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +KRB:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +NIS:root@127.0.0.1 &> /dev/null
####
####
#### :rutina-final-x11:
##########   english: search programs: programs path           ##########
##########   spanish: busca los programas: ruta de programas   ##########
#### :rutina-inicial-command:
####
####
command_editor="$(command -v editor)"
command_vi="$(command -v vi)"
command_vim="$(command -v vim)"
command_pico="$(command -v pico)"
command_nano="$(command -v nano)"
command_mkdir="$(command -v mkdir)"
command_arp="$(command -v arp)"
command_arp_scan="$(command -v arp-scan)"
command_arptables="$(command -v arptables)"
command_bash="$(command -v bash)"
command_bc="$(command -v bc)"
command_curl="$(command -v curl)"
command_cut="$(command -v cut)"
command_date="$(command -v date)"
command_dialog="$(command -v dialog)"
command_whiptail="$(command -v whiptail)"
command_dd="$(command -v dd)"
command_dhclient="$(command -v dhclient)"
command_dhclient_script="$(command -v dhclient-script)"
command_dhcpcd="$(command -v dhcpcd)"
command_dialog="$(command -v dialog)"
command_dig="$(command -v dig)"
command_ebtables="$(command -v ebtables)"
command_elinks="$(command -v elinks)"
command_find="$(command -v find)"
command_fmt="$(command -v fmt)"
command_geoiplookup="$(command -v geoiplookup)"
command_glxgears="$(command -v glxgears)"
command_gpg="$(command -v gpg)"
command_grep="$(command -v grep)"
command_halt="$(command -v halt)"
command_host="$(command -v host)"
command_ifconfig="$(command -v ifconfig)"
command_ip="$(command -v ip)"
command_ip6tables_legacy="$(command -v ip6tables-legacy)"
command_ip6tables_nft="$(command -v ip6tables-nft)"
command_iperf="$(command -v iperf)"
command_iptables_legacy="$(command -v iptables-legacy)"
command_iptables_nft="$(command -v iptables-nft)"
command_iw="$(command -v iw)"
command_links="$(command -v links)"
command_links2="$(command -v links2)"
command_ls="$(command -v ls)"
command_lsof="$(command -v lsof)"
command_lynx="$(command -v lynx)"
command_m2r="$(command -v m2r)"
command_md5sum="$(command -v md5sum)"
command_mdp="$(command -v mdp)"
command_mpg123="$(command -v mpg123)"
command_mpg321="$(command -v mpg321)"
command_netstat="$(command -v netstat)"
command_netstat_nat="$(command -v netstat-nat)"
command_nmap="$(command -v nmap)"
command_ntpdate="$(command -v ntpdate)"
command_openssl="$(command -v openssl)"
command_ping="$(command -v ping)"
command_pump="$(command -v pump)"
command_rdate="$(command -v rdate)"
command_reboot="$(command -v reboot)"
command_resolveip="$(command -v resolveip)"
command_route="$(command -v route)"
command_sed="$(command -v sed)"
command_shc="$(command -v shc)"
command_shutdown="$(command -v shutdown)"
command_sleep="$(command -v sleep)"
command_sntp="$(command -v sntp) -S"
command_ss="$(command -v ss)"
command_sysctl="$(command -v sysctl)"
command_tcpdump="$(command -v tcpdump)"
command_tee="$(command -v tee)"
command_torify="$(command -v torify)"
command_traceroute="$(command -v traceroute)"
command_txt2html="$(command -v txt2html)"
command_uname="$(command -v uname)"
command_wget="$(command -v wget)"
command_wpa_passphrase="$(command -v wpa_passphrase)"
command_wpa_supplicant="$(command -v wpa_supplicant)"
command_xrandr="$(command -v xrandr)"
command_zenity="$(command -v zenity)"
command_zgrep="$(command -v zgrep)"
command_lpinfo="$(command -v lpinfo)"
command_lpstat="$(command -v lpstat)"
command_lsblk="$(command -v lsblk)"
command_lsusb="$(command -v lsusb)"
command_lscpu="$(command -v lscpu)"
command_lspci="$(command -v lspci)"
command_lsgpu="$(command -v lsgpu)"
command_lshw="$(command -v lshw)"
command_gs="$(command -v gs)"
command_pdfunite="$(command -v pdfunite)"
command_pdfseparate="$(command -v pdfseparate)"
command_cvlc="$(command -v cvlc)"
command_yad="$(command -v yad)"
####
####
#### :rutina-final-command:
##########  english: variables: variables to declare     ##########
##########  spanish: variables: variables para declarar  ##########
#### :rutina-inicial-config-variables:
####
####
list_rules_conceptual="" ;
config_ip4_localhost="127.0.0.1" ;
config_ip6_localhost="::1" ;
server_waiting="9s" ;
allow_dmz_ip4="no" ; 
allow_dmz_ip6="no" ;
allow_forward_ip4="no" ; 
allow_forward_ip6="no" ; 
allow_gateway_ip4="no" ;
allow_gateway_ip6="no" ;
allow_input_all="no" ;
allow_input_bandwidth="no" ; 
allow_input_maxconnect="no" ;
allow_input_ping="no" ;
allow_input_state="no" ;
allow_mac_blacklist="no" ; 
allow_mac_whitelist="no" ;
allow_shield_maxtries="no"
allow_net_blacklist="no" ;
allow_net_vpn="no" ; 
allow_others_protocols="no" ;
allow_output_all="no" ; 
allow_output_bandwidth="no" ;
allow_output_gid="no" ;
allow_output_maxconnect="no" ;
allow_output_ping="no" ;
allow_output_state="no" ;
allow_output_uid="no" ; 
client_tcp="ssh,http,https" ;
client_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
config_dmz_ip4="" ;
config_dmz_ip6="" ;
config_input_bandwidth="12512" ; 
config_input_maxconnect="72" ; 
config_input_state="new,related,established" ;
config_mac_blacklist=""
config_mac_whitelist="" ;
config_shield_maxtries="12" ;
config_net_blacklist="yandex.com" ;
config_net_vpn="wesnoth.org" ; 
config_others_protocols="icmp,igmp" ;
config_output_bandwidth="512" ;
config_output_gid="root" ;
config_output_maxconnect="72" ;
config_output_state="new,related,established" ;
config_output_uid="root" ;
logserver_prefix_input="fwlog-input::" ; 
logserver_prefix_output="fwlog-output::" ;
logserver_tcp="no" ;
logserver_udp="no" ;
net_ipv4_client="0/0" ; 
net_ipv4_server="0/0" ;
net_ipv6_client="::/0" ;
net_ipv6_server="::/0" ;
server_tcp="" ;
server_udp="" ; 
####
####
#### :rutina-final-config-variables:
##########   english: the basic system variables         ##########
##########   spanish: las variables basicas del sistema  ##########
#### :rutina-inicial-system-variables:
####
####
####    # english: before declared variables for default # spanish: variables declaradas antes por defecto
####
####
####    allow_legacy="" ; allow_nft="" ; allow_ipv4="" ; allow_ipv6="" ; config_shield_maxtries="20" ; config_shield_port="22" ;
####    allow_autolog="" ; server_waiting="9s" ; server_ping_ipv4="fast.com" ; server_ping_ipv6="fast.com" ;
####    serverip_iperf_ipv4="ping.online.net" ; serverport_iperf_ipv4="5001" ; serverip_iperf_ipv6="ping6.online.net" ; serverport_iperf_ipv6="5001" ;
####    graphic_dimension="--width=950 --height=650" ; 
####
####
####       #### english: for all predefined system firewall: EXCEPT custom, and wizards, and load
####       #### spanish: para todos los cortafuegos predefinidos del sistema: EXCEPTO custom, y wizards, y load
allow_legacy=""                     ## fwiptables-file-default ## void or no
allow_nft="no"                          ## fwiptables-file-default ## void or no
allow_ipv4=""                         ## fwiptables-file-default ## void or no
allow_ipv6=""                         ## fwiptables-file-default ## void or no
####       #### english: separate all rules: separate all rules, void or no
####       #### spanish: separar todas las reglas: separar todas las reglas, vacio o no
allow_separate_rules="no"                           ## fwiptables-file-default ## void or no
####       #### english: ssh shield configured to works with ports choose ports tcp with comma separate
####       #### spanish: ssh escudo configurado para funcionar con elegidos puertos tcp con separacion de comas
config_shield_port="22"                   ## fwiptables-file-default ##  void o ports
####       #### english: ssh tries per ip before shield per hour
####       #### spanish: intentos ssh por ip antes del escudo por hora
config_shield_maxtries="10"                 ## fwiptables-file-default ## void or no
####       #### english: close with deny is or DROP or REJECT
####       #### spanish: cierra con denegacion es o DROP or REJECT
config_close_deny="DROP"                   ## fwiptables-file-default ## DROP or REJECT 
####       #### english: auto log from command input
####       #### spanish: automatico log de linea introducida
allow_autolog=""                    ## fwiptables-file-default ## void or no
####       #### english: auto time in command
####       #### spanish: automatico fecha de linea
allow_showtime=""                    ## fwiptables-file-default ## void or no
####       #### english: PING server for default         
####       #### spanish: servidor de PING por defecto    
server_ping_ipv4="fast.com"           ## fwiptables-file-default ## default fast.com
server_ping_ipv6="fast.com"           ## fwiptables-file-default ## default fast.com
####       #### english: TRACEROUTE server for default         
####       #### spanish: servidor de TRACEROUTE por defecto    
server_traceroute_ipv4="fast.com"     ## fwiptables-file-default ## default fast.com
server_traceroute_ipv6="fast.com"     ## fwiptables-file-default ## default fast.com
####       #### english: iperf server for default for test net SPEED                 
####       #### spanish: servidor de iperf por defecto para testear VELOCIDAD de internet    
serverip_iperf_ipv4="ping.online.net"   ## fwiptables-file-default ## default ping.online.net
serverport_iperf_ipv4="5001"            ## fwiptables-file-default ## default 5201
serverip_iperf_ipv6="ping6.online.net"   ## fwiptables-file-default ## default ping.online.net
serverport_iperf_ipv6="5001"            ## fwiptables-file-default ## default 5201
####       #### english: zenity GRAPHIC DIMENSIONS        
####       #### spanish: DIMESIONES GRAFICAS de zenity  
graphic_dimension="--width=950 --height=650"   ## fwiptables-file-default ## default: "--width=950 --height=650"
####       #### english: RADIO URL streaming audio for default
####       #### spanish: direccion de RADIO DE INTERNET por defecto
radio_mp3="http://cadena100-cope-rrcast.flumotion.com/cope/cadena100.mp3" ;   ## fwiptables-file-default ## streaming url
radio_cadena100="http://cadena100-cope-rrcast.flumotion.com/cope/cadena100.mp3" ;   ## fwiptables-file-default ## streaming url
radio_rockfm="http://flucast-b02-06.flumotion.com/cope/rockfm.mp3" ;  ## fwiptables-file-default ## streaming url
radio_kissfm="http://kissfm.kissfmradio.cires21.com/kissfm.mp3" ;  ## fwiptables-file-default ## streaming url
####       #### english: configure a one stablished command or void for automatic command
####       #### spanish: configura un establecido comando o vacio para comando automatico
favorite_text_editor=""          ## fwiptables-file-default ## void or command
favorite_text_dialog=""          ## fwiptables-file-default ## void or command
favorite_graphicall_dialog=""    ## fwiptables-file-default ## void or command
favorite_text_browser=""         ## fwiptables-file-default ## void or command
favorite_date_command=""         ## fwiptables-file-default ## void or command
favorite_dhcp_command=""         ## fwiptables-file-default ## void or command
favorite_radio_command=""        ## fwiptables-file-default ## void or command
#### #### variables to modify for qemu
qemu_name="Qemu VM"						 ## fwiptables-file-default ## variable qemu
memory_ram="1500M"						 ## fwiptables-file-default ## variable qemu
processor_smp="4"						 ## fwiptables-file-default ## variable qemu
architecture_vm="qemu-system-i386"			         ## fwiptables-file-default ## variable qemu
directory_vm="/qemu"						 ## fwiptables-file-default ## variable qemu
default_vm="default-vm"						 ## fwiptables-file-default ## variable qemu
display_vm="gtk"						 ## fwiptables-file-default ## variable qemu						
language_vm="es"						 ## fwiptables-file-default ## variable qemu
#### #### english: look  #### spanish: apariencia
quad=" ####" ; 
cinco="#####" ;
tab="     " ;
rallica="_____" ;
sinco=" || " ;
title_md="### " ;
text_md="     " ;
brake_md="---" ;
tabz="### _ _ _ _ _ _ _ " ;
ralla="______________________" ;
duo_md="###" ;
header_ok="### || || [ ok ] ||" ;
cincuenta="##################################################" ;
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_waiting_cli="$duo_md [ info ] [ cli ] [ Wait several seconds.. ] [ With aprox several seconds ] [ press control-c to cancel ] "
head_waiting_gui="$duo_md [ info ] [ gui ] [ Wait several seconds.. ] [ With aprox several seconds ] [ press control-c to cancel ] "
head_waiting_log="$duo_md [ info ] [ log ] [ Wait several seconds.. ] [ With aprox several seconds ] [ press control-c to cancel ] "
head_waiting_web="$duo_md [ info ] [ web ] [ Wait several seconds.. ] [ With aprox several seconds ] [ press control-c to cancel ] "
head_waiting_help="$duo_md [ info ] [ help: help in rst txt format ] [ Loading.. ]"
head_waiting_info="$duo_md  [ info ] [ info: info in plain txt format ] [ loading.. ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_autolog="[ $cmd_binary ] [ $cmd_version ] [ $(date) ] [ $first_option $second_option $third_option ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_cover="$duo_md || || [ ok ] || [ Firewall ] [ Program: $cmd_config $cmd_version ] |||"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_load="$duo_md || || [ ok ] || [ Load firewall ] [ netfilter iptables ] || ||"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_preferences="$duo_md [ info ] [ Configure preferences with: ] [ $cmd_binary preferences-modify ]"
#### #### info list rules
message_info_rules="$duo_md || || [ ok ] || [ Configure ] [ Configure: $cmd_binary preferences-modify ] || ||"
#### #### english: echo void            #### spanish: impresion vacia
nada="echo -n" ; 
#### #### english: echo void            #### spanish: impresion vacia
nada="$(echo -n)" ; 
#### #### several languages 
tab_lang_english=" eng "
tab_lang_spanish=" spa "
#### #### your language 
#### show_lang_english=""
#### show_lang_spanish="##"
#### #### english: without cli or gui   #### spanish: sin cli o gui
message_without_cli="$duo_md [ fail ] [ cli ] [ Without support for output cli for this option ]"
message_without_gui="$duo_md [ fail ] [ gui ] [ Without support for output gui for this option ]"
message_without_web="$duo_md [ fail ] [ web ] [ Without support for output web for this option ]"
message_without_help="$duo_md [ fail ] [ help in rst ] [ Without support for output rst for this option ]"
message_without_info="$duo_md [ fail ] [ info in txt ] [ Without support for output info for this option ]"
message_without_info="$duo_md [ fail ] [ log ] [ Without support for output log for this option ]"
message_without_info="$duo_md [ fail ] [ null ] [ Without support for output null for this option ]"
####       #### english: close from graphicall with timeout in seconds #####
####       #### spanish: cierre desde graficos con retardo en segundos #####
close_graphicall="1"
####       #### english: message to close graphicall with timeout in seconds #####
####       #### spanish: mensage de cierre para graficos con retardo en segundos #####
mensage_timeout="Closing gui menu in $close_graphicall seconds"
####       #### english: autovariables        #### spanish: autovariables
launch_firewall="no" ;   #  autoconfigure with launch iptables rules
####       #### english: web links  #### spanish: enlaces web
url_web_main="https://sourceforge.net/projects/f-iptables/"
url_web_latest="https://sourceforge.net/projects/f-iptables/files/latest/download" ;
url_web_changes="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-changes?format=raw" ;
url_index_files="https://sourceforge.net/projects/f-iptables/files/" ;
url_complete_files="https://sourceforge.net/projects/f-iptables/files/fwiptables-complete-v6" ;
url_minimal_files="https://sourceforge.net/projects/f-iptables/files/fwiptables-minimal-v6" ;
url_web_development="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-fwiptables?format=raw" ;
url_web_minidevelopment="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-minimal-fwiptables?format=raw" ;
url_web_tree="https://sourceforge.net/p/f-iptables/code/ci/master/tree/" ;
url_web_git="https://git.code.sf.net/p/f-iptables/code f-iptables-code" ;
flicense="Copyleft, without warranty, gnu license GPL v2."
license_gpl="https://sourceforge.net/p/f-iptables/code/ci/master/tree/LICENSE.txt?format=raw"
url_web_domain="https://sourceforge.net/p/f-iptables/code/ci/master/tree/domain-list?format=raw"
####
####
#### english: if wrong in whithout_option
#### spanish: si esta mal definidad definida whithout_option
####
####
default_security="options-mini"
####
####
#### fwiptables_installed=""
####
####
#### :rutina-final-system-variables:
##########  english: permanent files: files and folders from fwiptables          ##########
##########  spanish: archivos permanentes: archivos y carpetas desde fwiptables  ##########
#### :rutina-inicial-files:
####
####
#### english: permanent directory:   permanent directory and path directory config files
#### spanish: directorio permanente: directorios permanentes y ruta de directorios de los archivos de configuracion
####
####
directory_data="$HOME/.config/$cmd_config"
if [ ! -d "$directory_data" ]; then $command_mkdir -p $directory_data &> /dev/null ; fi
####
####
#### english: directory tree 
#### spanish: arbol de directorio
####
####
directory_fwrecover="$directory_data/fwiptables-fwrecover"
directory_default="$directory_data/fwiptables-default"
directory_config="$directory_data/fwiptables-config"
directory_log="$directory_data/fwiptables-log"
directory_shell="$directory_data/fwiptables-shell"
####
####
#### english: templates cfg
#### spanish: plantillas cfg
####
####
defaultcfg="$directory_config/default-full-english.cfg"             
defaultfullcfg_eng="$directory_config/default-full-english.cfg"     
defaultfullcfg_spa="$directory_config/default-full-spanish.cfg"     
defaultminicfg_eng="$directory_config/default-mini-english.cfg"     
defaultminicfg_spa="$directory_config/default-mini-spanish.cfg" 
####
####
#### english: default config to shell
#### spanish: default config to shell
####
####
default_preferences="$directory_shell/default_preferences"
####
####
#### english: file log:     log files and path files config files
#### spanish: archivos log: archivos log y ruta de los archivos de configuracion
####
####
default_filelog="$directory_log/default_filelog"
default_autolog="$directory_log/default_autolog"
####
####
##########    english: temporal files: files for fwiptables ##########
##########    spanish: archivos temporales: de fwiptables   ##########
####
####
#### for tmp in /tmp  , old-use ,  then directory_temporal_path="/tmp/$cmd_binary-$cmd_version-tmp"
#### for tmp in /root , new-use ,  then directory_temporal_path="$HOME/.$cmd_binary-$cmd_version-tmp"
####
####
#### english: temporal directory
#### spanish: directorio temporal
####
####
directory_tmp="$HOME/.cache/$cmd_config"
directory_temporal="$directory_tmp/tmp"
####
####
#### english: temporal files
#### spanish: archivos temporales
####
####
temporal_text="$directory_temporal/$first_option-$second_option-$third_option"
temporal_textfinal="$directory_temporal/$first_option-$second_option-$third_option-textfinal"
temporal_gui="$directory_temporal/$first_option-$second_option-$third_option"
temporal_guifinal="$directory_temporal/$first_option-$second_option-$third_option-guifinal"
output_log="$directory_temporal/$first_option-$second_option-$third_option"
output_logfinal="$directory_temporal/$first_option-$second_option-$third_option-logfinal"
####
####
#### :rutina-final-files:
##########   english: if sane config directory                       ##########
##########   spanish: comprobar sanos directorios de configuracion   ##########
#### :rutina-inicial-dir-sane:
####
####
if [ ! -d "$directory_data" ]; then $command_mkdir -p $directory_data &> /dev/null ; fi
if [ ! -d "$directory_temporal" ]; then $command_mkdir -p $directory_temporal &> /dev/null ; fi
if [ ! -d "$directory_config" ]; then $command_mkdir -p "$directory_config" &> /dev/null ; fi
if [ ! -d "$directory_fwrecover" ]; then $command_mkdir -p "$directory_fwrecover" &> /dev/null ; fi
if [ ! -d "$directory_default" ]; then $command_mkdir -p "$directory_default" &> /dev/null ; fi
if [ ! -d "$directory_log" ]; then $command_mkdir -p "$directory_log" &> /dev/null ; fi
if [ ! -d "$directory_shell" ]; then $command_mkdir -p "$directory_shell" &> /dev/null ; fi
####
####
#### :rutina-final-dir-sane:
##########    english: Update variables             ##########
##########    spanish: Actualiza variables          ##########
#### :rutina-inicial-update-variables:
####
####
####     #### english: launch default for update variables
####     #### spanish: lanza default para actualizar variables
####
####
if [ -f "$default_preferences" ]; then source "$default_preferences" ; fi
####
####
####  realice sane very important variables post by default_preferences
####
####
case "$allow_legacy"           in "no")     ;; *) allow_legacy=""             ;; esac
case "$allow_nft"              in "no")     ;; *) allow_nft=""                ;; esac
case "$allow_ipv4"             in "no")     ;; *) allow_ipv4=""               ;; esac
case "$allow_ipv6"             in "no")     ;; *) allow_ipv6=""               ;; esac
case "$list_rules_conceptual"  in "$NULL")  ;; *) list_rules_conceptual=" -n" ;; esac
case "$config_close_deny"      in "ACCEPT") ;; "DROP")   ;; "REJECT") ;; "LOG") ;; *) config_close_deny="REJECT"  ;; esac
####
####
####
####
####
#### english: if null option is void return default to mini-options
#### spanish: si la opcion por defecto esta vacia vuelve a mini-options
####
####
if [ "$whithout_option" == "$NULL" ] ; then whithout_option="$default_security" ; fi
####
####
#### :rutina-final-update-variables:
##########      english: search favorite text editor: favorite editor text     ##########
##########      spanish: busca preferido editor: favorite editor de texto     ##########
#### :rutina-inicial-favorite-text-editor:
####
####
if [ "$favorite_text_editor" == "$NULL" ]; then
if [ "$command_vi"  != "$NULL" ]  ; then    favorite_text_editor="$command_vi"      ; fi
if [ "$command_vim"  != "$NULL" ]  ; then   favorite_text_editor="$command_vim"     ; fi
if [ "$command_nano"  != "$NULL" ] ; then   favorite_text_editor="$command_nano"    ; fi
if [ "$command_pico" != "$NULL" ] ; then  favorite_text_editor="$command_pico"      ; fi
if [ "$command_editor" != "$NULL" ] ; then  favorite_text_editor="$command_editor"  ; fi
fi
####
####
#### :rutina-inicial-favorite-text-editor:
##########      english: search favorite text dialog: favorite text dialog     ##########
##########      spanish: busca preferido text dialogo: favorite text dialog    ##########
#### :rutina-inicial-favorite-text-dialog:
####
####
if [ "$favorite_text_dialog" == "$NULL" ]; then
if [ "$command_dialog"  != "$NULL" ]  ; then  favorite_text_dialog="$command_dialog  "  ; fi
if [ "$command_whiptail" != "$NULL" ] ; then  favorite_text_dialog="$command_whiptail"  ; fi
fi
####
####
#### :rutina-inicial-favorite-text-dialog:
##########      english: search favorite dialog: favorite dialog     ##########
##########      spanish: busca preferido dialogo: favorite dialog   ##########
#### :rutina-inicial-favorite-graphicall-dialog:
####
####
if [ "$favorite_graphicall_dialog" == "$NULL" ]; then
if [ "$command_zenity"  != "$NULL" ] ; then  favorite_graphicall_dialog="$command_zenity"   ; fi
if [ "$command_yad"     != "$NULL" ] ; then  favorite_graphicall_dialog="$command_yad"      ; fi
fi
####
####
#### :rutina-inicial-favorite-graphicall-dialog:
##########      english: search favorite browser: favorite browser     ##########
##########      spanish: busca preferido navegador: favorite browser   ##########
#### :rutina-inicial-favorite-text-browser:
####
####
if [ "$favorite_text_browser" == "$NULL" ]; then
if [ "$command_links"  != "$NULL" ] ; then  favorite_text_browser="$command_links"   ; fi
if [ "$command_links2" != "$NULL" ] ; then  favorite_text_browser="$command_links2"  ; fi
if [ "$command_lynx"   != "$NULL" ] ; then  favorite_text_browser="$command_lynx"    ; fi
if [ "$command_elinks" != "$NULL" ] ; then  favorite_text_browser="$command_elinks"  ; fi
fi
####
####
#### :rutina-inicial-favorite-text-browser:
##########      english: search favorite dhcp Discover ip net     ##########
##########      spanish: busca preferido dhcp Descubre la ip      ##########
#### :rutina-inicial-favorite-dhcp-command:
####
####
if [ "$favorite_dhcp_command" == "$NULL" ]; then
if [ "$command_dhcpcd"  != "$NULL" ] ;         then  favorite_dhcp_command="$command_dhcpcd"           ; fi
if [ "$command_dhclient_script" != "$NULL" ] ; then  favorite_dhcp_command="$command_dhclient_script"  ; fi
if [ "$command_dhclient"   != "$NULL" ] ;      then  favorite_dhcp_command="$command_dhclient"         ; fi
fi
####
####
#### :rutina-final-favorite-dhcp-command:
##########      english: search favorite date: favorite date command        ##########
##########      spanish: busca preferida fecha: favorita comando de fecha   ##########
#### :rutina-inicial-favorite-date-command:
####
####
if [ "$favorite_date_command" == "$NULL" ]; then
if [ "$command_rdate"   != "$NULL" ]; then  favorite_date_command="$command_rdate -4 -a -n"  ; fi
if [ "$command_sntp"    != "$NULL" ]; then  favorite_date_command="$command_sntp"            ; fi
if [ "$command_ntpdate" != "$NULL" ]; then  favorite_date_command="$command_ntpdate"         ; fi
fi
####
####
#### :rutina-final-favorite-date-command:
##########      english: search favorite music player            ##########
##########      spanish: busca preferida reproductor de musica   ##########
#### :rutina-inicial-favorite-radio-command:
####
####
if [ "$favorite_radio_command" == "$NULL" ]; then
if [ "$command_cvlc" != "$NULL" ]; then  favorite_radio_command="$command_cvlc"     ; fi
if [ "$command_mpg321" != "$NULL" ]; then  favorite_radio_command="$command_mpg321" ; fi
if [ "$command_mpg123" != "$NULL" ]; then  favorite_radio_command="$command_mpg123" ; fi
fi
####
####
#### :rutina-final-favorite-radio-command:
##########    english: ALIAS  simple y firewall y campus       ##########
##########    spanish: ALIAS  simple y cortafuegos y campo     ##########
#### :rutina-inicial-alias-simple:
####
####
##########     ALIAS SIMPLE
##########     ALIAS SIMPLE
####
####
#### english:  alias firewall-list with conceputal firewall-conceptual:
####
####
#### english:  alias firewall-list with numeral firewall-numeral:
####
####
case "$first_option" in
"ls4")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="list4"  ;;
"ls6")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="list6"  ;;
"list4")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="list4"  ;;
"list6")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="list6"  ;;
"status") list_rules_conceptual="no" ; first_option="status" ;;
"ls4")    list_rules_conceptual="" ;;
"ls6")    list_rules_conceptual="" ;;
"list4")  list_rules_conceptual="" ;;
"list6")  list_rules_conceptual="" ;;
"status") list_rules_conceptual="" ;;
"list-alltables") list_rules_conceptual="" ;;
"list-filter4")   list_rules_conceptual="" ;;
"list-filter5")   list_rules_conceptual="" ;;
"list-nat4")   list_rules_conceptual="" ;;
"list-nat6")   list_rules_conceptual="" ;;
"list-raw4")   list_rules_conceptual="" ;;
"list-raw6")   list_rules_conceptual="" ;;
"list-mangle4")   list_rules_conceptual="" ;;
"list-mangle6")   list_rules_conceptual="" ;;
"list-security4")   list_rules_conceptual="" ;;
"list-security6")   list_rules_conceptual="" ;;
"lsn4")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn4"  ;;
"lsn6")    list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn6"  ;;
"listn4")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn4"  ;;
"listn6")  list_rules_conceptual="no" ; first_option="-txt" ; second_option="listn6"  ;;
"statusn") list_rules_conceptual="no" ; first_option="statusn"  ;;
"listn-alltables") list_rules_conceptual="no" ; first_option="list-alltables" ;;
"listn-filter4")   list_rules_conceptual="no" ; first_option="list-filter4"   ;;
"listn-filter6")   list_rules_conceptual="no" ; first_option="list-filter6"   ;;
"listn-nat4")   list_rules_conceptual="no" ; first_option="list-nat4" ;;
"listn-nat6")   list_rules_conceptual="no" ; first_option="list-nat6" ;;
"listn-raw4")   list_rules_conceptual="no" ; first_option="list-raw4" ;;
"listn-raw6")   list_rules_conceptual="no" ; first_option="list-raw6" ;;
"listn-mangle4")   list_rules_conceptual="no" ; first_option="list-mangle4"     ;;
"listn-mangle6")   list_rules_conceptual="no" ; first_option="list-mangle6"     ;;
"listn-security4")   list_rules_conceptual="no" ; first_option="list-security4" ;;
"listn-security6")   list_rules_conceptual="no" ; first_option="list-security6" ;;
esac
case "$list_rules_conceptual" in "$NULL") list_rules_conceptual="" ;; *) list_rules_conceptual=" -n"  ;; esac
####
####
#### english:  alias alias simple for output gui, -txt or -cli or -gui and more
####
####
if [ "$first_option" == "tui-menu"  ] ; then first_option="cli-menu"  ; fi
if [ "$first_option" == "-tui-menu"  ] || [ "$first_option" == "--tui-menu"  ] ; then first_option="cli-menu"  ; fi
if [ "$first_option" == "-cli-menu"  ] || [ "$first_option" == "--cli-menu"  ] ; then first_option="cli-menu"  ; fi
if [ "$first_option" == "-gui-menu"  ] || [ "$first_option" == "--gui-menu"  ] ; then first_option="gui-menu"  ; fi
if [ "$first_option" == "-gui-shell" ] || [ "$first_option" == "--gui-shell" ] ; then first_option="gui-shell" ; fi
if [ "$first_option" == "text" ] || [ "$first_option" == "--text" ]   ; then first_option="-txt"  ; fi
if [ "$first_option" == "tui"  ] || [ "$first_option" == "--tui" ]    ; then first_option="-cli"  ; fi
if [ "$first_option" == "txt"  ] || [ "$first_option" == "--txt"  ]   ; then first_option="-txt"  ; fi
if [ "$first_option" == "cli"  ] || [ "$first_option" == "--cli"  ]   ; then first_option="-cli"  ; fi
if [ "$first_option" == "gui"  ] || [ "$first_option" == "--gui"  ]   ; then first_option="-gui"  ; fi
if [ "$first_option" == "web"  ] || [ "$first_option" == "--web"  ]   ; then first_option="-web"  ; fi
if [ "$first_option" == "tor"  ] || [ "$first_option" == "--tor"  ]   ; then first_option="-tor"  ; fi
if [ "$first_option" == "help" ] || [ "$first_option" == "--help"  ]  ; then first_option="-help" ; fi
if [ "$first_option" == "-h"   ] || [ "$first_option" == "--help"  ] ; then first_option="-help" ; fi
if [ "$first_option" == "-t"   ] || [ "$first_option" == "--txt"  ]  ; then first_option="-txt"  ; fi
if [ "$first_option" == "-c"   ] || [ "$first_option" == "--cli"  ]  ; then first_option="-cli"  ; fi
if [ "$first_option" == "-g"   ] || [ "$first_option" == "--gui"  ]  ; then first_option="-gui"  ; fi
if [ "$first_option" == "-i"   ] || [ "$first_option" == "--info"  ] ; then first_option="-info" ; fi
if [ "$first_option" == "-w"   ] || [ "$first_option" == "--web"  ]  ; then first_option="-web"  ; fi
if [ "$first_option" == "-l"   ] || [ "$first_option" == "--log"  ]  ; then first_option="-log"  ; fi
if [ "$first_option" == "-n"   ] || [ "$first_option" == "--null"  ] ; then first_option="-null" ; fi
####
####
#### english: alias simple for options commons
####
####
if [ "$first_option" == "$NULL" ]  ; then first_option="options-mini" ; fi
####
####
if [ "$first_option" == "options" ] ; then first_option="options-all" ; fi
if [ "$first_option" == "mini-options" ] ; then first_option="options-mini" ; fi
if [ "$first_option" == "options-full" ] ; then first_option="options-all" ; fi
if [ "$first_option" == "full-options" ] ; then first_option="options-all" ; fi
if [ "$first_option" == "examples" ] ; then first_option="options-examples"; fi
if [ "$first_option" == "output-interface" ] ; then first_option="options-interface" ; fi
if [ "$first_option" == "output" ] ; then first_option="options-interface" ; fi
if [ "$first_option" == "ntp" ] ; then first_option="ntpdate-client"; fi
if [ "$first_option" == "dhcp" ] ; then first_option="dhcp-client"; fi
if [ "$first_option" == "sentlog" ] ; then first_option="filelog"; fi
if [ "$first_option" == "radio" ] ; then first_option="radio-mp3"; fi
if [ "$first_option" == "regen" ] ; then first_option="regen-config"; fi
if [ "$first_option" == "cfg" ] ; then first_option="names-config" ; fi
if [ "$first_option" == "cfg-custom" ] ; then first_option="custom" ; fi
if [ "$first_option" == "list-fw" ] ; then first_option="names"; fi
if [ "$first_option" == "ram" ] ; then first_option="free-ram"; fi
if [ "$first_option" == "free" ] ; then first_option="free-ram"; fi
if [ "$first_option" == "ram-free" ] ; then first_option="free-ram"; fi
if [ "$first_option" == "list-allrules" ] ; then first_option="list-alltables"; fi
if [ "$first_option" == "mp3" ] ; then first_option="radio-mp3"; fi
if [ "$first_option" == "ip" ] ; then first_option="ip4"; fi
####
####
####  english: $1 or or $2 or $3 for complete path per file and other excepcions
####
####
if [ "$1" == "-n" ] ; then first_option="-null" ; fi
if [ "$first_option"  = "md5sum"  ] ; then second_option="$2" ; third_option="$3" ; fi
if [ "$second_option" == "md5sum" ]  ; then third_option="$3"  ; quad_option="$4"  ; fi
####
####
#### english:  alias simple for firewall names 
####
####

if [ "$first_option" == "erase-rules" ] ; then first_option="eraserules" ; fi
if [ "$first_option" == "offline" ] ; then first_option="off-line" ; fi
if [ "$first_option" == "clientweb" ] ; then first_option="client-web" ; fi
if [ "$first_option" == "clientvpn" ] ; then first_option="client-vpn" ; fi
if [ "$first_option" == "game-minecraft" ] ; then first_option="game-minetest" ; fi
if [ "$first_option" == "game-westnoth" ] ; then first_option="game-wesnoth" ; fi
if [ "$first_option" == "gamesudp" ] ; then first_option="games-shooter" ; fi
if [ "$first_option" == "allpermisive" ] ; then first_option="all-permisive" ; fi
if [ "$first_option" == "torbrowser" ] ; then first_option="client-tor" ; fi
if [ "$first_option" == "tor-browser" ] ; then first_option="client-tor" ; fi
if [ "$first_option" == "client-email" ] ; then first_option="client-mail" ; fi
if [ "$first_option" == "onlyweb-tor" ] ; then first_option="lan-tor" ; fi
if [ "$first_option" == "serversamba" ] ; then first_option="server-samba" ; fi
if [ "$first_option" == "serverprint" ] ; then first_option="server-print" ; fi
if [ "$first_option" == "serverweb" ] ; then first_option="server-web" ; fi
if [ "$first_option" == "serverssh" ] ; then first_option="server-ssh" ; fi
if [ "$first_option" == "serverlamp" ] ; then first_option="server-lamp" ; fi
if [ "$first_option" == "server-ts" ] ; then first_option="server-teamspeak" ; fi
if [ "$first_option" == "server-email" ] ; then first_option="server-mail" ; fi
####
####
#### english:  alias simple for regenerate configurations templates
####
####
case "$first_option" in
"wizard-mini"|"wizard-full"|"new-mini-config"|"new-full-config"|"nueva-mini-config"|"nueva-completa-config")
$cmd_binary regen-config ;; esac
case "$second_option" in
"wizard-mini"|"wizard-full"|"new-mini-config"|"new-full-config"|"nueva-mini-config"|"nueva-completa-config")
$cmd_binary regen-config ;; esac
####
####
#### :rutina-final-alias-simple:
##########    ALIAS CAMPUS
##########    ALIAS CAMPUS
#### :rutina-inicial-alias-campus:
####
####
#### output txt:   |||    General text without warnings
####
####
if [ "$first_option" == "-txt" ]; then case "$second_option" in
####
####
"list4")$cmd_binary list4-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
"list6")$cmd_binary list6-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
"listn4")$cmd_binary listn4-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
"listn6")$cmd_binary listn6-ip &> $temporal_text 
cat $temporal_text | $command_grep -iv Warning:  &> $temporal_textfinal
cat $temporal_textfinal ; exit ;;
####
####
esac ; $cmd_binary "$second_option" "$third_option" "$quad_option"
####
####
exit; fi
####
####
#### output cli:   |||| No cli necesary but works sometimes
####
####
if [ "$first_option" == "-cli" ]
then echo "$head_waiting_cli"
case "$second_option" in
wizard-*) echo "$message_without_cli" ; $cmd_binary $second_option $third_option ;  exit ;;
"nueva-mini-config")  $cmd_binary $second_option $third_option ;  exit ;;
"nueva-completa-config")$cmd_binary $second_option $third_option ;  exit ;;
"new-mini-config")$cmd_binary $second_option $third_option ;  exit ;;
"new-full-config")$cmd_binary $second_option $third_option ;  exit ;;
"modify-config")$cmd_binary $second_option $third_option ;  exit ;;
"preferences-modify")$cmd_binary preferences-modify ; exit ;;
nmap-*) echo "$message_without_cli" ; $cmd_binary $second_option $third_option  ;  exit ;;
"radio") echo "$message_without_cli" ; $cmd_binary $second_option $third_option ;  exit ;;
"speed-cpu") echo "$message_without_cli" ; $cmd_binary $second_option $third_option ;  exit ;;
"info-nodes") echo "$message_without_cli" ;  exit ;;
"game-domain")$cmd_binary game-domain -cli ; exit ;;
"game-word")$cmd_binary game-word -cli ; exit ;;
"game-number")$cmd_binary game-number -cli ; exit ;;
"addblock-on") echo "$message_without_cli" ; $cmd_binary $second_option $third_option  ;  exit ;;
"gpg-notes")$cmd_binary $second_option $third_option ; exit ;;
"clean-tmp")$cmd_binary $second_option $third_option ; exit ;;
"log-search") 
pattern="$(dialog --stdout --title "type the pattern to search" --inputbox "example: sshd" 0 0)" 
clear; $cmd_binary log-search $pattern ; exit ;; 
log-*) echo "$message_without_cli" ; $cmd_binary $second_option $third_option ;  exit ;;
fw-*)  echo "$message_without_cli" ; $cmd_binary $second_option $third_option  ;  exit ;;
"hosts") echo "$message_without_cli" ; $cmd_binary hosts ; exit ;;
*) dialog --title "  Cli Output || $cmd_binary ||" \
--msgbox "$($cmd_binary $second_option $third_option)" 0 0 ;  clear ; exit ;;
####
####
esac ; fi
####
####
#### output gui:  ||| Yes gui , with gui
####
####
if [ "$first_option" == "-gui" ] 
then case "$second_option" in 
"game_word") first_option="game-word" ; second_option="gui" ;;
"game_number") first_option="game-number" ; second_option="gui" ;;
"game_domain") first_option="game-domain" ; second_option="gui" ;;
"rule-del-num") first_option="rule-del-num" ; second_option="gui" ;;
"gpg-notes") first_option="gpg-notes" ; second_option="gui" ;;
"clean-tmp")$cmd_binary clean-tmp &> /dev/null ; $favorite_graphicall_dialog --info --text "$(echo [ ok ] [ deleted cache $fwiptables ])"; exit ;;
"info-nodes") echo "$message_without_gui" ;  exit ;;
esac ; fi
####
####
#### output log   ||| No log
####
####
if [ "$first_option" == "-log" ]
then case "$second_option" in 
"wizard") echo "$message_without_log" ; exit ;;
"wizard-full") echo "$message_without_log" ; exit ;;
"new-mini-config") echo "$message_without_log" ; exit ;;
"nueva-mini-config") echo "$message_without_log" ; exit ;;
"new-full-config") echo "$message_without_log" ; exit ;;
"nueva-completa-config") echo "$message_without_log" ; exit ;;
"modify-config")  echo "$message_without_log" ; exit ;;
"gpg-notes") echo "$message_without_log" ; exit ;;
"wpa-save") echo "$message_without_log" ; exit ;;
pc-*) echo "$message_without_log" ; exit ;;
game-*) echo "$message_without_log" ; exit ;;
radio-*) echo "$message_without_log" ; exit ;;
rule-*) echo "$message_without_log" ; exit ;;
esac 
####
####
echo "$head_waiting_log"
echo "### ### [ info ] [ $second_option $third_option $quad_option ] [ $($command_date) ]" &> $output_log
$cmd_binary $second_option $third_option $quad_option &>> $output_log
cat $output_log | $command_grep -iv Warning: &>> $default_filelog
echo "$duo_md [  ok  ] [ Output sended to $default_filelog ] [ show: $cmd_binary filelog ]" ;
exit ; fi
####
####
#### output null  ||||   No null
####
####
if [ "$first_option" == "-null" ]
then case "$second_option" in 
"wizard") echo "$message_without_null" ; exit ;;
"wizard-full") echo "$message_without_null" ; exit ;;
"new-mini-config") echo "$message_without_null" ; exit ;;
"nueva-mini-config") echo "$message_without_null" ; exit ;;
"new-full-config") echo "$message_without_null" ; exit ;;
"nueva-completa-config") echo "$message_without_null" ; exit ;;
"gpg-notes") echo "$message_without_null" ; exit ;;
"wpa-save") echo "$message_without_null" ; exit ;;
pc-*) echo "$message_without_null" ; exit ;;
game-*) echo "$message_without_null" ; exit ;;
radio-*) echo "$message_without_null" ; exit ;;
rule-*) echo "$message_without_null" ; exit ;;
esac
####
####
$cmd_binary "$second_option" "$third_option" &> /dev/null
exit ; fi
####
####
#### output web:    |||    No web
####
####
if [ "$first_option" == "-web" ] ; then
if [ "$command_txt2html" == "$NULL" ]; then echo [ fail ] [ install txt2html command ]; exit; fi
if [ "$favorite_text_browser" == "$NULL" ]; then echo [ fail ] [ install one text browser ]; exit; fi
case "$second_option" in 
"$NULL") echo "$duo_md [ info ] [ use: $cmd_binary -web option-choosen, OR to see options use: $cmd_binary options ]" ;
$cmd_binary ; exit ;;
*-config) echo "$message_without_web" ; exit ;;
game-*) echo "$message_without_web" ; exit ;;
game-*) echo "$message_without_web" ; exit ;;
rule-del-number) echo "$message_without_web" ; exit ;;
wpa-save)  echo "$message_without_web" ; exit ;;
wpa-load)  echo "$message_without_web" ; exit ;;
weather)   echo "$message_without_web" ; $cmd_binary $second_option $third_option ; exit ;;
esac
echo $head_waiting_web
rm "$temporal_text"* &> /dev/null
$cmd_binary $second_option $third_option &> $temporal_text.1 ;
$command_sed -e 's/^/ /' $temporal_text.1 &> $temporal_text.2  ;
$command_txt2html --outfile $temporal_text.html $temporal_text.2 ;
$favorite_text_browser $temporal_text.html
exit ; fi
####
####
#### first_option tor   |||  with tor
####
####
if [ "$first_option" == "tor"  ] || [ "$first_option" == "-tor"  ] ; then $nada
echo "$tab [ info ] [ to connect web is necessary tor configured and browser elinks or lynx ]"
torify -i $cmd_binary $second_option $third_option ; exit ; fi
####
####
#### output help:    |||  where is the help 
####
####
if [ "$first_option" == "-help" ]  
then echo "$head_waiting_info"
case "$second_option" in
"$NULL") echo "[ fail ] [ use: $cmd_binary -help option-choosen, OR to see options use: $cmd_binary ]" ; $cmd_binary; exit ;;
firewall-*) ;; tool-*) ;; show-*) ;; group-options) ;; options-interface) ;;
default-*|"install"|"uninstall"|"upgrade") second_option="default-state" ;;
"ayuda"|"help"|"readme"|"leeme"|"all-options"|"all-help"|"options-interface") second_option="help-help"; third_option="" ;;
txt|cli|gui|log|web|"info"|rst|"help"|cli-menu|gui-menu|gui-shell) second_option="options-interface"; third_option="" ;;
"ayuda"|"help"|"readme"|"leeme"|"options-help"|"all-help") second_option="options-help"; third_option="" ;;
"stop"|"continue"|"reset"|"names"|"actual"|"show"|"save"|"load") second_option="firewall-list"; third_option="" ;;
list*|"status"|"ls"|"ls4"|"ls6") second_option="firewall-list"; third_option="" ;;
"eraserules"|wizard-*|"custom"|"off-line"|"all-permisive"|lan-*|game-*|games-*|server-*|shield-*|client-*)
second_option=" firewall-launch"; third_option="" ;;
*-config) second_option=" firewall-custom"; third_option="" ;;
info-*|lsof|ss|tcpdump|netstat|netstat-nat|web-cert) second_option="tool-sockets"; third_option="" ;;
ipforward-*) second_option="tool-forward"; third_option="" ;;
tracetcp-*|speed-ip4|speed-ip6)  second_option="tool-tcp"; third_option="" ;;
host|dig|resolveip|geoip|ntpdate-client) second_option="tool-udp"; third_option="" ;;
iw-info|iw-scan|wpa-save|wpa-load|dhcp-client) second_option="tool-connect"; third_option="";;
rule-del-num|rule-del-shield|rule-add-shield) second_option="tool-rule"; third_option="" ;;
traceicmp-*|ping-*)  second_option="tool-icmp"; third_option="" ;;
nmap-*)  second_option="tool-nmap"; third_option="" ;;
sudo-*|alias-*)  second_option="tool-sudofw"; third_option="" ;;
game-*|game-*)  second_option="tool-game"; third_option="" ;;
free-ram|speed-ram|speed-disk|speed-glx|radio-mp3)  second_option="tool-speed"; third_option="" ;;
"install"|"dev-upgrade"|"upgrade"|"howto-upgrade"|"clean-tmp")  second_option="tool-install"; third_option="" ;;
addblock-*)  second_option="tool-addblock"; third_option="" ;;
new-versions|dev-version|dev-changes|code|gpg-notes)  second_option="tool-dev"; third_option="" ;;
lpinfo|lsblk|lsusb|lscpu|lspci|lsgpu|lshw)  second_option="show-hardware"; third_option="" ;;
log-search|log-ssh|filelog|sentlog|autolog)  second_option="show-log"; third_option="" ;;
hosts|resolv.conf|protocols|services|hosts.*|*-default)  second_option="show-etc"; third_option="" ;;
about|version|depends|license|config-eng|config-spa)  second_option="help-about"; third_option="" ;;
all-help|"help"|ayuda|notes|options|"info"|mini-options|full-options|group-options)
 second_option="help-help"; third_option="" ;;
*) echo "$message_without_info" ;  exit ;;
esac
$cmd_binary $second_option
exit ; fi
####
####
#### output info:      |||    Whereis the info
####
####
if [ "$first_option" == "-info" ] ; then
####
if [ "$command_m2r" == "$NULL" ]; then $nada ;
echo "[ fail ] [ install m2r command ] [ or launch $cmd_binary -help option ]" ;
exit; fi
####
if [ "$command_txt2html" == "$NULL" ]; then $nada
echo "[ fail ] [ install txt2html command ] [ or launch $cmd_binary -help option ]" ;
exit; fi
####
echo $head_waiting_help
case "$second_option" in
"$NULL") echo "[ fail ] [ use: $cmd_binary -info option-choosen, OR to see options use: $cmd_binary options ]" ;
$cmd_binary ; exit ;;
firewall-*) ;; tool-*) ;; show-*) ;; group-options) ;; options-interface) ;;
default-*|"install"|"uninstall"|"upgrade") second_option="default-state" ;;
"ayuda"|"help"|"readme"|"leeme"|"all-options"|"all-help"|"options-interface") second_option="help-help"; third_option="" ;;
"stop"|"continue"|"reset"|"names"|"actual"|"show"|"save"|"load") second_option="firewall-control"; third_option="" ;;
list*|"status"|"ls"|"ls4"|"ls6") second_option="firewall-list"; third_option="" ;;
"eraserules"|wizard-*|"custom"|"off-line"|"all-permisive"|lan-*|game-*|games-*|server-*|shield-*|client-*)
second_option=" firewall-launch"; third_option="" ;;
*-config) second_option=" firewall-custom"; third_option="" ;;
info-*|lsof|ss|tcpdump|netstat|netstat-nat|web-cert) second_option="tool-sockets"; third_option="" ;;
ipforward-*) second_option="tool-forward"; third_option="" ;;
tracetcp-*|speed-ip4|speed-ip6)  second_option="tool-tcp"; third_option="" ;;
host|dig|resolveip|geoip|ntpdate-client) second_option="tool-udp"; third_option="" ;;
iw-info|iw-scan|wpa-save|wpa-load|dhcp-client) second_option="tool-connect"; third_option="";;
rule-del-num|rule-del-shield|rule-add-shield) second_option="tool-rule"; third_option="" ;;
traceicmp-*|ping-*)  second_option="tool-icmp"; third_option="" ;;
nmap-*)  second_option="tool-nmap"; third_option="" ;;
sudo-*|alias-*)  second_option="tool-sudofw"; third_option="" ;;
game-*|game-*)  second_option="tool-game"; third_option="" ;;
free-ram|speed-ram|speed-disk|speed-glx|radio-mp3)  second_option="tool-speed"; third_option="" ;;
"install"|"dev-upgrade"|"upgrade"|"howto-upgrade"|"clean-tmp")  second_option="tool-install"; third_option="" ;;
addblock-*)  second_option="tool-addblock"; third_option="" ;;
new-versions|dev-version|dev-changes|code|gpg-notes)  second_option="tool-dev"; third_option="" ;;
lpinfo|lsblk|lsusb|lscpu|lspci|lsgpu|lshw)  second_option="show-hardware"; third_option="" ;;
log-search|log-ssh|sentlog|filelog|autolog)  second_option="show-log"; third_option="" ;;
hosts|resolv.conf|protocols|services|hosts.*|*-default)  second_option="show-etc"; third_option="" ;;
about|version|depends|license|config-eng|config-spa)  second_option="help-about"; third_option="" ;;
all-help|"help"|ayuda|notes|options|"info"|mini-options|full-options|group-options)
 second_option="help-help"; third_option="" ;;
*) echo "$message_without_help" ;  exit ;;
esac
$cmd_binary $second_option $third_option &> $temporal_text.1 ;
$command_sed -e 's/^/ /' $temporal_text.1 &> $temporal_text.2  ;
$command_sed -e 's/\.md\ \]/\.rst\ \]/' $temporal_text.2 &> $temporal_text.3  ;
$command_m2r --overwrite --dry-run --no-underscore-emphasis --disable-inline-math \
$temporal_text.3 | $command_grep -iv "::"  &> $temporal_text.rst ;
cat $temporal_text.rst
exit ; fi
####
####
#### :rutina-final-alias-campus:
##########     english: autolog          ##########
##########     spanish: autoguardado     ##########
#### :rutina-inicial-allow-autolog:
####
####
if [ "$allow_autolog" != "no" ]; then 
head_autolog="[ $cmd_binary ] [ $cmd_version ] [ $(date) ] [ $first_option $second_option $third_option ]"
echo $head_autolog >> $default_autolog ; fi
####
####
#### :rutina-final-allow-autolog:
##########     english: timespam          ##########
##########     spanish: mostrar fecha     ##########
#### :rutina-inicial-allow-timespam:
####
####
if [ "$allow_showtime" != "no" ] ; then
head_timespam="$duo_md || || [ ok ] || [ Date and Time ] [ $(date) ] || || "
echo $head_timespam ; fi
####
####
#### :rutina-final-allow-timespam:
##########   english: intro: show intro      ##########
##########   spanish: intro: muestra intro   ##########
#### :rutina-inicial-intro:
####
####
if  [ "$first_option" == "intro" ]; then echo "$give_cover"
echo "$header_ok [ $first_option ] [ $cmd_binary $cmd_version intro ] [ intro md ] || ||"
echo "$title_md    ###  Fran fwiptables intro.  ###   "
echo "$text_md     [ done ] [ Choose fwiptables-complete working like complete or working like minimal         "
echo "$text_md     # Manage Fran Firewall # configure both iptables netfilter for linux with templates. #      "
echo "$text_md     [ done ] [ Done with support in xtables and/or nftables and ipv4 and/or ipv6 ].             "
echo "$text_md     [ done ] [ Ready to run in command shell cmd, cli-menu, gui-menu, and gui-shell ].          "
echo "$text_md     # Standard firewall # Create one firewall with one wizard and save it in standard file. #   "
echo "$text_md     [ done ] [Control the firewall with the standard iptables files for all tables ].           "
echo "$text_md     # Custom firewall # Create one firewall custom and launch your custom config firewall #.    "
echo "$text_md     [ done ] [ Choose run iptables rules of one firewall with your own config files ].          "
echo "$text_md     # Network tools # Use this firewall with some utilities for ipv4 and ipv6 # .               "
echo "$text_md     [ done ] [ Gone with options-tool works with network utilities.                             "
echo "$text_md     [ done ] [ Gone with options-show show config net files ].                                  "
echo "$brake_md"
echo "$title_md    ###  Fran fwiptables installer.  ###"
echo "$text_md     # $cmd_binary $cmd_version"
#### #### #### 
echo "$text_md     [ info ] [ Install this version from this file    ] [ TYPE: ./fwiptables-$cmd_version install   ]" 
echo "$text_md     [ info ] [ Install lastest version from the web   ] [ TYPE: ./fwiptables-$cmd_version upgrade   ]" 
echo "$text_md     [ info ] [ Uninstall fwiptables from the computer ] [ TYPE: ./fwiptables-$cmd_version uninstall ]" 
echo "$brake_md"
echo "$title_md    ###  Fran fwiptables project.  ###    "
echo "$text_md     # Download the latest version $cmd_name from sourceforge"
echo "$text_md     [ link] [ $url_web_latest ]"
echo "$text_md     # $flicense"
echo "$text_md     [ link ] [ $license_gpl ]"
#### #### #### 
exit; fi
####
####
#### :rutina-final-intro:
##########   english: uninstall:      fwiptables uninstall      ##########
##########   spanish: desinstalador:  fwiptables desistalador   ##########
#### :rutina-inicial-uninstall:
####
####
if [ "$first_option" == "uninstall" ] ; then
echo "$header_ok [ $first_option ] [ $cmd_binary uninstaller ] [ uninstall md ] || ||"
echo "$duo_md [ info ] [ $cmd_binary uninstalling fwiptables-cmd ]"
if  [ -f /usr/bin/fwiptables-cmd ]; then rm /usr/bin/fwiptables-cmd &> /dev/null
echo "$duo_md [ info ] [ deleted binaries ]"
echo "$duo_md [  ok  ] [ /usr/bin/fwiptables-cmd uninstalled ]" ;
else echo "$duo_md [ info ] [ /usr/bin/fwiptables-cmd is not installed ]"; fi
exit; fi
####
####
#### :rutina-final-uninstall:
##########       english: install:    fwiptables install          ##########
##########       spanish: instalador: fwiptables instalador       ##########
#### :rutina-inicial-install:
####
####
if [ "$first_option" == "install" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ $cmd_config $cmd_version installer ] [ install md ] || ||"
####
####
####  english: copy the file to temporal folder and install
####  spanish: copia el archivo a carpeta temporal y instala
#### 
#### 
echo "$duo_md [ info ] [ fwiptables-cmd installing.. ]"
cp "$zero_option" "$directory_temporal/fwiptables-tmp.sh" &> /dev/null
cp "$directory_temporal/fwiptables-tmp.sh" "/usr/bin/fwiptables-cmd" &> /dev/null 
chmod 555 "/usr/bin/fwiptables-cmd" &> /dev/null 
####
####
####  english: generate fwiptables default config and templates
####  spanish: genera fwiptables default configuracion y plantillas
####
####
$cmd_binary preferences-regen &> /dev/null
$cmd_binary regen-config &> /dev/null
####
####
####
####
####   english: Show final status from installer
####   spanish: Muestra el estatus final desde el instalador
####
####
echo "$duo_md [ info ] [ The config dir:        ] [ $directory_data ]"
echo "$duo_md [ info ] [ The tmp dir:           ] [ $directory_tmp  ]"
echo "$duo_md [ info ] [ The Command shell:     ] [ /usr/bin/fwiptables-cmd ]"
if [ -f "/etc/sudoers.d/$cmd_config" ] ; then echo "$duo_md [ info ] [ Privileges ]  $(cat /etc/sudoers.d/$cmd_config ) " ; fi
echo "$duo_md [ info ] [ Grant privileges to user with    ] [ fwiptables-cmd sudofw-adduser user ]"
echo "$duo_md [  ok  ] [ Update configs and variables     ]"
echo "$duo_md [  ok  ] [ Now. Ready to run fwiptables-cmd ]"
exit; fi
####
####
#### :rutina-final-install:
##########       english: upgrade: upgrade in the file /usr/bin/fwiptables        ##########
##########       spanish: upgrade: actualiza en el archivo /usr/bin/fwiptables    ##########
#### :rutina-inicial-upgrade:
####
####
if   [ "$first_option" == "upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ upgrade latest version from web ] [ upgrade md ] || ||"
echo "$duo_md [ info ] [ upgrade  ] [ upgrade $cmd_config at latest version from sourceforge.net web ]"
case "$favorite_text_browser" in
"$NULL")echo "$duo_md [ notice  ] [ install a text web browser for upgrade $cmd_binary ]"; exit ;; esac
echo "$duo_md [ info ] [ upgrade  ] [ upgrade The $cmd_config in file /usr/bin/fwiptables-cmd with $favorite_text_browser command ]"
echo "$duo_md [ info ] [ download ] [ downloading $cmd_config with the command $favorite_text_browser browser ]"
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$duo_md [ info ] [ download ] [ $url_web_latest ]"
echo "$duo_md [ info ] [ download ] [ waiting several seconds .. ]"
$favorite_text_browser -source "$url_web_latest" &> "$directory_temporal/$cmd_config-upgrader" || echo "[ fail ] [ disconnected ]"
chmod ugo+rwx "$directory_temporal/$cmd_config-upgrader" &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -f "$directory_temporal/$cmd_config-upgrader" ] ;
then echo "$duo_md [  ok  ] [ download ] [ downloaded $cmd_config latest version ]"
$directory_temporal/$cmd_config-upgrader install ; 
else echo "$duo_md [ fail ] [ install fail ]"; fi
exit ; fi
####
####
#### :rutina-final-upgrade:
##########    english: dev-upgrade: upgrade in the file /usr/bin/fwiptables       ##########
##########    spanish: dev-upgrade: actualiza en el archivo /usr/bin/fwiptables   ##########
#### :rutina-inicial-dev-upgrade:
####
####
if  [ "$first_option" == "dev-upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ upgrade development version from web ] [ upgrade md ] || ||"
echo "$duo_md [ info ] [ upgrade  ] [ upgrade $cmd_config at development version from sourceforge.net git ]"
case "$favorite_text_browser" in "$NULL") echo "$duo_md [ notice  ] [ Install a text web browser for upgrade $cmd_binary ]"; exit ;; esac
echo "$duo_md [ info ] [ upgrade  ] [ upgrade The $cmd_config in file /usr/bin/fwiptables-cmd with $favorite_text_browser command ]"
echo "$duo_md [ info ] [ download ] [ downloading $cmd_config with the command $favorite_text_browser browser ]"
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$duo_md [ info ] [ download ] [ $url_web_development ]"
echo "$duo_md [ info ] [ download ] [ Waiting several seconds .. ]"
$favorite_text_browser -source $url_web_development &> $directory_temporal/$cmd_config-installer || echo "[ fail ] [ disconnected ]"
chmod ugo+rwx $directory_temporal/$cmd_config-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "$directory_temporal/$cmd_config-installer" ] ;
then echo "$duo_md [  ok  ] [ downloaded $cmd_config developer version ]" ;
$directory_temporal/$cmd_config-installer install ; 
else echo "$duo_md [ fail ] [ install fail ]"; fi ;
####
####
exit ; fi
####
####
#### :rutina-final-dev-upgrade:
##########    english: devmini-upgrade: upgrade in the file /usr/bin/fwiptables       ##########
##########    spanish: devmini-upgrade: actualiza en el archivo /usr/bin/fwiptables   ##########
#### :rutina-inicial-devmini-upgrade:
####
####
if   [ "$first_option" == "devmini-upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ upgrade development version from web ] [ upgrade md ] || ||"
echo "$duo_md [ info ] [ upgrade  ] [ upgrade $cmd_config at development version from sourceforge.net git ]"
case "$favorite_text_browser" in "$NULL") echo "$duo_md [ notice  ] [ Install a text web browser for upgrade $cmd_binary ]"; exit ;; esac
echo "$duo_md [ info ] [ upgrade  ] [ upgrade The $cmd_config in file /usr/bin/fwiptables-cmd with $favorite_text_browser command ]"
echo "$duo_md [ info ] [ download ] [ downloading $cmd_config with the command $favorite_text_browser browser ]"
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$duo_md [ info ] [ download ] [ $url_web_minidevelopment ]"
echo "$duo_md [ info ] [ download ] [ Waiting several seconds .. ]"
$favorite_text_browser -source $url_web_minidevelopment &> $directory_temporal/$cmd_config-installer || echo "[ fail ] [ disconnected ]"
chmod ugo+rwx $directory_temporal/$cmd_config-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "$directory_temporal/$cmd_config-installer" ] ;
then echo "$duo_md [  ok  ] [ downloaded $cmd_config mini developer version ]" ;
$directory_temporal/$cmd_config-installer install ; 
else echo "$duo_md [ fail ] [ install fail ]"; fi ;
####
####
exit ; fi
####
####
#### :rutina-final-devmini-upgrade:
##########   english: regen-config: regen-config template wizard files       ##########
##########   spanish: regen-config: regen-configera template wizard archivos ##########
#### :rutina-inicial-regen-config:
####
####
if [ "$first_option" == "regen-config" ]; then echo "# $give_cover"
echo "# $header_ok [ $first_option ] [ Generate templates wizard and cfg ] || ||"
echo "# [ info ] [ regenerating template wizard and template cfg ]"
####
####
####    english: variables to prepare to gen files
####    spanish: variables para preparar para generar archivos
####
####
####    english: basic options in configuration file cfg
####    spanish: opciones basicas en configuracion de archivo cfg
####
####
var0="$(echo $cinco $cmd_name from $cmd_binary version $cmd_version $cinco )"
var1="$(echo $cinco BEGIN NECESARY $cinco )"
eng1="$(echo $cinco  .......... BEGIN Necesary options .......... .......... $cinco )"
spa1="$(echo $cinco INICIO .......... Opciones Necesarias .......... .......... $cinco )"
var2="$(echo $cinco NETFILTER $cinco )"
eng2="$(echo $cinco the iptables firewall netfilter, choose one or two )"
spa2="$(echo $cinco el iptables firewall netfilter, elige uno o dos )"
var3="$(echo allow_legacy= )"
eng3="$(echo $cinco launch xtables, void to yes or type no )"
spa3="$(echo $cinco lanza xtables, vacio para si, o escribe no )"
var4="$(echo allow_nft=no )"
eng4="$(echo $cinco launch nftables, void to yes or type no )"
spa4="$(echo $cinco lanza nftables, vacio para si, o escribe no )"
var5="$(echo $cinco PROTOCOL IP $cinco )"
eng5="$(echo $cinco ip protocol, modify with void or no )"
spa5="$(echo $cinco procolo ip, modificar con vacio o no )"
var6="$(echo allow_ipv4= )"
eng6="$(echo $cinco void to config firewall with ipv4 or no to dont configure ipv4 )"
spa6="$(echo $cinco varcio para ejecutar el firewall con ipv4 o no para no )"
var7="$(echo allow_ipv6=no )"
eng7="$(echo $cinco void to config firewall with ipv6 or no to dont configure ipv6 )"
spa7="$(echo $cinco varcio para ejecutar el firewall con ipv6 o no para no )"
var8="$(echo $cinco CLIENT PORTS $cinco )"
eng8="$(echo $cinco Client ports, add with ',' and join ranges with  : )"
spa8="$(echo $cinco puertos Cliente, añadir con ',' y poner rangos con : )"
var9="$(echo client_tcp=http,https,ssh )"
eng9="$(echo $cinco tcp ports for client )"
spa9="$(echo $cinco puertos tcp para ser cliente )"
var10="$(echo client_udp=domain,domain-s,bootpc,bootps,ntp,https )"
eng10="$(echo $cinco udp ports for client )"
spa10="$(echo $cinco puertos udp para ser cliente )"
var11="$(echo $cinco SERVER PORTS $cinco )"
eng11="$(echo $cinco Server ports, add with ',' and join ranges with : )"
spa11="$(echo $cinco Puertos Servidor, añadir con ',' y poner rangos con  : )"
var12="$(echo server_tcp=ssh )"
eng12="$(echo $cinco tcp ports for server )"
spa12="$(echo $cinco puertos tcp para servidor )"
var13="$(echo server_udp= )"
eng13="$(echo $cinco udp ports for server )"
spa13="$(echo $cinco puertos udp para servidor )"
var14="$(echo $cinco LOG TO SERVER PORTS $cinco )"
eng14="$(echo $cinco Log to server ports, add with ',' and join ranges with : )"
spa14="$(echo $cinco logear para puertos de Servidor, añadir con ',' y poner rangos con : )"
var15="$(echo logserver_tcp= )"
eng15="$(echo $cinco the tcp ports to log server )"
spa15="$(echo $cinco puertos tcp para logear servidor )"
var16="$(echo logserver_udp= )"
eng16="$(echo $cinco the udp ports to log server )"
spa16="$(echo $cinco puertos udp para logear servidor )"
var17="$(echo $cinco LOG PREFIX TO SERVER $cinco )"
eng17="$(echo $cinco Log to server ports with prefix )"
spa17="$(echo $cinco logear para puertos de servidor con prefijo )"
var18="$(echo logserver_prefix_input=fwlog-input:: )"
eng18="$(echo $cinco type input prefix for logserver )"
spa18="$(echo $cinco especifica prefijo de entrada para logserver )"
var19="$(echo logserver_prefix_output=fwlog-output:: )"
eng19="$(echo $cinco type output prefix for logserver )"
spa19="$(echo $cinco especifica prefijo de salida para logserver )"
var20="$(echo $cinco ALLOW MAXTRIES SHIELD $cinco )"
eng20="$(echo $cinco Put one shield for ports to new connecting, with max ip to each hour )"
spa20="$(echo $cinco Pone un escudo para los peuertos de nueva conexion, con maximo ip cada hora )"
var21="$(echo allow_shield_maxtries=no )"
eng21="$(echo $cinco void to allow one shield with max tries login in ssh for ip to each hour or no )"
spa21="$(echo $cinco vacio para permitir un escudo con los intentos maximos de logins in ssh por ip a cada hora o no )"
var22="$(echo config_shield_maxtries=12 )"
eng22="$(echo $cinco modify shield with number max of tries to log in us ssh server for ip at each hour )"
spa22="$(echo $cinco modificar escudo con los maximos intentos de logeo a nuestro servidor ssh por ip a cada hora )"
var23="$(echo config_shield_port=22 )"
eng23="$(echo $cinco modify shield ssh chaging maxtries port ssh o several ports with comma separate )"
spa23="$(echo $cinco modificar escudo ssh cambiando puerto de intentos ssh o varios puertos separados por comma )"
var24="$(echo $cinco GENERAL RULES $cinco )"
eng24="$(echo $cinco General rules for table )"
spa24="$(echo $cinco Reglas generales para la tabla )"
var25="$(echo allow_separate_rules=no )"
eng25="$(echo $cinco Void to separate the rules for each port or no )"
spa25="$(echo $cinco Vacio para separar reglas por cada puerto o no )"
var26="$(echo config_close_deny=DROP )"
eng26="$(echo $cinco choose close deny to the rules with or DROP or REJECT )"
spa26="$(echo $cinco Elige cerrar denegacion a las reglas con o DROP or REJECT )"
var27="$(echo $cinco END NECESARY $cinco )"
eng27="$(echo $cinco .......... END Necesary options .......... .......... $cinco )"
spa27="$(echo $cinco FINAL .......... Opciones Necesarias .......... .......... $cinco )"
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var31="$(echo $cinco BEGIN OPTIONAL $cinco )"
eng31="$(echo $cinco .......... BEGIN Optional options .......... .......... $cinco )"
spa31="$(echo $cinco INICIO .......... Opciones opcionales .......... .......... $cinco )"
var32="$(echo $cinco choose void or no $cinco )"
eng32="$(echo $cinco Allow Other Options,  modify with void, or no )"
spa32="$(echo $cinco Permitir Otras Opciones, modificar con vacio o no )"
var35="$(echo allow_forward_ip4=no )"
eng35="$(echo $cinco void to yes to forward ip4, or no to no )"
spa35="$(echo $cinco vacio para reenvios ip4, o no para no )"
var36="$(echo allow_forward_ip6=no )"
eng36="$(echo $cinco void to allow ip forward ip6 or no )"
spa36="$(echo $cinco vacio para permitir reenvio ip6, o no )"
var37="$(echo allow_gateway_ip4=no )"
eng37="$(echo $cinco void to allow gateway ip4 to others nets or no )"
spa37="$(echo $cinco vacio para permitir gateway ip4  a otras redes, o no )"
var38="$(echo allow_gateway_ip6=no )"
eng38="$(echo $cinco void to allow gateway ip6 to other nets or no )"
spa38="$(echo $cinco vacio para hacer gateway ip6 a otras redes o no )"
var39="$(echo allow_dmz_ip4=no )"
eng39="$(echo $cinco void to allow dmz ip4 to one host local or no )"
spa39="$(echo $cinco vacio para permitir dmz ip4  a una host local, o no )"
var40="$(echo allow_dmz_ip6=no )"
eng40="$(echo $cinco void to allow dmz ip6 to one host local or no )"
spa40="$(echo $cinco vacio para hacer dmz ip6 a una host local o no )"
var41="$(echo allow_input_all=no )"
eng41="$(echo $cinco void when the rules are to allow input to all or no )"
spa41="$(echo $cinco vacio, reglas para permitir toda entrada o no )"
var42="$(echo allow_output_all=no )"
eng42="$(echo $cinco void when the rules are to allow output to all or no )"
spa42="$(echo $cinco vacio, reglas para permitir toda salida o no )"
var43="$(echo allow_input_state=no )"
eng43="$(echo $cinco Selective Input state with void or no )"
spa43="$(echo $cinco Estado de entrada selectivo con vacio o no )"
var44="$(echo allow_output_state=no )"
eng44="$(echo $cinco Selective Output state with void or no )"
spa44="$(echo $cinco Estado de salida selectivo con vacio o no )"
var45="$(echo allow_input_bandwidth=no )"
eng45="$(echo $cinco void to limit bandwidth input in kbits/sec for all sources or no )"
spa45="$(echo $cinco vacio para limitar ancho de banda de entrada para todas las fuentes en kbits/sec o no )"
var46="$(echo allow_output_bandwidth=no )"
eng46="$(echo $cinco void to limit bandwidth output in kbits/sec for each destination or no )"
spa46="$(echo $cinco vacio limitar ancho de banda de salida en kbits/sec por cada destino o no )"
var47="$(echo allow_input_maxconnect=no )"
eng47="$(echo $cinco void to limit max number for input simultaneous connections or no )"
spa47="$(echo $cinco vacio para limitar numero de conexiones simultaneas de entrada o no )"
var48="$(echo allow_output_maxconnect=no )"
eng48="$(echo $cinco void to limit max number for output simultaneous connections or no )"
spa48="$(echo $cinco vacio para limitar numero de conexiones simultaneas de salida o no )"
var49="$(echo allow_input_ping=no )"
eng49="$(echo $cinco void to allow RECIVE PING or no )"
spa49="$(echo $cinco vacio para permitir RECIVIR PING o no )"
var50="$(echo allow_output_ping=no )"
eng50="$(echo $cinco void to allow SEND PING or no )"
spa50="$(echo $cinco vacio para permitir ENVIAR PING o no )"
var51="$(echo allow_mac_whitelist=no )"
eng51="$(echo $cinco void to allow some exceptional MAC-ADDRESS or no )"
spa51="$(echo $cinco vacio para permitir DIRECCION-MAC excepcionales o no )"
var52="$(echo allow_mac_blacklist=no )"
eng52="$(echo $cinco void to drop some excepcional MAC-ADDRESS or no )"
spa52="$(echo $cinco vacio para denegar DIRECCION-MAC excepcionales o no )"
var53="$(echo allow_net_vpn=no )"
eng53="$(echo $cinco void to allow some exceptional HOST/IP or no )"
spa53="$(echo $cinco vacio para permitir HOST/IP excepcionales o no )"
var54="$(echo allow_net_blacklist=no )"
eng54="$(echo $cinco void to drop some excepcional HOST/IP or no )"
spa54="$(echo $cinco vacio para denegar HOST/IP excepcionales o no )"
var55="$(echo allow_output_uid=no )"
eng55="$(echo $cinco void to allow excepcional USER or no )"
spa55="$(echo $cinco vacio permite salida de paquetes de un USUARIO excepcional o no )"
var56="$(echo allow_output_gid=no )"
eng56="$(echo $cinco void to allow excepcional GROUP or no )"
spa56="$(echo $cinco vacio permite salida de paquetes de un GRUPO excepcional o no )"
var57="$(echo allow_others_protocols=no )"
eng57="$(echo $cinco void to allow other POTOCOL-IP excepcional or no )"
spa57="$(echo $cinco vacio para permitir otro PROTOCOLO-IP excepcional o no )"
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var58="$(echo $cinco Begin Variables $cinco.......... .......... $cinco.......... )"
eng58="$(echo $cinco Fill Variables )"
spa58="$(echo $cinco Rellena Variables )"
var59="$(echo $cinco Options )"
eng59="$(echo $cinco Other Options, add with , and join ranges with : )"
spa59="$(echo $cinco Otras Opciones, añadir con , y poner rangos con : )"
# var60="$(echo config_shield_maxtries=12 )"
# eng60="$(echo $cinco modify shield with number max of tries to log in us ssh server for ip at each hour )"
# spa60="$(echo $cinco modificar escudo con los maximos intentos de logeo a nuestro servidor ssh por ip a cada hora )"
# var61="$(echo config_shield_port=22 )"
# eng61="$(echo $cinco modify shield ssh chaging maxtries port ssh o several ports with comma separate )"
# spa61="$(echo $cinco modificar escudo ssh cambiando puerto de intentos ssh o varios puertos separados por comma )"
var62="$(echo config_dmz_ip4=192.168.1.7 )"
eng62="$(echo $cinco ip server ip lan to other external nets, nat prerouting )"
spa62="$(echo $cinco servidor ip lan para otras redes esternas, nat prerouting )"
var63="$(echo config_dmz_ip6=d4:12:43:01:36:2e )"
eng63="$(echo $cinco ip server ip lan to other external nets, nat prerouting )"
spa63="$(echo $cinco servidor ip lan para otras redes esternas, nat prerouting )"
var64="$(echo config_input_state=new,related,established )"
eng64="$(echo $cinco void for all or new,related,established,untracked,invalid )"
spa64="$(echo $cinco modificar con vacio o new,related,established,untracked,invalid )"
var65="$(echo config_output_state=new,related,established )"
eng65="$(echo $cinco void for all or new,related,established,untracked,invalid )"
spa65="$(echo $cinco modificar con vacio o new,related,established,untracked,invalid )"
var66="$(echo config_input_bandwidth=12512 )"
eng66="$(echo $cinco max input bandwidth in kbits/sec for all )"
spa66="$(echo $cinco maximo entrada de ancho de banda en kbit/sec para todos )"
var67="$(echo config_output_bandwidth=512 )"
eng67="$(echo $cinco max output bandwidth in kbits/sec for each ip )"
spa67="$(echo $cinco maximo salida de ancho de banda en kbits/sec para cada ip )"
var68="$(echo config_input_maxconnect=72 )"
eng68="$(echo $cinco max number for input simultaneous connections )"
spa68="$(echo $cinco maximo numero de conexiones simultaneas de entrada )"
var69="$(echo config_output_maxconnect=72 )"
eng69="$(echo $cinco max number for output simultaneous connections )"
spa69="$(echo $cinco maximo numero de conexiones simultaneas de salida )"
var70="$(echo config_mac_whitelist=d4:12:43:01:36:2e )"
eng70="$(echo $cinco allow this excepcitonal MAC-ADRESS )"
spa70="$(echo $cinco permitir estos MAC-ADDRESS excepcionales )"
var71="$(echo config_mac_blacklist=d4:12:43:01:36:2e )"
eng71="$(echo $cinco drop this excepcional MAC-ADDRESS )"
spa71="$(echo $cinco deniega estos MAC-ADDRESS excepcionales )"
var72="$(echo config_net_vpn=wesnoth.org,sf.net )"
eng72="$(echo $cinco allow this excepcitonal HOST/IP )"
spa72="$(echo $cinco permitir estos HOST/IP excepcionales )"
var73="$(echo config_net_blacklist=facebook.com,www.facebook.com )"
eng73="$(echo $cinco drop this excepcional HOST/IP )"
spa73="$(echo $cinco deniega estos HOST/IP excepcionales )"
var74="$(echo config_output_uid=root )"
eng74="$(echo $cinco allow out packages excepcional from this USER excepcional )"
spa74="$(echo $cinco permite salida de paquetes de este USUARIO excepcional )"
var75="$(echo config_output_gid=root )"
eng75="$(echo $cinco allow out packages excepcional from this GROUP excepcional )"
spa75="$(echo $cinco permite salida de paquetes de este GRUPO excepcional )"
var76="$(echo config_others_protocols=icmp,igmp )"
eng76="$(echo $cinco allow others protocols from /etc/protocolos )"
spa76="$(echo $cinco permitir otros protocolos desde /etc/protocols )"
var77="$(echo $cinco NET CLIENT AND NET SERVER $cinco )"
eng77="$(echo $cinco Net to connect likes client or server )"
spa77="$(echo $cinco Red para conectar como cliente o server )"
var78="$(echo net_ipv4_client=0/0 )"
eng78="$(echo $cinco the net to client ipv4, all is 0/0 )"
spa78="$(echo $cinco la red cual cliente ipv4, todos es 0/0 )"
var79="$(echo net_ipv4_server=0/0 )"
eng79="$(echo $cinco the net to server ipv4, all is 0/0 )"
spa79="$(echo $cinco la red cual servidor ipv4, todos es 0/0 )"
var80="$(echo net_ipv6_client=::/0 )"
eng80="$(echo $cinco the net to client ipv6, all is ::/0 )"
spa80="$(echo $cinco la red cual cliente ipv6, todos es ::/0 )"
var81="$(echo net_ipv6_server=::/0 )"
eng81="$(echo $cinco the net to server ipv6, all is ::/0 )"
spa81="$(echo $cinco la red cual servidor ipv6, todos es ::/0 )"
var82="$(echo $cinco $cinco )"
eng82="$(echo $cinco .......... END Optional options .......... .......... $cinco )"
spa82="$(echo $cinco FINAL .......... Opciones opcionales .......... .......... $cinco )"
####
####
##########   english: continue with autogen defaults configs cfg
##########   spanish: continua con auto genera configs cfg por defecto
####
####
#### english: where save default files #### spanish: donde se guardan los archivos
####
####
me="$defaultminicfg_eng"
ms="$defaultminicfg_spa"
fe="$defaultfullcfg_eng"
fs="$defaultfullcfg_spa"
####
####
#### wizard mini-english
####
####
echo -E "$var0"  &> $me
echo -E "$var1"  "$tabz" "$eng1"  &>> "$me"
echo -E "$var2"  "$tabz" "$eng2"  &>> "$me"
echo -E "$var3"  "$tabz" "$eng3"  &>> "$me"
echo -E "$var4"  "$tabz" "$eng4"  &>> "$me"
echo -E "$var5"  "$tabz" "$eng5"  &>> "$me"
echo -E "$var6"  "$tabz" "$eng6"  &>> "$me"
echo -E "$var7"  "$tabz" "$eng7"  &>> "$me"
echo -E "$var8"  "$tabz" "$eng8"  &>> "$me"
echo -E "$var9"  "$tabz" "$eng9"  &>> "$me"
echo -E "$var10" "$tabz" "$eng10" &>> "$me"
echo -E "$var11" "$tabz" "$eng11" &>> "$me"
echo -E "$var12" "$tabz" "$eng12" &>> "$me"
echo -E "$var13" "$tabz" "$eng13" &>> "$me"
echo -E "$var14" "$tabz" "$eng14" &>> "$me"
echo -E "$var15" "$tabz" "$eng15" &>> "$me"
echo -E "$var16" "$tabz" "$eng16" &>> "$me"
echo -E "$var17" "$tabz" "$eng17" &>> "$me"
echo -E "$var18" "$tabz" "$eng18" &>> "$me"
echo -E "$var19" "$tabz" "$eng19" &>> "$me"
echo -E "$var20" "$tabz" "$eng20" &>> "$me"
echo -E "$var21" "$tabz" "$eng21" &>> "$me"
echo -E "$var22" "$tabz" "$eng22" &>> "$me"
echo -E "$var23" "$tabz" "$eng23" &>> "$me"
echo -E "$var24" "$tabz" "$eng24" &>> "$me"
echo -E "$var25" "$tabz" "$eng25" &>> "$me"
echo -E "$var26" "$tabz" "$eng26" &>> "$me"
echo -E "$var27" "$tabz" "$eng27" &>> "$me"
####
####
#### wizard mini-spanish
####
####
echo "$var0"  &> "$ms"
echo "$var1"  "$tabz" "$spa1"  &>> "$ms"
echo "$var2"  "$tabz" "$spa2"  &>> "$ms"
echo "$var3"  "$tabz" "$spa3"  &>> "$ms"
echo "$var4"  "$tabz" "$spa4"  &>> "$ms"
echo "$var5"  "$tabz" "$spa5"  &>> "$ms"
echo "$var6"  "$tabz" "$spa6"  &>> "$ms"
echo "$var7"  "$tabz" "$spa7"  &>> "$ms"
echo "$var8"  "$tabz" "$spa8"  &>> "$ms"
echo "$var9"  "$tabz" "$spa9"  &>> "$ms"
echo "$var10" "$tabz" "$spa10" &>> "$ms"
echo "$var11" "$tabz" "$spa11" &>> "$ms"
echo "$var12" "$tabz" "$spa12" &>> "$ms"
echo "$var13" "$tabz" "$spa13" &>> "$ms"
echo "$var14" "$tabz" "$spa14" &>> "$ms"
echo "$var15" "$tabz" "$spa15" &>> "$ms"
echo "$var16" "$tabz" "$spa16" &>> "$ms"
echo "$var17" "$tabz" "$spa17" &>> "$ms"
echo "$var18" "$tabz" "$spa18" &>> "$ms"
echo "$var19" "$tabz" "$spa19" &>> "$ms"
echo "$var20" "$tabz" "$spa20" &>> "$ms"
echo "$var21" "$tabz" "$spa21" &>> "$ms"
echo "$var22" "$tabz" "$spa22" &>> "$ms"
echo "$var23" "$tabz" "$spa23" &>> "$ms"
echo "$var24" "$tabz" "$spa24" &>> "$ms"
echo "$var25" "$tabz" "$spa25" &>> "$ms"
echo "$var26" "$tabz" "$spa26" &>> "$ms"
echo "$var27" "$tabz" "$spa27" &>> "$ms"
####
####
#### wizard full-english
####
####
echo -E "$var0"  &> "$fe"
echo -E "$var1"  "$tabz" "$eng1"  &>> "$fe"
echo -E "$var2"  "$tabz" "$eng2"  &>> "$fe"
echo -E "$var3"  "$tabz" "$eng3"  &>> "$fe"
echo -E "$var4"  "$tabz" "$eng4"  &>> "$fe"
echo -E "$var5"  "$tabz" "$eng5"  &>> "$fe"
echo -E "$var6"  "$tabz" "$eng6"  &>> "$fe"
echo -E "$var7"  "$tabz" "$eng7"  &>> "$fe"
echo -E "$var8"  "$tabz" "$eng8"  &>> "$fe"
echo -E "$var9"  "$tabz" "$eng9"  &>> "$fe"
echo -E "$var10" "$tabz" "$eng10" &>> "$fe"
echo -E "$var11" "$tabz" "$eng11" &>> "$fe"
echo -E "$var12" "$tabz" "$eng12" &>> "$fe"
echo -E "$var13" "$tabz" "$eng13" &>> "$fe"
echo -E "$var14" "$tabz" "$eng14" &>> "$fe"
echo -E "$var15" "$tabz" "$eng15" &>> "$fe"
echo -E "$var16" "$tabz" "$eng16" &>> "$fe"
echo -E "$var17" "$tabz" "$eng17" &>> "$fe"
echo -E "$var18" "$tabz" "$eng18" &>> "$fe"
echo -E "$var19" "$tabz" "$eng19" &>> "$fe"
echo -E "$var20" "$tabz" "$eng20" &>> "$fe"
echo -E "$var21" "$tabz" "$eng21" &>> "$fe"
echo -E "$var22" "$tabz" "$eng22" &>> "$fe"
echo -E "$var23" "$tabz" "$eng23" &>> "$fe"
echo -E "$var24" "$tabz" "$eng24" &>> "$fe"
echo -E "$var25" "$tabz" "$eng25" &>> "$fe"
echo -E "$var26" "$tabz" "$eng26" &>> "$fe"
echo -E "$var27" "$tabz" "$eng27" &>> "$fe"
##### english: advance variables
##### spanish: avanzadas variables
echo -E "$var30" "$tabz" "$eng30" &>> "$fe"
echo -E "$var31" "$tabz" "$eng31" &>> "$fe"
echo -E "$var32" "$tabz" "$eng32" &>> "$fe"
echo -E "$var33" "$tabz" "$eng33" &>> "$fe"
echo -E "$var34" "$tabz" "$eng34" &>> "$fe"
echo -E "$var35" "$tabz" "$eng35" &>> "$fe"
echo -E "$var36" "$tabz" "$eng36" &>> "$fe"
echo -E "$var37" "$tabz" "$eng37" &>> "$fe"
echo -E "$var38" "$tabz" "$eng38" &>> "$fe"
echo -E "$var39" "$tabz" "$eng39" &>> "$fe"
echo -E "$var40" "$tabz" "$eng40" &>> "$fe"
echo -E "$var41" "$tabz" "$eng41" &>> "$fe"
echo -E "$var42" "$tabz" "$eng42" &>> "$fe"
echo -E "$var43" "$tabz" "$eng43" &>> "$fe"
echo -E "$var44" "$tabz" "$eng44" &>> "$fe"
echo -E "$var45" "$tabz" "$eng45" &>> "$fe"
echo -E "$var46" "$tabz" "$eng46" &>> "$fe"
echo -E "$var47" "$tabz" "$eng47" &>> "$fe"
echo -E "$var48" "$tabz" "$eng48" &>> "$fe"
echo -E "$var49" "$tabz" "$eng49" &>> "$fe"
echo -E "$var50" "$tabz" "$eng50" &>> "$fe"
echo -E "$var51" "$tabz" "$eng51" &>> "$fe"
echo -E "$var52" "$tabz" "$eng52" &>> "$fe"
echo -E "$var53" "$tabz" "$eng53" &>> "$fe"
echo -E "$var54" "$tabz" "$eng54" &>> "$fe"
echo -E "$var55" "$tabz" "$eng55" &>> "$fe"
echo -E "$var56" "$tabz" "$eng56" &>> "$fe"
echo -E "$var57" "$tabz" "$eng57" &>> "$fe"
echo -E "$var58" "$tabz" "$eng58" &>> "$fe"
echo -E "$var59" "$tabz" "$eng59" &>> "$fe"
echo -E "$var60" "$tabz" "$eng60" &>> "$fe"
echo -E "$var61" "$tabz" "$eng61" &>> "$fe"
echo -E "$var62" "$tabz" "$eng62" &>> "$fe"
echo -E "$var63" "$tabz" "$eng63" &>> "$fe"
echo -E "$var64" "$tabz" "$eng64" &>> "$fe"
echo -E "$var65" "$tabz" "$eng65" &>> "$fe"
echo -E "$var66" "$tabz" "$eng66" &>> "$fe"
echo -E "$var67" "$tabz" "$eng67" &>> "$fe"
echo -E "$var68" "$tabz" "$eng68" &>> "$fe"
echo -E "$var69" "$tabz" "$eng69" &>> "$fe"
echo -E "$var70" "$tabz" "$eng70" &>> "$fe"
echo -E "$var71" "$tabz" "$eng71" &>> "$fe"
echo -E "$var72" "$tabz" "$eng72" &>> "$fe"
echo -E "$var73" "$tabz" "$eng73" &>> "$fe"
echo -E "$var74" "$tabz" "$eng74" &>> "$fe"
echo -E "$var75" "$tabz" "$eng75" &>> "$fe"
echo -E "$var76" "$tabz" "$eng76" &>> "$fe"
echo -E "$var77" "$tabz" "$eng77" &>> "$fe"
echo -E "$var78" "$tabz" "$eng78" &>> "$fe"
echo -E "$var79" "$tabz" "$eng79" &>> "$fe"
echo -E "$var80" "$tabz" "$eng80" &>> "$fe"
echo -E "$var81" "$tabz" "$eng81" &>> "$fe"
echo -E "$var82" "$tabz" "$eng82" &>> "$fe"
####
####
#### wizard full-spanish
####
####
echo -E "$var0"  &> "$fs"
echo -E "$var1"  "$tabz" "$spa1" &>> "$fs"
echo -E "$var2"  "$tabz" "$spa2" &>> "$fs"
echo -E "$var3"  "$tabz" "$spa3" &>> "$fs"
echo -E "$var4"  "$tabz" "$spa4" &>> "$fs"
echo -E "$var5"  "$tabz" "$spa5" &>> "$fs"
echo -E "$var6"  "$tabz" "$spa6" &>> "$fs"
echo -E "$var7"  "$tabz" "$spa7" &>> "$fs"
echo -E "$var8"  "$tabz" "$spa8" &>> "$fs"
echo -E "$var9"  "$tabz" "$spa9" &>> "$fs"
echo -E "$var10" "$tabz" "$spa10" &>> "$fs"
echo -E "$var11" "$tabz" "$spa11" &>> "$fs"
echo -E "$var12" "$tabz" "$spa12" &>> "$fs"
echo -E "$var13" "$tabz" "$spa13" &>> "$fs"
echo -E "$var14" "$tabz" "$spa14" &>> "$fs"
echo -E "$var15" "$tabz" "$spa15" &>> "$fs"
echo -E "$var16" "$tabz" "$spa16" &>> "$fs"
echo -E "$var17" "$tabz" "$spa17" &>> "$fs"
echo -E "$var18" "$tabz" "$spa18" &>> "$fs"
echo -E "$var19" "$tabz" "$spa19" &>> "$fs"
echo -E "$var20" "$tabz" "$spa20" &>> "$fs"
echo -E "$var21" "$tabz" "$spa21" &>> "$fs"
echo -E "$var22" "$tabz" "$spa22" &>> "$fs"
echo -E "$var23" "$tabz" "$spa23" &>> "$fs"
echo -E "$var24" "$tabz" "$spa24" &>> "$fs"
echo -E "$var25" "$tabz" "$spa25" &>> "$fs"
echo -E "$var26" "$tabz" "$spa26" &>> "$fs"
echo -E "$var27" "$tabz" "$spa27" &>> "$fs"
##### english: advance variables
##### spanish: avanzadas variables
echo -E "$var30" "$tabz" "$spa30" &>> "$fs"
echo -E "$var31" "$tabz" "$spa31" &>> "$fs"
echo -E "$var32" "$tabz" "$spa32" &>> "$fs"
echo -E "$var33" "$tabz" "$spa33" &>> "$fs"
echo -E "$var34" "$tabz" "$spa34" &>> "$fs"
echo -E "$var35" "$tabz" "$spa35" &>> "$fs"
echo -E "$var36" "$tabz" "$spa36" &>> "$fs"
echo -E "$var37" "$tabz" "$spa37" &>> "$fs"
echo -E "$var38" "$tabz" "$spa38" &>> "$fs"
echo -E "$var39" "$tabz" "$spa39" &>> "$fs"
echo -E "$var40" "$tabz" "$spa40" &>> "$fs"
echo -E "$var41" "$tabz" "$spa41" &>> "$fs"
echo -E "$var42" "$tabz" "$spa42" &>> "$fs"
echo -E "$var43" "$tabz" "$spa43" &>> "$fs"
echo -E "$var44" "$tabz" "$spa44" &>> "$fs"
echo -E "$var45" "$tabz" "$spa45" &>> "$fs"
echo -E "$var46" "$tabz" "$spa46" &>> "$fs"
echo -E "$var47" "$tabz" "$spa47" &>> "$fs"
echo -E "$var48" "$tabz" "$spa48" &>> "$fs"
echo -E "$var49" "$tabz" "$spa49" &>> "$fs"
echo -E "$var50" "$tabz" "$spa50" &>> "$fs"
echo -E "$var51" "$tabz" "$spa51" &>> "$fs"
echo -E "$var52" "$tabz" "$spa52" &>> "$fs"
echo -E "$var53" "$tabz" "$spa53" &>> "$fs"
echo -E "$var54" "$tabz" "$spa54" &>> "$fs"
echo -E "$var55" "$tabz" "$spa55" &>> "$fs"
echo -E "$var56" "$tabz" "$spa56" &>> "$fs"
echo -E "$var57" "$tabz" "$spa57" &>> "$fs"
echo -E "$var58" "$tabz" "$spa58" &>> "$fs"
echo -E "$var59" "$tabz" "$spa59" &>> "$fs"
echo -E "$var60" "$tabz" "$spa60" &>> "$fs"
echo -E "$var61" "$tabz" "$spa61" &>> "$fs"
echo -E "$var62" "$tabz" "$spa62" &>> "$fs"
echo -E "$var63" "$tabz" "$spa63" &>> "$fs"
echo -E "$var64" "$tabz" "$spa64" &>> "$fs"
echo -E "$var65" "$tabz" "$spa65" &>> "$fs"
echo -E "$var66" "$tabz" "$spa66" &>> "$fs"
echo -E "$var67" "$tabz" "$spa67" &>> "$fs"
echo -E "$var68" "$tabz" "$spa68" &>> "$fs"
echo -E "$var69" "$tabz" "$spa69" &>> "$fs"
echo -E "$var70" "$tabz" "$spa70" &>> "$fs"
echo -E "$var71" "$tabz" "$spa71" &>> "$fs"
echo -E "$var72" "$tabz" "$spa72" &>> "$fs"
echo -E "$var73" "$tabz" "$spa73" &>> "$fs"
echo -E "$var74" "$tabz" "$spa74" &>> "$fs"
echo -E "$var75" "$tabz" "$spa75" &>> "$fs"
echo -E "$var76" "$tabz" "$spa76" &>> "$fs"
echo -E "$var77" "$tabz" "$spa77" &>> "$fs"
echo -E "$var78" "$tabz" "$spa78" &>> "$fs"
echo -E "$var79" "$tabz" "$spa79" &>> "$fs"
echo -E "$var80" "$tabz" "$spa80" &>> "$fs"
echo -E "$var81" "$tabz" "$spa81" &>> "$fs"
echo -E "$var82" "$tabz" "$spa82" &>> "$fs"
####
####
echo "# [  ok  ] [ Wizard and templates cfg regenerated ]"
exit ; fi
####
####
#### :rutina-final-regen-config:
##########  english:  sane variables: for working sane         ########## 
##########  spanish:  sana variables: para funcionamiento sano ##########
#### :rutina-inicial-sane:
####
####
case "$NULL" in "$allow_autosave")         ;;  *)  allow_autosave="no" ;;  esac
case "$NULL" in "$allow_dmz_ip4")          ;;  *)  allow_dmz_ip4="no" ;; esac
case "$NULL" in "$allow_dmz_ip6")          ;;  *)  allow_dmz_ip6="no" ;; esac
case "$NULL" in "$allow_forward_ip4")      ;;  *)  allow_forward_ip4="no" ;; esac
case "$NULL" in "$allow_forward_ip6")      ;;  *)  allow_forward_ip6="no" ;; esac
case "$NULL" in "$allow_gateway_ip4")      ;;  *)  allow_gateway_ip4="no" ;; esac
case "$NULL" in "$allow_gateway_ip6")      ;;  *)  allow_gateway_ip6="no" ;; esac
case "$NULL" in "$allow_input_all")        ;;  *)  allow_input_all="no";; esac
case "$NULL" in "$allow_input_bandwidth")  ;;  *)  allow_input_bandwidth="no";; esac
case "$NULL" in "$allow_input_maxconnect") ;;  *)  allow_input_maxconnect="no";; esac
case "$NULL" in "$allow_input_ping")       ;;  *)  allow_input_ping="no";; esac
case "$NULL" in "$allow_input_state")      ;;  *)  allow_input_state="no";; esac
case "$NULL" in "$allow_ipv4")             ;;  *)  allow_ipv4="no" ;; esac
case "$NULL" in "$allow_ipv6")             ;;  *)  allow_ipv6="no" ;; esac
case "$NULL" in "$allow_legacy")           ;;  *)  allow_legacy="no" ;; esac
case "$NULL" in "$allow_mac_blacklist")    ;;  *)  allow_mac_blacklist="no" ;; esac
case "$NULL" in "$allow_mac_whitelist")    ;;  *)  allow_mac_whitelist="no" ;; esac
case "$NULL" in "$allow_shield_maxtries")  ;;  *)  allow_shield_maxtries="no" ;; esac
case "$NULL" in "$allow_net_blacklist")    ;;  *)  allow_net_blacklist="no";; esac
case "$NULL" in "$allow_net_vpn")          ;;  *)  allow_net_vpn="no";; esac
case "$NULL" in "$allow_nft")              ;;  *)  allow_nft="no" ;; esac
case "$NULL" in "$allow_only_output")      ;;  *)  allow_only_output="no" ;; esac
case "$NULL" in "$allow_other_protocols")  ;;  *)  allow_other_protocols="no";; esac
case "$NULL" in "$allow_others_protocols") ;;  *)  allow_others_protocols="no" ;; esac
case "$NULL" in "$allow_output_all")       ;;  *)  allow_output_all="no";; esac
case "$NULL" in "$allow_output_bandwidth") ;;  *)  allow_output_bandwidth="no";; esac
case "$NULL" in "$allow_output_gid")       ;;  *)  allow_output_gid="no";; esac
case "$NULL" in "$allow_output_maxconnect");;  *)  allow_output_maxconnect="no";; esac
case "$NULL" in "$allow_output_ping")      ;;  *)  allow_output_ping="no";; esac
case "$NULL" in "$allow_output_state")     ;;  *)  allow_output_state="no";; esac
case "$NULL" in "$allow_output_uid")       ;;  *)  allow_output_uid="no";; esac
case "$NULL" in "$choosed_iptables")       ;;  *)  choosed_iptables="no";; esac
case "$NULL" in "$launch_firewall")        ;;  *)  launch_firewall="no" ;; esac
case "$NULL" in "$list_rules_conceptual")  ;;  *)  list_rules_conceptual="-n";; esac
case "$NULL" in "$name_firewall")          ;;  *)  name_firewall="no" ;; esac
case "$NULL" in "$type_firewall")          ;;  *)  type_firewall="no" ;; esac
####
####
#### :rutina-final-sane:
##########    english: autosave: autosave of firewall to restore standard rules                 ##########
##########    english: autosave: autoguardado de firewall para recuperador de reglas estandar   ##########
#### :rutina-inicial-autosave:
####
####
#### english: iptables saved
#### spanish: iptables guardado
####
####
#### english: autosave with name autosave
#### spanish: autoguardado con nombre autosave
####
####
if [ "$first_option" == "autosave" ] && [ "$allow_autosave" == "$NULL" ]; then
echo "$duo_md [ autosave ] [ firewall saved ] [ autosave-fwiptables ]" ;
$cmd_binary save autosave-fwiptables &> /dev/null ; exit; fi
####
####
#### :rutina-final-autosave:
##########    english: ready system rules con its option               ##########
##########    spanish: preprara reglas del sistema con sus opciones    ##########
####
####
####   #### english: The first        firewall of system  
####   #### spanish: El primero       cortafuego del sistema
####
####
####
####
####   #### english: firewall of system custom:
####   #### spanish: cortafuego del sistema custom:
####
####
##########   english: custom firewall      ##########
##########   spanish: custom cortafuegos   ##########
#### :rutina-inicial-custom-rules:
####
####
if [ "$first_option" == "custom" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall custom ]" ;
launch_firewall="yes" ;
type_firewall="custom" ;
name_firewall="$second_option" ;
####
####
#### english: configure custom variables if there are
#### spanish: configura variables modificadas si estan ahi
####
####
if [ -f "$directory_config/$second_option" ]; then . "$directory_config/$second_option" ; fi
####
####
if [ ! -f "$directory_config/$second_option" ]; then  $cmd_binary cfg ; 
echo "$duo_md [ info ] [ $cmd_binary custom file-cfg ]"
echo "$duo_md [ info ] [ $cmd_binary firewall-custom ]"
exit; fi
####
####
fi
####
####
#### :rutina-final-custom-rules:
##########   english: system firewall           ##########
##########   spanish: cortafuegos del sistema   ##########
#### :rutina-inicial-system-rules:
####
####
####   #### english: firewall of system off-line:
####   #### spanish: cortafuego del sistema off-line:
####
####
if [ "$first_option" == "off-line" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall off-line ]" ;
launch_firewall="yes" ;
type_firewall="off-line";
name_firewall="$first_option";
fi
####
####
####   #### english: firewall of system all-permisive:
####   #### spanish: cortafuego del sistema all-permisive:
####
####
if [ "$first_option" == "all-permisive" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall all-permisive ]" ;
launch_firewall="yes" ;
type_firewall="all-permisive" ;
name_firewall="$first_option";
fi
####
####
####   #### english: firewall of system shield-ssh:
####   #### spanish: cortafuego del sistema shield-ssh:
####
####
if [ "$first_option" == "shield-ssh" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall shield-ssh ]" ;
launch_firewall="yes" ;
type_firewall="shield-ssh"    ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_maxtries="5" ;
config_shield_port="ssh" ;
#### english: ports client and ports server
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh" ;
fi
####
####
####   #### english: firewall of system client-web:
####   #### spanish: cortafuego del sistema client-web:
####
####
if [ "$first_option" == "client-web" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-web ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect normal web
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-vnc:
####   #### spanish: cortafuego del sistema client-vnc:
####
####
if [ "$first_option" == "client-vnc" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-vnc ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect normal web and vnc
server_port_udp="" ;
client_port_tcp="http,https,ssh,5900:5910" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-torrent:
####   #### spanish: cortafuego del sistema client-torrent:
####
####
if [ "$first_option" == "client-torrent" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-torrent ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect web normal and bittorrent too
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,9091,51413" ;
server_port_tcp="9091,51413" ;
fi
####
####
####   #### english: firewall of system client-vpn:
####   #### spanish: cortafuego del sistema client-vpn:
####
####
if [ "$first_option" == "client-vpn" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-vpn ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect web normal and web vpn
server_port_udp="" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,500,1194,1701,4500" ; 
client_port_tcp="http,https,ssh,443,1701,1723" ; 
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-tor:
####   #### spanish: cortafuego del sistema client-tor:
####
####
if [ "$first_option" == "client-tor" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-tor ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### you can connect web normal and web tor
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,9000:9170" ;
server_port_tcp="9000:9170" ;
fi
####
####
####   #### english: firewall of system client-news:
####   #### spanish: cortafuego del sistema client-news:
####
####
if [ "$first_option" == "client-news" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-news ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,119,433,563" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-mail:
####   #### spanish: cortafuego del sistema client-mail:
####
####
if [ "$first_option" == "client-mail" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-mail ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
#### client mail:
#### SMTP (sending mail)	Unencrypted	25* (or 26)
#### POP3 (receiving mail)	Encrypted - TLS	995
#### POP3 (receiving mail)	Encrypted - SSL	995
#### POP3 (receiving mail)	Unencrypted	110
#### negotiation submission     tls             465 and 587
#### 
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,25,119,433,563,25:26,995,110,465,587" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-ftp:
####   #### spanish: cortafuego del sistema client-ftp:
####
####
if [ "$first_option" == "client-ftp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-ftp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### client ftp:
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system client-squid:
####   #### spanish: cortafuego del sistema client-squid:
####
####
if [ "$first_option" == "client-squid" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall client-squid ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,8080,3128" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system lan-vpn:
####   #### spanish: cortafuego del sistema lan-vpn:
####
####
if [ "$first_option" == "lan-vpn" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall lan-vpn ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### vpn ports to connects ports vpn
#### with necesary ports to connect gatway and date, domain for your ip
server_port_udp="" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,500,1194,1701,4500" ; 
client_port_tcp="1701,1723" ; 
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system lan-tor:
####   #### spanish: cortafuego del sistema lan-tor:
####
####
if [ "$first_option" == "lan-tor" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall lan-tor ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### lan tor, 9000:9170 for connect to tor
#### with necesary ports to connect gatway and date, domain for your ip
server_port_udp="" ;
client_port_udp="bootpc,domain,ntp" ;
client_port_tcp="9000:9170" ;
server_port_tcp="9000:9170" ;
fi
####
####
####   #### english: firewall of system games-shooter:
####   #### spanish: cortafuego del sistema games-shooter:
####
####
if [ "$first_option" == "games-shooter" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall games-shooter ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### games shooter 3D all udp without the root ports 1:1024 and ftp for download maps
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system games-udp:
####   #### spanish: cortafuego del sistema games-udp:
####
####
if [ "$first_option" == "games-udp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall games-udp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### games shooter 3D all udp without the root ports 1:1024 and ftp for download maps
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="" ;
fi
####
####
####   #### english: firewall of system game-wesnoth:
####   #### spanish: cortafuego del sistema game-wesnoth:
####
####
if [ "$first_option" == "game-wesnoth" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-wesnoth ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### game wesnoth port 14999 and 15001 usually
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ; 
server_port_udp="" ;
client_port_tcp="http,https,ssh,14950:15050" ;
server_port_tcp="14950:15050" ;
fi
####
####
####   #### english: firewall of system game-minetest:
####   #### spanish: cortafuego del sistema game-minetest:
####
####
if [ "$first_option" == "game-minetest" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-minetest ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### game minetest and minecraft porst 25k and 35k /udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,25000:35000" ; 
server_port_udp="" ;
client_port_tcp="http,https,ssh,25000:35000" ;
server_port_tcp="25000:35000" ;
fi
####
####
####   #### english: firewall of system game-freeciv:
####   #### spanish: cortafuego del sistema game-freeciv:
####
####
if [ "$first_option" == "game-freeciv" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-freeciv ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
alllow_shield_ssh="no" ;
config_shield_port="" ;
#### for default 5556 port tcp perhaps 5555 too
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ; 
server_port_udp="" ;
client_port_tcp="http,https,ssh,5555:5556" ;
server_port_tcp="5555:5556" ;
fi
####
####
####   #### english: firewall of system game-widelands:
####   #### spanish: cortafuego del sistema game-widelands:
####
####
if [ "$first_option" == "game-widelands" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall game-widelands ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="no" ;
config_shield_port="" ;
#### for default 7396 port tcp and 7396 udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,7396" ; 
server_port_udp="7396" ;
client_port_tcp="http,https,ssh,7396" ;
server_port_tcp="7396" ;
fi
####
####
####   #### english: firewall of system server-web:
####   #### spanish: cortafuego del sistema server-web:
####
####
if [ "$first_option" == "server-web" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-web ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="https" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="http,https,ssh" ;
fi
####
####
####   #### english: firewall of system server-vnc:
####   #### spanish: cortafuego del sistema server-vnc:
####
####
if [ "$first_option" == "server-vnc" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-vnc ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_maxtries="20" ;
config_shield_port="22,5900:5910"
#### you can connect normal web and vnc
server_port_udp="" ;
client_port_tcp="http,https,ssh,5900:5910" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_tcp="ssh,5900:5910" ;
fi
####
####
####   #### english: firewall of system server-ftp:
####   #### spanish: cortafuego del sistema server-ftp:
####
####
if [ "$first_option" == "server-ftp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-ftp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh,ftp" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
fi
####
####
####   #### english: firewall of system server-squid:
####   #### spanish: cortafuego del sistema server-squid:
####
####
if [ "$first_option" == "server-squid" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-squid ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server http and https and ssh /tcp and https udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh,8080,3128" ;
server_port_tcp="http,https,ssh,8080,3128" ;
fi
####
####
####   #### english: firewall of system server-news:
####   #### spanish: cortafuego del sistema server-news:
####
####
if [ "$first_option" == "server-news" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-news ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
server_port_udp="" ; 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
client_port_tcp="http,https,ssh,119,433,563" ;
server_port_tcp="http,https,ssh,119,433,563" ;
fi
####
####
####   #### english: firewall of system server-mail:
####   #### spanish: cortafuego del sistema server-mail:
####
####
if [ "$first_option" == "server-mail" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-mail ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### client news:
#### The well-known TCP port 119 is reserved for NNTP. Well-known TCP port 433 (NNSP) 
#### may be used when doing a bulk transfer of articles from one 
#### server to another. When clients connect to a news server with Transport Layer Security (TLS),
#### TCP port 563 is often used. This is sometimes referred to as NNTPS. 
#### Alternatively, a plain-text connection over port 119 may be changed to use TLS via the STARTTLS command. 
#### client mail:
#### SMTP (sending mail)	Unencrypted	25* (or 26)
#### POP3 (receiving mail)	Encrypted - TLS	995
#### POP3 (receiving mail)	Encrypted - SSL	995
#### POP3 (receiving mail)	Unencrypted	110
#### negotiation submission     tls             465 and 587
#### 
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="https" ;
client_port_tcp="http,https,ssh,25,119,433,563,25:26,995,110,465,587" ;
server_port_tcp="http,https,ssh,25,119,433,563,25:26,995,110,465,587" ;
fi
####
####
####   #### english: firewall of system server-samba:
####   #### spanish: cortafuego del sistema server-samba:
####
####
if [ "$first_option" == "server-samba" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-samba ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
#### server samba and active directory
client_port_tcp="http,https,ssh,ldap,636,microsoft-ds" ;
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,ldap,636,137:139" ;
server_port_tcp="ssh,ldap,636,microsoft-ds" ; 
server_port_udp="ntp,domain,ldap,636,137:139" ;
fi
####
####
####   #### english: firewall of system server-print:
####   #### spanish: cortafuego del sistema server-print:
####
####
if [ "$first_option" == "server-print" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-print ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server ipp and printer
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh,printer,ipp" ;
fi
####
####
####   #### english: firewall of system server-ssh:
####   #### spanish: cortafuego del sistema server-ssh:
####
####
if [ "$first_option" == "server-ssh" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-ssh ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ;
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### server ssh 22/tcp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh" ;
fi
####
####
####   #### english: firewall of system server-lamp:
####   #### spanish: cortafuego del sistema server-lamp:
####
####
if [ "$first_option" == "server-lamp" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-lamp ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh,ftp,ftps" ;
####  english: udp: 20 is ftp-data, 21 is ftp, 989 is ftps-data y 990 is ftps
####  english: tcp: 10000 is webmin, 3306 is mysql, 5432 is postgresql
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https" ;
server_port_udp="https" ;
client_port_tcp="http,https,ssh,20,21,989,990" ;
server_port_tcp="http,https,ssh,10000,3306,5432" ;
fi
####
####
####   #### english: firewall of system server-asterisk:
####   #### spanish: cortafuego del sistema server-asterisk:
####
####
if [ "$first_option" == "server-asterisk" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-asterisk ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
####    UDP:5060 SIP (sip.conf), newer Versions support TCP:5060
####    UDP:10000-20000 RTP (rtp.conf) for the media stream, a higher Portrange
####    UDP:5036 IAX2
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,5060,10000:20000,5036" ;
server_port_udp="5060,10000:20000,5036" ;
client_port_tcp="http,https,ssh,5060" ;
server_port_tcp="ssh,5060" ;
fi
####
####
####   #### english: firewall of system server-mumble:
####   #### spanish: cortafuego del sistema server-mumble:
####
####
if [ "$first_option" == "server-mumble" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-mumble ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### mumble port 64738 tcp and 64738 udp
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,64738" ;
server_port_udp="64738" ;
client_port_tcp="http,https,ssh,64738" ;
server_port_tcp="ssh,64738" ;
fi
####
####
####   #### english: firewall of system server-teamspeak:
####   #### spanish: cortafuego del sistema server-teamspeak:
####
####
if [ "$first_option" == "server-teamspeak" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-teamspeak ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
#### Service	        Protocol	Local Port (Server)
#### Voice	        UDP	9987
#### Filetransfer	TCP	30033
#### ServerQuery (raw)	TCP	10011
#### ServerQuery (SSH)	TCP	10022
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,9987" ;
server_port_udp="9987" ;
client_port_tcp="http,https,ssh,30033,10011,10022" ;
server_port_tcp="ssh,30033,10011,10022" ;
fi
####
####
####   #### english: firewall of system server-sql:
####   #### spanish: cortafuego del sistema server-sql:
####
####
if [ "$first_option" == "server-sql" ]; then echo $give_cover ; echo $give_load ; echo $give_preferences ;
echo "$duo_md [ info ] [ loading firewall server-sql ]" ;
launch_firewall="yes" ; 
type_firewall="predesignated" ; 
name_firewall="$first_option" ;
#### english: max tries for each hour 
allow_shield_maxtries="" ;
config_shield_port="ssh" ;
####  POSTGRESQL 5432/tcp and 5432/udp
####  Technology	Default Port	Required
####  MySQL Client to Server - MySQL Protocol – 3306	3306/tcp	Optional - pick at least 1
####  MySQL Client to Server – New X Protocol – 33060	33060/tcp	Optional - pick at least 1
####  Connects via SSH Tunnel	22/tcp	Optional - pick at least 1
client_port_udp="domain,domain-s,bootpc,bootps,ntp,https,5432" ;
server_port_udp="5432" ;
client_port_tcp="http,https,ssh,5432,3306,3360" ;
server_port_tcp="ssh,5432,3306,3360" ;
fi
####
####
#### :rutina-final-system-rules:
##########    english: options-mini: wellcome with semi help    ##########
##########    spanish: options-mini: bienvenida con semi ayuda  ##########
#### :rutina-inicial-options-mini:
####
####
if   [ "$first_option" == "options-mini" ] ; then echo $give_cover ;  echo "$message_info_rules"
echo "$header_ok [ $first_option ] [ List mini options ] [ mini-options md ] || ||"
echo "    Launch: $zero_option [-cli-menu -gui-menu -gui-shell                                                     "
echo "    -t|-txt -c|-cli -g|-gui -w|-web -h|-help -i|-info -l|-log -n|-null] first_option [second_option]         "
echo "$duo_md || || [ firewall ]  ### [  Control firewalls and rules to manage iptables ] ### || ||                "
echo "$text_md    firewall-control |  stop continue reset names actual show save load                              " 
echo "$text_md firewall-conceptual |  ls4 ls6 list4 list6 status list-alltables list-filter4 list-filter6          "
echo "$text_md                        list-nat4 list-nat6 list-raw4 list-raw6 list-mangle4 list-mangle6            "
echo "$text_md                        list-security4 list-security6 list-ebtables list-arptables                   "
echo "$text_md    firewall-numeral |  lsn4 lsn6 listn4 listn6 statusn listn-alltables listn-filter4 listn-filter6  "
echo "$text_md                        listn-nat4 listn-nat6 listn-raw4 listn-raw6 listn-mangle4 listn-mangle6      "
echo "$text_md                        listn-security4 listn-security6 list-ebtables list-arptables                 "
echo "$text_md     firewall-custom |  new-full-config nueva-completa-config regen-config                           "
echo "$text_md                        new-mini-config nueva-mini-config examples-config                            "
echo "$text_md                        show-config modify-config del-config names-config                            "
echo "$text_md     firewall-launch |  eraserules custom wizard-mini wizard-full off-line all-permisive games-udp   "
echo "$text_md                        games-shooter game-wesnoth game-minetest game-freeciv game-widelands         "
echo "$text_md                        client-web client-vnc client-mail client-news client-torrent client-vpn      "
echo "$text_md                        client-tor client-ftp client-squid lan-tor lan-vpn shield-ssh server-ssh     "
echo "$text_md                        server-vnc server-web server-samba server-print server-lamp server-news      "
echo "$text_md                        server-mail server-ftp server-teamspeak server-mumble server-sql             "
echo "$text_md                        server-asterisk server-squid                                                 "
echo "$text_md      options-state  |  preferences-read preferences-modify preferences-regen filelog autolog        "
echo "$text_md                        ip4 ip6 version notes depends license new-versions install uninstall         "
echo "$duo_md || ||  [ Options ]  ### [  Show all posible option: $cmd_binary options-all ] ### || ||      "
echo "$text_md      $cmd_binary options-state            |  Show all options to preferences manager        "
echo "$text_md      $cmd_binary options-interface        |  Show all options to output interface           "
echo "$text_md      $cmd_binary options-firewall         |  Show all options to firewall manage            "
echo "$text_md      $cmd_binary options-tool             |  Show all options to tool working               "
echo "$text_md      $cmd_binary options-show             |  Show all options to read configs               "
echo "$text_md      $cmd_binary options-help             |  Show all options to help informations          "
echo "$text_md      $cmd_binary options-examples         |  Show examples                                  "
exit ; fi
####
####
#### :rutina-final-options-mini:
##########    english: options-all: and full-options: wellcome with semi help    ##########
##########    spanish: options-all: and full-options: bienvenida con semi ayuda  ##########
#### :rutina-inicial-full-options:
####
####
if   [ "$first_option" == "options-all" ] ; then echo $give_cover
echo "$header_ok [ $first_option ] [ List full options ] [ full-options md ] || ||"
echo "$duo_md || ||  [ options-interface ]  || ||  ### ###                                                          "
echo "    Launch: $zero_option [-cli-menu -gui-menu -gui-shell                                                      "
echo "    -t|-txt -c|-cli -g|-gui -w|-web -h|-help -i|-info -l|-log -n|-null] first_option [second_option]          "
echo "$duo_md || ||  [ options-firewall ]  || ||  ### ###                                                           "
echo "$text_md   firewall-control   |  stop continue reset names actual show save load                              "
echo "$text_md  firewall-conceptual |  ls4 ls6 list4 list6 status list-alltables list-filter4 list-filter6          "
echo "$text_md                         list-nat4 list-nat6 list-raw4 list-raw6 list-mangle4 list-mangle6            "
echo "$text_md                         list-security4 list-security6 list-ebtables list-arptables                   "
echo "$text_md   firewall-numeral   |  lsn4 lsn6 listn4 listn6 statusn listn-alltables listn-filter4 listn-filter6  "
echo "$text_md                         listn-nat4 listn-nat6 listn-raw4 listn-raw6 listn-mangle4 listn-mangle6      "
echo "$text_md                         listn-security4 listn-security6 list-ebtables list-arptables                 "
echo "$text_md   firewall-custom    |  new-full-config nueva-completa-config regen-config                           "
echo "$text_md                         new-mini-config nueva-mini-config examples-config                            "
echo "$text_md                         show-config modify-config del-config names-config                            "
echo "$text_md   firewall-launch    |  eraserules custom wizard-mini wizard-full off-line all-permisive games-udp   "
echo "$text_md                         games-shooter game-wesnoth game-minetest game-freeciv game-widelands         "
echo "$text_md                         client-web client-vnc client-mail client-news client-torrent client-vpn      "
echo "$text_md                         client-tor client-ftp client-squid lan-tor lan-vpn shield-ssh server-ssh     "
echo "$text_md                         server-vnc server-web server-samba server-print server-lamp server-news      "
echo "$text_md                         server-mail server-ftp server-teamspeak server-mumble server-sql             "
echo "$text_md                         server-asterisk server-squid                                                 "
echo "$duo_md || ||  [ options-state ]  || ||  ### ###                                                              "
echo "$text_md       options-state  |  preferences-read preferences-modify preferences-regen                        "
echo "$text_md                         ip4 ip6 version notes examples install uninstall                             "
echo "$duo_md || ||  [ options-tool ]  || ||  ### ###                                                               "
echo "$text_md   tool-sockets       |  info-listen info-nodes info-route info-net info-proxy info-system            "
echo "$text_md                         ip4 ip6 ss lsof tcpdump netstat netstat-nat web-cert                         "
echo "$text_md   tool-connect       |  iw-scan iw-info wpa-save wpa-load dhcp-client ntpdate-client                 "
echo "$text_md   tool-rule          |  rule-del-num rule-del-shield rule-add-shield                                 "
echo "$text_md   tool-forward       |  ipforward-list ipforward-on ipforward-off                                    "
echo "$text_md   tool-sshd          |  sshd-tunnel-info sshd-tunnel-on sshd-tunnel-off                              "
echo "$text_md   tool-tcp           |  tracetcp-ip4 tracetcp-ip6 speed-ip4 speed-ip6                                "
echo "$text_md   tool-udp           |  host dig resolveip geoip ntpdate-client                                      "
echo "$text_md   tool-icmp          |  traceicmp-ip4 traceicmp-ip6 ping-ip4 ping-ip6                                "
echo "$text_md   tool-nmap          |  nmap-tcp nmap-syn nmap-fin nmap-udp nmap-ping                                "
echo "$text_md   tool-sudofw        |  sudofw-adduser sudofw-deluser sudofw-listuser                                "
echo "$text_md   tool-game          |  game-word game-number game-domain game-rgb game-hex                          "
echo "$text_md   tool-speed         |  free-ram speed-ram speed-disk speed-glx speed-cpu                            "
echo "$text_md   tool-util          |  weather md5sum gpg-notes                                                     "
echo "$text_md   tool-pdf           |  pdf-resize pdf-unite pdf-separate                                            "
echo "$text_md   tool-mp3           |  radio-mp3 radio-cadena100 radio-rockfm                                       "
echo "$text_md   tool-qemu          |  qemu-status qemu-stop qemu-start                                             "
echo "$text_md   tool-install       |  install upgrade dev-upgrade devmini-upgrade howto-upgrade clean-tmp          "
echo "$text_md   tool-addblock      |  addblock-list addblock-on addblock-off                                       "
echo "$text_md   tool-dev           |  new-versions dev-version dev-changes code intro                              "
echo "$text_md   tool-computer      |  pc-halt pc-shutdown pc-reboot                                                "
echo "$duo_md || || [ options-show ]   || ||  ### ###                                                               "
echo "$text_md   show-hardware      |  lpinfo lsblk lsusb lscpu lspci lsgpu lshw                                    "
echo "$text_md   show-log           |  log-search log-ssh filelog autolog                                           "
echo "$text_md   show-etc           |  hosts resolv.conf hosts.allow hosts.deny protocols services                  "
echo "$duo_md || || [ options-help ]   || ||  ### ###                                                               "
echo "$text_md   help-about         |  about version depends config-eng config-spa license                          "
echo "$text_md   help-help          |  all-help readme leeme notes options                                          "
echo "$text_md                         group-options mini-options full-options                                      "
echo "$duo_md || ||  [ Examples ]  || ||  ### ###                                                                   "
echo "$text_md  $cmd_binary -cli-menu                |  All options in text menu                                    "
echo "$text_md  $cmd_binary -gui-menu                |  All options in window menu                                  "
echo "$text_md  $cmd_binary -gui-shell               |  All options in window shell                                 "
echo "$text_md  $cmd_binary -txt list                |  List iptables rules with output txt                         "
echo "$text_md  $cmd_binary -cli names               |  List firewall saved with output cli text menu               "
echo "$text_md  $cmd_binary -gui wizard-mini         |  Generate rules with output gui window                       "
echo "$text_md  $cmd_binary -web ss                  |  Show ss with output text browser                            "
echo "$text_md  $cmd_binary -help readme             |  Show help of readme with output text plain                  "
echo "$text_md  $cmd_binary -info lsof               |  Show info of lsof with output text rst                      "
echo "$text_md  $cmd_binary -log info-route          |  Save log info-route with output text plain                  "
echo "$text_md  $cmd_binary -null client-web         |  Launch client web firewall a null output                    "
exit ; fi
####
####
#### :rutina-final-full-options:
##########    english: options-firewall: firewall options       ##########
##########    spanish: options-firewall: opciones de firewall   ##########
#### :rutina-final-options-firewall:
####
####
if   [ "$first_option" == "options-firewall" ] ; then echo $give_cover
echo "$title_md [ $first_option ] [ List firewall options ] [ options-firewall md ]                            "
echo "$title_md                                  | options-firewall |                                          "
echo "$text_md firewall-control    |  stop continue reset names actual show save load                          "
echo "$text_md firewall-conceptual |  ls4 ls6 list4 list6 status list-alltables list-filter4 list-filter6          "
echo "$text_md                        list-nat4 list-nat6 list-raw4 list-raw6 list-mangle4 list-mangle6            "
echo "$text_md                        list-security4 list-security6 list-ebtables list-arptables                   "
echo "$text_md firewall-numeral    |  lsn4 lsn6 listn4 listn6 statusn listn-alltables listn-filter4 listn-filter6  "
echo "$text_md                        listn-nat4 listn-nat6 listn-raw4 listn-raw6 listn-mangle4 listn-mangle6      "
echo "$text_md                        listn-security4 listn-security6 list-ebtables list-arptables                 "
echo "$text_md firewall-custom     |  new-full-config nueva-completa-config regen-config                       "
echo "$text_md                        new-mini-config nueva-mini-config examples-config                        "
echo "$text_md                        show-config modify-config del-config names-config                        "
echo "$text_md  firewall-launch    |  eraserules wizard-mini wizard-full custom off-line all-permisive         "
echo "$text_md                        games-shooter game-wesnoth game-minetest game-freeciv game-widelands     "
echo "$text_md                        client-web client-mail client-news client-torrent client-vpn client-tor  "
echo "$text_md                        client-ftp client-squid lan-tor lan-vpn shield-ssh server-ssh server-web "
echo "$text_md                        server-samba server-print server-lamp server-news server-mail server-ftp "
echo "$text_md                        server-teamspeak server-mumble server-sql server-asterisk server-squid   "
echo "$text_md"
echo "$text_md   | Group | options-interface | options-satate | options-firewall | options-tool | options-show | options-help   "
exit ; fi
####
####
#### :rutina-final-options-firewall:


##########    english: options-state: firewall options       ##########
##########    spanish: options-state: opciones de firewall   ##########
#### :rutina-final-options-state:
####
####
if   [ "$first_option" == "options-state" ] ; then echo $give_cover
echo "$title_md [ $first_option ] [ List state options ] [ options-state md ]"
echo "$title_md                                  | options-state |                          "
echo "$text_md      options-state  |  preferences-read preferences-modify preferences-regen filelog autolog  "
echo "$text_md                        ip4 ip6 version notes depends license new-versions install uninstall   "
echo "$text_md"
echo "$text_md   | Group | options-interface | options-firewall | options-state | options-tool | options-show | options-help   "
exit ; fi
####
####
#### :rutina-final-options-firewall:


##########    english: options-tool: firewall options       ##########
##########    spanish: options-tool: opciones de firewall   ##########
#### :rutina-final-options-tool:
####
####
if   [ "$first_option" == "options-tool" ] ; then echo $give_cover
echo "$title_md [ $first_option ] [ Tool options ] [ options-tool md ]"
echo "$title_md                                    | options-tool |                                     " 
echo "$text_md    tool-sockets      | info-listen info-nodes info-route info-net info-proxy info-system "
echo "$text_md                        ip4 ip6 ss lsof tcpdump netstat netstat-nat web-cert              "
echo "$text_md    tool-connect      | iw-scan iw-info wpa-save wpa-load dhcp-client ntpdate-client      "
echo "$text_md    tool-rule         | rule-del-num rule-del-shield rule-add-shield                      "
echo "$text_md    tool-forward      | ipforward-list ipforward-on ipforward-off                         "
echo "$text_md    tool-sshd         | sshd-tunnel-info sshd-tunnel-on sshd-tunnel-off                   "
echo "$text_md    tool-tcp          | tracetcp-ip4 tracetcp-ip6 speed-ip4 speed-ip6                     "
echo "$text_md    tool-udp          | host dig resolveip geoip ntpdate-client                           "
echo "$text_md    tool-icmp         | traceicmp-ip4 traceicmp-ip6 ping-ip4 ping-ip6                     "
echo "$text_md    tool-nmap         | nmap-tcp nmap-syn nmap-fin nmap-udp nmap-ping                     "
echo "$text_md    tool-sudofw       | sudofw-adduser sudofw-deluser sudofw-listuser                     "
echo "$text_md    tool-game         | game-word game-number game-rgb game-hex                           "
echo "$text_md    tool-speed        | free-ram speed-ram speed-disk speed-glx speed-cpu                 "
echo "$text_md    tool-util         | weather md5sum gpg-notes                                          "
echo "$text_md    tool-pdf          | pdf-resize pdf-unite pdf-separate                                 "
echo "$text_md    tool-mp3          | radio-mp3 radio-cadena100 radio-rockfm                            "
echo "$text_md    tool-qemu         | qemu-status qemu-stop qemu-start                                  "
echo "$text_md    tool-install      | install howto-upgrade upgrade dev-upgrade devmini-upgrade         "
echo "$text_md    tool-addblock     | addblock-list addblock-on addblock-off                            "
echo "$text_md    tool-dev          | new-versions dev-version dev-changes code                         "
echo "$text_md    tool-computer     | pc-halt pc-shutdown pc-reboot                                     "
echo "$text_md"
echo "$text_md    | Group | options-interface | options-firewall | options-state | options-tool | options-show | options-help "
exit ; fi
####
####
#### :rutina-final-options-tool:
##########       english: options-show: options show           ##########
##########       spanish: options-show: opciones de mostrar    ##########
#### :rutina-final-options-show:
####
####
if    [ "$first_option" == "options-show" ] ; then echo $give_cover
echo "$title_md [ $first_option ] [ Show options ] [ options-show md ]"
echo "$title_md                                   | options-show |                          " 
echo "$text_md    show-hardware     | lpinfo lsblk lsusb lscpu lspci lsgpu lshw             "
echo "$text_md    show-log          | log-search log-ssh filelog autolog                    "
echo "$text_md    show-etc          | hosts resolv.conf  protocols services                 "
echo "$text_md                        hosts.allow hosts.deny preferences-read preferences-modify    "
echo "$text_md"
echo "$text_md      | Group | options-interface | options-firewall | options-state | options-tool | options-show | options-help "
exit ; fi
####
####
#### :rutina-final-options-show:
##########    english: options-help: options show           ##########
##########    spanish: options-help: opciones de mostrar    ##########
#### :rutina-final-options-show:
####
####
if    [ "$first_option" == "options-help" ] ; then echo $give_cover
echo "$title_md [ $first_option ] [ Show help options ] [ options-help md ]"
echo "$title_md                                   | options-help |                                             "
echo "$text_md  help-about         |  about version depends config-eng config-spa license                      "
echo "$text_md  help-help          |  all-help readme leeme notes options                                      "
echo "$text_md                        group-options mini-options full-options                                  "
echo "$text_md"
echo "$text_md      | Group | options-interface | options-firewall | options-state | options-tool | options-show | options-help "
exit ; fi
####
####
#### :rutina-final-options-show:
##########    english: options-examples: some example    ##########
##########    spanish: options-examples: algun ejemplo   ##########
#### :rutina-inicial-options-examples:
####
####
if [ "$first_option" == "options-examples" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List examples ] [ options-examples md ] || ||"
echo "$text_md $tab [ list examples ]"
echo "$text_md $tab [ Lista ejemplos ]"
echo "$title_md                                      [ examples ]                                        "
echo "$text_md        [ with optional output ]                  [ Example Description ]                  "
echo "$text_md    $cmd_binary -cli-menu                |  All options in text menu                   "
echo "$text_md    $cmd_binary -gui-menu                |  All options in window menu                 "
echo "$text_md    $cmd_binary -gui-shell               |  All options in window shell                "
echo "$text_md    $cmd_binary -txt list                |  List iptables rules with output txt        "
echo "$text_md    $cmd_binary -cli names               |  List firewall saved with output cli        "
echo "$text_md    $cmd_binary -gui ss                  |  List sockets ip with output gui            "
echo "$text_md    $cmd_binary -help readme             |  Show help of readme with output txt plain  "
echo "$text_md    $cmd_binary -info lsof               |  Show info of lsof with output rst          "
echo "$text_md    $cmd_binary -web info-net            |  Show info-net with output text browser     "
echo "$text_md    $cmd_binary -log info-route          |  Save log info-route with output txt        "
echo "$text_md    $cmd_binary -null client-web         |  Launch client web firewall a null output   "
echo
echo "$title_md                                      [ other examples ]                                  "
echo "$text_md    $cmd_binary names                    |  List firewall saved                        "
echo "$text_md    $cmd_binary names-config             |  List configs saved                         "
echo "$text_md    $cmd_binary speed-ip4                |  get info about speed with internet ipv4    "
echo "$text_md    $cmd_binary info-listen              |  show info about listen sockets             "
echo "$text_md    $cmd_binary game-word                |  game with words                            "
echo "$text_md    $cmd_binary upgrade                  |  upgrade $cmd_binary                    "
echo "$text_md    $cmd_binary addblock-list            |  List addblocker to blacklist               "
echo "$text_md    $cmd_binary names                    |  List firewall saved                        "
echo "$text_md    $cmd_binary code lsof                |  source code to option lsof                 "
echo "$text_md    $cmd_binary radio-mp3 url..          |  connect to url:// mp3                      "
echo "$text_md    $cmd_binary dev-changes              |  show last changes in $cmd_binary       "
echo "$text_md    $cmd_binary autolog                  |  List last optiosn with $cmd_binary     "
echo "$text_md    $cmd_binary preferences-modify       |  modify default variables                   "
echo "$text_md    $cmd_binary depends                  |  depends to $cmd_binary                 "
exit; fi
####
####
#### :rutina-final-options-examples:
##########    english: all-options: all options          ##########
##########    spanish: all-options: todas las opciones   ##########
#### :rutina-inicial-all-options:
####
####
if   [ "$first_option" == "all-options" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List group options help ] || ||"
$cmd_binary options-interface
$cmd_binary options-firewall
$cmd_binary options-tool
$cmd_binary options-show
$cmd_binary options-help
exit; fi
####
####
#### :rutina-final-all-options:
##########    english: all-help: long help        ##########
##########    spanish: toda-opcion: larga ayuda   ##########
#### :rutina-inicial-all-help:
####
####
if   [ "$first_option" == "all-help" ]; then echo $give_cover
echo "$title_md [ $first_option ] [ help in english and spanish ] [ all-help md ]"
echo "$text_md [ Choose only help in english ]        [ Type:     $cmd_binary help ]"
echo "$text_md [ Elige solo ayuda en español ]        [ Escribe:  $cmd_binary ayuda ]"
echo "$text_md [ all-help in english and spanish ]    [ Type:     $cmd_binary all-help ]"
echo "$brake_md"
$cmd_binary intro
echo "$text_md"
echo "$brake_md"
echo "$title_md [ full-options ]"
echo "$text_md"
echo "$brake_md"
$cmd_binary full-options
echo "$brake_md"
echo "$text_md"
echo "$title_md [ group-options ]"
echo "$text_md"
echo "$brake_md"
echo "$text_md"
echo "$title_md [ Principal options ]"
echo "$text_md"
echo "$brake_md"
echo "$text_md"
$cmd_binary options-interface
echo "$brake_md"
echo "$text_md"
$cmd_binary firewall-control
echo "$brake_md"
echo "$text_md"
$cmd_binary firewall-list
echo "$brake_md"
echo "$text_md"
$cmd_binary firewall-launch
echo "$text_md"
echo "$brake_md"
$cmd_binary firewall-custom
echo "$text_md"
echo "$title_md [ Secondary options ]"
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-sockets
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-connect
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-rule
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-forward
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-sshd
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-udp
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-tcp
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-icmp
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-nmap
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-sudofw
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-game
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-util
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-mp3
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-pdf
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-qemu
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-speed
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-install
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-addblock
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-dev
echo "$text_md"
echo "$brake_md"
$cmd_binary tool-computer
echo "$text_md"
echo "$brake_md"
$cmd_binary show-hardware
echo "$text_md"
echo "$brake_md"
$cmd_binary show-log
echo "$text_md"
echo "$brake_md"
$cmd_binary show-etc
echo "$text_md"
echo "$brake_md"
$cmd_binary help-about
echo "$text_md"
echo "$brake_md"
$cmd_binary help-help
echo "$text_md"
echo "$brake_md"
$cmd_binary notes
echo "$text_md"
echo "$title_md  [Config cfg example] [Configuracion cfg ejemplo]"
echo "$text_md"
echo "$brake_md"
cat $defaultcfg
echo "$text_md"
echo "$brake_md"
$cmd_binary version
echo "$text_md"
echo 
exit; fi
####
####
#### :rutina-final-all-help:
##########    english: names-config: list some config       ##########
##########    spanish: names-config: lista alguna config    ##########
#### :rutina-inicial-names-config:
####
####
if [ "$first_option" == "names-config" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List configs cfg ] || ||"
echo "$duo_md [ info ] [ list configs files in cfg format ]"
echo "$duo_md [ info ] [ folder ] [ $directory_config ]"
echo 
default_files_cfg="default-full-english.cfg|default-full-spanish.cfg\
|default-mini-english|default-mini-spanish|wizard-full|wizard-mini|nodefault-tmp"
echo "$duo_md"
echo "$tab [ System files ]"
$command_ls -1 $directory_config/ | $command_grep -E -i $default_files_cfg
echo "$duo_md"
echo "$duo_md [ User files ]"
$command_ls -1 $directory_config/ | $command_grep -E -iv $default_files_cfg
echo "$duo_md"
echo "$duo_md [ OK CFG FILES NAMES ]"
echo 
exit; fi
####
####
#### :rutina-final-names-config:
##########    english: group-options: some option     ##########
##########    spanish: group-options: alguna opcion   ##########
#### :rutina-inicial-group-options:
####
####
if   [ "$first_option" == "group-options" ]; then echo $give_cover
echo "$text_md [ ok ] [ $first_option ] [ List group options ] [ group-options md ] || ||"
echo "$text_md" 
echo "$text_md [ english info ] [ Help to one group ]"
echo "$text_md [ spanish info ] [ Ayuda a un grupo  ]"
echo "$text_md" 
echo "$title_md                   [ Principal options ]"
echo "$text_md" 
echo "$text_md $tab options-interface" 
echo "$text_md $tab_lang_english                  Manage the interface with txt or cli or gui or log"
echo "$text_md $tab_lang_spanish                  Manage el interfaz con txt o cli o gui or log"
echo "$text_md $tab firewall-control"
echo "$text_md $tab_lang_english                  Control the iptables firewall rules"
echo "$text_md $tab_lang_spanish                  Controla las reglas de iptables"
echo "$text_md $tab firewall-list"
echo "$text_md $tab_lang_english                  List the iptables firewall rules"
echo "$text_md $tab_lang_spanish                  Lista las reglas de iptables"
echo "$text_md $tab firewall-launch"
echo "$text_md $tab_lang_english                  Launch the iptables firewall rules"
echo "$text_md $tab_lang_spanish                  Lanza las reglas de iptables"
echo "$text_md $tab firewall-custom"
echo "$text_md $tab_lang_english                  Create, modify and show configurations"
echo "$text_md $tab_lang_spanish                  Crea, modifica y muestra configuraciones"
echo "$text_md"
echo "$brake_md"
echo "$title_md                   [ tool options ]"
echo "$text_md" 
echo "$text_md $tab tool-sockets"
echo "$text_md $tab_lang_english                  List net sockets ip in system"
echo "$text_md $tab_lang_spanish                  Lista sockets de red ip en el sistema"
echo "$text_md $tab tool-forward"
echo "$text_md $tab_lang_english                  list, active and desactive ipforward in linux"
echo "$text_md $tab_lang_spanish                  lista, activa y desactiva ipforward en linux"
echo "$text_md $tab tool-tcp"
echo "$text_md $tab_lang_english                  Several tools tcp"
echo "$text_md $tab_lang_spanish                  Varias herramientas tcp"
echo "$text_md $tab tool-udp"
echo "$text_md $tab_lang_english                  Several tools udp"
echo "$text_md $tab_lang_spanish                  Varias herramientas udp"
echo "$text_md $tab tool-icmp"
echo "$text_md $tab_lang_english                  Several tools icmp"
echo "$text_md $tab_lang_spanish                  Varias herramientas icmp"
echo "$text_md $tab tool-nmap"
echo "$text_md $tab_lang_english                  Port scan"
echo "$text_md $tab_lang_spanish                  Escaneo de puertos"
echo "$text_md $tab tool-sudofw"
echo "$text_md $tab_lang_english                  Tool to auth sudo a users for fwiptables"
echo "$text_md $tab_lang_spanish                  Herramienta de autorizacion a usuarios para fwiptables"
echo "$text_md $tab tool-install"
echo "$text_md $tab_lang_english                  Tool to install and upgrade fwiptables"
echo "$text_md $tab_lang_spanish                  Herramienta para instalar y actualizar fwiptables"
echo "$text_md $tab tool-addblock"
echo "$text_md $tab_lang_english                  Tool for block dangerous sites"
echo "$text_md $tab_lang_spanish                  Herramienta para bloquear peligrosos sitios"
echo "$text_md $tab tool-dev"
echo "$text_md $tab_lang_english                  Tool to developer"
echo "$text_md $tab_lang_spanish                  Herramienta de desarrollo"
echo "$text_md $tab tool-speed"
echo "$text_md $tab_lang_english                  Several tools for the system"
echo "$text_md $tab_lang_spanish                  Varias herramientas para el sistema"
echo "$text_md" 
echo "$brake_md"
echo "$title_md                   [ show options ]"
echo "$text_md" 
echo "$text_md $tab show-etc"
echo "$text_md $tab_lang_english                  Show net files in /etc/"
echo "$text_md $tab_lang_spanish                  Muestra archivos de red de /etc/"
echo "$text_md $tab show-log"
echo "$text_md $tab_lang_english                  Show logs systems"
echo "$text_md $tab_lang_spanish                  Muestra logs del sistema"
echo "$text_md $tab help-about"
echo "$text_md $tab_lang_english                  About"
echo "$text_md $tab_lang_spanish                  Acerca de"
echo "$text_md $tab help-help"
echo "$text_md $tab_lang_english                  Help"
echo "$text_md $tab_lang_spanish                  Ayuda"
exit; fi
####
####
#### :rutina-final-group-options:
##########    english: firewall-launch: options    ##########
##########    spanish: firewall-launch: opciones   ##########
#### :rutina-inicial-firewall-launch:
####
####
if   [ "$first_option" == "firewall-launch" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ launch rules ] [ firewall-launch md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Launch iptables rules ]"
echo "$text_md [ spanish info ] [ Lanza reglas de iptables ]"
echo "$text_md"
echo "$text_md $tab eraserules" 
echo "$text_md $tab_lang_english          : Remove the iptables rules in ipv4 and ipv6"
echo "$text_md $tab_lang_spanish          : Borra las reglas de iptables en ipv4 y ipv6"
echo "$text_md $tab wizard-mini"
echo "$text_md $tab_lang_english          : Launch one wizard mini to launch iptables rules"
echo "$text_md $tab_lang_spanish          : Lanza un wizard mini para lanzar reglas de iptables"
echo "$text_md $tab wizard-full"
echo "$text_md $tab_lang_english          : Launch one wizard full to launch rules"
echo "$text_md $tab_lang_spanish          : Lanza un wizard completo para lanzar reglas de iptables"
echo "$text_md $tab custom"
echo "$text_md $tab_lang_english          : Launch one custom firewall with one file cfg"
echo "$text_md $tab_lang_spanish          : Lanza un modificado firewall con un archivo cfg"
echo "$text_md $tab off-line"
echo "$text_md $tab_lang_english          : Launch one firewall disconected for all servers and clients except localhost"
echo "$text_md $tab_lang_spanish          : Lanza un Firewall desconectado para todo servidores y clientes excepto localhost"
echo "$text_md $tab all-permisive"
echo "$text_md $tab_lang_english          : Launch one firewall very permisive"
echo "$text_md $tab_lang_spanish          : Lanza un firewall muy permisivo"
echo "$text_md $tab games-shooter"
echo "$text_md $tab_lang_english          : Launch one firewall likes client games for udp non-root"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente juegos udp no-root"
echo "$text_md $tab game-wesnoth"
echo "$text_md $tab_lang_english          : Launch one firewall likes client game of battle for westnoth"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente del juego la batalla por westnoth"
echo "$text_md $tab game-minetest"
echo "$text_md $tab_lang_english          : Launch one firewall likes client game of minecraft or minetest"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente de juego minecraft or minetest"
echo "$text_md $tab game-freeciv"
echo "$text_md $tab_lang_english          : Launch one firewall likes client game of freeciv"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente de juego freeciv"
echo "$text_md $tab game-widelands"
echo "$text_md $tab_lang_english          : Launch one firewall likes client game of widelands"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente de juego widelands"
echo "$text_md $tab client-web"
echo "$text_md $tab_lang_english          : Launch one firewall likes client web and ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente web y ssh"
echo "$text_md $tab client-vnc"
echo "$text_md $tab_lang_english          : Launch one firewall likes client web and ssh and vnc"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente web y ssh y vnc"
echo "$text_md $tab client-torrent"
echo "$text_md $tab_lang_english          : Launch one firewall likes client web and ssh and torrent"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente web y ssh y torrent"
echo "$text_md $tab client-vpn"
echo "$text_md $tab_lang_english          : Launch one firewall likes client web and ssh and vpn"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente web y ssh y vpn"
echo "$text_md $tab client-tor"
echo "$text_md $tab_lang_english          : Launch one firewall with browser with tor"
echo "$text_md $tab_lang_spanish          : Lanza un firewall para nevagar con tor"
echo "$text_md $tab client-squid"
echo "$text_md $tab_lang_english          : Launch one firewall likes client squid"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente squid"
echo "$text_md $tab lan-tor"
echo "$text_md $tab_lang_english          : Launch one firewall only to browser with tor"
echo "$text_md $tab_lang_spanish          : Lanza un firewall solo para nevagar con tor"
echo "$text_md $tab lan-vpn"
echo "$text_md $tab_lang_english          : Launch one firewall only to browser with vpn"
echo "$text_md $tab_lang_spanish          : Lanza un firewall solo para nevagar con vpn"
echo "$text_md $tab shield-ssh"
echo "$text_md $tab_lang_english          : Launch one firewall likes server ssh with SHIELD: max 6-new-connectios at each-ip/each-hour"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor ssh con escudo: maximo 6-nuevas-conexiones a cada-ip/cada-hora"
echo "$text_md $tab server-ssh"
echo "$text_md $tab_lang_english          : Launch one firewall likes server ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor ssh"
echo "$text_md $tab server-web" 
echo "$text_md $tab_lang_english          : Launch one firewall likes server web and ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor web y ssh"
echo "$text_md $tab server-vnc"
echo "$text_md $tab_lang_english          : Launch one firewall likes server ssh and vnc"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor ssh y vnc"
echo "$text_md $tab server-samba"
echo "$text_md $tab_lang_english          : Launch one firewall samba and ssh likes client and server both"
echo "$text_md $tab_lang_spanish          : Lanza un firewall sambla y ssh como cliente y servidor ambos"
echo "$text_md $tab server-print"
echo "$text_md $tab_lang_english          : Launch one firewall likes server ipp, printer and ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor ipp, printer y ssh"
echo "$text_md $tab server-lamp"
echo "$text_md $tab_lang_english          : Launch one firewall likes server LAMP"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor LAMP"
echo "$text_md $tab server-mail"
echo "$text_md $tab_lang_english          : Launch one firewall likes server mail / email"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor mail / email"
echo "$text_md $tab server-news"
echo "$text_md $tab_lang_english          : Launch one firewall likes server news nntp"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor news nntp"
echo "$text_md $tab server-ftp"
echo "$text_md $tab_lang_english          : Launch one firewall likes server ftp"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor ftp"
echo "$text_md $tab server-teamspeak"
echo "$text_md $tab_lang_english          : Launch one firewall likes server teamspeak"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor teamspeak"
echo "$text_md $tab server-mumble"
echo "$text_md $tab_lang_english          : Launch one firewall likes server mumble"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor mumble"
echo "$text_md $tab server-sql"
echo "$text_md $tab_lang_english          : Launch one firewall likes server sql"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor sql"
echo "$text_md $tab server-asterisk"
echo "$text_md $tab_lang_english          : Launch one firewall likes server asterisk"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor asterisk"
echo "$text_md $tab server-squid"
echo "$text_md $tab_lang_english          : Launch one firewall likes server squid"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor squid"
exit; fi
####
####
#### :rutina-final-firewall-launch:
##########    english: firewall-control: options    ##########
##########    spanish: firewall-control: opciones   ##########
#### :rutina-inicial-firewall-control:
####
####
if   [ "$first_option" == "firewall-control" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ control rules ] [ firewall-control md ] || ||"
echo "$text_md" 
echo "$text_md [ english info ] [ Control iptables rules ]"
echo "$text_md [ spanish info ] [ Controla reglas de iptables ]"
echo "$text_md"
echo "$text_md $tab stop" 
echo "$text_md $tab_lang_english          : Save and stop the rules"
echo "$text_md $tab_lang_spanish          : Guarda y para las reglas"
echo "$text_md $tab continue"
echo "$text_md $tab_lang_english          : continue with old rules"
echo "$text_md $tab_lang_spanish          : Continua con las viejas reglas"
echo "$text_md $tab reset" 
echo "$text_md $tab_lang_english          : Reset the rules"
echo "$text_md $tab_lang_spanish          : Resetea las reglas"
echo "$text_md $tab names" 
echo "$text_md $tab_lang_english          : Alias to names"
echo "$text_md $tab_lang_spanish          : Apodo a names"
echo "$text_md $tab names" 
echo "$text_md $tab_lang_english          : Show the files of firewall standard"
echo "$text_md $tab_lang_spanish          : Muestra los archivos de firewall estandard guardados"
echo "$text_md $tab show" 
echo "$text_md $tab_lang_english          : Show the files in firewall standard"
echo "$text_md $tab_lang_spanish          : Muestra los archivos de firewall estandard"
echo "$text_md $tab save" 
echo "$text_md $tab_lang_english          : Save the files in firewall standard"
echo "$text_md $tab_lang_spanish          : Guarda los archivos de firewall estandard"
echo "$text_md $tab load" 
echo "$text_md $tab_lang_english          : Restore files from firewall standard"    
echo "$text_md $tab_lang_spanish          : Recupera los archivos de firewall estandard"
echo "$text_md $tab actual" 
echo "$text_md $tab_lang_english          : Show the actual iptables standard"
echo "$text_md $tab_lang_spanish          : Muestra el actual firewall estandard"
exit; fi
####
####
#### :rutina-final-firewall-control:
##########    english: firewall-conceptual: options    ##########
##########    spanish: firewall-conceptual: opciones   ##########
#### :rutina-inicial-firewall-conceptual:
####
####
if   [ "$first_option" == "firewall-conceptual" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List rules ] [ firewall-conceptual md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ List filter iptables rules ]"
echo "$text_md [ spanish info ] [ Lista reglas de iptables filtros ]"
echo "$text_md"
echo "$text_md $tab list4|ls4"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv4 with hide no used"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla filtros desde ipv4 esconde no usadas"
echo "$text_md $tab list6|ls6"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv6 with hide no used"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla filtros desde ipv6 esconde no usadas"
echo "$text_md" 
echo "$text_md $tab status"
echo "$text_md $tab_lang_english          : List iptables filter rules ip4 and ipv6 when there are only default route"
echo "$text_md $tab_lang_spanish          : Lista filtros de iptables rules ip4 y ip6 solo cuando hay ruta por defecto"
echo "$text_md" 
echo "$text_md $tab list-filter4"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista iptables reglas de filtros desde ipv4"
echo "$text_md $tab list-filter6"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista iptables reglas de filtros desde ipv6"
echo "$text_md $tab list-nat4"
echo "$text_md $tab_lang_english          : List iptables nat rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista iptables nat reglas de ipv4"
echo "$text_md $tab list-nat6"
echo "$text_md $tab_lang_english          : List iptables nat rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista iptables nat reglas de ipv6"
echo "$text_md $tab list-mangle4"
echo "$text_md $tab_lang_english          : List iptables mangle rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista reglas de manipulacion ipv4"
echo "$text_md $tab list-mangle6"
echo "$text_md $tab_lang_english          : List iptables mangle rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista reglas de manipulacion ipv6"
echo "$text_md $tab list-raw4"
echo "$text_md $tab_lang_english          : List iptables raw rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista reglas directas de ipv4"
echo "$text_md $tab list-raw6"
echo "$text_md $tab_lang_english          : List iptables raw rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista reglas directas de ipv6"
echo "$text_md $tab list-security4"
echo "$text_md $tab_lang_english          : List iptables security rules from ipv4"
echo "$text_md $tab_lang_spanish          : lista reglas de seguridad de ipv4"
echo "$text_md $tab list-security6"
echo "$text_md $tab_lang_english          : List iptables security rules from ipv6"
echo "$text_md $tab_lang_spanish          : lista reglas de seguridad de ipv6"
echo "$text_md"
echo "$text_md $tab list-ebtables"
echo "$text_md $tab_lang_english          : List rules mac ethernet"
echo "$text_md $tab_lang_spanish          : Lista reglas mac de ethernet"
echo "$text_md $tab list-arptables"
echo "$text_md $tab_lang_english          : List rules arp tables arp from arpanet"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla de arpanet"
exit; fi
####
####
#### :rutina-final-firewall-conceptual:
##########    english: firewall-numeral: options    ##########
##########    spanish: firewall-numeral: opciones   ##########
#### :rutina-inicial-firewall-numeral:
####
####
if   [ "$first_option" == "firewall-numeral" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List rules ] [ firewall-numeral md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ List filter iptables rules ]"
echo "$text_md [ spanish info ] [ Lista reglas de iptables filtros ]"
echo "$text_md"
echo "$text_md $tab listn4|lsn4"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv4 with hide no used"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla filtros desde ipv4 esconde no usadas"
echo "$text_md $tab listn6|lsn6"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv6 with hide no used"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla filtros desde ipv6 esconde no usadas"
echo "$text_md" 
echo "$text_md $tab status"
echo "$text_md $tab_lang_english          : List iptables filter rules ip4 and ipv6 when there are only default route"
echo "$text_md $tab_lang_spanish          : Lista filtros de iptables rules ip4 y ip6 solo cuando hay ruta por defecto"
echo "$text_md" 
echo "$text_md $tab listn-filter4"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista iptables reglas de filtros desde ipv4"
echo "$text_md $tab listn-filter6"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista iptables reglas de filtros desde ipv6"
echo "$text_md $tab listn-nat4"
echo "$text_md $tab_lang_english          : List iptables nat rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista iptables nat reglas de ipv4"
echo "$text_md $tab listn-nat6"
echo "$text_md $tab_lang_english          : List iptables nat rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista iptables nat reglas de ipv6"
echo "$text_md $tab listn-mangle4"
echo "$text_md $tab_lang_english          : List iptables mangle rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista reglas de manipulacion ipv4"
echo "$text_md $tab listn-mangle6"
echo "$text_md $tab_lang_english          : List iptables mangle rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista reglas de manipulacion ipv6"
echo "$text_md $tab listn-raw4"
echo "$text_md $tab_lang_english          : List iptables raw rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista reglas directas de ipv4"
echo "$text_md $tab listn-raw6"
echo "$text_md $tab_lang_english          : List iptables raw rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista reglas directas de ipv6"
echo "$text_md $tab listn-security4"
echo "$text_md $tab_lang_english          : List iptables security rules from ipv4"
echo "$text_md $tab_lang_spanish          : lista reglas de seguridad de ipv4"
echo "$text_md $tab listn-security6"
echo "$text_md $tab_lang_english          : List iptables security rules from ipv6"
echo "$text_md $tab_lang_spanish          : lista reglas de seguridad de ipv6"
echo "$text_md"
echo "$text_md $tab list-ebtables"
echo "$text_md $tab_lang_english          : List rules mac ethernet"
echo "$text_md $tab_lang_spanish          : Lista reglas mac de ethernet"
echo "$text_md $tab list-arptables"
echo "$text_md $tab_lang_english          : List rules arp tables arp from arpanet"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla de arpanet"
exit; fi
####
####
#### :rutina-final-firewall-numeral:
##########    english: firewall-custom: options   ##########
##########    spanish: firewall-custom: opciones  ##########
#### :rutina-inicial-firewall-custom:
####
####
if   [ "$first_option" == "firewall-custom" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool custom rules config ] [ firewall-custom md ] || ||"
echo "$text_md" 
echo "$text_md [ english info ] [ custom configs ]"
echo "$text_md [ spanish info ] [ Herramienta de configuraciones de reglas ]"
echo "$text_md"
echo "$text_md $tab new-full-config"
echo "$text_md $tab_lang_english          : Create a new advance configfile.cfg in english"
echo "$text_md $tab_lang_spanish          : Crea una nueva avanzada configfile.cfg en ingles"
echo "$text_md $tab nueva-completa-config"
echo "$text_md $tab_lang_english          : Create a new advance configfile.cfg in spanish"
echo "$text_md $tab_lang_spanish          : Crea una nueva avanzada configfile.cfg en español"
echo "$text_md $tab new-mini-config"
echo "$text_md $tab_lang_english          : Create a new basic configfile.cfg in english"
echo "$text_md $tab_lang_spanish          : Crea una nueva basica configfile.cfg en ingles"
echo "$text_md $tab nueva-mini-config"
echo "$text_md $tab_lang_english          : Create a new basic configfile.cfg in spanish"
echo "$text_md $tab_lang_spanish          : Crea una nueva basica configfile.cfg en español"
echo "$text_md $tab regen-config"
echo "$text_md $tab_lang_english          : regen-config wizard templates y cfg templates files"
echo "$text_md $tab_lang_spanish          : regen-configera plantillas wizard y plantillas cfg"
echo "$text_md $tab names-config"
echo "$text_md $tab_lang_english          : List config files cfg"
echo "$text_md $tab_lang_spanish          : Lista las configuraciones de archivo cfg"
echo "$text_md $tab modify-config"
echo "$text_md $tab_lang_english          : Edit one configfile.cfg"
echo "$text_md $tab_lang_spanish          : Edita una configuracion.cfg"
echo "$text_md $tab show-config"
echo "$text_md $tab_lang_english          : Show one configfile.cfg"
echo "$text_md $tab_lang_spanish          : Muestra una configuracion.cfg"
echo "$text_md $tab del-config"
echo "$text_md $tab_lang_english          : Delete one configuration file"
echo "$text_md $tab_lang_spanish          : Borra una configuracion.cfg"
exit; fi
####
####
#### :rutina-final-firewall-custom:
##########    english: options-interface: options   ##########
##########    spanish: user-intarface: opciones    ##########
#### :rutina-inicial-options-interface:
####
####
if   [ "$first_option" == "options-interface" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ control interface ] [ options-interface md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ control interface ]" 
echo "$text_md [ spanish info ] [ control de interfaz ]"
echo "$text_md"
echo "$text_md $tab txt OR -txt OR -t"
echo "$text_md $tab_lang_english          : Output to Text line"
echo "$text_md $tab_lang_spanish          : Salida a linea de texto"
echo "$text_md $tab cli OR -cli OR -c"
echo "$text_md $tab_lang_english          : Output to text menu"
echo "$text_md $tab_lang_spanish          : Salida a menu de texto"
echo "$text_md $tab gui OR -gui OR -g"
echo "$text_md $tab_lang_english          : Output to graphicall window"
echo "$text_md $tab_lang_spanish          : Salida a ventana grafica"
echo "$text_md $tab log OR -log OR -l"
echo "$text_md $tab_lang_english          : Save the output"
echo "$text_md $tab_lang_spanish          : Guarda la salida"
echo "$text_md $tab help OR -help OR -h"
echo "$text_md $tab_lang_english          : Output help in text plain format"
echo "$text_md $tab_lang_spanish          : Salida ayuda en text con formato plano"
echo "$text_md $tab info OR -info OR -i"
echo "$text_md $tab_lang_english          : Output help in text with rst format"
echo "$text_md $tab_lang_spanish          : Salida ayuda en text con formato rst"
echo "$text_md $tab web OR -web OR -w"
echo "$text_md $tab_lang_english          : Output in favorite text web browser"
echo "$text_md $tab_lang_spanish          : Salida en favorito navegador web de texto"
echo "$text_md $tab null OR -null OR -n"
echo "$text_md $tab_lang_english          : Output in output hidden"
echo "$text_md $tab_lang_spanish          : Salida en salida oculta"
echo "$text_md $tab tor OR -tor"
echo "$text_md $tab_lang_english          : Run in tor, necesary tor daemon ant torify command"
echo "$text_md $tab_lang_spanish          : Ejecuta en tor, necesario daemon tor y comando torify"
echo "$text_md $tab cli-menu"
echo "$text_md $tab_lang_english          : Text cli interface from menus"
echo "$text_md $tab_lang_spanish          : Interfaz de menus desde texto"
echo "$text_md $tab gui-menu"
echo "$text_md $tab_lang_english          : Gui interface from menu"
echo "$text_md $tab_lang_english          : Interfaz grafica desde menu"
echo "$text_md $tab gui-shell"
echo "$text_md $tab_lang_english          : Gui with command line interface"
echo "$text_md $tab_lang_spanish          : Gui con interfaz desde linea de comandos"
exit; fi
####
####
#### :rutina-final-options-interface:
##########    english: default-state: state for default     ##########
##########    spanish: default-state: stado por defecto     ##########
#### :rutina-inicial-default-state:
####
####
if   [ "$first_option" == "default-state" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ default state ] [ default-state md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ default state ]"
echo "$text_md [ spanish info ] [ Herramienta de stado por defecto ]"
echo "$text_md"
echo "$text_md $tab preferences-read"
echo "$text_md $tab_lang_english          : Show the config for default to program"
echo "$text_md $tab_lang_spanish          : Muestra la configuracion por defecto del programa"
echo "$text_md $tab preferences-modify"
echo "$text_md $tab_lang_english          : Modify the config for default to program"
echo "$text_md $tab_lang_spanish          : modifica la configuracion por defecto del programa"
echo "$text_md $tab preferences-regen"
echo "$text_md $tab_lang_english          : Auto regen the config for default to program"
echo "$text_md $tab_lang_spanish          : Auto regenera la configuracion por defecto del programa"
echo "$text_md $tab ip4"
echo "$text_md $tab_lang_english          : info about ip4"
echo "$text_md $tab_lang_spanish          : info aceca ip4"
echo "$text_md $tab ip6"
echo "$text_md $tab_lang_english          : info about ip6"
echo "$text_md $tab_lang_spanish          : info about ip6"
echo "$text_md $tab install"
echo "$text_md $tab_lang_english          : install this program"
echo "$text_md $tab_lang_spanish          : Instala this program"
echo "$text_md $tab uninstall"
echo "$text_md $tab_lang_english          : uninstall this program"
echo "$text_md $tab_lang_spanish          : Desinstala this program"
echo "$text_md $tab upgrade"
echo "$text_md $tab_lang_english          : Upgrade this program"
echo "$text_md $tab_lang_spanish          : Actualiza this program"
exit; fi
####
####
#### :rutina-final-default-state:
##########    english: tool-sockets: options sockets    ##########
##########    spanish: tool-sockets: opciones sockets   ##########
#### :rutina-inicial-tool-sockets:
####
####
if   [ "$first_option" == "tool-sockets" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool sockets ] [ tool-sockets md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool sockets ]"
echo "$text_md [ spanish info ] [ Herramienta de sockets ]"
echo "$text_md"
echo "$text_md $tab info-system"
echo "$text_md $tab_lang_english          : List system info"
echo "$text_md $tab_lang_spanish          : Lista informacion del sistema"
echo "$text_md $tab info-net"
echo "$text_md $tab_lang_english          : List system net info"
echo "$text_md $tab_lang_spanish          : Lista informacion de red del sistema"
echo "$text_md $tab info-sockets"
echo "$text_md $tab_lang_english          : List system listen sockets"
echo "$text_md $tab_lang_spanish          : Lista sockets a la escuha del sistema"
echo "$text_md $tab info-nodes"
echo "$text_md $tab_lang_english          : List the conentions arp in the lan"
echo "$text_md $tab_lang_spanish          : Lista las conexiones arp en la red local"
echo "$text_md $tab info-proxy"
echo "$text_md $tab_lang_english          : List system proxy"
echo "$text_md $tab_lang_spanish          : Lista proxy del sistema"
echo "$text_md $tab info-route"
echo "$text_md $tab_lang_english          : Show net devices and ip route tables"
echo "$text_md $tab_lang_spanish          : Muestra los dispositivos de red y la tabla de rutas"
echo "$text_md $tab ip4"
echo "$text_md $tab_lang_english          : List system net info ipv4"
echo "$text_md $tab_lang_spanish          : Lista informacion de red del sistema ipv4"
echo "$text_md $tab ip6"
echo "$text_md $tab_lang_english          : List system net info ipv6"
echo "$text_md $tab_lang_spanish          : Lista informacion de red del sistema ipv6"
echo "$text_md $tab ss"
echo "$text_md $tab_lang_english          : Show net sockets with command ss"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones de red con ss"
echo "$text_md $tab lsof"
echo "$text_md $tab_lang_english          : Show net sockets with command lsof"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones con lsof"
echo "$text_md $tab netstat"
echo "$text_md $tab_lang_english          : Show net sockets with command netstat"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones con netstat"
echo "$text_md $tab netstat-nat"
echo "$text_md $tab_lang_english          : Show net sockets with command netstat-nat"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones con netstat-nat"
echo "$text_md $tab web-cert"
echo "$text_md $tab_lang_english          : Get one ssl certificated to one web with port https(443)"
echo "$text_md $tab_lang_spanish          : Obtiene un certificado ssl a una web con puerto https(443)" 
echo "$text_md $tab tcpdump"
echo "$text_md $tab_lang_english          : Listen the connections"
echo "$text_md $tab_lang_spanish          : Escucha las conexiones"
exit; fi
####
####
#### :rutina-final-tool-sockets:
##########    english: tool-game: options utils     ##########
##########    spanish: tool-game: opciones utiles   ##########
#### :rutina-inicial-tool-game:
####
####
if   [ "$first_option" == "tool-game" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool game ] [ tool-game md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool game ]"
echo "$text_md [ spanish info ] [ Herramienta de juego ]"
echo "$text_md"
echo "$text_md $tab game-word"
echo "$text_md $tab_lang_english          : Play game to discover a random word with five digits"
echo "$text_md $tab_lang_spanish          : Juega a descubrir una palabra aleatoria de cinco caracteres"
echo "$text_md $tab game-number"
echo "$text_md $tab_lang_english          : Play game to discover a random number with five digits"
echo "$text_md $tab_lang_spanish          : Juega a descubrir un numero aleatorio de cinco digitos"
echo "$text_md $tab game-domain"
echo "$text_md $tab_lang_english          : Discover one domain if generic or if country"
echo "$text_md $tab_lang_spanish          : Descubre un dominio si es generico o si es de pais"
echo "$text_md $tab game-hex"
echo "$text_md $tab_lang_english          : Convert one number hexadecimal in rgb"
echo "$text_md $tab_lang_spanish          : Convierte un numero hexadecimal en rgb"
echo "$text_md $tab game-rgb"
echo "$text_md $tab_lang_english          : Convert one number rgb in hexadecimal"
echo "$text_md $tab_lang_spanish          : Convierte un numero rgb en hexadecimal"
exit; fi
####
####
#### :rutina-final-tool-game:
##########    english: tool-connect: tool wifi          ##########
##########    spanish: tool-connect: herramienta wifi   ##########
#### :rutina-inicial-tool-connect:
####
####
if   [ "$first_option" == "tool-connect" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool connect ] [ tool-connect md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool connect ]"
echo "$text_md [ spanish info ] [ Herramienta de conexion ]"
echo "$text_md"
echo "$text_md $tab iw-scan"
echo "$text_md $tab_lang_english          : list ssid network wifi"
echo "$text_md $tab_lang_spanish          : lista redes ssid wifi"
echo "$text_md $tab iw-info"
echo "$text_md $tab_lang_english          : list connected ssid network wifi"
echo "$text_md $tab_lang_spanish          : lista conectado red ssid wifi"
echo "$text_md $tab wpa-save"
echo "$text_md $tab_lang_english          : Connect to one ssid network wifi for first time"
echo "$text_md $tab_lang_spanish          : Conecta a una red ssid wifi por primera vez"
echo "$text_md $tab wpa-load"
echo "$text_md $tab_lang_english          : Connect to one ssid network wifi with a saved file"
echo "$text_md $tab_lang_spanish          : Conecta a una red ssid wifi usando un archivo guardado"
echo "$text_md $tab dhcp|dhcp-client"
echo "$text_md $tab_lang_english          : Launch a dhcp client"
echo "$text_md $tab_lang_spanish          : Lanza un cliente dhcp"
exit; fi
####
####
#### :rutina-final-tool-connect:
##########    english: tool-rule: options for rules   ##########
##########    spanish: tool-rule: opciones de reglas  ##########
#### :rutina-inicial-tool-rule:
####
####
if   [ "$first_option" == "tool-rule" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool rules ] [ tool-rule md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool rules ]"
echo "$text_md [ spanish info ] [ Herramienta de reglas ]"
echo "$text_md"
echo "$text_md $tab rule-del-shield"
echo "$text_md $tab_lang_english          : Remove the shield to ssh"
echo "$text_md $tab_lang_spanish          : Borra el escudo para ssh"
echo "$text_md $tab rule-del-shield"
echo "$text_md $tab_lang_english          : Insert the shield to ssh"
echo "$text_md $tab_lang_spanish          : Inserta el escudo para ssh"
echo "$text_md $tab rule-de-num"
echo "$text_md $tab_lang_english          : Delete a number rule"
echo "$text_md $tab_lang_spanish          : Borra un numero de regla"
exit; fi
####
####
#### :rutina-final-tool-rule:
##########    english: tool-forward: options ipforwading   ##########
##########    spanish: tool-forward: opciones ipforwading  ##########
#### :rutina-inicial-tool-forward:
####
####
if   [ "$first_option" == "tool-forward" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool forward ] [ tool-forward md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool forward ]"
echo "$text_md [ spanish info ] [ Herramienta de ipforwading ]"
echo "$text_md"
echo "$text_md $tab ipforward-list"
echo "$text_md $tab_lang_english          : Show kernel config about forward"
echo "$text_md $tab_lang_spanish          : Muestra configuracion del kernel sobre reenvios"
echo "$text_md $tab ipforward-on"
echo "$text_md $tab_lang_english          : Active the kernel config about forward"
echo "$text_md $tab_lang_spanish          : Activa la configuracion del kernel sobre reenvios"
echo "$text_md $tab ipforward-off"
echo "$text_md $tab_lang_english          : Deactive kernel config about forward"
echo "$text_md $tab_lang_spanish          : Desactiva la configuracion del kernel sobre reenvios"
exit; fi
####
####
#### :rutina-final-tool-forward:
##########    english: tool-sshd: options ipforwading    ##########
##########    spanish: tool-sshd: opciones ipforwading   ##########
#### :rutina-inicial-tool-sshd:
####
####
if   [ "$first_option" == "tool-sshd" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool ssh tunnel ] [ tool-sshd md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool ssh tunnel ]"
echo "$text_md [ spanish info ] [ Herramienta de ssh tunnel ]"
echo "$text_md"
echo "$text_md $tab sshd-tunnel-info"
echo "$text_md $tab_lang_english          : Show sshd tunnel info"
echo "$text_md $tab_lang_spanish          : Muestra configuracion de ssh tunel"
echo "$text_md $tab sshd-tunnel-on"
echo "$text_md $tab_lang_english          : Active the ssh tunnel"
echo "$text_md $tab_lang_spanish          : Activa el tunel ssh"
echo "$text_md $tab sshd-tunnel-off"
echo "$text_md $tab_lang_english          : Deactive the ssh tunnel"
echo "$text_md $tab_lang_spanish          : Desactiva el tunel ssh"
exit; fi
####
####
#### :rutina-final-tool-sshd:
##########    english: tool-icmp: options    ##########
##########    spanish: tool-cimp: opciones   ##########
#### :rutina-inicial-tool-icmp:
####
####
if   [ "$first_option" == "tool-icmp" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool icmp ] [ tool-icmp md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool icmp ]"
echo "$text_md [ spanish info ] [ Herramienta icmp ]"
echo "$text_md"
echo "$text_md $tab traceicmp-ip4"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv4 icmp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv4 icmp"
echo "$text_md $tab traceicmp-ip6"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv6 icmp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv6 icmp"
echo "$text_md $tab ping-ip4"
echo "$text_md $tab_lang_english          : Do a one ping with to one host with ipv4 icmp"
echo "$text_md $tab_lang_spanish          : Hace un ping con una direccion con ipv4 icmp"
echo "$text_md $tab ping-ip6"
echo "$text_md $tab_lang_english          : Do a one ping with to one host with ipv6 icmp"
echo "$text_md $tab_lang_spanish          : Hace un ping con una direccion con ipv6 icmp"
exit; fi
####
####
#### :rutina-final-tool-icmp:
##########    english: tool-tcp: options   ##########
##########    spanish: tool-tcp: opciones  ##########
#### :rutina-inicial-tool-tcp:
####
####
if   [ "$first_option" == "tool-tcp" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool tcp ] [ tool-tcp md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool tcp ]"
echo "$text_md [ spanish info ] [ Herramienta tcp ]"
echo "$text_md"
echo "$text_md $tab tracetcp-ip4"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv4 tcp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv4 tcp"
echo "$text_md $tab tracetcp-ip6"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv6 tcp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv6 tcp"
echo "$text_md $tab speed-ip4"
echo "$text_md $tab_lang_english          : test bandwith with ipv4"
echo "$text_md $tab_lang_spanish          : Testea la velocidad de conexion con ipv4"
echo "$text_md $tab speed-ip6"
echo "$text_md $tab_lang_english          : Test net bandwith with ipv6"
echo "$text_md $tab_lang_spanish          : Testea la velocidad de conexion con ipv6"
exit; fi
####
####
#### :rutina-final-tool-tcp:
##########    english: tool-udp: options   ##########
##########    spanish: tool-udp: opciones  ##########
#### :rutina-inicial-tool-udp:
####
####
if   [ "$first_option" == "tool-udp" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool udp ] [ tool-udp md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool udp ]"
echo "$text_md [ spanish info ] [ Herramienta udp ]"
echo "$text_md"
echo "$text_md $tab host"
echo "$text_md $tab_lang_english          : Resolve one host"
echo "$text_md $tab_lang_spanish          : Resuelve una direccion a ip"
echo "$text_md $tab dig"
echo "$text_md $tab_lang_english          : Resolve one host"
echo "$text_md $tab_lang_spanish          : Resuelve una direccion a ip"
echo "$text_md $tab resolveip"
echo "$text_md $tab_lang_english          : Resolve one host and viceversa"
echo "$text_md $tab_lang_spanish          : Resuelve una direccion a ip y a host"
echo "$text_md $tab geoip"
echo "$text_md $tab_lang_english          : Locate a one host or ip"
echo "$text_md $tab_lang_spanish          : Localiza una direccion o ip"
echo "$text_md $tab ntpdate|ntpdate-client"
echo "$text_md $tab_lang_english          : Update the system date from ntp server"
echo "$text_md $tab_lang_spanish          : Actualiza la fecha del sistema desde un servidor de fecha"
exit; fi
####
####
#### :rutina-final-tool-udp:
##########    english: tool-nmap: options   ##########
##########    spanish: tool-nmap: opciones  ##########
#### :rutina-inicial-tool-nmap:
####
####
if   [ "$first_option" == "tool-nmap" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool nmap ] [ tool-nmap.md] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool nmap ]"
echo "$text_md [ spanish info ] [ Herramienta nmap ]"
echo "$text_md"
echo "$text_md $tab nmap-tcp"
echo "$text_md $tab_lang_english          : Scan a host/mask per tcp protocol"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por tcp protocolo"
echo "$text_md $tab nmap-syn"
echo "$text_md $tab_lang_english          : Scan a host/mask per syn socket"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por syn socket"
echo "$text_md $tab nmap-fin"
echo "$text_md $tab_lang_english          : Scan a host/mask per fin socket"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por fin socket"
echo "$text_md $tab nmap-udp"
echo "$text_md $tab_lang_english          : Scan a host/mask per udp protocol"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por udp protocolo"
echo "$text_md $tab nmap-ping"
echo "$text_md $tab_lang_english          : Scan a host/mask per ping udp"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por ping protocolo"
exit; fi
####
####
#### :rutina-final-tool-nmap:
##########    english: tool-sudofw: options   ##########
##########    spanish: tool-sudofw: opciones  ##########
#### :rutina-inicial-tool-sudofw:
####
####
if   [ "$first_option" == "tool-sudofw" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool sudo ] [ tool-sudofw md ] || ||"
echo "$text_md"
echo "$text_md [ Tool sudo ]"
echo "$text_md [ Herramienta sudo ]"
echo "$text_md"
echo "$text_md $tab sudofw-adduser" 
echo "$text_md $tab_lang_english          : Allow sudo $cmd_binary to other choosed users"
echo "$text_md $tab_lang_spanish          : Permite sudo $cmd_binary a otros elegidos usuarios"
echo "$text_md $tab sudofw-deluser" 
echo "$text_md $tab_lang_english          : Remove sudo $cmd_binary to other choosed users"
echo "$text_md $tab_lang_spanish          : Borra sudo $cmd_binary a otros elegidos usuarios"
echo "$text_md $tab sudofw-listuser" 
echo "$text_md $tab_lang_english          : List sudo $cmd_binary to other choosed users"
echo "$text_md $tab_lang_spanish          : Lista sudo $cmd_binary a otros elegidos usuarios"
echo "$text_md $tab aliasfw-list" 
echo "$text_md $tab_lang_english          : List the autocompletion alias for $cmd_binary"
echo "$text_md $tab_lang_spanish          : Lista los alias de autocompletar para $cmd_binary"
exit; fi
####
####
#### :rutina-final-tool-sudofw:
##########    english: tool-install: options   ##########
##########    spanish: tool-install: opciones  ##########
#### :rutina-inicial-tool-install:
####
####
if   [ "$first_option" == "tool-install" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool install ] [ tool-install md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool install ]"
echo "$text_md [ spanish info ] [ Herramienta instalar ]"
echo "$text_md"
echo "$text_md $tab install"
echo "$text_md $tab_lang_english          : Install this version actual"
echo "$text_md $tab_lang_spanish          : Instala esta version actual"
echo "$text_md $tab howto-upgrade"
echo "$text_md $tab_lang_english          : Show howto upgrade at the latest version"
echo "$text_md $tab_lang_spanish          : Muestra como actualizar a la ultima version"
echo "$text_md $tab upgrade"
echo "$text_md $tab_lang_english          : Upgrade at the latest stable version"
echo "$text_md $tab_lang_spanish          : Actualiza a la ultima estable version"
echo "$text_md $tab dev-upgrade"
echo "$text_md $tab_lang_english          : Upgrade at the latest git complete-version"
echo "$text_md $tab_lang_spanish          : Actualiza a la ultima git completa-version"
echo "$text_md $tab devmini-upgrade"
echo "$text_md $tab_lang_english          : Upgrade at the latest git mini-version"
echo "$text_md $tab_lang_spanish          : Actualiza a la ultima git mini-version"
echo "$text_md $tab clean-tmp"
echo "$text_md $tab_lang_english          : Remove temporal files of $cmd_binary"
echo "$text_md $tab_lang_spanish          : Borra archivos temporales of $cmd_binary"
exit; fi
####
####
#### :rutina-final-tool-install:
##########    english: tool-addblock: options   ##########
##########    spanish: tool-addblock: opciones  ##########
#### :rutina-inicial-tool-addblock:
####
####
if   [ "$first_option" == "tool-addblock" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool addblock in /etc/hosts ] [ tool-addblock md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool addblock ]"
echo "$text_md [ spanish info ] [ Herramienta de addblock ]"
echo "$text_md"
echo "$text_md $tab addblock-list"
echo "$text_md $tab_lang_english               : Options list to block at dangerous sites from /etc/hosts"
echo "$text_md $tab_lang_spanish               : Lista de opciones para bloquear a peligrosos sitios desde /etc/hosts"
echo "$text_md $tab addblock-on"
echo "$text_md $tab_lang_english               : Active a list to block dangerous sites in /etc/hosts"
echo "$text_md $tab_lang_spanish               : Activa una lista para bloquear sitios peligrosos in /etc/hosts"
echo "$text_md $tab addblock-off"
echo "$text_md $tab_lang_english               : Return to default /etc/hosts"
echo "$text_md $tab_lang_spanish               : Vuelve al archivo por defecto /etc/hosts"
exit; fi
####
####
#### :rutina-final-tool-addblock:
##########    english: tool-dev: options   ##########
##########    spanish: tool-dev: opciones  ########## 
#### :rutina-inicial-tool-dev:
####
####
if   [ "$first_option" == "tool-dev" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool install ] [ tool-dev md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool install ]"
echo "$text_md [ spanish info ] [ Herramienta instalar ]"
echo "$text_md"
echo "$text_md $tab new-versions"
echo "$text_md $tab_lang_english               : Show the list of the last versions"
echo "$text_md $tab_lang_spanish               : Muestra el listado de las ultivas versiones"
echo "$text_md $tab dev-version"
echo "$text_md $tab_lang_english               : Show the link at developer version"
echo "$text_md $tab_lang_spanish               : Muestra en enlace a la version de desarrollo"
echo "$text_md $tab dev-changes"
echo "$text_md $tab_lang_english               : Show the last changes"
echo "$text_md $tab_lang_spanish               : Muestra los ultimos cambios"
echo "$text_md $tab code"
echo "$text_md $tab_lang_english               : Show code source from one option"
echo "$text_md $tab_lang_spanish               : Muestra el codigo fuente de una opcion"
echo "$text_md $tab intro"
echo "$text_md $tab_lang_english               : Show intro $cmd_binary"
echo "$text_md $tab_lang_spanish               : Muestra la intro de $cmd_binary"
exit; fi
####
####
#### :rutina-final-tool-dev:
##########    english: tool-speed: options    ##########
##########    spanish: tool-speed: opciones   ##########
#### :rutina-inicial-tool-speed:
####
####
if   [ "$first_option" == "tool-speed" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool speed ] [ tool-speed md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool benchmark speed ]"
echo "$text_md [ spanish info ] [ Herramienta de medir velocidad ]"
echo "$text_md"
echo "$text_md $tab free|ram|free-ram"
echo "$text_md $tab_lang_english           : Clean for innecesary memory ram"
echo "$text_md $tab_lang_spanish           : Libera la memoria ram innecesaria"
echo "$text_md $tab speed-ram" 
echo "$text_md $tab_lang_english           : Show the speed of ram memory"
echo "$text_md $tab_lang_spanish           : Muestra la velocidad de la memoria ram"
echo "$text_md $tab speed-disk"
echo "$text_md $tab_lang_english           : Show the speed of root hard disk"
echo "$text_md $tab_lang_spanish           : Muestra la velocidad de el disco duro raiz"
echo "$text_md $tab speed-glx"
echo "$text_md $tab_lang_english           : Show frammes for seconds with mesa graphicall"
echo "$text_md $tab_lang_spanish           : Muestra fotogramas por segundo con graficos mesa"
echo "$text_md $tab speed-cpu"
echo "$text_md $tab_lang_english           : Time processor for calculate pi"
echo "$text_md $tab_lang_spanish           : Tiempo de procesador para calcular pi"
exit; fi
####
####
#### :rutina-final-tool-speed:
##########    english: tool-util: options   ##########
##########    spanish: tool-util: opciones  ##########
#### :rutina-inicial-tool-util:
####
####
if   [ "$first_option" == "tool-util" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool util ] [ tool-util md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool utils ]"
echo "$text_md [ spanish info ] [ Utilidad de sistema ]"
echo "$text_md"
echo "$text_md $tab weather"
echo "$text_md $tab_lang_english           : Show the weather in your city"
echo "$text_md $tab_lang_spanish           : Muestra el tiempo en tu ciudad"
echo "$text_md $tab md5sum"
echo "$text_md $tab_lang_english           : Show md5sum from one file"
echo "$text_md $tab_lang_spanish           : Muestra la suma md5sum de un archivo"
echo "$text_md $tab gpg-notes"
echo "$text_md $tab_lang_english           : Write and reewrite notes with crypto"
echo "$text_md $tab_lang_spanish           : Escribe y reescribe notas con cifrado"
exit; fi
####
####
#### :rutina-final-tool-util:
##########    english: tool-mp3: options   ##########
##########    spanish: tool-mp3: opciones  ##########
#### :rutina-inicial-tool-mp3:
####
####
if   [ "$first_option" == "tool-mp3" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool mp3 ] [ tool-mp3 md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool mp3 ]"
echo "$text_md [ spanish info ] [ Utilidad de mp3 ]"
echo "$text_md"
echo "$text_md $tab radio|radio-mp3"
echo "$text_md $tab_lang_english           : connect to one server mp3, see: preferences-read or preferences-modify"
echo "$text_md $tab_lang_spanish           : connecta a un servidor mp3, mira: preferences-read o preferences-modify"
exit; fi
####
####
#### :rutina-final-tool-mp3:
##########    english: tool-pdf: options   ##########
##########    spanish: tool-pdf: opciones  ##########
#### :rutina-inicial-tool-pdf:
####
####
if   [ "$first_option" == "tool-pdf" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool pdf ] [ tool-pdf md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool pdf ]"
echo "$text_md [ spanish info ] [ Utilidad de pdf ]"
echo "$text_md"
echo "$text_md $tab pdf-resize"
echo "$text_md $tab_lang_english           : resize one pdf using ghostscript"
echo "$text_md $tab_lang_spanish           : redimensiona una pdf usando ghostscript"
echo "$text_md $tab pdf-unite"
echo "$text_md $tab_lang_english           : join several pdf in one pdf"
echo "$text_md $tab_lang_spanish           : junta varios pdf en un pdf"
echo "$text_md $tab pdf-separate"
echo "$text_md $tab_lang_english           : seprate one pdf en several pdf"
echo "$text_md $tab_lang_spanish           : separa un pdf en varios pdf"
exit; fi
####
####
#### :rutina-final-tool-pdf:
##########    english: tool-qemu: options   ##########
##########    spanish: tool-qemu: opciones  ##########
#### :rutina-inicial-tool-qemu:
####
####
if   [ "$first_option" == "tool-qemu" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool qemu ] [ tool-qemu md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool to manage machine virtual qemu ]"
echo "$text_md [ spanish info ] [ Utilidad de maquinas virtuales qemu ]"
echo "$text_md"
echo "$text_md $tab qemu-status"
echo "$text_md $tab_lang_english           : Status from qemu"
echo "$text_md $tab_lang_spanish           : Estado de qemu"
echo "$text_md $tab qemu-stop"
echo "$text_md $tab_lang_english           : Stop de qemu virtual machines"
echo "$text_md $tab_lang_spanish           : Para las maquinas virtuales qemu"
echo "$text_md $tab qemu-start"
echo "$text_md $tab_lang_english           : Start a quemu virtual machines"
echo "$text_md $tab_lang_spanish           : Empieza una maquina virtual qemu"
exit; fi
####
####
#### :rutina-final-tool-qemu:
##########    english: tool-computer: options   ##########
##########    spanish: tool-computer: opciones  ##########
#### :rutina-inicial-tool-computer:
####
####
if   [ "$first_option" == "tool-computer" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ tool computer ] [ tool-computer md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Tool computer ]"
echo "$text_md [ spanish info ] [ Herramienta de ordenador ]"
echo "$text_md"
echo "$text_md $tab pc-halt"
echo "$text_md $tab_lang_english           : Launch halt to power off the pc"
echo "$text_md $tab_lang_spanish           : Lanza halt para apagar el pc"
echo "$text_md $tab pc-shutdown"
echo "$text_md $tab_lang_english           : Launch shutdown -h now to power off pc"
echo "$text_md $tab_lang_spanish           : Lanza shutdown -h now para apagar el pc"
echo "$text_md $tab pc-reboot"
echo "$text_md $tab_lang_english           : Launch reboot to reboot the pc"
echo "$text_md $tab_lang_spanish           : Lanza reboot para reiniciar el pc"
exit; fi
####
####
#### :rutina-final-tool-computer:
##########    english: show-etc: options   ##########
##########    spanish: show-etc: opciones  ##########
#### :rutina-inicial-show-etc:
####
####
if   [ "$first_option" == "show-etc" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show etc files ] [ show-etc md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Show configs files from etc ]"
echo "$text_md [ spanish info ] [ Mostrar configuraciones de archivos de etc ]"
echo "$text_md"
echo "$text_md $tab hosts"
echo "$text_md $tab_lang_english           : Show /etc/hosts, hosts local and statics host"
echo "$text_md $tab_lang_spanish           : Muestra /etc/hosts, hosts locales y hosts estaticos"
echo "$text_md $tab protocols"
echo "$text_md $tab_lang_english           : Show /etc/protocols, protocols names"
echo "$text_md $tab_lang_spanish           : Muestra /etc/protocols, nombres de protocolos"
echo "$text_md $tab services"
echo "$text_md $tab_lang_english           : Show /etc/services, ports names"
echo "$text_md $tab_lang_spanish           : Muestra /etc/services, nombres de los puertos"
echo "$text_md $tab hosts.allow" 
echo "$text_md $tab_lang_english           : Show /etc/hosts.allow, hosts allowed in some own server"
echo "$text_md $tab_lang_spanish           : Muestra /etc/hosts.allow, hosts permitidas en algunos propios servidores"
echo "$text_md $tab hosts.deny"
echo "$text_md $tab_lang_english           : Show /etc/hosts.deny, hosts drops in some own server"
echo "$text_md $tab_lang_spanish           : Muestra /etc/hosts.deny, hosts denegadas en algunos propios servidores"
echo "$text_md $tab resolv.conf"
echo "$text_md $tab_lang_english           : Show /etc/resolv.conf, it are the dns configured"
echo "$text_md $tab_lang_spanish           : Muestra /etc/resolv.conf, este es el dns configurado"
exit; fi
####
####
#### :rutina-final-show-etc:
##########    english: show-hardware: options   ##########
##########    spanish: show-hardware: opciones  ##########
#### :rutina-inicial-show-hardware:
####
####
if   [ "$first_option" == "show-hardware" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show hardware info ] [ show-hardware md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Show hardware info ]"
echo "$text_md [ spanish info ] [ Muestra informacion del hardware ]"
echo "$text_md"
echo "$text_md $tab lpinfo"
echo "$text_md $tab_lang_english           : Show the device printers"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de impresora"
echo "$text_md $tab lsblk"
echo "$text_md $tab_lang_english           : Show the device disks"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de disco"
echo "$text_md $tab lsusb"
echo "$text_md $tab_lang_english           : Show the devices usb"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de usb"
echo "$text_md $tab lscpu"
echo "$text_md $tab_lang_english           : Show the devices cpu"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos cpu"
echo "$text_md $tab lsgpu"
echo "$text_md $tab_lang_english           : Show the devices gpu"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos gpu"
echo "$text_md $tab lspci"
echo "$text_md $tab_lang_english           : Show the devices pci"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos pci"
echo "$text_md $tab lshw"
echo "$text_md $tab_lang_english           : Show the hardware devices"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de hardware"
exit; fi
####
####
#### :rutina-final-show-hardware:
##########    english: show-log: options    ##########
##########    spanish: show-log: opciones   ##########
#### :rutina-inicial-show-log:
####
####
if   [ "$first_option" == "show-log" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show log files ] [ show-log md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Show log ]"
echo "$text_md [ spanish info ] [ Mostrar log ]"
echo "$text_md"
echo "$text_md $tab log-ssh"
echo "$text_md $tab_lang_english           : Search logs for ssh in /var/log"
echo "$text_md $tab_lang_spanish           : Busca logs con sshd en /var/log"
echo "$text_md $tab log-search"
echo "$text_md $tab_lang_english           : Search logs whith a prefix in /var/log"
echo "$text_md $tab_lang_spanish           : Busca logs con patron en /var/log"
echo "$text_md $tab filelog"
echo "$text_md $tab_lang_english           : Show over launches with -log"
echo "$text_md $tab_lang_spanish           : Muestra volcados con -log"
echo "$text_md $tab sentlog"
echo "$text_md $tab_lang_english           : Alias a sentlog"
echo "$text_md $tab_lang_spanish           : Apodo a sentlog"
echo "$text_md $tab autolog"
echo "$text_md $tab_lang_english           : Show the headers from autolog"
echo "$text_md $tab_lang_spanish           : Muestra las cabeceras autolog"
exit; fi
####
####
#### :rutina-final-show-log:
##########    english: help-about: options   ##########
##########    spanish: help-about: opciones  ##########
#### :rutina-inicial-help-about:
####
####
if   [ "$first_option" == "help-about" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show about ] [ help-about md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Show about ]"
echo "$text_md [ spanish info ] [ Mostrar acerca de ]"
echo "$text_md"
echo "$text_md $tab about"
echo "$text_md $tab_lang_english           : About"
echo "$text_md $tab_lang_spanish           : Acerca"
echo "$text_md $tab version"
echo "$text_md $tab_lang_english           : Info version"
echo "$text_md $tab_lang_spanish           : Informacion de version"
echo "$text_md $tab depends"
echo "$text_md $tab_lang_english           : Show depends"
echo "$text_md $tab_lang_spanish           : Muestra dependencias"
echo "$text_md $tab examples"
echo "$text_md $tab_lang_english           : Show examples"
echo "$text_md $tab_lang_spanish           : Muestra ejemplos"
echo "$text_md $tab config-eng"
echo "$text_md $tab_lang_english           : Config example with comments in english"
echo "$text_md $tab_lang_spanish           : Ejemplo de configuracion con comentarios en ingles"
echo "$text_md $tab config-spa"
echo "$text_md $tab_lang_english           : Config example with comments in spanish"
echo "$text_md $tab_lang_spanish           : Ejemplo de configuracion con comentarios en español"
echo "$text_md $tab license"
echo "$text_md $tab_lang_english           : Show license gpl v2"
echo "$text_md $tab_lang_spanish           : Muestra la licencia gpl v2"
exit; fi
####
####
#### :rutina-final-help-about:
##########    english: help-help: options   ##########
##########    spanish: help-help: opciones  ##########
#### :rutina-inicial-help-help:
####
####
if   [ "$first_option" == "help-help" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show help ] [ help-help md ] || ||"
echo "$text_md"
echo "$text_md [ english info ] [ Show help ]"
echo "$text_md [ spanish info ] [ Mostrar ayuda ]"
echo "$text_md"
echo "$text_md $tab all-help"
echo "$text_md $tab_lang_english           : Show help in english and spanish"
echo "$text_md $tab_lang_spanish           : Muestra la ayuda en ingles y en español"
echo "$text_md $tab readme"
echo "$text_md $tab_lang_english           : Show help in english"
echo "$text_md $tab_lang_spanish           : Muestra la ayuda en ingles"
echo "$text_md $tab leeme"
echo "$text_md $tab_lang_english           : Show help in spanish"
echo "$text_md $tab_lang_spanish           : Muestra la ayuda en español"
echo "$text_md $tab group-options" 
echo "$text_md $tab_lang_english           : Show the options groups"
echo "$text_md $tab_lang_spanish           : Muestra los grupos de opciones"
echo "$text_md $tab mini-options"
echo "$text_md $tab_lang_english           : Show basic options"
echo "$text_md $tab_lang_spanish           : Muestra lista de opciones"
echo "$text_md $tab full-options"
echo "$text_md $tab_lang_english           : Show full options"
echo "$text_md $tab_lang_spanish           : Muestra lista de opciones"
echo "$text_md $tab options"
echo "$text_md $tab_lang_english           : Alias to full options"
echo "$text_md $tab_lang_spanish           : Apodo a full-options"
echo "$text_md $tab notes"
echo "$text_md $tab_lang_english           : Several notes"
echo "$text_md $tab_lang_spanish           : Varias notas"
exit; fi
####
####
#### :rutina-final-help-help:
##########    english: notes: notes to configure iptables      ##########
##########    spanish: notes: notas para configurar iptables   ##########
#### :rutina-inicial-notes:
####
####
if [ "$first_option" == "notes" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List notes about ] [ notes md ] || ||"
echo "$text_md"
echo "$text_md  [ legacy or nft ] [ whith one of them is sufficent ] [ becouse when one accept then go to the other one ]"
echo "$text_md  [ legacy or nft ] [ con uno de ellos es suficiente ] [ porque cuando uno acepta despues va a la otro ]" 
echo "$text_md"
echo "$text_md  [ allow_shield_maxtries ] [ limit a attack per bruteforce to us ssh server] "
echo "$text_md  [ allow_shield_maxtries ] [ limita un ataque por fuerza bruta a nuestro servidor ssh ]"
echo "$text_md"
echo "$text_md  [ net vpn ]  [ virtual private network ] [ whitelist ]"
echo "$text_md  [ net vpn ] [ red privada virtual ]     [ lista blanca ]"
echo "$text_md"
echo "$text_md  Host [net vpn] excepcionals hosts has conection allowed in firewall"
echo "$text_md  Host [net vpn] excepcionales hosts tienen la conexion permitida en el firewall"
echo "$text_md"
echo "$text_md  [net blacklist] [deny host]"
echo "$text_md  [net blacklist] [Lista negra]"
echo "$text_md"  
echo "$text_md  Host [ net blacklist ] excepcionals hosts has conection dropped in firewall"
echo "$text_md  Host [ net blacklist ] expcecionales hosts tienen la conexion denegada en firewall"
echo "$text_md"
echo "$text_md  [ allow output uid ] [user and group]"
echo "$text_md  [ allow output uid ] [usuario y grupo]"
echo "$text_md"
echo "$text_md  User and/or group excepcional have output conection allowed in firewall"
echo "$text_md  Usuario y/o grupo excepcional tienen la salida permitida en firewall"
echo "$text_md"
echo "$text_md  [ Notes ] [ Two iptables netfilter ]"
echo "$text_md  [ Notas ] [ Dos iptables netfilter ]"
echo "$text_md"
echo "$text_md  iptables-legacy   is    support for xtables "
echo "$text_md  iptables-nft      is    support for nftables "
echo "$text_md"
echo "$text_md  [ Notes ] [necesary ports to connect with ipv4 and ipv6 in UDP protocol]"
echo "$text_md  [ Notas ] [puertos necesarios para conectar con ipv4 y ipv6 en UDP protocolo]"
echo "$text_md"
echo "$text_md  ntp    : Port necesary to update the time and date"
echo "$text_md         : Puerto necesario para actualizar la hora y fecha"
echo "$text_md  bootpc : Port necesary to dhcp and get ip"
echo "$text_md         : Puerto necesario para actualizar y conseguir la ip"
echo "$text_md  domain : This port is necesary to domain resolver"
echo "$text_md         : Puerto necesario para resolver dominios"
echo "$text_md  https  : This port is necesary for udp named web html5"
echo "$text_md         : Puerto necesario para udp llamado web html5"
echo "$text_md"
echo "$text_md  [ Notes ] [necesary protocols for ip v6]"
echo "$text_md  [ Notas ] [protocolos necesarios para ip v6]"
echo "$text_md"
echo "$text_md  ipv6-icmp : Necesary protocol in ipv6"
echo "$text_md        : Protocolo necesario en ipv6"
echo "$text_md  ipv4 protocols : ipv6 works too with old ipv4 procotols"
echo "$text_md        : ipv6 funciona tambien con viejos ipv4 protocolos"
echo "$text_md"
echo "$text_md  [ License ]"
echo "$text_md"
echo "$text_md  Download the latest version $cmd_name from sourceforge"
echo "$text_md  $url_web_latest"
echo "$text_md  $flicense"
echo "$text_md  $license_gpl"
echo "$text_md"
echo  
exit; fi
####
####
#### :rutina-final-notes:
##########    english: depends: depends            ##########
##########    spanish: dependencias: dependencias  ##########
#### :rutina-inicial-depends:
####
####
if [ "$first_option" == "depends" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ List for depends programs ] [ depends md ] || ||"
echo
echo "$title_md [ Configuration files ]"
echo "$text_md Directory data:          $directory_data"
echo "$text_md Directory temp:          $directory_tmp"
echo "$text_md File Preferences:        $default_preferences"
echo
echo "$title_md [ Log files ]"
echo "$text_md File autolog:            $default_autolog"
echo "$text_md File filelog:            $default_filelog"
echo
echo "$title_md [ Automatic interfaces  ]"
echo "$text_md Interface txt:           $command_bash"
echo "$text_md Interface cli:           $favorite_text_dialog"
echo "$text_md Interface gui:           $favorite_graphicall_dialog"
echo 
echo "$title_md [ Automatic iptables ]"
echo "$text_md iptables legacy:         $command_iptables_legacy"
echo "$text_md iptables nft:            $command_iptables_nft"
echo "$text_md ip6tables legacy:        $command_ip6tables_legacy"
echo "$text_md ip6tables nft:           $command_ip6tables_nft"
echo "$text_md arptables:               $command_arptables"
echo "$text_md ebtables:                $command_ebtables"
echo
echo "$title_md [ Automatic favorites ]"
echo "$text_md Automatic text editor:    Text editor command      :   $favorite_text_editor"
echo "$text_md Automatic text browser:   Text browser command     :   $favorite_text_browser"
echo "$text_md Automatic text music:     music player command     :   $favorite_radio_command"
echo "$text_md Automatic text date:      date client command      :   $favorite_date_command"
echo "$text_md Automatic text dhcp:      dhcp client command      :   $favorite_dhcp_command" 
echo 
exit; fi
####
####
#### :rutina-final-depends:
##########    english: -gui: Manage gui con three options  ##########
##########    spanish: -gui: Maneja gui con tres opciones  ##########
####
####
#### english: with third option
#### spanish: con tercera opcion
####
####
if [ "$first_option" == "-gui" ] && [ "$third_option" != "$NULL" ] ; then $nada
echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]" ; exit ;; esac
case $second_option in
#### 
#### 
"new-mini-config")
cp "$defaultminicfg_eng" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NEW MINI CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"new-full-config")
cp "$defaultfullcfg_eng" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NEW FULL CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-mini-config")
cp "$defaultminicfg_spa" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NUEVA MINI CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-completa-config")
cp "$defaultfullcfg_spa" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="NUEVA COMPLETA CONFIG" 1> "$directory_config/$third_option" ;
if [ -s "$directory_config/$third_option" ]; then $nada ;
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK new config file: $third_option AND launch: $cmd_binary custom $third_option" ; exit
else rm "$directory_config/$third_option" ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"modify-config")
if [ -f "$directory_config/$third_option" ] ; then $nada
else $favorite_graphicall_dialog  --forms $graphic_dimension --text="file not found: $third_option" ; exit ; fi 
cp "$directory_config/$third_option" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="MODIFY CONFIG" 1> "$directory_config/$third_option"
if [ -s "$directory_config/$third_option" ]; then $nada ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK. file: $third_option"
else cp "$directory_temporal/$cmd_config-$third_option" "$directory_config/$third_option"
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled. file: $third_option"; fi
;;
#### 
####
"game-word")$cmd_binary game-word -gui ; exit ;;
"game-number")$cmd_binary game-number -gui ; exit ;;
"game-domain")$cmd_binary game-domain -gui ; exit ;;
####
####
*)$cmd_binary "$second_option" "$third_option" "$quad_option" &> "$temporal_guifinal"
$favorite_graphicall_dialog  --text-info $graphic_dimension --title="Gui Output || $cmd_binary ||" \
--filename="$temporal_guifinal" --auto-scroll ;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
##########    english: -gui: with second option    ##########
##########    spanish: -gui: con segunda opcion    ##########
####
####
if [ "$first_option" == "-gui" ] && [ "$second_option" != "$NULL" ] ; then echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]" ; exit ;; esac
####
case $second_option in
#### 
#### 
"wizard-mini")
archivo="wizard-mini"
cp "$defaultminicfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$archivo" \
--editable --title="WIZARD MINI" 1> "$directory_config/$archivo"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$cmd_binary -gui custom $archivo ; $cmd_binary -gui list4;
else rm "$directory_config/$archivo" ;
$favorite_graphicall_dialog --info $graphic_dimension --text "Ok. $archivo canceled"; fi
;;
#### 
#### 
"wizard-full")
archivo="wizard-full"
cp "$defaultfullcfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$archivo" \
--editable --title="WIZARD FULL" 1> "$directory_config/$archivo"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$cmd_binary -gui custom $archivo ; $cmd_binary -gui list4;
else rm "$directory_config/$archivo" ;
$favorite_graphicall_dialog  --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
####
#### 
#### 
"modify-config")
if [ -f "$directory_config/$third_option" ] ; then $nada
else $favorite_graphicall_dialog  --forms $graphic_dimension --text="file not found: $third_option" ; exit ; fi 
cp "$directory_config/$third_option" "$directory_temporal/$cmd_config-$third_option"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$directory_temporal/$cmd_config-$third_option" \
--editable --title="MODIFY CONFIG" 1> "$directory_config/$third_option"
if [ -s "$directory_config/$third_option" ]; then $nada ; 
$favorite_graphicall_dialog  --forms $graphic_dimension --text="OK. file: $third_option"
else cp "$directory_temporal/$cmd_binary-$third_option" "$directory_config/$third_option"
$favorite_graphicall_dialog --forms $graphic_dimension --text="Canceled. file: $third_option"; fi
;;
#### 
####
"preferences-modify")
archivo="default"
cp "$default_preferences" "$default_preferences.old"
$favorite_graphicall_dialog  --text-info $graphic_dimension --filename="$default_preferences.old" \
--editable --title="MODIFY CONFIG" 1> "$default_preferences"
if [ ! -s "$default_preferences" ]; then cp "$default_preferences.old" "$default_preferences" ;
$favorite_graphicall_dialog  --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
####
"game-word")$cmd_binary game-word -gui ; exit ;;
"game-number")$cmd_binary game-number -gui ; exit ;;
"game-domain")$cmd_binary game-domain -gui ; exit ;;
####
####
*)$cmd_binary $second_option $third_option &> $temporal_guifinal
$favorite_graphicall_dialog  --text-info $graphic_dimension --title="Gui Output || $cmd_binary ||" \
--filename="$temporal_guifinal" --auto-scroll ;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
##########    english: -gui: without more options    ##########
##########    spanish: -gui: sin mas opcion          ##########
####
####
if [ "$first_option" == "-gui" ] && [ "$second_option" == "$NULL" ] ; then echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]" ; exit ;; esac
$favorite_graphicall_dialog  --forms $graphic_dimension --title="Gui Output || $cmd_binary || " --text="$($cmd_binary mini-options)"
exit; fi
####
####
##########    english: gui-roll: gui menu general: gui con roll  ##########
##########    spanish: gui-rool: gui menu general: gui con roll  ##########
####
####
if   [ "$first_option" == "gui-roll" ] ; then echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]"; exit ;; esac
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
##########    english: gui-menu: gui menu general: gui con menu  ##########
##########    spanish: gui-menu: gui menu general: gui con menu  ##########
#### :rutina-inicial-gui-menu:
####
####
if   [ "$first_option" == "gui-menu" ] ; then echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]"; exit ;; esac
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list 01-Firewall-Control 02-Firewall-List-With-Conceptual 02-Firewall-List-With-Numeral \
03-Firewall-Custom 04-Firewall-Launch 05-Options-State 06-Tool-sockets \
07-Tool-connect 08-Tool-rule 09-Tool-forward 10-Tool-sshd 11-Tool-tcp 12-Tool-udp 13-Tool-icmp \
14-Tool-sudofw 15-Tool-game 16-Tool-speed 17-Tool-util 18-Tool-install 19-Tool-addblock 20-Tool-dev \
21-Show-hardware 22-Show-etc 23-Show-log 24-Help-about 25-Help-help)"
#### 
####
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"01-Firewall-Control")$cmd_binary gui-menu-firewall-control ; exit ;;
"02-Firewall-List-With-Conceptual")$cmd_binary gui-menu-firewall-conceptual ; exit ;;
"02-Firewall-List-With-Numeral")$cmd_binary gui-menu-firewall-numeral ; exit ;;
"03-Firewall-Custom")$cmd_binary gui-menu-firewall-custom ; exit ;;
"04-Firewall-Launch")$cmd_binary gui-menu-firewall-launch ; exit ;;
"05-Options-State")$cmd_binary gui-menu-options-state ; exit ;;
"06-Tool-sockets")$cmd_binary gui-menu-tool-sockets ; exit ;;
"07-Tool-connect")$cmd_binary gui-menu-tool-connect ; exit ;;
"08-Tool-rule")$cmd_binary gui-menu-tool-rule ; exit ;;
"09-Tool-forward")$cmd_binary gui-menu-tool-forward ; exit ;;
"10-Tool-sshd")$cmd_binary gui-menu-tool-sshd ; exit ;;
"11-Tool-tcp")$cmd_binary gui-menu-tool-tcp ; exit ;;
"12-Tool-udp")$cmd_binary gui-menu-tool-udp ; exit ;;
"13-Tool-icmp")$cmd_binary gui-menu-tool-icmp ; exit ;;
"14-Tool-sudofw")$cmd_binary gui-menu-tool-sudofw ; exit ;;
"15-Tool-game")$cmd_binary gui-menu-tool-game ; exit ;;
"16-Tool-speed")$cmd_binary gui-menu-tool-speed ; exit ;;
"17-Tool-util")$cmd_binary gui-menu-tool-util ; exit ;;
"18-Tool-install")$cmd_binary gui-menu-tool-install ; exit ;;
"19-Tool-addblock")$cmd_binary gui-menu-tool-addblock ; exit ;;
"20-Tool-dev")$cmd_binary gui-menu-tool-dev ; exit ;;
"21-Show-hardware")$cmd_binary gui-menu-show-hardware ; exit ;;
"22-Show-etc")$cmd_binary gui-menu-show-etc ; exit ;;
"23-Show-log")$cmd_binary gui-menu-show-log ; exit ;;
"24-Help-about")$cmd_binary gui-menu-help-about ; exit ;;
"25-Help-help")$cmd_binary gui-menu-help-help ; exit ;;
#### ADD .. QEMU,MP3,PDF
esac
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu:
##########   english: gui-menu-firewall-launch: gui with menu    ##########
##########   spanish: gui-menu-firewall-launch: gui con menu     ##########
#### :rutina-inicial-gui-menu-firewall-launch:
####
####  
if   [ "$first_option" == "gui-menu-firewall-launch" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "eraserules" \
"wizard-mini" "wizard-full" "custom cfg" "off-line" "all-permisive" \
"games-shooter" "game-wesnoth" "game-minetest" "game-freeciv" "game-widelands" \
"client-web" "client-vnc" "client-torrent" "client-vpn" "client-tor" "lan-tor" "lan-vpn" "shield-ssh" \
"server-web" "server-vnc" "server-samba" "server-ssh" "server-print" "server-lamp" \
"server-news" "server-mail" "server-ftp" "server-teamspeak" "server-mumble" \
"server-sql" "server-asterisk" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1) $favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help firewall-launch ;;
"Gui Info Menu")$cmd_binary -gui info firewall-launch ;;
"eraserules")$cmd_binary -gui eraserules ; $cmd_binary gui list4;;
"wizard-full")$cmd_binary -gui wizard-full ; $cmd_binary gui list4;;
"wizard-mini")$cmd_binary -gui wizard-mini ; $cmd_binary gui list4;;
"off-line")$cmd_binary -gui off-line ; $cmd_binary gui list4;;
"all-permisive")$cmd_binary -gui all-permisive ; $cmd_binary gui list4;;
"client-web")$cmd_binary -gui client-web ; $cmd_binary gui list4;;
"client-vnc")$cmd_binary -gui client-vnc ; $cmd_binary gui list4;;
"client-torrent")$cmd_binary -gui client-torrent ; $cmd_binary gui list4;;
"client-vpn")$cmd_binary -gui client-vpn ; $cmd_binary gui list4;;
"client-tor")$cmd_binary -gui client-tor ; $cmd_binary gui list4;;
"games-shooter")$cmd_binary -gui games-shooter ; $cmd_binary gui list4;;
"game-wesnoth")$cmd_binary -gui game-wesnoth ; $cmd_binary gui list4;;
"game-minetest")$cmd_binary -gui game-minetest ; $cmd_binary gui list4;;
"game-freeciv")$cmd_binary -gui game-freeciv ; $cmd_binary gui list4;;
"game-widelands")$cmd_binary -gui game-widelands ; $cmd_binary gui list4;;
"lan-tor")$cmd_binary -gui lan-tor ; $cmd_binary gui list4;;
"lan-vpn")$cmd_binary -gui lan-vpn ; $cmd_binary gui list4;;
"shield-ssh")$cmd_binary -gui shield-ssh ; $cmd_binary gui list4;;
"server-ssh")$cmd_binary -gui server-ssh ; $cmd_binary gui list4;;
"server-web")$cmd_binary -gui server-web ; $cmd_binary gui list4;;
"server-vnc")$cmd_binary -gui server-vnc ; $cmd_binary gui list4;;
"server-samba")$cmd_binary -gui server-samba ; $cmd_binary gui list4;;
"server-news")$cmd_binary -gui server-news ; $cmd_binary gui list4;;
"server-mail")$cmd_binary -gui server-mail ; $cmd_binary gui list4;;
"server-ftp")$cmd_binary -gui server-ftp ; $cmd_binary gui list4;;
"server-print")$cmd_binary -gui server-print ; $cmd_binary gui list4;;
"server-lamp")$cmd_binary -gui server-lamp ; $cmd_binary gui list4;;
"server-teamspeak")$cmd_binary -gui server-teamspeak ; $cmd_binary gui list4;;
"server-mumble")$cmd_binary -gui server-mumble ; $cmd_binary gui list4;;
"server-sql")$cmd_binary -gui server-sql ; $cmd_binary gui list4;;
"server-asterisk")$cmd_binary -gui server-asterisk ; $cmd_binary gui list4;;
"custom cfg")archivo="$($favorite_graphicall_dialog  --entry $graphic_dimension \
--title "[Launch Custom]" --text="$($command_ls -1 $directory_config)")" ; 
$cmd_binary -gui custom $archivo ; $cmd_binary gui list4;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-launch:
##########    english: gui-menu-firewall-control: gui with menu   ##########
##########    spanish: gui-menu-firewall-control: gui con menu    ##########
#### :rutina-inicial-gui-menu-firewall-control:
####
####
if   [ "$first_option" == "gui-menu-firewall-control" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "stop" "continue" "reset" "names" "show" "save" "load" "actual" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help firewall-control ;;
"Gui Info Menu")$cmd_binary -gui info firewall-control ;;
"stop")$cmd_binary -gui stop ; $cmd_binary -gui list4;;
"continue")$cmd_binary -gui continue ; $cmd_binary -gui list4;;
"reset")$cmd_binary -gui reset ; $cmd_binary -gui list4;;
"names")$cmd_binary -gui names ;;
"show")archivo="$($favorite_graphicall_dialog  --entry $graphic_dimension --title "[Save Firewall]" --text="$($cmd_binary names)")" ; 
$cmd_binary -gui show $archivo ;;
"save")archivo="$($favorite_graphicall_dialog  --entry $graphic_dimension --title "[Save Firewall]" --text="$($cmd_binary names)")" ; 
$cmd_binary -gui save $archivo ;;
"load")archivo="$($favorite_graphicall_dialog  --entry $graphic_dimension --title "[Load Firewall]" --text="$($cmd_binary names)")" ;
$cmd_binary -gui load $archivo ; $cmd_binary -gui list4;;
"actual")$cmd_binary -gui actual ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-control:
##########    english: gui-menu-firewall-conceptual: gui with menu   ##########
##########    spanish: gui-menu-firewall-conceptual: gui con menu    ##########
#### :rutina-inicial-gui-menu-firewall-conceptual:
####
####
if   [ "$first_option" == "gui-menu-firewall-conceptual" ] ; then 
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "ls4" "ls6" "list-filter4" "list-filter6" "list-alltables" \
"list-nat4" "list-nat6" "list-mangle4" "list-mangle6" "list-raw4" "list-raw6" \
"list-security4" "list-security6" "list-ebtables" "list-arptables")"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help firewall-conceptual ;;
"Gui Info Menu")$cmd_binary -gui info firewall-conceptual ;;
"ls4")$cmd_binary -gui ls4 ;;
"ls6")$cmd_binary -gui ls6 ;;
"list-alltables")$cmd_binary -gui list-alltables ;;
"list-filter4")$cmd_binary -gui list-filter4 ;;
"list-filter6")$cmd_binary -gui list-filter6 ;;
"list-nat4")$cmd_binary -gui list-nat4 ;;
"list-nat6")$cmd_binary -gui list-nat6 ;;
"list-mangle4")$cmd_binary -gui list-mangle4 ;;
"list-mangle6")$cmd_binary -gui list-mangle6 ;;
"list-raw4")$cmd_binary -gui list-raw4 ;;
"list-raw6")$cmd_binary -gui list-raw6 ;;
"list-security4")$cmd_binary -gui list-security4 ;;
"list-security6")$cmd_binary -gui list-security6 ;;
"list-ebtables")$cmd_binary -gui list-ebtables ;;
"list-arptables")$cmd_binary -gui list-arptables ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-conceptual:
##########    english: gui-menu-firewall-numeral: gui with menu   ##########
##########    spanish: gui-menu-firewall-numeral: gui con menu    ##########
#### :rutina-inicial-gui-menu-firewall-numeral:
####
####
if   [ "$first_option" == "gui-menu-firewall-numeral" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "lsn4" "lsn6" "listn-filter4" "listn-filter6" "listn-alltables" \
"listn-nat4" "listn-nat6" "listn-mangle4" "listn-mangle6" "listn-raw4" "listn-raw6" \
"listn-security4" "listn-security6" "list-ebtables" "list-arptables" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help firewall-numeral ;;
"Gui Info Menu")$cmd_binary -gui info firewall-numeral ;;
"lsn4")$cmd_binary -gui lsn4 ;;
"lsn6")$cmd_binary -gui lsn6 ;;
"listn-alltables")$cmd_binary -gui listn-alltables ;;
"listn-filter4")$cmd_binary -gui listn-filter4 ;;
"listn-filter6")$cmd_binary -gui listn-filter6 ;;
"listn-nat4")$cmd_binary -gui listn-nat4 ;;
"listn-nat6")$cmd_binary -gui listn-nat6 ;;
"listn-mangle4")$cmd_binary -gui listn-mangle4 ;;
"listn-mangle6")$cmd_binary -gui listn-mangle6 ;;
"listn-raw4")$cmd_binary -gui listn-raw4 ;;
"listn-raw6")$cmd_binary -gui listn-raw6 ;;
"listn-security4")$cmd_binary -gui listn-security4 ;;
"listn-security6")$cmd_binary -gui listn-security6 ;;
"list-ebtables")$cmd_binary -gui list-ebtables ;;
"list-arptables")$cmd_binary -gui list-arptables ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-numeral:
##########    english: gui-menu-firewall-custom: gui with menu   ##########
##########    spanish: gui-menu-firewall-custom: gui con menu    ##########
#### :rutina-inicial-gui-menu-firewall-custom:
####
####
if   [ "$first_option" == "gui-menu-firewall-custom" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "new-full-config" "nueva-completa-config" "new-mini-config" "nueva-mini-config" \
"names-config" "show-config" "modify-config" "del-config" "regen-config" "examples-config")"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help firewall-custom ;;
"Gui Info Menu")$cmd_binary -gui info firewall-custom ;;
"new-full-config")
archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --title "[new-full-config]" --text="Input file name to new full configuration")" ;
$cmd_binary -gui new-full-config $archivo ;;
"nueva-completa-config")
archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --title "[nueva-completa-config]" --text="Introduce el nombre del nuevo archivo cfg")" ;
$cmd_binary -gui nueva-completa-config $archivo ;;
"new-mini-config")
archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --title "[new-mini-config]" --text="Input file name to new mini configuration")" ;
$cmd_binary -gui new-mini-config $archivo ;;
"nueva-mini-config")
archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --title "[nueva-mini-config]" --text="Introduce el nombre del nuevo archivo cfg")" ;
$cmd_binary -gui nueva-mini-config $archivo ;;
"names-config")
$cmd_binary -gui names-config ;;
"show-config")
archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --title "[show-config]" --text="$($cmd_binary cfg)")" ;
$cmd_binary -gui show-config $archivo ;;
"modify-config")
archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --title "[modify-config]" --text="$($cmd_binary cfg)")" ;
$cmd_binary -gui modify-config $archivo ;;
"del-config")
archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --title "[del-config]" --text="$($cmd_binary cfg)")" ;
$cmd_binary -gui del-config $archivo ;;
"regen-config")$cmd_binary -gui regen-config ;;
"examples-config")$cmd_binary gui examples-config ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-custom:
##########    english: gui-menu-options-state: gui with menu   ##########
##########    spanish: gui-menu-options-state: gui con menu    ##########
#### :rutina-inicial-gui-menu-options-state:
####
####
if   [ "$first_option" == "gui-menu-options-state" ]; then 
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list Gui-Principal-Menu Gui-Help-Menu Gui-Info-Menu preferences-read preferences-modify preferences-regen ip4 ip6 version examples depends install upgrade)"
#### 
####
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
Gui-Principal-Menu)$cmd_binary gui-menu ;;
Gui-Help-Menu)$cmd_binary -gui help status-state ;;
Gui-Info-Menu)$cmd_binary -gui info status-state ;;
preferences-read)$cmd_binary -gui preferences-read ;;
preferences-modify)$cmd_binary -gui preferences-modify ;;
preferences-regen)$cmd_binary -gui preferences-regen ;;
ip4)$cmd_binary -gui ip4 ;;
ip6)$cmd_binary -gui ip6 ;;
version)$cmd_binary -gui version ;;
examples)$cmd_binary -gui examples ;;
depends)$cmd_binary -gui depends ;;
install)$cmd_binary -gui install ;;
upgrade)$cmd_binary -gui upgrade ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-options-state:
##########    english: gui-menu-tool-connect: gui with menu   ##########
##########    spanish: gui-menu-tool-connect: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-connect:
####
####
if   [ "$first_option" == "gui-menu-tool-connect" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "iw-scan" "iw-info" "wpa-save" "wpa-load" "dhcp-client" "ntpdate-client" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-sockets ;;
"Gui Info Menu")$cmd_binary -gui info tool-sockets ;;
"iw-scan")$cmd_binary -gui iw-scan ;;
"iw-info")$cmd_binary -gui iw-info ;;
"wpa-load")
$cmd_binary -gui wpa-load
archivo="$(zenity  $graphic_dimension --entry --title "[ Load old file ]")" ;
$cmd_binary -gui wpa-load $archivo ; $cmd_binary -gui iw-info ;;
"wpa-save")
for dispositivo in $(cat /proc/net/dev | $command_grep -i  : | cut -d ":" -f 1); do $command_ifconfig $dispositivo up ; done
$cmd_binary -gui iw-scan
name_ssid="$($favorite_graphicall_dialog  --entry $graphic_dimension --title "[ TYPE : Name of ssid ]" --text="[ TYPE : Name of ssid ]" )"  ;
pass_ssid="$($favorite_graphicall_dialog  --entry $graphic_dimension --title "[ TYPE : Pass of ssid ]" --text="PASSWORD SSID $name_ssid" )" ;
$cmd_binary wpa-save $name_ssid $pass_ssid ; $cmd_binary -gui iw-info ;;
"dhcp-client")$cmd_binary -gui dhcp-client ;;
"ntpdate-client")$cmd_binary -gui ntpdate-client ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-connect:
##########    english: gui-menu-tool-rule: gui with menu   ##########
##########    spanish: gui-menu-tool-rule: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-rule:
####
####
if   [ "$first_option" == "gui-menu-tool-rule" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "rule-del-num" "rule-del-shield" "rule-add-shield" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-sockets ;;
"Gui Info Menu")$cmd_binary -gui info tool-sockets ;;
"rule-del-num")$cmd_binary -gui rule-del-num ;;
"rule-del-shield")$cmd_binary -gui rule-del-shield ;;
"rule-add-shield")$cmd_binary -gui rule-add-shield ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-rule:
##########    english: gui-menu-tool-sockets: gui with menu   ##########
##########    spanish: gui-menu-tool-sockets: gui con menu    ########## 
#### :rutina-inicial-gui-menu-tool-sockets:
####
####
if   [ "$first_option" == "gui-menu-tool-sockets" ] ; then
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "ip4" "ip6" "info-proxy" "info-listen" "info-route" "info-nodes" \
"info-net" "info-system" "ss" "lsof" "netstat" "netstat-nat" "tcpdump" "ntpdate-client" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-sockets ;;
"Gui Info Menu")$cmd_binary -gui info tool-sockets ;;
"ip4")$cmd_binary -gui ip4 ;;
"ip6")$cmd_binary -gui ip6 ;;
"info-route")$cmd_binary -gui route ;;
"info-nodes")$cmd_binary -gui info-nodes ;;
"info-net")$cmd_binary -gui info-net ;;
"info-system")$cmd_binary -gui info-system ;;
"ss")$cmd_binary -gui ss ;;
"lsof")$cmd_binary -gui lsof ;;
"netstat")$cmd_binary -gui netstat ;;
"netstat-nat")$cmd_binary -gui netstat-nat ;;
"tcpdump")$cmd_binary -gui tcpdump ;;
"info-proxy")$cmd_binary -gui info-proxy ;;
"info-listen")$cmd_binary -gui info-listen ;;
"ntpdate-client")$cmd_binary -gui ntpdate-client ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-sockets:
##########    english: gui-menu-tool-forward: gui with menu   ##########
##########    spanish: gui-menu-tool-forward: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-forward:
####
####
if [ "$first_option" == "gui-menu-tool-forward" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "ipforward-list" "ipforward-on" "ipforward-off")"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-forward ;;
"Gui Info Menu")$cmd_binary -gui info tool-forward ;;
"ipforward-list")$cmd_binary -gui ipforward-list ;;
"ipforward-on")$cmd_binary -gui ipforward-on     ;;
"ipforward-off")$cmd_binary -gui ipforward-off   ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-forward:
##########    english: gui-menu-tool-sshd: gui with menu   ##########
##########    spanish: gui-menu-tool-sshd: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-sshd:
####
####
if   [ "$first_option" == "gui-menu-tool-sshd" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "sshd-tunnel-info" "sshd-tunnel-on" "sshd-tunnel-off" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-forward ;;
"Gui Info Menu")$cmd_binary -gui info tool-forward ;;
"sshd-tunnel-info")$cmd_binary -gui sshd-tunnel-info ;;
"sshd-tunnel-on")
archivo="$(zenity  $graphic_dimension --entry --title "[ type: user@host ]" --text "[ type: user@host ]")" ;
$cmd_binary -gui sshd-tunnel-on $archivo ;;
"sshd-tunnel-off")$cmd_binary -gui sshd-tunnel-off ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-sshd:
##########    english: gui-menu-tool-icmp: gui with menu   ##########
##########    spanish: gui-menu-tool-icmp: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-icmp:
####
####
if   [ "$first_option" == "gui-menu-tool-icmp" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "traceicmp-ip4" "traceicmp-ip6" "ping-ip4" "ping-ip6" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-icmp ;;
"Gui Info Menu")$cmd_binary -gui info tool-icmp ;;
"traceicmp-ip4") archivo="$(zenity $graphic_dimension --entry --text="[ type the ip or host ]")" ;
$cmd_binary -gui traceicmp-ip4 $archivo ;;
"traceicmp-ip6") archivo="$(zenity $graphic_dimension --entry --text="[ type the ip or host ]")" ;
$cmd_binary -gui traceicmp-ip6 $archivo ;;
"ping-ip4") archivo="$(zenity $graphic_dimension --entry --text="[ type the ip or host ]")" ;
$cmd_binary -gui ping-ip4 $archivo ;;
"ping-ip6") archivo="$(zenity $graphic_dimension --entry --text="[ type the ip or host ]")" ; 
$cmd_binary -gui ping-ip6 $archivo ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-icmp:
##########    english: gui-menu-tool-udp: gui with menu   ##########
##########    spanish: gui-menu-tool-udp: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-udp:
####
####
if   [ "$first_option" == "gui-menu-tool-udp" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "host" "dig" "resolveip" "geoip" "ntpdate-client" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-udp ;;
"Gui Info Menu")$cmd_binary -gui info tool-udp ;;
"host")archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$cmd_binary -gui host $archivo ;;
"dig")archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$cmd_binary -gui dig $archivo ;;
"resolveip")archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type the ipv6 or host to resolve with ipv6 ]")" ; 
$cmd_binary -gui resolveip $archivo ;;
"geoip")archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$cmd_binary -gui geoip $archivo ;;
"ntpdate-client")$cmd_binary -gui ntpdate-client ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-udp:
##########    english: gui-menu-tool-tcp: gui with menu    ##########
##########    spanish: gui-menu-tool-tcp: gui con menu     ##########
#### :rutina-inicial-gui-menu-tool-tcp:
####
####
if   [ "$first_option" == "gui-menu-tool-tcp" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "tracetcp-ip4" "tracetcp-ip6" "speed-ip4" "speed-ip6")"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-tcp ;;
"Gui Info Menu")$cmd_binary -gui info tool-tcp ;;
"tracetcp-ip4")archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type the ip or host ]")" ;
$cmd_binary -gui tracetcp-ip4 $archivo  ;;
"tracetcp-ip6")archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type the ip or host ]")" ;
$cmd_binary -gui tracetcp-ip6 $archivo  ;;
"speed-ip4")$cmd_binary -gui speed-ip4  ;;
"speed-ip6")$cmd_binary -gui speed-ip6  ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-tcp:
##########    english: gui-menu-tool-sudofw: gui with menu   ##########
##########    spanish: gui-menu-tool-sudofw: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-sudofw:
####
####
if   [ "$first_option" == "gui-menu-tool-sudofw" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "sudofw-adduser" "sudofw-deluser" "sudofw-listuser" "aliasfw-list" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-sudofw ;;
"Gui Info Menu")$cmd_binary -gui info tool-sudofw ;;
"sudofw-adduser")archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type username to allow sudo: username1,username2 ]")" ;
$cmd_binary -gui sudofw-adduser $archivo ;;
"sudofw-deluser")$cmd_binary -gui sudofw-deluser ;;
"sudofw-listuser")$cmd_binary -gui sudofw-listuser ;;
"aliasfw-list")$cmd_binary -gui aliasfw-list ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-sudofw:
##########    english: gui-menu-tool-game: gui with menu   ##########
##########    spanish: gui-menu-tool-game: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-game:
####
####
if   [ "$first_option" == "gui-menu-tool-game" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "game-word" "game-number" "game-domain" "game-rgb" "game-hex" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-game ;;
"Gui Info Menu")$cmd_binary -gui info tool-game ;;
"game-word")$cmd_binary -gui game-word ;;
"game-number")$cmd_binary -gui game-number ;;
"game-domain")$cmd_binary -gui game-domain ;;
"game-rgb")
onecolour="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type one colour in RGB with 9 digits. Example: 255000255 ]")" ;
$cmd_binary gui game-rgb $onecolour ;;
"game-hex") 
onecolour="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type one colour in HEX with 6 digits. Example: ff00ff ]")" ;
$cmd_binary gui game-hex $onecolour ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-game:
##########    english: gui-menu-tool-speed: gui with menu    ##########
##########    spanish: gui-menu-tool-speed: gui con menu     ##########
#### :rutina-inicial-gui-menu-tool-speed:
####
####
if   [ "$first_option" == "gui-menu-tool-speed" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "free-ram" "speed-ram" "speed-disk" "speed-glx" "speed-cpu" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-speed ;;
"Gui Info Menu")$cmd_binary -gui info tool-speed ;;
"free-ram")$cmd_binary -gui free-ram ;;
"speed-ram")$cmd_binary -gui speed-ram ;;
"speed-disk")$cmd_binary -gui speed-disk ;;
"speed-glx")$cmd_binary -gui speed-glx ;;
"speed-cpu")$cmd_binary -gui speed-cpu ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-speed:
##########    english: gui-menu-tool-util: gui with menu   ##########
##########    spanish: gui-menu-tool-util: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-util:
####
####
if   [ "$first_option" == "gui-menu-tool-util" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "weather" "md5sum" "radio-mp3 link" "gpg-notes" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-speed ;;
"Gui Info Menu")$cmd_binary -gui info tool-speed ;;
"weather")$cmd_binary -gui weather ;;
"md5sum")archivo="$(zenity --file-selection)" ;
$cmd_binary -gui md5sum $archivo ;;
"radio-mp3 link") 
radio_enlace="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ typea one mp3 link ] [ example: $radio_mp3 ]")" ;
$cmd_binary -gui radio-mp3 $radio_enlace ;;
"gpg-notes")$cmd_binary -gui gpg-notes ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-util:
##########    english: gui-menu-tool-install: gui with menu   ##########
##########    spanish: gui-menu-tool-install: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-install:
####
####
if   [ "$first_option" == "gui-menu-tool-install" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "install" "howto-upgrade" "upgrade" "clean-tmp")"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help tool-install ;;
"Gui Info Menu")$cmd_binary -gui info tool-install ;;
"install")$cmd_binary -gui install ;;
"howto-upgrade")$cmd_binary -gui howto-upgrade ;;
"upgrade")$cmd_binary -gui upgrade ;;
"clean-tmp")$cmd_binary -gui clean-tmp ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-install:
##########    english: gui-menu-tool-addblock: gui with menu   ##########
##########    spanish: gui-menu-tool-addblock: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-addblock:
####
####
if   [ "$first_option" == "gui-menu-tool-addblock" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "addblock-list" "addblock-list info" "addblock-on" "addblock-off" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu;;
"Gui Help Menu")$cmd_binary -gui help tool-addblock ;;
"Gui Info Menu")$cmd_binary -gui info tool-addblock ;;
"addblock-list")$cmd_binary -gui addblock-list;;
"addblock-list info")$cmd_binary -gui addblock-list info ;;
"addblock-on")
 archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type one: fademind, mvps, adaway, stevenblack ]")" ;
 $cmd_binary -gui addblock-on $archivo;;
"addblock-off")$cmd_binary -gui addblock-off;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-addblock:
##########    english: gui-menu-tool-dev: gui with menu   ##########
##########    spanish: gui-menu-tool-dev: gui con menu    ##########
#### :rutina-inicial-gui-menu-tool-dev:
####
####
if   [ "$first_option" == "gui-menu-tool-dev" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "new-versions" "dev-version" "dev-changes" "code" "intro" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu  ;;
"Gui Help Menu")$cmd_binary -gui help tool-dev ;;
"Gui Info Menu")$cmd_binary -gui info tool-dev ;;
"new-versions")$cmd_binary -gui new-versions ;;
"dev-version")$cmd_binary -gui dev-version  ;;
"dev-changes")$cmd_binary -gui dev-changes ;;
"intro")$cmd_binary -gui intro ;;
"code") archivo="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type one option to show its source code ]")" 
$cmd_binary -gui code $archivo
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-dev:
##########    english: gui-menu-show-hardware: gui with menu   ##########
##########    spanish: gui-menu-show-hardware: gui con menu    ##########
#### :rutina-inicial-gui-menu-show-hardware:
####
####
if   [ "$first_option" == "gui-menu-show-hardware" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "lpinfo" "lsblk" "lsusb" "lscpu" "lspci" "lsgpu" "lshw")"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help show-hardware ;;
"Gui Info Menu")$cmd_binary -gui info show-hardware ;;
"lpinfo")$cmd_binary -gui lpinfo;;
"lsblk")$cmd_binary -gui lsblk;;
"lpusb")$cmd_binary -gui lsusb;;
"lscpu")$cmd_binary -gui lscpu;;
"lspci")$cmd_binary -gui lspci;;
"lsgpu")$cmd_binary -gui lsgpu;;
"lshw")$cmd_binary -gui lshw;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-hardware:
##########    english: gui-menu-show-etc: gui with menu   ##########
##########    spanish: gui-menu-show-etc: gui con menu    ##########
#### :rutina-inicial-gui-menu-show-etc:
####
####
if   [ "$first_option" == "gui-menu-show-etc" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "hosts" "protocols" "services" "hosts.allow" "hosts.deny" \
"resolv.conf" "preferences-read" "preferences-modify" "preferences-read" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help show-etc ;;
"Gui Info Menu")$cmd_binary -gui info show-etc ;;
"hosts")$cmd_binary -gui hosts ;;
"protocols")$cmd_binary -gui protocols ;;
"services")$cmd_binary -gui services ;;
"hosts.allow")$cmd_binary -gui hosts.allow ;;
"hosts.deny")$cmd_binary -gui hosts.deny ;;
"resolv.conf")$cmd_binary -gui resolv.conf ;;
"preferences-read")$cmd_binary -gui preferences-read ;;
"preferences-modify")$cmd_binary -gui preferences-modify ;;
"read-modify")$cmd_binary -gui preferences-read ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-etc:
##########    english: gui-menu-show-log: gui with menu   ##########
##########    spanish: gui-menu-show-log: gui con menu    ##########
#### :rutina-inicial-gui-menu-show-log:
####
####
if   [ "$first_option" == "gui-menu-show-log" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "log-ssh" "filelog" "autolog" "log-search")"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help show-log ;;
"Gui Info Menu")$cmd_binary -gui info show-log ;;
"log-ssh")$cmd_binary -gui log-ssh ;;
"filelog")$cmd_binary -gui filelog ;;
"autolog")$cmd_binary -gui autolog ;;
"log-search")
pattern="$($favorite_graphicall_dialog  $graphic_dimension --entry --text="[ type a one PATTERN to search in log files ]")" ;
$cmd_binary -gui log-search $pattern;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-log:
##########    english: gui-menu-help-about: gui with menu   ##########
##########    spanish: gui-menu-help-about: gui con menu    ##########
#### :rutina-inicial-gui-menu-help-about:
####
####
if   [ "$first_option" == "gui-menu-help-about" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "about" "version" "depends" "config-eng" "config-spa" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help help-about ;;
"Gui Info Menu")$cmd_binary -gui info help-about ;;
"about")$cmd_binary -gui about ;;
"version")$cmd_binary -gui version ;;
"depends")$cmd_binary -gui depends ;;
"config-eng")$cmd_binary -gui config-eng ;;
"config-spa")$cmd_binary -gui config-spa ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-help-about:
##########    english: gui-menu-help-help: gui with menu    ##########
##########    spanish: gui-menu-help-help: gui con menu     ##########
#### :rutina-inicial-gui-menu-help-help:
####
####
if   [ "$first_option" == "gui-menu-help-help" ] ; then $nada ;
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list "Gui Principal Menu" "Gui Help Menu" "Gui Info Menu" "mini-options" "full-options" "all-help" "readme" "leeme" "notes" "license" )"
#### 
#### 
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
1)$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye"; exit ;;
"Gui Principal Menu")$cmd_binary gui-menu ;;
"Gui Help Menu")$cmd_binary -gui help help-help ;;
"Gui Info Menu")$cmd_binary -gui info help-help ;;
"mini-options")$cmd_binary -gui mini-options ;;
"full-options")$cmd_binary -gui full-options ;;
"all-help")$cmd_binary -gui all-help ;;
"readme")$cmd_binary -gui readme ;;
"leeme")$cmd_binary -gui leeme ;;
"notes")$cmd_binary -gui notes ;;
"license")$cmd_binary -gui license ;;
esac
####
####
$favorite_graphicall_dialog  --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $cmd_binary gui-menu ; exit ; fi
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-help-help:
##########    english: gui-shell: graphic enviroment            ##########
##########    spanish: gui-shell: entorno de comandos grafico   ##########
#### :rutina-inicial-gui-shell:
####
####
if   [ "$first_option" == "gui-shell" ] ; then echo $head_waiting_gui
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]" ; exit ;; esac
####
####
####  english: principal gui  #### spanish: principal gui
####
####
titulo="$cmd_binary gui-shell"
untexto="$cmd_binary gui-shell"
####
####
#### cd $directory_config
####
####
menugtk=$($favorite_graphicall_dialog  --forms $graphic_dimension --title="Gui Shell || $cmd_binary || $cmd_version ||" \
--text="$($cmd_binary mini-options)" --add-entry="$cmd_binary " )
case $? in
1)
####
####
#### zenity --info $graphic_dimension --text="$cmd_binary good bye";
####
####
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" \
--auto-close --auto-kill ; exit;;
esac
####
####
#### english: manage some configs    ####
#### spanish: maneja algunas configs ####
####
####
case $menugtk in
####
####
"game-word")$cmd_binary game-word -gui ;;
"game-number")$cmd_binary game-number -gui ;;
"game-domain")$cmd_binary game-domain -gui ;;
"rule-del-num")$cmd_binary rule-del-num -gui ;;
####
####
#### english: new-full-config and nueva-completa-config whithout parameters ####
#### spanish: new-full-config and nueva-completa-config sin parametros      ####
####
####
"new-full-config")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary new-full-config config.cfg ]"
;;
"new-mini-config")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary new-mini-config config.cfg ]"
;;
"nueva-completa-config")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary nueva-completa-config config.cfg ]"
;;
"new-mini-config")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary nueva-mini-config config.cfg ]"
;;
"modify-config")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary modify-config config.cfg ]"
;;
####
####
#### english: new-full-config and nueva-completa-config whithout parameters and with one space  ####
#### spanish: new-full-config and nueva-completa-config sin parametros y con un espacio         ####
####
####
"new-full-config ")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary new-full-config config.cfg ]"
;;
"new-mini-config ")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary new-mini-config config.cfg ]"
;;
"nueva-completa-config ")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary nueva-completa-config config.cfg ]"
;;
"new-mini-config ")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary nueva-mini-config config.cfg ]"
;;
"modify-config ")
$favorite_graphicall_dialog  --forms $graphic_dimension --text="$tab [ info ] [ Use: $cmd_binary modify-config config.cfg ]"
;;
####
####
#### english: several options con parametros
#### spanish: varias opciones con parametros
####
####
new-full-config*)
unarchivo=$(echo $menugtk | $command_sed 's/\///g' | cut -d " " -f 2)
$cmd_binary -gui new-full-config $unarchivo
;;
nueva-completa-config*)
unarchivo=$(echo $menugtk | $command_sed 's/\///g' | cut -d " " -f 2)
$cmd_binary -gui nueva-completa-config $unarchivo
;;
new-mini-config*)
unarchivo=$(echo $menugtk | $command_sed 's/\///g' | cut -d " " -f 2)
$cmd_binary -gui new-mini-config $unarchivo
;;
nueva-mini-config*)
unarchivo=$(echo $menugtk | $command_sed 's/\///g' | cut -d " " -f 2)
$cmd_binary -gui nueva-mini-config $unarchivo
;;
modify-config*)
unarchivo=$(echo $menugtk | $command_sed 's/\///g' | cut -d " " -f 2)
$cmd_binary -gui modify-config $unarchivo
;;
show-config*)
unarchivo=$(echo $menugtk | $command_sed 's/\///g' | cut -d " " -f 2)
$cmd_binary -gui show-config $unarchivo
;;
wizard-full*) $cmd_binary gui wizard-full ;;
wizard-mini*) $cmd_binary gui wizard-mini ;;
####
####
#### english: all other otpions    ####
#### spanish: las demas opciones   ####
####
####
"$NULL")
$favorite_graphicall_dialog  --info $graphic_dimension --text="$cmd_binary good bye";
$favorite_graphicall_dialog  --progress $graphic_dimension --timeout=1 --text="Closing gui menu" --auto-close --auto-kill ; exit ;;
*) fecha_temporal=$(date | $command_sed s/\ //g) ; $cmd_binary $menugtk &> /tmp/fwiptables-$fecha_temporal
$favorite_graphicall_dialog  --text-info $graphic_dimension --title "[ $cmd_binary gui-shell ] [ $menugtk ]" --filename=/tmp/fwiptables-$fecha_temporal --auto-scroll
rm /tmp/fwiptables-$fecha_temporal
;;
esac
$cmd_binary gui-shell
exit ; fi
####
####
#### :rutina-final-gui-shell:
##########    english: cli-menu: Manage list rules with one text menu          ##########
##########    spanish: cli-menu: Maneja lista de reglas con un menu de texto   ##########
#### :rutina-inicial-cli-menu:
####
####
if   [ "$first_option" == "cli-menu" ]; then $nada
case "$favorite_text_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install or dialog or whiptail to work ]" ; exit ;; esac
menuprincipal="$($favorite_text_dialog --clear --notags --title "Cli Menu With $cmd_version" --menu "Select" 0 0 0 \
0000 "$quad $tab [$cmd_binary cli-menu] $tab $cinco" \
0100 "$quad [ Full Options ] $cinco" \
0200 "$quad [ Firewall Control ] $cinco" \
0201  "$tab stop" \
0202  "$tab continue" \
0203  "$tab reset" \
0204  "$tab names"  \
0205  "$tab show" \
0206  "$tab save" \
0207  "$tab load" \
0208  "$tab actual" \
0300 "$quad [ Firewall List With Conceptual ] $cinco" \
0301  "$tab list4" \
0302  "$tab list6"  \
0303  "$tab list-filter4" \
0304  "$tab list-filter6" \
0305  "$tab list-forward" \
0306  "$tab list-forward6" \
0307  "$tab list-nat4" \
0308  "$tab list-nat6" \
0309  "$tab list-alltables" \
0314  "$tab list-raw4" \
0315  "$tab list-raw6" \
0316  "$tab list-mangle4" \
0317  "$tab list-mangle6" \
0318  "$tab list-security4" \
0319  "$tab list-security6" \
0320  "$tab list-ebtables" \
0321  "$tab list-arptables" \
0400 "$quad [ Firewall List With Numeral ] $cinco" \
0401  "$tab listn4" \
0402  "$tab listn6" \
0403  "$tab listn-filter4" \
0404  "$tab listn-filter6" \
0405  "$tab listn-forward" \
0406  "$tab listn-forward6" \
0407  "$tab listn-nat4" \
0408  "$tab listn-nat6" \
0409  "$tab listn-alltables" \
0414  "$tab listn-raw4" \
0415  "$tab listn-raw6" \
0416  "$tab listn-mangle4" \
0417  "$tab listn-mangle6" \
0418  "$tab listn-security4" \
0419  "$tab listn-security6" \
0420  "$tab listn-ebtables" \
0421  "$tab listn-arptables" \
0500 "$quad [ Firewall Launch ] $cinco" \
0501  "$tab eraserules" \
0502  "$tab wizard-mini" \
0503  "$tab wizard-full" \
0504  "$tab off-line" \
0505  "$tab all-permisive" \
0506  "$tab custom" \
0507  "$tab games-shooter" \
0508  "$tab game-wesnoth" \
0509  "$tab game-minetest" \
0510  "$tab game-freeciv" \
0511  "$tab game-widelands" \
0512  "$tab client-web" \
0513  "$tab client-vnc" \
0514  "$tab client-tor" \
0515  "$tab client-vpn" \
0516  "$tab client-torrent" \
0517  "$tab lan-tor" \
0518  "$tab lan-vpn" \
0519  "$tab shield-ssh" \
0520  "$tab server-ssh" \
0521  "$tab server-web" \
0522  "$tab server-vnc" \
0523  "$tab server-print" \
0524  "$tab server-samba" \
0525  "$tab server-lamp" \
0526  "$tab server-mail" \
0527  "$tab server-ftp" \
0528  "$tab server-news" \
0529  "$tab server-teamspeak" \
0530  "$tab server-mumble" \
0531  "$tab server-sql" \
0532  "$tab server-asterisk" \
0600 "$quad [ Firewall Custom ] $cinco" \
0601  "$tab new-full-config" \
0602  "$tab nueva-completa-config" \
0603  "$tab new-mini-config" \
0604  "$tab nueva-mini-config" \
0605  "$tab show-config" \
0606  "$tab modify-config" \
0607  "$tab del-config" \
0608  "$tab names-config" \
0609  "$tab regen-config" \
0610  "$tab examples-config" \
0700 "$quad [ Options State ] $cinco" \
0701  "$tab preferences-read" \
0702  "$tab preferences-modify" \
0703  "$tab preferences-regen" \
0704  "$tab ip4" \
0705  "$tab ip6" \
0706  "$tab version" \
0707  "$tab examples" \
0708  "$tab depends" \
0709  "$tab install" \
0710  "$tab upgrade" \
0800 "$quad [ Tool Connect ] $cinco" \
0801  "$tab iw-scan" \
0802  "$tab iw-info" \
0803  "$tab wpa-save" \
0804  "$tab wpa-load" \
0805  "$tab dhcp-client" \
0900 "$quad [ Tool rules ] $cinco" \
0901  "$tab rule-del-num" \
0902  "$tab rule-del-shield" \
0903  "$tab rule-add-shield" \
1000 "$quad [ Tool Sockets ] $cinco" \
1001  "$tab ss" \
1002  "$tab netstat" \
1003  "$tab lsof" \
1004  "$tab tcpdump" \
1005  "$tab info-route" \
1006  "$tab info-nodes" \
1007  "$tab info-listen" \
1008  "$tab info-proxy" \
1009  "$tab info-net" \
1010  "$tab info-system" \
1011  "$tab ntpdate-client" \
1100 "$quad [ Tool forwarding ] $cinco" \
1101  "$tab ipforward-list" \
1102  "$tab ipforward-on" \
1103  "$tab ipforward-off" \
1200 "$quad [ Tool ssh tunnel ] $cinco" \
1201  "$tab sshd-tunnel-info" \
1202  "$tab sshd-tunnel-on" \
1203  "$tab sshd-tunnel-off" \
1300 "$quad [ Tool Tcp ] $cinco " \
1301  "$tab speed-ip4" \
1302  "$tab speed-ip6" \
1303  "$tab tracetcp-ip4" \
1304  "$tab tracetcp-ip6" \
1400 "$quad [ Tool Icmp ] $cinco" \
1401  "$tab traceicmp-ip4" \
1402  "$tab traceicmp-ip6" \
1403  "$tab ping-ip4" \
1404  "$tab ping-ip6" \
1500 "$quad [ Tool Udp ] $cinco"  \
1501  "$tab host" \
1502  "$tab dig" \
1503  "$tab resolveip" \
1504  "$tab geoip" \
1505  "$tab ntpdate-client" \
1600 "$quad [ Tool Sudo ] $cinco"  \
1601  "$tab sudofw-adduser" \
1602  "$tab sudofw-deluser" \
1603  "$tab sudofw-listuser" \
1700 "$quad [ Tool Game ] $cinco" \
1701  "$tab game-word" \
1702  "$tab game-number" \
1703  "$tab game-rgb" \
1704  "$tab game-hex" \
1800 "$quad [ Tool utils ] $cinco" \
1801  "$tab md5sum" \
1802  "$tab gpg-notes" \
1803  "$tab radio-mp3" \
1804  "$tab cadena100" \
1805  "$tab cadenadial" \
1900 "$quad [ Tool Install ] $cinco" \
1901  "$tab install" \
1902  "$tab howto-upgrade" \
1903  "$tab upgrade" \
1904  "$tab intro" \
2000 "$quad [ Tool addblock ] $cinco" \
2001  "$tab addblock-list" \
2002  "$tab addblock-list info" \
2003  "$tab addblock-on" \
2004  "$tab addblock-off" \
2100 "$quad [ Tool Dev ] $cinco" \
2101  "$tab new-versions" \
2102  "$tab dev-version" \
2103  "$tab dev-changes" \
2104  "$tab intro" \
2200 "$quad [ Tool Speed ] $cinco" \
2201  "$tab free-ram" \
2202  "$tab speed-ram" \
2203  "$tab speed-disk" \
2204  "$tab speed-glx" \
2300 "$quad [ Show Hardware ] $cinco" \
2301  "$tab lpinfo" \
2302  "$tab lsblk" \
2303  "$tab lsusb" \
2304  "$tab lscpu" \
2305  "$tab lspci" \
2306  "$tab lsgpu" \
2307  "$tab lshw" \
2400 "$quad [ Show Etc ] $cinco" \
2401  "$tab hosts" \
2402  "$tab protocols" \
2403  "$tab services" \
2404  "$tab hosts.allow" \
2405  "$tab hosts.deny" \
2406  "$tab resolv.conf" \
2407  "$tab preferences-read" \
2408  "$tab preferences-modify" \
2500 "$quad [ Show Log ] $cinco" \
2501  "$tab log-ssh" \
2502  "$tab log-search" \
2503  "$tab filelog" \
2504  "$tab autolog" \
2600 "$quad [ Show About ] $cinco" \
2601  "$tab about" \
2602  "$tab depends" \
2603  "$tab config-eng" \
2604  "$tab config-spa" \
2700 "$quad [ Show Help ] $cinco" \
2701  "$tab mini-options" \
2702  "$tab full-options" \
2703  "$tab readme" \
2704  "$tab leeme" \
2705  "$tab all-help" \
2706  "$tab notes" \
2707  "$tab license" \
3>&1 1>&2 2>&3 )"
################################################################################
#### 
#### 
#### english: dialog choosed #### spanish: dialogo elegido
#### 
#### 
case "$menuprincipal" in
##########
##########
0000) clear ; $cmd_binary cli readme  ;;
0100) clear ; $cmd_binary cli options ;;
0200) clear ; $cmd_binary cli firewall-control ;;
0300) clear ; $cmd_binary cli firewall-conceptual ;;
0400) clear ; $cmd_binary cli firewall-numeral ;;
0500) clear ; $cmd_binary cli firewall-launch ;;
0600) clear ; $cmd_binary cli firewall-custom ;;
0700) clear ; $cmd_binary cli default-state ;;
0800) clear ; $cmd_binary cli tool-connect ;;
0900) clear ; $cmd_binary cli tool-rule ;;
1000) clear ; $cmd_binary cli tool-sockets ;;
1100) clear ; $cmd_binary cli tool-forward ;;
1200) clear ; $cmd_binary cli tool-sshd ;;
1300) clear ; $cmd_binary cli tool-tcp ;;
1400) clear ; $cmd_binary cli tool-icmp ;;
1500) clear ; $cmd_binary cli tool-udp ;;
1600) clear ; $cmd_binary cli tool-sudofw ;;
1700) clear ; $cmd_binary cli tool-game ;;
1800) clear ; $cmd_binary cli tool-util ;;
1900) clear ; $cmd_binary cli tool-install ;;
2000) clear ; $cmd_binary cli tool-addblock ;;
2100) clear ; $cmd_binary cli tool-dev ;;
2200) clear ; $cmd_binary cli tool-speed ;;
2300) clear ; $cmd_binary cli show-hardware ;;
2400) clear ; $cmd_binary cli show-etc ;;
2500) clear ; $cmd_binary cli show-log ;;
2600) clear ; $cmd_binary cli help-about ;;
2700) clear ; $cmd_binary cli help-help ;;
################################################################################
0201) clear ; $cmd_binary cli stop ;;
0202) clear ; $cmd_binary cli continue ;;
0203) clear ; $cmd_binary cli reset ;;
0204) clear ; $cmd_binary cli names ;;
0205) clear ; $cmd_binary names ; echo "$cincuenta"
read -p "Type the firewall name to read   " nombrecillo
nombrecillo=$(echo $nombrecillo | $command_sed s/\\///g) ; $cmd_binary show $nombrecillo ;; 
0206)archivo="$($favorite_text_dialog --stdout --title "| Save the firewall format standar  |" --inputbox "New name" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ;  echo "$cincuenta saved $archivo" ; $cmd_binary save $archivo ;;
0207) clear ; $cmd_binary names ; echo "$cincuenta"
read -p "| Type the firewall name to restore |   " nombrecillo
nombrecillo=$(echo $nombrecillo | $command_sed s/\\///g) ; $cmd_binary load $nombrecillo ;;
0208) clear ; $cmd_binary cli actual ;;
################################################################################
0301) clear ; $cmd_binary cli list4 ;;
0302) clear ; $cmd_binary cli list6 ;;
0303) clear ; $cmd_binary cli list-filter4 ;;
0304) clear ; $cmd_binary cli list-filter6 ;;
0305) clear ; $cmd_binary cli list-forward ;;
0306) clear ; $cmd_binary cli list-forward6 ;;
0307) clear ; $cmd_binary cli list-nat4 ;;
0308) clear ; $cmd_binary cli list-nat6 ;;
0309) clear ; $cmd_binary cli list-alltables ;;
0314) clear ; $cmd_binary cli list-raw4 ;;
0315) clear ; $cmd_binary cli list-raw6 ;;
0316) clear ; $cmd_binary cli list-mangle4 ;; 
0317) clear ; $cmd_binary cli list-mangle6 ;;
0318) clear ; $cmd_binary cli list-security4 ;;
0319) clear ; $cmd_binary cli list-security6 ;;
0320) clear ; $cmd_binary cli list-ebtables ;;
0321) clear ; $cmd_binary cli list-arptables ;;
################################################################################
0401) clear ; $cmd_binary cli listn4 ;;
0402) clear ; $cmd_binary cli listn6 ;;
0403) clear ; $cmd_binary cli listn-filter4 ;;
0404) clear ; $cmd_binary cli listn-filter6 ;;
0405) clear ; $cmd_binary cli listn-forward ;;
0406) clear ; $cmd_binary cli listn-forward6 ;;
0407) clear ; $cmd_binary cli listn-nat4 ;;
0408) clear ; $cmd_binary cli listn-nat6 ;;
0409) clear ; $cmd_binary cli listn-alltables ;;
0414) clear ; $cmd_binary cli listn-raw4 ;;
0415) clear ; $cmd_binary cli listn-raw6 ;;
0416) clear ; $cmd_binary cli listn-mangle4 ;; 
0417) clear ; $cmd_binary cli listn-mangle6 ;;
0418) clear ; $cmd_binary cli listn-security4 ;;
0419) clear ; $cmd_binary cli listn-security6 ;;
0420) clear ; $cmd_binary cli list-ebtables ;;
0421) clear ; $cmd_binary cli list-arptables ;;
################################################################################
0501) clear ; $cmd_binary cli eraserules ; $cmd_binary cli list4   ;;
0502) clear ; $cmd_binary cli wizard-mini ; $cmd_binary cli list4  ;;
0503) clear ; $cmd_binary cli wizard-full ; $cmd_binary cli list4  ;;
0504) clear ; $cmd_binary cli off-line ; $cmd_binary cli list4  ;;
0505) clear ; $cmd_binary cli all-permisive ; $cmd_binary cli list4   ;;
0506) 
archivo="$($favorite_text_dialog  --title "custom" --stdout --inputbox "$($command_ls $directory_config)" 0 0)"
archivo="$(echo $archivo | $command_sed s/\\///g)" ;  clear ; $cmd_binary custom $archivo ;;
0507) clear ; $cmd_binary cli games-shooter ; $cmd_binary cli list4  ;; 
0508) clear ; $cmd_binary cli game-wesnoth ; $cmd_binary cli list4  ;;
0509) clear ; $cmd_binary cli game-minetest ; $cmd_binary cli list4  ;;
0510) clear ; $cmd_binary cli game-freeciv ; $cmd_binary cli list4  ;;
0511) clear ; $cmd_binary cli game-widelands ; $cmd_binary cli list4  ;;
0512) clear ; $cmd_binary cli client-web ; $cmd_binary cli list4   ;;
0513) clear ; $cmd_binary cli client-vnc ; $cmd_binary cli list4  ;;
0514) clear ; $cmd_binary cli client-tor ; $cmd_binary cli list4   ;;
0515) clear ; $cmd_binary cli client-vpn ; $cmd_binary cli list4  ;;
0516) clear ; $cmd_binary cli client-torrent ; $cmd_binary cli list4  ;;
0517) clear ; $cmd_binary cli lan-tor ; $cmd_binary cli list4  ;;
0518) clear ; $cmd_binary cli lan-vpn ; $cmd_binary cli list4  ;; 
0519) clear ; $cmd_binary cli shield-ssh ; $cmd_binary cli list4  ;; 
0520) clear ; $cmd_binary cli server-ssh ; $cmd_binary cli list4   ;;
0521) clear ; $cmd_binary cli server-web ; $cmd_binary cli list4  ;;
0522) clear ; $cmd_binary cli server-vnc ; $cmd_binary cli list4  ;;
0523) clear ; $cmd_binary cli server-print ; $cmd_binary cli list4  ;;
0524) clear ; $cmd_binary cli server-samba ; $cmd_binary cli list4  ;;
0525) clear ; $cmd_binary cli server-lamp ; $cmd_binary cli list4  ;;
0526) clear ; $cmd_binary cli server-mail ; $cmd_binary cli list4  ;;
0527) clear ; $cmd_binary cli server-ftp ; $cmd_binary cli list4  ;;
0528) clear ; $cmd_binary cli server-news ; $cmd_binary cli list4  ;;
0529) clear ; $cmd_binary cli server-teamspeak ; $cmd_binary cli list4  ;;
0530) clear ; $cmd_binary cli server-mumble ; $cmd_binary cli list4  ;;
0531) clear ; $cmd_binary cli server-sql ; $cmd_binary cli list4  ;;
0532) clear ; $cmd_binary cli server-asterisk ; $cmd_binary cli list4  ;;
################################################################################
0601) archivo="$($favorite_text_dialog  --stdout --title "new-full-config example: file.cfg" \
--inputbox "$($command_ls $directory_config)" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ; $cmd_binary new-full-config $archivo ;;
0602) archivo="$($favorite_text_dialog  --stdout --title "nueva-completa-config example: archivo.cfg" \
--inputbox "$($command_ls $directory_config)" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ; $cmd_binary nueva-completa-config $archivo ;;
0603) archivo="$($favorite_text_dialog  --stdout --title "new-mini-config example: file.cfg" \
--inputbox "$($command_ls $directory_config)" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ; $cmd_binary new-mini-config $archivo ;;
0604) archivo="$($favorite_text_dialog  --stdout --title "nueva-mini-config example: archivo.cfg" \
--inputbox "$($command_ls $directory_config)" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ; $cmd_binary nueva-mini-config $archivo ;;
0605) archivo="$($favorite_text_dialog  --stdout --title "show-config example: file.cfg" \
--inputbox "$($command_ls $directory_config)" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ; $cmd_binary show-config $archivo ; echo "$tab [ info ] [ Use: Launch: $cmd_binary custom $archivo ]";;
0606) archivo="$($favorite_text_dialog  --stdout --title "modify-config example: file.cfg" \
--inputbox "$($command_ls $directory_config)" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ; $cmd_binary modify-config $archivo ;;
0607) archivo="$($favorite_text_dialog  --stdout --title "del-config" --inputbox "$($command_ls $directory_config)" 0 0)"
archivo=$(echo $archivo | $command_sed s/\\///g)
clear ; $cmd_binary del-config $archivo ; echo "deleted $archivo" ;;
0608) clear ; $cmd_binary cli names-config ;;
0609) clear ; $cmd_binary cli regen-config ;;
0610) clear ; $cmd_binary cli examples-config ;;
################################################################################
0701) clear ; $cmd_binary cli preferences-read ;;
0702) clear ; $cmd_binary cli preferences-modify ;;
0703) clear ; $cmd_binary cli preferences-regen ;;
0704) clear ; $cmd_binary cli ip4 ;;
0705) clear ; $cmd_binary cli ip6 ;;
0706) clear ; $cmd_binary cli version ;;
0707) clear ; $cmd_binary cli examples ;;
0708) clear ; $cmd_binary cli depends ;;
0709) clear ; $cmd_binary cli install ;;
0710) clear ; $cmd_binary cli upgrade ;;
################################################################################
0801) clear ; $cmd_binary iw-scan ;;
0802) clear ; $cmd_binary iw-info ;;
0803) clear ;
archivoa="$($favorite_text_dialog  --stdout --title "Type SSID to connect" --inputbox "$($cmd_binary iw-scan)" 0 0)" 
archivob="$($favorite_text_dialog  --stdout --title "Type PASSWORD to connect at $archivoa" --inputbox "Type password for $archivoa" 0 0)" 
$cmd_binary wpa-save archivoa archivob;;
0804) clear ; 
archivo="$($favorite_text_dialog  --stdout --title "type wpa file to load" \
--inputbox "$($command_find $directory_default | cut -d "/" -f 4- | $command_grep \\.wpa)" 0 0)"
$cmd_binary wpa-load $archivo ;;
0805) clear ; $cmd_binary dhcp-client ;;
################################################################################
0901) clear ; $cmd_binary rule-del-num ;;
0902) clear ; $cmd_binary rule-del-shield ;;
0903) clear ; $cmd_binary rule-add-shield ;;
################################################################################
1001) clear ; $cmd_binary cli ss ;;
1002) clear ; $cmd_binary cli netstat ;;
1003) clear ; $cmd_binary cli lsof ;;
1004) clear ; $cmd_binary cli tcpdump ;;
1005) clear ; $cmd_binary cli info-route ;;
1006) clear ; $cmd_binary cli info-nodes ;;
1007) clear ; $cmd_binary cli info-listen ;;
1008) clear ; $cmd_binary cli info-proxy ;;
1009) clear ; $cmd_binary cli info-net ;;
1010) clear ; $cmd_binary cli info-system ;;
1011) clear ; $cmd_binary cli ntpdate-client ;;
################################################################################
1101) clear ; $cmd_binary cli ipforward-list ;;
1102) clear ; $cmd_binary cli ipforward-on ;;
1103) clear ; $cmd_binary cli ipforward-off ;;
################################################################################
1201) clear ; $cmd_binary cli sshd-tunnel-info ;;
1202) clear ; 
archivo="$($favorite_text_dialog  --stdout --title "Type: user@my-localhost to connect" \
--inputbox "Type: user@my-localhost to connect" 0 0)" 
 $cmd_binary cli sshd-tunnel-on $archivo ;; 
1203) clear ; $cmd_binary cli sshd-tunnel-off ;;
################################################################################
1301) clear ; $cmd_binary cli speed-ip4 ;;
1302) clear ; $cmd_binary cli speed-ip6 ;;
1303) clear ; $cmd_binary cli tracetcp-ip4 ;;
1304) clear ; $cmd_binary cli tracetcp-ip6 ;;
################################################################################
1401) clear ; $cmd_binary cli traceicmp-ip4 ;;
1402) clear ; $cmd_binary cli traceicmp-ip6 ;;
1403) clear ; $cmd_binary cli ping-ip4 ;;
1404) clear ; $cmd_binary cli ping-ip6 ;;
################################################################################
1501) resolve="$($favorite_text_dialog  --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
clear ; $cmd_binary host $resolve ;;
1502) resolve="$($favorite_text_dialog  --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
clear ; $cmd_binary dig $resolve ;;
1503) resolve="$($favorite_text_dialog  --stdout --title "type host  or ip to resolve" --inputbox "example: fast.com" 0 0)"
clear ; $cmd_binary resolveip $resolve ;;
1504) resolve="$($favorite_text_dialog  --stdout --title "type host or ip to resolve" --inputbox "example: fast.com" 0 0)"
clear ; $cmd_binary geoip $resolve ;;
1505) clear ; $cmd_binary "ntpdate-client" ;;
################################################################################
1601) resolve="$($favorite_text_dialog  --stdout --title "type username to auth sudo" --inputbox "example: user1,user2,user3" 0 0)"
clear ; $cmd_binary sudofw-adduser $resolve ;;
1602) clear ; $cmd_binary cli sudofw-deluser ;;
1603) clear ; $cmd_binary cli sudofw-listuser ;;
################################################################################
1701) clear ; $cmd_binary cli game-word  ;;
1702) clear ; $cmd_binary cli game-number ;;
1703) resolve="$($favorite_text_dialog  --stdout --title "type one colour in rgb with 9 digits" --inputbox "example: 255000255" 0 0)"
$cmd_binary cli game-rgb $resolve ;;
1704) resolve="$($favorite_text_dialog  --stdout --title "type one colour in hex with 6 digits" --inputbox "example: ff00ff" 0 0)"
$cmd_binary cli game-hex $resolve ;;
1701) archivo="$($favorite_text_dialog  --stdout --title "Type location file to mp5sum" \
--inputbox "Type location file to mp5sum" 0 0)" 
clear ; $cmd_binary md5sum $archivo ;;
################################################################################
1802) clear ; $cmd_binary cli gpg-notes ;;
1803) clear ; archivo="$($favorite_text_dialog  --stdout --title "Type link mp3 station" --inputbox "Type link mp3 station" 0 0)"
$cmd_binary txt radio-mp3 $archivo ;;
1804) clear ; $cmd_binary txt radio-cadena100 ;;
1805) clear ; $cmd_binary txt radio-rockfm ;;
################################################################################
1901) clear ; $zero_option install ;;
1902) clear ; $cmd_binary cli howto-upgrade ;;
1903) clear ; $cmd_binary cli upgrade ;;
1904) clear ; $cmd_binary cli intro ;;
################################################################################
2001) clear ; $cmd_binary cli addblock-list ;;
2002) clear ; $cmd_binary cli addblock-list info ;;
2003) clear ; resolve="$($favorite_text_dialog  --stdout --title "type the blacklist" \
--inputbox "type only one: fademind mvps adaway stevenblack" 0 0)" 
clear ; $cmd_binary addblock-on $resolve ;;
2004) clear ; $cmd_binary cli addblock-off ;;
################################################################################
2101) clear ; $cmd_binary cli new-versions ;;
2102) clear ; $cmd_binary cli dev-version ;;
2103) clear ; $cmd_binary cli dev-changes ;;
2104) clear ; $cmd_binary cli intro ;;
################################################################################
2201) clear ; $cmd_binary cli free-ram ;;
2202) clear ; $cmd_binary cli speed-ram ;;
2203) clear ; $cmd_binary cli speed-disk ;;
2204) clear ; $cmd_binary cli speed-glx ;;
################################################################################
2301) clear ; $cmd_binary cli lpinfo ;;
2302) clear ; $cmd_binary cli lsblk ;;
2303) clear ; $cmd_binary cli lsusb ;; 
2304) clear ; $cmd_binary cli lscpu ;;
2305) clear ; $cmd_binary cli lspci ;;  
2306) clear ; $cmd_binary cli lsgpu ;;
2307) clear ; $cmd_binary cli lshw ;;
################################################################################
2401) clear ; $cmd_binary cli hosts ;;
2402) clear ; $cmd_binary cli protocols ;;
2403) clear ; $cmd_binary cli services ;;
2404) clear ; $cmd_binary cli hosts.allow ;;
2405) clear ; $cmd_binary cli hosts.deny ;;
2406) clear ; $cmd_binary cli resolv.conf ;;
2407) clear ; $cmd_binary cli preferences-read ;;
2408) clear ; $cmd_binary cli preferences-modify ;;
################################################################################
2501) clear ; $cmd_binary txt log-ssh ;;
2502) pattern="$($favorite_text_dialog  --stdout --title "type the pattern to search" --inputbox "example: sshd" 0 0)"
clear ; $cmd_binary "log-search" "$pattern" | less ;;
2503) clear ; $cmd_binary txt filelog ;;
2504) clear ; $cmd_binary txt autolog ;;
################################################################################
2601) clear ; $cmd_binary cli about ;;
2602) clear ; $cmd_binary cli depends ;;
2603) clear ; $cmd_binary cli config-eng ;;
2604) clear ; $cmd_binary cli config-spa ;;
################################################################################
2701) clear ; $cmd_binary cli mini-options ;;
2702) clear ; $cmd_binary cli full-options ;;
2703) clear ; $cmd_binary cli readme ;;
2704) clear ; $cmd_binary cli leeme ;;
2705) clear ; $cmd_binary cli all-help ;;
2706) clear ; $cmd_binary cli notes ;;
2707) clear ; $cmd_binary cli license ;;
################################################################################
*) clear ; $favorite_text_dialog  --msgbox "fwiptables good bye" 0 0 ; clear ; exit ;;
esac 
$cmd_binary text-pause
clear ; 
$cmd_binary cli-menu
exit; fi
####
####
#### :rutina-final-cli-menu:
##########    english: text-pause: do pause     ##########
##########    spanish: text-pause: hace pausa   ##########
#### :rutina-inicial-text-pause:
####
####
if [ "$first_option" == "text-pause" ]; then $nada
read -p '##### [ ok ] ##### Press [enter] to continue now with the cli-menu ##### '
exit; fi
####
####
#### :rutina-final-text-pause:
##########    english: version: system script, the version option              ##########
##########    spanish: version: script de sistema, la opcion mostrar version   ##########
#### :rutina-inicial-version:
####
####
if [ "$first_option" == "version" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ Show version about ] [ version.md] || ||"
echo "$title_md [ Name program ]"
echo "$text_md $cmd_name"
echo
echo "$title_md [ Version program ]"
echo "$text_md $cmd_version"
echo
echo "$title_md [ Description program ]"
echo "$text_md $cmd_description"
echo
echo "$title_md [ Launched program ]"
echo "$text_md $zero_option"
echo
echo "$title_md [ File format ]"
echo "$text_md $(file $zero_option | cut -d "," -f 1-2)"
echo
echo "$title_md [ MD5 sum ]"
echo "$text_md $($command_md5sum $0)"
echo
echo "$title_md [ Temp directory ]"
echo "$text_md $directory_tmp"
echo
echo "$title_md [ Data directory ]"
echo "$text_md $directory_data"
echo
echo "$title_md [ Default preferences ]"
echo "$text_md $default_preferences"
echo
echo "$title_md [ Default autolog ]"
echo "$text_md $default_autolog"
echo
echo "$title_md [ Default filelog ]"
echo "$text_md $default_filelog"
echo
echo "$title_md [ Web page ]"
echo "$text_md $cmd_homepage"
exit ; fi
####
####
#### :rutina-final-version:
##########     english: examples-config: Show config files examples            ##########
##########     spanish: examples-config: Muestra ejemplos de configuraciones   ##########
#### :rutina-inicial-examples-config:
####
####
if [ "$first_option" == "examples-config" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show examples ] || ||"
echo 
echo "[ examples ] [ examples for some services in client mode ]"
echo
####
####
#### config: web example ####
####
####
echo
echo "# config web example #" 
echo "config_client_tcp=http,https ;"
echo "config_client_udp=domain,ntp,bootpc,http ;"
####
####
#### config:  games example  ####
####
####
echo
echo "# config games example #"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,1025:65499; "
echo "config_client_tcp=http,https"
####
####
#### config: wesnoth game example ####
####
####
echo
echo "# config web example #" 
echo "config_client_tcp=http,https,14995:15000 ;"
echo "config_client_udp=domain,ntp,bootpc,http ;"
####
####
#### config:  torrent-example1 ####
####
####
echo
echo "# config torrent example #"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,1025:65499; "
echo "config_client_tcp=http,https"
####
####
#### config: samba-example1 ####
####
####
echo
echo "# config samba example #"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,137:139 ; "
echo "config_client_tcp=http,https,ipp,microsoft-ds"
echo "allow_output_ping= ; allow_input_ping= ; "
####
####
#### config: server gateway masquerade ##
####
####
echo
echo "# config vpn example #"
echo "allow_gateway_ip4= ; "
####
####
#### config: vpn-sample1 ##
####
####
echo
echo "# config vpn example #"
echo "allow_forward_ip4= ; "
echo "allow_net_vpn= ; "
echo "config_net_vpn=wesnoth.org,sourceforge.net"
####
####
#### config: email-example1 ####
####
####
echo
echo "# config email example #"
echo "config_client_tcp=http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps"
####
####
#### config: ssh-example1 ####
####
####
echo
echo "# config ssh example #"
echo "config_client_tcp=http,https,printer,ipp,ssh,rsync,git"
####
####
#### config: vnc-example1 ####
####
####
echo
echo "# config vnc example #"
echo "config_client_tcp=http,https,ssh,5900:5910"
####
####
#### config: ftp-example1 ####
####
####
echo
echo "# config ftp example #"
echo "config_client_tcp=http,https,ftp,ftp-data,ftps,ftps-data,gsiftp,zope-ftp"
echo "config_client_udp=domain,domain-s,bootpc,bootps,ntp,https,tftp"
####
####
#### config: printer-example1 ####
####
####
echo
echo "# config printer example #"
echo "config_client_tcp=http,https,ipp,printer"
####
####
#### config: irc-example1 ####
####
####
echo
echo "# config irc example #"
echo "config_client_tcp=http,https,ircd,ircs-u"
####
####
#### config: sql-example1 ####
####
####
echo
echo "# config sql example #"
echo "config_client_tcp=http,https,mysql,postgresql,mysql-proxy,ms-sql-s"
####
####
echo
exit ; fi
####
####
#### :rutina-final-examples-config:
##########     english: code: source from loop     ##########
##########     spanish: code: fuente de la rutina  ##########
#### :rutina-inicial-code:
####
####
if   [ "$first_option" == "code" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show source code for each option ] || ||"
echo "$duo_md [ info ] [ code ] [ show source code for options from $cmd_binary ]"
code_error="  [ info ] [ Usage ] [ $cmd_binary code option_choosed ]"
if [ "$second_option" == "$NULL" ]; then echo "$code_error" ; echo
salida_code="$(cat $cmd_binary | $command_grep -i  rutina-inicial \
| $command_grep -i -v cat | $command_sed -s s/####\ :rutina-inicial-//g | \
sort | $command_sed -s s/://g )"
echo $salida_code
exit ; fi
value_first="$(cat -n $cmd_binary | $command_grep  :rutina-inicial-$2: | cut -d "#" -f 1 | head -1)"
value_second="$(cat -n $cmd_binary | $command_grep :rutina-final-$2:  | cut -d "#" -f 1 | head -1)"
value_count="$(("$value_second"-"$value_first+1"))"
if [ ! -n "$value_first" ];   then echo; echo "$code_error" ; exit ; fi
if [ ! -n "$value_second" ];  then echo; echo "$code_error" ; exit ; fi
if [ ! -n "$value_count" ];   then echo; echo "$code_error" ; exit ; fi
echo "$tab [ code ] [ option: "$second_option" ] [ show $value_count lines ] \
[ from the "$value_first" line number to "$value_second" line number ]"
echo
cat $cmd_binary | head -n $value_second | tail -n $value_count
exit; fi
####
####
#### :rutina-final-code:
##########    english: license: license gpl v2   ##########
##########    spanish: license: license gpl v2   ##########
#### :rutina-inicial-license:
####
####
if [ "$first_option" == "license" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show license from git sourceforge for $cmd_binary ] || ||"
echo "license text for gpl v2 downloading from .. $license_gpl "
$favorite_text_browser -source "$license_gpl" | more
exit;  fi
####
####
#### :rutina-final-license:
##########    english: howto-upgrade: upgrade in its file path    ##########
##########    spanish: howto-upgrade: actualiza en su ruta        ##########
#### :rutina-inicial-howto-upgrade:
####
####
if   [ "$first_option" == "howto-upgrade" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show howto upgrade ] || ||"
echo "$duo_md [ info ] [ The actually version is: $cmd_binary $cmd_version actual ]"
echo "$duo_md [ info ] [ The latest version is: ]"
$favorite_text_browser -dump $url_web_newfiles | grep -i fwiptables-complete-v | grep -i download
#### $command_grep -i $cmd_binary | $command_grep -i  download | head -1
echo 
echo "$duo_md [ info ] [ Upgrade The $cmd_binary in file /usr/bin/fwiptables-cmd with $favorite_text_browser ]"
echo "$duo_md [ info ] [ OR download manually   || OR $cmd_binary upgrade || OR look down: ]"
echo "$duo_md [ info ] [ launch: $favorite_text_browser -source $url_web_latest &> /tmp/$cmd_binary ]"
echo "$duo_md [ info ] [ launch: chmod ugo+x /tmp/$cmd_binary ]"
echo "$duo_md [ info ] [ launch: /tmp/$cmd_binary install ]"
echo "$duo_md [ info ] [ ok and it will be upgrade with the name fwiptables-cmd ]"
exit;  fi
####
####
#### :rutina-final-howto-upgrade:
##########      english: addblock-list: lists for hosts dropped       ##########
##########      spanish: addblock-list: listas para hosts denegados   ##########
#### :rutina-inicial-addblock-list:
####
####
if   [ "$first_option" == "addblock-list" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show blacklist servers ] || ||"
blacklist_server_fademind="https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts"
blacklist_server_mvps="http://winhelp2002.mvps.org/hosts.txt"
blacklist_server_adaway="https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt"
blacklist_server_stevenblack="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
####
####
echo
echo "$duo_md [ actually ] [ File /etc/hosts has "$(cat /etc/hosts | wc -l)" numbers lines ]"
echo "$duo_md [ actually ] [ Show the file: $cmd_binary hosts ]"
echo
echo "$duo_md [   info:  ] [ Get server lines numbers total ] [ $cmd_binary addblock-list info ]"
echo "$duo_md [ change:  ] [ $cmd_binary addblock-on name-bl ] OR [ $cmd_binary addblock-off ]" 
echo
echo 
echo "$duo_md  name-bl          link-bl"
echo "$duo_md fademind        $blacklist_server_fademind"
echo "$duo_md mvps            $blacklist_server_mvps"
echo "$duo_md adaway          $blacklist_server_adaway"
echo "$duo_md stevenblack     $blacklist_server_stevenblack"
echo
####
####
if [ "$second_option" == "info" ]; then echo "$tab Getting lines numbers total.."; echo 
echo
echo "$tab [ actually ] [ File /etc/hosts has "$(cat /etc/hosts | wc -l)" numbers lines ]"
echo "$tab [ actually ] [ Show the file: $cmd_binary hosts ]"
echo
echo "$tab [ info ] [ total addblocker hosts ] [ waiting until $server_waiting seconds for max timeout each one ]"
timeout 10 $favorite_text_browser -source "$blacklist_server_fademind" > $directory_temporal/hosts.fademind 
blacklist_lines_fademind="$(cat $directory_temporal/hosts.fademind | wc -l)"
echo "$tab fademind:    $blacklist_lines_fademind hosts"
timeout $server_waiting $favorite_text_browser -source "$blacklist_server_mvps" > $directory_temporal/hosts.mvps 
blacklist_lines_mvps="$(cat $directory_temporal/hosts.mvps | wc -l)"
echo "$tab mvps:        $blacklist_lines_mvps hosts"
timeout $server_waiting $favorite_text_browser -source "$blacklist_server_adaway" > $directory_temporal/hosts.adaway 
blacklist_lines_adaway="$(cat $directory_temporal/hosts.adaway | wc -l)"
echo "$tab adaway:      $blacklist_lines_adaway hosts"
timeout $server_waiting $favorite_text_browser -source "$blacklist_server_stevenblack" > $directory_temporal/hosts.stevenblack 
blacklist_lines_stevenblack="$(cat $directory_temporal/hosts.stevenblack | wc -l)"
echo "$tab stevenblack: $blacklist_lines_stevenblack hosts"
echo ; fi
####
####
exit; fi
####
####
#### :rutina-final-addblock-list:
##########    english: addblock-on: Active one list for drop hosts        ##########
##########    spanish: addblock-on: Activa una lista para host denegados  ##########
#### :rutina-inicial-addblock-on:
####
####
if   [ "$first_option" == "addblock-on" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Configure blacklist server ] || ||"
echo
####
####
if [ "$second_option" == "$NULL" ]; then
echo "$duo_md [ Launched without options ] [ $cmd_binary addblock-list ]"
echo
$cmd_binary addblock-list
echo
exit; fi
####
####
blacklist_server_fademind="https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts"
blacklist_server_adaway="https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt"
blacklist_server_mvps="http://winhelp2002.mvps.org/hosts.txt"
blacklist_server_stevenblack="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
####
####
if [ "$second_option" == "fademind" ]; then 
echo "$duo_md [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_fademind" > $directory_temporal/hosts.fademind 
$cmd_binary addblock-off &> /dev/null
cat $directory_temporal/hosts.fademind | $command_sed 's/localhost/the-localhost/g' >> /etc/hosts
echo "$tab New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds likes localhost"; exit; fi
####
####
if [ "$second_option" == "adaway" ]; then 
echo "$duo_md [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_adaway" > $directory_temporal/hosts.adaway 
$cmd_binary addblock-off &> /dev/null
cat $directory_temporal/hosts.adaway | $command_sed 's/localhost/the-localhost/g' >> /etc/hosts
echo "$tab New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds likes localhost"; exit; fi
####
####
if [ "$second_option" == "mvps" ]; then 
echo "$duo_md [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_mvps" > $directory_temporal/hosts.mvps 
$cmd_binary addblock-off &> /dev/null
cat $directory_temporal/hosts.mvps | $command_sed 's/localhost/the-localhost/g' >> /etc/hosts
echo "$tab New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds likes localhost"; exit; fi
####
####
if [ "$second_option" == "stevenblack" ]; then 
echo "$duo_md [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_stevenblack" > $directory_temporal/hosts.stevenblack 
$cmd_binary addblock-off &> /dev/null
cat $directory_temporal/hosts.stevenblack | $command_sed 's/localhost/the-localhost/g' >> /etc/hosts
echo "$duo_md New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds likes localhost"; exit; fi
####
####
echo "$tab [ Invalid option ] [ See: $cmd_binary addblock-list ]"
####
####
exit; fi
####
####
#### :rutina-final-addblock-on:
##########    english: addblock-off: Deactive lists from drop hosts       ##########
##########    spanish: addblock-off: Desactiva listas de denegadas hosts  ##########
#### :rutina-inicial-addblock-off:
####
####
if   [ "$first_option" == "addblock-off" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Remove blacklist server ] || ||"
echo
echo $directory_temporal
echo $cincuenta > $directory_temporal/$first_option-hosts
echo "## ip v4 loopback ##" >> $directory_temporal/$first_option-hosts
echo "127.0.0.1	localhost-ip4 localhost localhost.localdomain" >> $directory_temporal/$first_option-hosts
echo "## ip v6 loopback ##" >> $directory_temporal/$first_option-hosts
echo "::1      localhost-ip6 localhost.localdomain" >> $directory_temporal/$first_option-hosts
echo "ff02::1 ip6-allnodes" >> $directory_temporal/$first_option-hosts
echo "ff02::2 ip6-allrouters"  >> $directory_temporal/$first_option-hosts
echo $cincuenta >> $directory_temporal/$first_option-hosts
cat  $directory_temporal/$first_option-hosts | $command_sed "s/localhost.localdomain/$HOSTNAME/g" > /etc/hosts
echo "$duo_md [ ok ] [ HOSTS RESTAURED ] [ FILE BASIC HOSTS FOR DEFAULT, hostname: $HOSTNAME ]"
cat  /etc/hosts
exit; fi
####
####
#### :rutina-final-addblock-off:
##########    english: eraserules: Erase rules option   ##########
##########    spanish: eraserules: Opcion borra reglas  ##########
#### :rutina-inicial-eraserules:
####
####
if [ "$first_option" == "eraserules" ]; then echo $give_cover 
echo "$header_ok [ $first_option ] [ erase all iptables rules ] || ||"
####
####
#### english: table policy 
#### spanish: table policy
####
####
rule_table_policy="ACCEPT"
$command_iptables_legacy   -t filter  -P INPUT    $rule_table_policy
$command_iptables_nft      -t filter  -P INPUT    $rule_table_policy
$command_ip6tables_legacy  -t filter  -P INPUT    $rule_table_policy
$command_ip6tables_nft     -t filter  -P INPUT    $rule_table_policy
$command_iptables_legacy   -t filter  -P FORWARD  $rule_table_policy
$command_iptables_nft      -t filter  -P FORWARD  $rule_table_policy
$command_ip6tables_legacy  -t filter  -P FORWARD  $rule_table_policy
$command_ip6tables_nft     -t filter  -P FORWARD  $rule_table_policy
$command_iptables_legacy   -t filter  -P OUTPUT   $rule_table_policy
$command_iptables_nft      -t filter  -P OUTPUT   $rule_table_policy
$command_ip6tables_legacy  -t filter  -P OUTPUT   $rule_table_policy
$command_ip6tables_nft     -t filter  -P OUTPUT   $rule_table_policy
####
####
#### english: erase the rules
#### spanish: borra las reglas
####
####
$command_arptables -F  &> /dev/null
$command_ebtables -t filter -F &> /dev/null
$command_ebtables -t nat -F &> /dev/null
$command_iptables_nft -t filter -F &> /dev/null
$command_ip6tables_nft -t filter  -F &> /dev/null
$command_iptables_legacy -t filter -F &> /dev/null
$command_ip6tables_legacy -t filter -F &> /dev/null
$command_iptables_nft -t nat -F &> /dev/null
$command_ip6tables_nft -t nat  -F &> /dev/null
$command_iptables_legacy -t nat -F &> /dev/null
$command_ip6tables_legacy -t nat -F &> /dev/null
$command_iptables_nft -t mangle -F &> /dev/null
$command_ip6tables_nft -t mangle  -F &> /dev/null
$command_iptables_legacy -t mangle -F &> /dev/null
$command_ip6tables_legacy -t mangle -F &> /dev/null
$command_iptables_nft -t raw -F &> /dev/null
$command_ip6tables_nft -t raw  -F &> /dev/null
$command_iptables_legacy -t raw -F &> /dev/null
$command_ip6tables_legacy -t raw -F &> /dev/null
$command_iptables_nft -t security -F &> /dev/null
$command_ip6tables_nft -t security -F &> /dev/null
$command_iptables_legacy -t security -F &> /dev/null
$command_ip6tables_legacy -t security -F &> /dev/null
####
####
$command_ebtables -t filter -P INPUT ACCEPT  &> /dev/null
$command_ebtables -t filter -P FORWARD ACCEPT &> /dev/null 
$command_ebtables -t filter -P OUTPUT ACCEPT &> /dev/null
$command_ebtables -t nat -P PREROUTING ACCEPT &> /dev/null
$command_ebtables -t nat -P OUTPUT ACCEPT  &> /dev/null
$command_ebtables -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_nft -t filter -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t filter -P FORWARD ACCEPT &> /dev/null
$command_iptables_nft -t filter -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t filter -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t filter -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_nft -t filter -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t filter -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t filter -P FORWARD ACCEPT &> /dev/null
$command_iptables_legacy -t filter -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t filter -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t filter -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_legacy -t filter -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t nat -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t nat -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t nat -P PREROUTING ACCEPT &> /dev/null
$command_iptables_nft -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P PREROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t nat -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P FORWARD ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_iptables_nft -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P FORWARD ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t mangle -P POSTROUTING ACCEPT &> /dev/null
$command_iptables_nft -t raw -P OUTPUT ACCEPT &> /dev/null
$command_iptables_nft -t raw -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_nft -t raw -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t raw -P PREROUTING ACCEPT &> /dev/null
$command_iptables_legacy -t raw -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t raw -P PREROUTING ACCEPT &> /dev/null
$command_ip6tables_legacy -t raw -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t raw -P PREROUTING ACCEPT &> /dev/null
$command_iptables_nft -t security -P INPUT ACCEPT &> /dev/null
$command_iptables_nft -t security -P FORWARD ACCEPT &> /dev/null
$command_iptables_nft -t security -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t security -P INPUT ACCEPT &> /dev/null
$command_ip6tables_nft -t security -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_nft -t security -P OUTPUT ACCEPT &> /dev/null
$command_iptables_legacy -t security -P INPUT ACCEPT &> /dev/null
$command_iptables_legacy -t security -P FORWARD ACCEPT &> /dev/null
$command_iptables_legacy -t security -P OUTPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t security -P INPUT ACCEPT &> /dev/null
$command_ip6tables_legacy -t security -P FORWARD ACCEPT &> /dev/null
$command_ip6tables_legacy -t security -P OUTPUT ACCEPT &> /dev/null
####
####
echo "$duo_md [ info ] [ Deleting the iptables rules firewall ]" 
echo "$duo_md [  ok  ] [ Firewall is erased ] [ Deleted rules ]"
exit; fi
####
####
#### :rutina-final-eraserules:
##########     english: info-route: The route option   ##########
##########     spanish: info-route: La opcion route    ##########
#### :rutina-inicial-info-route:
####
####
#### comments: sed is necesary to full work in graphicall
####
####
if   [ "$first_option" == "info-route" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Show route tables ] || ||"
if [ "$command_ip" == "$NULL" ]; then echo "$tab [ fail ] [ Install ip command ]"; exit; fi
echo "$duo_md [ info ] [ ip route ipv4 ]"
echo "$($command_ip -4 route)"
echo
echo "$duo_md [ info ] [ ip route ipv6 ]"
echo "$($command_ip -6 route)"
exit ; fi
####
####
#### :rutina-final-info-route:
##########    english: ss: The sockets option  ##########
##########    spanish: ss: La opcion sockets   ##########
#### :rutina-inicial-ss:
####
####
if   [ "$first_option" == "ss" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ Show sockets with ss ] || ||"
if [ "$command_ss" == "$NULL" ]; then echo "$tab [ fail ] [ Install ss command ]"; exit; fi
echo "$duo_md [ info ] [ The ipv6 sockets ]"
$command_ss -a6 | $command_sed 's/   / /g'
echo "$duo_md [ info ] [ The ipv4 sockets ]"
$command_ss -a4 | $command_sed 's/   / /g'
exit; fi
####
####
#### :rutina-final-ss:
##########     english: lsof: The lsof option  ##########
##########     spanish: lsof: La lsof sockets  ##########
#### :rutina-inicial-lsof:
####
####
if   [ "$first_option" == "lsof" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show sockets with lsof ] || ||"
if [ "command_lsof" == "$NULL" ]; then echo "$tab [ fail ] [ Install lsof command ]"; exit; fi
echo "$duo_md [ info ] [The sockets with lsof ipv6 ]"
$command_lsof -i | $command_grep -i  ipv6
echo "$duo_md [ info ] [The sockets with lsof ipv4 ]"
$command_lsof -i | $command_grep -i  ipv4
exit; fi
####
####
#### :rutina-final-lsof:
##########     english: netstat: The netstat sockets  ##########
##########     spanish: netstat: El netstat sockets   ##########
#### :rutina-inicial-netstat:
####
####
if   [ "$first_option" == "netstat" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show sockets with netstat ] || ||"
if [ "$command_netstat" == "$NULL" ]; then echo "$tab [ fail ] [ Install netstat command ]"; exit; fi
echo "$duo_md [ info ] [The sockets list with netstat ]"
$command_netstat -a -4 -6
exit; fi
####
####
#### :rutina-final-netstat:
##########     english: info-listen: The netstat sockets to listen    ##########
##########     spanish: info-listen: El netstat sockets a la escucha  ##########
#### :rutina-inicial-info-listen:
####
####
if   [ "$first_option" == "info-listen" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Show info address proxy ] || ||"
if [ "$command_ss" == "$NULL" ]; then echo "$tab [ fail ] [ Install ss command ]"; exit; fi
echo "$duo_md [ info ] [ Network Listen ] [ Listen ipv4 ]"
$command_ss -l4 | $command_sed 's/   / /g'
echo $tab
echo "$duo_md [ info ] [ Network Listen ] [ Listen ipv6 ]"
$command_ss -l6 | $command_sed 's/   / /g'
exit; fi
####
####
#### :rutina-final-info-listen:
##########    english: info-proxy: Info about proxy    ##########
##########    spanish: info-proxy: Informacion proxy   ##########
#### :rutina-inicial-info-proxy:
####
####
if   [ "$first_option" == "info-proxy" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Show info address proxy whith its system variable ] ||"
echo "$duo_md [ info ] [ Info address proxy ]"
echo "$duo_md [ info ] [ Web http_proxy:    $http_proxy ]"
echo "$duo_md [ info ] [ Web https_proxy:   $https_proxy ]"
exit; fi
####
####
#### :rutina-final-info-proxy:
##########    english: netstat-nat: netstat nat sockets   ##########
##########    spanish: netstat-nat: netstat nat sockets   ##########
#### :rutina-inicial-netstat-nat:
####
####
if   [ "$first_option" == "netstat-nat" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Show sockets with netstat for proxy ] || ||"
if [ "$command_netstat_nat" == "$NULL" ]; then echo "$tab [ fail ] [ Install netstat-nat command ]"; exit; fi
echo "$duo_md [ info ] [ The devices list with netstat for nat ]"
$command_netstat_nat
exit; fi
####
####
#### :rutina-final-netstat-nat:
##########      english: ipforward-on: active ip forward  ##########
##########      spanish: ipforward-on: activa ip forward  ##########
#### :rutina-inicial-ipforward-on:
####
####
if   [ "$first_option" == "ipforward-on" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Active ip forwading in kernel ] || ||"
for a in $($command_sysctl -a | $command_grep -i  forwarding | cut -d " " -f 1)
do $command_sysctl -w $a=1 ; done
exit; fi
####
####
#### :rutina-final-ipforward-on:
##########     english: ipforward-off: active ip forward   ##########
##########     spanish: ipforward-off: activa ip forward   ##########
#### :rutina-inicial-ipforward-off:
####
####
if   [ "$first_option" == "ipforward-off" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Deactive ip forwading in kernel ] || ||"
for a in $($command_sysctl -a | $command_grep -i  forwarding | cut -d " " -f 1)
do $command_sysctl -w $a=0 ; done
exit; fi
####
####
#### :rutina-final-ipforward-off
##########     english: list-alltables: list all rules         ##########
##########     spanish: list-alltables: list todas las reglas  ##########
#### :rutina-inicial-list-alltables:
####
####
 if [ "$first_option" == "list-alltables" ]; then  echo $give_cover
 echo "$header_ok [ $first_option ]  [ List all rules ] || ||"
 echo 
 echo; echo; echo "### LIST ARPTABLES ###"
 $cmd_binary list-arptables
 echo; echo; echo "### LIST EBTABLES ###"
 $cmd_binary list-ebtables
 echo; echo; echo "### LIST FILTER IP4 TABLE ###"
 $cmd_binary list-filter4
 echo; echo; echo "### LIST FILTER IP6 TABLE ###"
 $cmd_binary list-filter6
 echo; echo; echo "### LIST NAT IP4 TABLE ###"
 $cmd_binary list-nat4
 echo; echo; echo "### LIST NAT IP6 TABLE ###"
 $cmd_binary list-nat6
 echo; echo; echo "### LIST SECURITY IP4 TABLE ###"
 $cmd_binary list-security4
 echo; echo; echo "### LIST SECURITY IP6 TABLE ###"
 $cmd_binary list-security6
 echo; echo; echo "### LIST RAW IP4 TABLE ###"
 $cmd_binary list-raw4
 echo; echo; echo "### LIST RAW IP6 TABLE ###"
 $cmd_binary list-raw6
 echo; echo; echo "### LIST MANGLE IP4 TABLE ###"
 $cmd_binary list-mangle4
 echo; echo; echo "### LIST MANGLE IP6 TABLE ###"
 $cmd_binary list-mangle6
 echo 
 exit; fi
####
####
#### :rutina-final-list-alltables:
##########     english: listn-alltables: list all rules         ##########
##########     spanish: listn-alltables: list todas las reglas  ##########
#### :rutina-inicial-listn-alltables:
####
####
 if [ "$first_option" == "listn-alltables" ]; then  echo $give_cover
 echo "$header_ok [ $first_option ]  [ List all rules ] || ||"
 echo 
 echo; echo; echo "### LIST EBTABLES ###"
 $cmd_binary list-ebtables
 echo; echo; echo "### LIST ARPTABLES ###"
 $cmd_binary listn-arptables
 echo; echo; echo "### LIST FILTER IP4 TABLE ###"
 $cmd_binary listn-filter4
 echo; echo; echo "### LIST FILTER IP6 TABLE ###"
 $cmd_binary listn-filter6
 echo; echo; echo "### LIST NAT IP4 TABLE ###"
 $cmd_binary listn-nat4
 echo; echo; echo "### LIST NAT IP6 TABLE ###"
 $cmd_binary listn-nat6
 echo; echo; echo "### LIST SECURITY IP4 TABLE ###"
 $cmd_binary listn-security4
 echo; echo; echo "### LIST SECURITY IP6 TABLE ###"
 $cmd_binary listn-security6
 echo; echo; echo "### LIST RAW IP4 TABLE ###"
 $cmd_binary listn-raw4
 echo; echo; echo "### LIST RAW IP6 TABLE ###"
 $cmd_binary listn-raw6
 echo; echo; echo "### LIST MANGLE IP4 TABLE ###"
 $cmd_binary listn-mangle4
 echo; echo; echo "### LIST MANGLE IP6 TABLE ###"
 $cmd_binary listn-mangle6
 echo 
 exit; fi
####
####
#### :rutina-final-listn-alltables:
##########    english: list4-ip: The list option   ##########
##########    spanish: list4-ip: La opcion lista   ##########
#### :rutina-inicial-list4:
####
####
if [ "$first_option" == "list4-ip" ]; then echo $give_cover ; echo "$message_info_rules"
echo "$header_ok [ list4 ] [ List iptables filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
"$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
"$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-ip4"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]"
echo
$command_iptables_legacy -t filter -v -L $list_rules_conceptual
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_iptables_nft -t filter -v -L $list_rules_conceptual
;;
esac
exit; fi
####
####
#### :rutina-final-list4:
##########    english: list6-ip: list ipv6 rules filter           ##########
##########    spanish: list6-ip: lista reglas de filtros de ipv6  ##########
#### :rutina-inicial-list6:
####
####
if [ "$first_option" == "list6-ip" ]; then  echo $give_cover; echo "$message_info_rules"
echo "$header_ok [ list6 ] [ List iptables filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacyseis=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
"$command_ip6tables_legacy" -t filter -L OUTPUT 1 )
nftseis=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 )
fromrules="filter-ip6"
echo
case $legacyseis in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_legacy -v -L $list_rules_conceptual
;;
esac
echo $tab
case $nftseis in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_nft -v -L $list_rules_conceptual
;;
esac
####
####
exit; fi
####
####
#### :rutina-final-list6:
##########    english: listn4-ip: The list option   ##########
##########    spanish: listn4-ip: La opcion lista   ##########
#### :rutina-inicial-listn4-ip:
####
####
if [ "$first_option" == "listn4-ip" ]; then echo $give_cover ; echo "$message_info_rules"
echo "$header_ok [ list4 ] [ List iptables filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
"$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
"$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-ip4"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]"
echo
$command_iptables_legacy -t filter -v -L -n 
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_iptables_nft -t filter -v -L -n
;;
esac
exit; fi
####
####
#### :rutina-final-listn4-ip:
##########    english: listn6-ip: list ipv6 rules filter           ##########
##########    spanish: listn6-ip: lista reglas de filtros de ipv6  ##########
#### :rutina-inicial-listn6-ip:
####
####
if [ "$first_option" == "listn6-ip" ]; then  echo $give_cover; echo "$message_info_rules"
echo "$header_ok [ list6 ] [ List iptables filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacyseis=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
"$command_ip6tables_legacy" -t filter -L OUTPUT 1 )
nftseis=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 )
fromrules="filter-ip6"
echo
case $legacyseis in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_legacy -v -L -n
;;
esac
echo $tab
case $nftseis in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_ip6tables_nft -v -L -n
;;
esac
####
####
exit; fi
####
####
#### :rutina-final-listn6-ip:
##########    english: status: The list option ipv4 and ipv6    ##########
##########    spanish: status: La opcion lista ipv4 y ipv6      ##########
#### :rutina-inicial-status:
####
####
if [ "$first_option" == "status" ]; then
####
####
$cmd_binary -txt list4
####
####
$cmd_binary -txt list6
####
####
exit; fi
####
####
#### :rutina-final-satus:
##########    english: statusn: The list option ipv4 and ipv6    ##########
##########    spanish: statusn: La opcion lista ipv4 y ipv6      ##########
#### :rutina-inicial-statusn:
####
####
if [ "$first_option" == "statusn" ]; then
####
####
$cmd_binary -txt listn4
####
####
$cmd_binary -txt listn6
####
####
exit; fi
####
####
#### :rutina-final-satusn:
##########    english: listnum: The list option   ##########
##########    spanish: listnum: La opcion lista   ##########
#### :rutina-inicial-listnum:
####
####
if [ "$first_option" == "listnum" ]; then echo $give_cover
echo "$header_ok [ list ] [ List iptables numerical filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
"$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
"$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-numerical-ip4"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ] [ listing rules .. ]"
echo
$command_iptables_legacy -t filter -v -L -n
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" 
echo
$command_iptables_nft -t filter -v -L -n
;;
esac
exit; fi
####
####
#### :rutina-final-listnum:
##########    english: listnum6: The list option   ##########
##########    spanish: listnum6: La opcion lista   ##########
#### :rutina-inicial-listnum-filter6:
####
####
if [ "$first_option" == "listnum6" ]; then echo $give_cover
echo "$header_ok [ list ] [ List iptables numerical filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
legacycuatro=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
"$command_ip6tables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
nftcuatro=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
fromrules="filter-numerical-ip6"
echo
case $legacycuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules xtables ] [ iptables-legacy ] [ $fromrules ] [ no list ]" ;;
*)
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L -n
;;
esac
echo "$tab"
case $nftcuatro in
"$NULL") echo "$duo_md [ info ] [ Without rules nftables ] [ iptables-nft ] [ $fromrules ] [ listing rules .. ]" ;;
*)
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]" 
echo
$command_iptables_nft -t filter -v -L -n
;;
esac
exit; fi
####
####
#### :rutina-final-listnum6:
##########    english: list-filter4: The list option   ##########
##########    spanish: list-filter4: La opcion lista   ##########
#### :rutina-inicial-list-filter4:
####
####
if [ "$first_option" == "list-filter4" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables filter ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]" 
echo
$command_iptables_nft -t filter -v -L $list_rules_conceptual
####
####
exit; fi
####
####
#### :rutina-final-list-filter4:
##########    english: list-forward: list iptables filter forward rules       ##########
##########    spanish: list-forward: lista reglas de iptables filter forward  ##########
#### :rutina-inicial-list-forward:
####
####
if [ "$first_option" == "list-forward" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List iptables filter forward ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-forward-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L FORWARD $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t filter -v -L FORWARD $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-forward:
##########    english: list-filter6: list ipv6 rules filter           ##########
##########    spanish: list-filter6: lista reglas de filtros de ipv6  ##########
#### :rutina-inicial-list-filter6:
####
####
if [ "$first_option" == "list-filter6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables filter ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]" 
echo
$command_ip6tables_legacy -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]" 
echo
$command_ip6tables_nft -v -L $list_rules_conceptual
####
####
exit; fi
####
####
#### :rutina-final-list-filter6:
##########    english: list-forward6: list iptables filter forward rules ipv6        ##########
##########    spanish: list-forward6: lista reglas de iptables filter forward ipv6   ##########
#### :rutina-inicial-list-forward6:
####
####
if [ "$first_option" == "list-forward6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables filter forward ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="filter-forward-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t filter -v -L FORWARD $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t filter -v -L FORWARD $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-forward6:
##########    english: list-nat4: list NAT rules of ipv4       ##########
##########    spanish: list-nat4: lista reglas de NAT de ipv4  ##########
#### :rutina-inicial-list-nat-4:
####
####
 if [ "$first_option" == "list-nat4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables nat ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="nat-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t nat -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t nat -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-nat-4:
##########    english: list-nat6: list NAT rules of ipv6       ##########
##########    spanish: list-nat6: lista reglas de NAT de ipv6  ##########
#### :rutina-inicial-list-nat6:
####
####
if [ "$first_option" == "list-nat6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables nat ipv6] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="nat-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t nat -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t nat -v -L $list_rules_conceptual 
#### echo 
exit; fi
####
####
#### :rutina-final-list-nat6:
##########    english: listnum-filter4: list option numerical filter ipv4   ##########
##########    spanish: listnum-filter4: lista numeral filter ipv4           ##########
#### :rutina-inicial-listnum-filter4:
####
####
if [ "$first_option" == "listnum-filter4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables filter ipv4 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-ip4"
echo
echo "$duo_md [ info ] [ With rules netfilter ] [ iptables-nft ] [ $fromrules ]"  
echo
$command_iptables_legacy -v -L -n 
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -v -L -n
exit; fi
####
####
#### :rutina-final-listnum-filter4:
##########    english: list-forwardnum: list iptables filter forward rules in numerical     ##########
##########    spanish: list-forwardnum: lista reglas de iptables filter forward in numeros  ##########
#### :rutina-inicial-list-forwardnum:
####
####
if [ "$first_option" == "list-forwardnum" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables filter forward ipv4 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-forward-ip4"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t filter -v -L FORWARD -n
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t filter -v -L FORWARD -n
exit; fi
####
####
#### :rutina-final-list-forwardnum:
##########    english: listnum-filter6: list option numerical filter ipv6   ##########
##########    spanish: listnum-filter6: lista numeral filter ipv6           ##########
#### :rutina-inicial-listnum-filter6:
####
####
if [ "$first_option" == "listnum-filter6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables filter ipv6 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]" 
echo
$command_ip6tables_legacy -v -L -n
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]" 
echo
$command_ip6tables_nft -v -L -n
exit; fi
####
####
#### :rutina-final-listnum-filter6:
##########    english: list-forwardnum6: list iptables filter forward rules in numerical ipv6      ##########
##########    spanish: list-forwardnum6: lista reglas de iptables filter forward in numeros ipv6   ##########
#### :rutina-inicial-list-forwardnum6:
####
####
if [ "$first_option" == "list-forwardnum6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables filter forward ipv6 in numerical ] [ it is only sufficent or with legacy or with nft ] || ||"
fromrules="filter-forward-ip6"
echo
echo "$duo_md [ info ] [ With rules xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t filter -v -L FORWARD -n
echo
echo "$duo_md [ info ] [ With rules nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t filter -v -L FORWARD -n
exit; fi
####
####
#### :rutina-final-list-forwardnum6:
##########    english: list-mangle4: list mangle rules from ipv4      ##########
##########    spanish: list-mangle4: lista reglas de mangle de ipv4   ##########
#### :rutina-inicial-list-mangle4:
####
####
if [ "$first_option" == "list-mangle4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables mangle ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="mangle-ip4"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t mangle -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t mangle -v -L $list_rules_conceptual
echo 
exit; fi
####
####
#### :rutina-final-list-mangle4:
##########    english: list-mangle6: list mangle rules from ipv6     ##########
##########    spanish: list-mangle6: lista reglas de mangle de ipv6  ##########
#### :rutina-inicial-list-mangle6:
####
####
if [ "$first_option" == "list-mangle6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables mangle ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="mangle-ip6"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t mangle -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t mangle -v -L $list_rules_conceptual
#### echo 
exit; fi
####
####
#### :rutina-final-list-mangle6:
##########    english: list-raw4: list raw rules from ipv4  ##########
##########    spanish: list-raw4: lista reglas raw de ipv4  ##########
#### :rutina-inicial-list-raw4:
####
####
if [ "$first_option" == "list-raw4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables raw ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="raw-ip4"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t raw -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t raw -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-raw4:
##########    english: list-raw6: list raw rules from ipv6  ##########
##########    spanish: list-raw6: lista reglas raw de ipv6  ##########
#### :rutina-inicial-list-raw6:
####
####
if [ "$first_option" == "list-raw6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables raw ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="raw-ip6"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t raw -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t raw -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-raw6:
##########    english: list-security4: list security rules from ipv4     ##########
##########    spanish: list-security4: lista reglas de security de ipv4  ##########
#### :rutina-inicial-list-security4:
####
####
if [ "$first_option" == "list-security4" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables security ipv4 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="security-ip4"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_iptables_legacy -t security -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_iptables_nft -t security -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-security4:
##########    english: list-security6: list security rules from ipv6     ##########
##########    spanish: list-security6: lista reglas de security de ipv6  ##########
#### :rutina-inicial-list-security6:
####
####
if [ "$first_option" == "list-security6" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List iptables security ipv6 ] [ it is only sufficent or with legacy or with nft ] || ||"
echo "$message_info_rules"
fromrules="security-ip6"
echo
echo "$duo_md [ info ] [ The xtables ] [ iptables-legacy ] [ $fromrules ]"
echo
$command_ip6tables_legacy -t security -v -L $list_rules_conceptual
echo
echo "$duo_md [ info ] [ The nftables ] [ iptables-nft ] [ $fromrules ]"
echo
$command_ip6tables_nft -t security -v -L $list_rules_conceptual
exit; fi
####
####
#### :rutina-final-list-security6:
##########    english: list-ebtables: list ebtables rules with mac adress       ##########
##########    spanish: list-ebtables: lista reglas de ebtables with mac adress  ##########
#### :rutina-inicial-list-ebtables:
####
####
if [ "$first_option" == "list-ebtables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List ebtables ] || ||"
fromrules="ebtables"
echo
echo "$duo_md [ info ] [ ebtables: filter ethernet ] [ $fromrules ]"
echo
$command_ebtables -L -t filter
echo
echo "$duo_md [ info ] [ ebtables: nat ethernet ] [ $fromrules ]"
echo
$command_ebtables -L -t nat
exit; fi
####
####
#### :rutina-final-list-ebtables:
##########    english: list-arptables: list rules arptables with arp        ##########
##########    spanish: list-arptables: lista reglas de arptables with arp   ##########
#### :rutina-inicial-list-arptables:
####
####
if [ "$first_option" == "list-arptables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List arptables ipv4 ] || ||"
fromrules="arptables"
echo
echo "$duo_md [ info ] [ arptables: filter arptables ] [ $fromrules ]"
echo
$command_arptables -L
exit; fi
####
####
#### :rutina-final-list-arptables:
##########    english: listn-arptables: list rules arptables with arp        ##########
##########    spanish: listn-arptables: lista reglas de arptables with arp   ##########
#### :rutina-inicial-listn-arptables:
####
####
if [ "$first_option" == "listn-arptables" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ List arptables ipv4 ] || ||"
fromrules="arptables"
echo
echo "$duo_md [ info ] [ arptables: filter arptables ] [ $fromrules ]"
echo
$command_arptables -L -n
exit; fi
####
####
#### :rutina-final-listn-arptables:
##########    english: new-full-config: new-full-config option to create new configs   ##########
##########    spanish: new-full-config: new-full-config para cear nuevas config        ##########
#### :rutina-inicial-new-full-config:
####
####
if [ "$first_option" == "new-full-config" ] && [ "$second_option" == "$NULL" ]  ; then echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary new-full-config config-new ]"
exit; fi
####
####
if [ "$first_option" == "new-full-config" ] && [ "$second_option" != "$NULL" ] ; then echo $give_cover
archivo="$second_option"
cp "$defaultfullcfg_eng" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-new-full-config:
##########    english: nueva-completa-config: create new configs                             ##########
##########    spanish: nueva-completa-config: nueva-completa-config para cear nuevas config  ##########
#### :rutina-inicial-nueva-completa-config:
####
####
if [ "$first_option" == "nueva-completa-config" ] && [ "$second_option" == "$NULL" ]  ; then echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary nueva-completa-config config-nueva ]"
exit; fi
####
####
if [ "$first_option" == "nueva-completa-config" ] && [ "$second_option" != "$NULL" ] ; then echo $give_cover
archivo="$second_option"
cp "$defaultfullcfg_spa" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-nueva-completa-config:
##########    english: new-mini-config: create new configs   ##########
##########    spanish: new--mini config: cea nuevas config   ##########
#### :rutina-inicial-new-mini-config:
####
####
if [ "$first_option" == "new-mini-config" ] && [ "$second_option" == "$NULL" ]  ; then echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary new-mini-config config-new ]"
exit; fi
####
####
if [ "$first_option" == "new-mini-config" ] && [ "$second_option" != "$NULL" ] ; then echo $give_cover
archivo="$second_option"
cp "$defaultminicfg_eng" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-new-mini-config:
##########    english: nueva-mini-config: create new configs   ##########
##########    spanish: nueva-mini-config: crea nuevas config   ##########
#### :rutina-inicial-nueva-mini-config:
####
####
if [ "$first_option" == "nueva-mini-config" ] && [ "$second_option" == "$NULL" ]  ; then  echo $give_cover
echo "$tab [ info ] [ usage: ] [ $cmd_binary nueva-mini-config config-nueva ]"
exit; fi
####
####
if [ "$first_option" == "nueva-mini-config" ] && [ "$second_option" != "$NULL" ] ; then  echo $give_cover
archivo="$second_option"
cp "$defaultminicfg_spa" "$directory_config/$archivo"
$favorite_text_editor $directory_config/$archivo
echo " [  ok  ] created file $archivo"
####
####
exit; fi
####
####
#### :rutina-final-nueva-mini-config:
##########    english: modify-config: modify a one config.cfg        ##########
##########    spanish: modify-config: modify una configuracion.cfg   ##########
#### :rutina-inicial-modify-config:
####
####
if [ "$first_option" == "modify-config" ]; then  echo $give_cover
####
###
if [ ! -f "$directory_config/$second_option" ] ; then $nada
$zero_option names-config
echo "$tab [ info ] [ usage: ] [ $cmd_binary modify-config config-existent ]" ; exit; fi
####
####
if [ -f "$directory_config/$second_option" ] ; then $nada
cp "$directory_config/$second_option" "$directory_temporal/$second_option" &> /dev/null
$favorite_text_editor "$directory_config/$second_option"
echo "$duo_md [  ok  ] [ Custom file $second_option ]"
clear; fi
####
####
clear ; exit ; fi
####
####
#### :rutina-final-modify-config:
##########    english: show-config: show a one config          ##########
##########    spanish: show-config: muestra una configuracion  ##########
#### :rutina-inicial-show-config:
####
####
if [ "$first_option" == "show-config" ] ; then echo $give_cover
####
####
if [ ! -f "$directory_config"/"$second_option" ] ; then 
echo "$duo_md [ info ] [ Usage: $cmd_binary show-config config-cfg ]" ; exit; fi
####
####
if [ -f "$directory_config"/"$second_option" ] ; then 
cat $directory_config/$second_option ;
echo  ; exit ; fi
####
####
exit; fi
####
####
#### :rutina-final-show-config:
##########    english: del-config: delete a old config               ##########
##########    spanish: del-config: elimina una vieja configuracion   ##########
#### :rutina-inicial-del-config:
####
####
if [ "$first_option" == "del-config" ]; then echo $give_cover
####
####
if [ ! -f $directory_config/$second_option ] ; then
echo "$duo_md [ info ] [ usage: ] [ $cmd_binary del-config config-old ]" ; exit ; fi
####
####
if [ -f $directory_config/$second_option ] ; then
rm $directory_config/$second_option
echo "$directory_config/$second_option Deleted"
echo  ; exit ; fi
####
####
exit ; fi
####
####
#### :rutina-final-del-config:
##########    english: show-config: show a one config          ##########
##########    spanish: show-config: muestra una configuracion  ##########
#### :rutina-inicial-show-config:
####
####
if [ "$first_option" == "show-config" ] ; then echo $give_cover
####
####
if [ -f "$directory_config"/"$second_option" ] ; then 
cat $directory_config/$second_option ;
else echo "$tab [ info ] [ Usage: $cmd_binary show-config config-cfg ]" ; exit; fi
####
####
exit; fi
####
####
#### :rutina-final-show-config:
##########    english: del-config: delete a old config               ##########
##########    spanish: del-config: elimina una vieja configuracion   ##########
#### :rutina-inicial-del-config:
####
####
if [ "$first_option" == "del-config" ]; then echo $give_cover
####
####
if [ -f $directory_config/$second_option ] ; then
rm $directory_config/$second_option
echo "$directory_config/$second_option Deleted"
else echo "$tab [ info ] [ usage: ] [ $cmd_binary del-config config-old ]" ; fi
####
####
exit ; fi
####
####
#### :rutina-final-del-config:
##########    english: sudofw-adduser: the sudofw-adduser option en english    ##########
##########    spanish: sudofw-adduser: la opcion de sudofw-adduser en ingles   ##########
#### :rutina-inicial-sudofw-adduser:
####
####
if   [ "$first_option" == "sudofw-adduser" ]; then echo $give_cover
case $second_option in
"$NULL") echo  ; echo "$tab [ info ] [ usage: ] [ $cmd_binary sudofw-adduser user ]" ; exit ;;
*) autorizado="$second_option" ;; esac
echo "$autorizado ALL=(root) NOPASSWD: /usr/bin/$cmd_config" > /etc/sudoers.d/$cmd_config
echo "alias fwiptables-cmd='sudo /usr/bin/$cmd_config'" >  /etc/bash_completion.d/$cmd_config
echo "$duo_md [  ok  ] [ $autorizados will use $cmd_config ]"
echo "$duo_md [  ok  ] [ $cmd_binary will use alias with sudo ]"
if [ -f "/etc/sudoers.d/fwiptables-cmd" ] ; then echo "$duo_md [ info ] [ Privileges ]  $(cat /etc/sudoers.d/$cmd_config ) " ; fi
exit ; fi
####
####
#### :rutina-final-sudofw-adduser:
##########    english: sudofw-deluser: the sudofw-deluser option en english    ##########
##########    spanish: sudofw-deluser: la opcion de sudofw-deluser en ingles   ##########
#### :rutina-inicial-sudofw-deluser:
####
####
if   [ "$first_option" == "sudofw-deluser" ]; then echo $give_cover
rm /etc/sudoers.d/$cmd_config &> /dev/null
rm /etc/bash_completion.d/$cmd_config &> /dev/null
echo "$duo_md [  ok  ] [ deleted auth sudo ] [ /etc/sudoers.d/$cmd_config         ]"
echo "$duo_md [  ok  ] [ deleted alias cmd ] [ /etc/bash_completion.d/$cmd_config ]"
exit; fi
####
####
#### :rutina-final-sudofw-deluser:
##########    english: sudofw-listuser: the sudofw-listuser option en english   ##########
##########    spanish: sudofw-listuser: la opcion de sudofw-listuser en ingles  ##########
#### :rutina-inicial-sudofw-listuser:
####
####
if   [ "$first_option" == "sudofw-listuser" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ list sudoer and alias for $cmd_config ]"
if [ -f "/etc/sudoers.d/$cmd_config" ] ; then
echo "$duo_md [  ok  ] [ sudoer file:  /etc/sudoers.d/$cmd_config         ]"
echo "$duo_md [ info ] [ Privileges ]  $(cat /etc/sudoers.d/$cmd_config ) " ; fi
####
if [ -f "/etc/bash_completion.d/$cmd_config" ] ; then
echo "$duo_md [  ok  ] [ alias file:  /etc/bash_completion.d/$cmd_config ]"
echo "$duo_md [ info ] [ Privileges ]  $(cat /etc/bash_completion.d/$cmd_config ) " ; fi
####
####
if [ ! -f "/etc/sudoers.d/$cmd_config" ] ; then
echo "$duo_md [  ok  ] [ list users with root auth for launch $cmd_config ]"
echo "$duo_md [ fail ] [ actual $cmd_config Without root sudo from users ]" ; fi
####
exit;  fi
####
####
#### :rutina-final-sudofw-listuser:
##########    english: aliasfw-list: the sudofw-adduser option en english   ##########
##########    spanish: aliasfw-list: la opcion de sudofw-adduser en ingles  ##########
#### :rutina-inicial-aliasfw-list:
####
####
if   [ "$first_option" == "aliasfw-list" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ list alias and autocomplete for $cmd_config ]"
echo 
echo "$duo_md [ info ] [ alias file ] [  /etc/profile.d/$cmd_config ]"
cat /etc/bash_completion.d/$cmd_config
echo "$duo_md [ info ] [ alias file ] [  /etc/bash_completion.d/$cmd_config ]"
cat /etc/bash_completion.d/$cmd_config
exit; fi
####
####
#### :rutina-final-aliasfw-list:
##########    english: md5sum: md5 sum from a one file     ##########
##########    spanish: md5sum: suma md5 desde un archivo   ##########
#### :rutina-inicial-md5sum:
####
####
if   [ "$first_option" == "md5sum" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show sum md5 from one file ] || ||"
if [ "$command_md5sum" == "$NULL" ]; then echo "$duo_md [ info ] [ Install md5sum ]"; exit ; fi
if [ "$second_option" == "$NULL" ]; then echo "$duo_md [ info ] [ $cmd_binary md5sum file ] [ choose file ]"; exit; fi
file_md5="$2"
if [ -f "$file_md5" ]; then "$command_md5sum" "$file_md5" ;
else echo "$duo_md [ info ] [ $cmd_binary md5sum file ] [ file not found ]"; fi
exit; fi
####
####
#### :rutina-final-alias-md5sum:
##########    english: rule-add-shield: the ipforwading option en english   ##########
##########    spanish: rule-add-shield: la opcion de reenvios  en ingles    ##########
#### :rutina-inicial-rule-add-shield:
####
####
if   [ "$first_option" == "rule-add-shield" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Add shield ssh ] || ||"
####
####
$cmd_binary save no_default_tmp &> /dev/null
for shield in $($command_ls -1 $directory_fwrecover/no_default_tmp-* | $command_grep -i -v less)
do $command_grep -E -v "shield|SHIELD" $shield >> $shield-less
mv $shield-less $shield &> /dev/null
done ; $cmd_binary load no_default_tmp &> /dev/null ; 
####
####
legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 )
nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1)
legacyseis=$("$command_ip6tables_legacy" -t filter -L INPUT 1)
nftseis=$("$command_ip6tables_nft" -t filter -L INPUT 1)
####
####
if [ "$legacycuatro" != "$NULL" ]; then
$command_iptables_legacy -I INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$command_iptables_legacy -I INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
fi
####
####
if [ "$nftcuatro" != "$NULL" ]; then
$command_iptables_nft -I INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$command_iptables_nft -I INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
fi
####
####
if [ "$legacyseis" != "$NULL" ]; then
$command_ip6tables_legacy -I INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$command_ip6tables_legacy -I INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
fi
####
####
if [ "$nftseis" != "$NULL" ]; then
$command_ip6tables_legacy -I INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$command_ip6tables_legacy -I INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
fi
####
####
exit ; fi
####
####
#### :rutina-final-rule-add-shield:
##########    english: rule-del-shield: the ipforwading option en english   ##########
##########    spanish: rule-del-shield: la opcion de reenvios  en ingles    ##########
#### :rutina-inicial-rule-del-shield:
####
####
if   [ "$first_option" == "rule-del-shield" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Reset shield ssh ] || ||"
$cmd_binary save no_default_tmp &> /dev/null
for shield in $($command_ls -1 $directory_fwrecover/no_default_tmp-* | $command_grep -i -v less)
do $command_grep -E -v "shield|SHIELD" $shield >> $shield-less
mv $shield-less $shield &> /dev/null
done ; $cmd_binary load no_default_tmp &> /dev/null ; 
exit ; fi
####
####
#### :rutina-final-rule-del-shield:
##########    english: rule-del-num: delete a rule number       ##########
##########    spanish: rule-del-num: borra un numero de regla   ##########
#### :rutina-inicial-rule-del-num:
####
####
##########    rule-del-num without -gui
##########    rule-del-num cuando viene sin -gui
####
####
####  del-rule when other to -gui
####  del-rule cuando viene de otro distinto a -gui
####
####
if   [ "$first_option" == "rule-del-num" ] && [ "$second_option" != "-gui" ]; then
menudelrule="$($favorite_text_dialog  --stdout --clear --title " Delete one rule in one table " --menu "Select:" 0 0 0 \
01 "NFTABLES / filter-ip4 / INPUT" \
02 "NFTABLES / filter-ip4 / FORWARD" \
03 "NFTABLES / filter-ip4 / OUTPUT" \
04 "XTABLES / filter-ip4  / INPUT" \
05 "XTABLES / filter-ip4  / FORWARD" \
06 "XTABLES / filter-ip4  / OUTPUT" \
11 "NFTABLES / filter-ip6 / INPUT" \
12 "NFTABLES / filter-ip6 / FORWARD" \
13 "NFTABLES / filter-ip6 / OUTPUT" \
14 "XTABLES / filter-ip6  / INPUT" \
15 "XTABLES / filter-ip6  / FORWARD" \
16 "XTABLES / filter-ip6  / OUTPUT" \
)"
case "$menudelrule" in
"01") fire_wall="$command_iptables_nft" ; table_wall="filter" ; code_wall="INPUT"      ;;
"02") fire_wall="$command_iptables_nft" ; table_wall="filter" ; code_wall="FORWARD"    ;;
"03") fire_wall="$command_iptables_nft" ; table_wall="filter" ; code_wall="OUTPUT"     ;;
"04") fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="INPUT"   ;;
"05") fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="FORWARD" ;;
"06") fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="OUTPUT"  ;;
"11") fire_wall="$command_ip6tables_nft" ; table_wall="filter" ; code_wall="INPUT"      ;;
"12") fire_wall="$command_ip6tables_nft" ; table_wall="filter" ; code_wall="FORWARD"    ;;
"13") fire_wall="$command_ip6tables_nft" ; table_wall="filter" ; code_wall="OUTPUT"     ;;
"14") fire_wall="$command_ip6tables_legacy" ; table_wall="filter" ; code_wall="INPUT"   ;;
"15") fire_wall="$command_ip6tables_legacy" ; table_wall="filter" ; code_wall="FORWARD" ;;
"16") fire_wall="$command_ip6tables_legacy" ; table_wall="filter" ; code_wall="OUTPUT"  ;;
*) clear ; exit ;; esac ;
lalista="$($favorite_text_dialog --stdout --title " Show Rules " --msgbox "$($fire_wall -t $table_wall -L $code_wall --line-numbers )" 0 0 )"
deleterule="$($favorite_text_dialog --stdout --title " Type the number rule to delete " --inputbox "example: 2" 0 0 )"
"$($fire_wall -t $table_wall -D $code_wall "$deleterule")" ; 
lalista="$($favorite_text_dialog --stdout --title " Show Rules " --msgbox "$($fire_wall -t $table_wall -L $code_wall --line-numbers )" 0 0 )"
clear ; exit; fi
####
####
##########    rule-del-num with -gui
##########    rule-del-num con -gui
####
####
####  del-rule when -gui
####  del-rule cuando viene de -gui
####
####
if   [ "$first_option" == "rule-del-num" ] && [ "$second_option" == "-gui" ]; then echo $give_cover
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]"; exit ;; esac
selection="$($favorite_graphicall_dialog $graphic_dimension  \
--list  "01 NFTABLES filter-ip4 INPUT"  "02 NFTABLES / filter-ip4 / FORWARD"  "03 NFTABLES / filter-ip4 / OUTPUT" \
"04 XTABLES / filter-ip4  / INPUT" "05 XTABLES / filter-ip4 / FORWARD"  "06 XTABLES / filter-ip4 / OUTPUT" \
"11 NFTABLES filter-ip6 INPUT"  "12 NFTABLES / filter-ip6 / FORWARD"  "13 NFTABLES / filter-ip6 / OUTPUT" \
"14 XTABLES / filter-ip6  / INPUT" "15 XTABLES / filter-ip6 / FORWARD"  "16 XTABLES / filter-ip6 / OUTPUT" \
--column="Option list $cmd_binary" --text="Select one option" --title="Gui Menu || $cmd_binary || $(date) ")"
case "$selection" in
"01 NFTABLES filter-ip4 INPUT")
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L INPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_iptables_nft -t filter -D INPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L INPUT --line-numbers)" )" ;;
"02 NFTABLES / filter-ip4 / FORWARD") fire_wall="$command_iptables_nft" ; table_wall="filter" ; code_wall="FORWARD"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L FORWARD --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_iptables_nft -t filter -D FORWARD $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L FORWARD --line-numbers)" )" ;;
"03 NFTABLES / filter-ip4 / OUTPUT")  fire_wall="$command_iptables_nft" ; table_wall="filter" ; code_wall="OUTPUT" 
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L OUTPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_iptables_nft -t filter -D OUTPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L OUTPUT --line-numbers)" )" ;;
"04 XTABLES / filter-ip4 / INPUT")     fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="INPUT"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_legacy -t filter -L INPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_iptables_legacy -t filter -D INPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_legacy -t filter -L INPUT --line-numbers)" )" ;;
"05 XTABLES / filter-ip4 / FORWARD")   fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="FORWARD"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_legacy -t filter -L FORWARD --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_iptables_legacy -t filter -D FORWARD $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_legacy -t filter -L FORWARD --line-numbers)" )" ;;
"06 XTABLES / filter-ip4 / OUTPUT")    fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="OUTPUT"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_legacy -t filter -L OUTPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_iptables_legacy -t filter -D OUTPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_legacy -t filter -L OUTPUT --line-numbers)" )" ;;
"11 NFTABLES filter-ip6 INPUT")
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_nft -t filter -L INPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_ip6tables_nft -t filter -D INPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_nft -t filter -L INPUT --line-numbers)" )" ;;
"12 NFTABLES / filter-ip6 / FORWARD") fire_wall="$command_iptables_nft" ; table_wall="filter" ; code_wall="FORWARD"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L FORWARD --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_ip6tables_nft -t filter -D FORWARD $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_nft -t filter -L FORWARD --line-numbers)" )" ;;
"13 NFTABLES / filter-ip6 / OUTPUT")  fire_wall="$command_iptables_nft" ; table_wall="filter" ; code_wall="OUTPUT" 
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_iptables_nft -t filter -L OUTPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_ip6tables_nft -t filter -D OUTPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_nft -t filter -L OUTPUT --line-numbers)" )" ;;
"14 XTABLES / filter-ip6 / INPUT")     fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="INPUT"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_legacy -t filter -L INPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_ip6tables_legacy -t filter -D INPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_legacy -t filter -L INPUT --line-numbers)" )" ;;
"15 XTABLES / filter-ip6 / FORWARD")   fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="FORWARD"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_legacy -t filter -L FORWARD --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_ip6tables_legacy -t filter -D FORWARD $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_legacy -t filter -L FORWARD --line-numbers)" )" ;;
"16 XTABLES / filter-ip6 / OUTPUT")    fire_wall="$command_iptables_legacy" ; table_wall="filter" ; code_wall="OUTPUT"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_legacy -t filter -L OUTPUT --line-numbers)" )"
deleterule="$($favorite_graphicall_dialog $graphic_dimension --entry --title "number rule to delete" --text "remove number rule")"
deletedrule="$($command_ip6tables_legacy -t filter -D OUTPUT $deleterule)"
listrule="$($favorite_graphicall_dialog $graphic_dimension --forms --text "$($command_ip6tables_legacy -t filter -L OUTPUT --line-numbers)" )" ;;
else) exit ;; esac ; exit; fi 
####
####
#### :rutina-final-rule-del-num:
##########    english: iw-scan: search essid wireless   ##########
##########    spanish: iw-scan: buscar essid wireless   ##########
#### :rutina-inicial-iw-scan:
####
####
if   [ "$first_option" == "iw-scan" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show SSID from net wifi ] || ||"
echo 
if   [ "$command_iw" == "$NULL" ]; then  echo "$duo_md [ info ] [ Install iw ]" ; exit ; fi
for a in $(cat /proc/net/dev | $command_grep -i  : | cut -d ":" -f 1); do $command_ifconfig $a up ;
$command_iw $a scan | $command_grep -E -i "on $a|ssid" ; done 
exit; fi
####
####
#### :rutina-final-iw-scan:
##########    english: iw-info: search essid wireless   ##########
##########    spanish: iw-info: buscar essid wireless   ##########
#### :rutina-inicial-iw-info:
####
####
if   [ "$first_option" == "iw-info" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show connected SSID from net wifi ] || ||"
echo 
if   [ "$command_iw" == "$NULL" ]; then  echo "$duo_md [ info ] [ Install iw ]" ; exit ; fi
for a in $(cat /proc/net/dev | $command_grep -i  : | cut -d ":" -f 1); do $command_iw $a info ; done 
exit; fi
####
####
#### :rutina-final-iw-info:
##########    english: wpa-save: connect ssid wireless    ##########
##########    spanish: wpa-save: conecta ssid wireless    ##########
#### :rutina-inicial-wpa-save:
####
####
if   [ "$first_option" == "wpa-save" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ $command_wpa_passphrase ] [ $command_wpa_supplicant ] || ||"
echo 
if [ "$command_wpa_passphrase" == "$NULL" ]; then  echo "$duo_md [ info ] [ Install wpa_passphrase ]" ; exit ; fi
if [ "$command_wpa_supplicant" == "$NULL" ]; then  echo "$duo_md [ info ] [ Install wpa_supplicant ]" ; exit ; fi
if [ "$2" == "$NULL" ]; then  echo "$duo_md [ info ] [ launch: fwiptables-cmd wpa-save SSID PASSWORD ]" ; exit ; else ssid="$2"     ; fi
if [ "$3" == "$NULL" ]; then  echo "$duo_md [ info ] [ launch: fwiptables-cmd wpa-save SSID PASSWORD ]" ; exit ; else password="$3" ; fi
for dispositivo in $(cat /proc/net/dev | $command_grep -i  : | cut -d ":" -f 1); do $command_ifconfig "$dispositivo" up ;
$command_wpa_passphrase "$ssid" "$password" > "$directory_default/$dispositivo-$ssid.wpa"
$command_wpa_supplicant -B -i "$dispositivo" -c "$directory_default/$dispositivo-$ssid.wpa"
echo "launched: $command_wpa_supplicant -B -i $dispositivo -c $directory_default/$dispositivo-$ssid.wpa" ; done
$command_dhcp
exit; fi
####
####
#### :rutina-final-wpa-save:
##########    english: wpa-load: launch one ssid wireless   ##########
##########    spanish: wpa-load: lanza un ssid wireless     ##########
#### :rutina-inicial-wpa-load:
####
####
if   [ "$first_option" == "wpa-load" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Connect to file wpa ] [ For example: $cmd_binary wpa-load wpa_file1 ] || ||"
echo 
if [ "$command_wpa_supplicant" == "$NULL" ]; then  echo "$duo_md [ info ] [ Install wpa_supplicant ]" ; exit ; fi
if [ "$($command_find $directory_default | $command_grep \\.wpa)" == "$NULL" ]; then
echo "$duo_md [ Without old wpa file saved, run: $cmd_binary wpa-save SSID PASSWORD ]"; 
else echo "$duo_md [ wpa old file saved: ]" 
$command_find $directory_default | $command_grep \\.wpa | cut -d "/" -f 6- ; fi
if [ -f "$directory_default/$second_option" ]; then
for dispositivo in $(cat /proc/net/dev | $command_grep -i  : | cut -d ":" -f 1); do 
$command_wpa_supplicant -B -i $dispositivo -c $directory_default/$second_option ; done
else echo "[ Connect with loaded wpa ] [ For example: $cmd_binary wpa-load WPA-FILE ]"; fi
exit; fi
####
####
#### :rutina-final-wpa-load:
##########    english: dhcp-client: search the configuration from ip net   ##########
##########    spanish: dhcp-client: busca la configuracion de red ip       ##########
#### :rutina-inicial-dhcp-client:
####
####
if   [ "$first_option" == "dhcp-client" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Discover ip network ] [ Using "$favorite_dhcp_command" ] || ||"
echo 
if   [ "$favorite_dhcp_command" != "$NULL" ]; then $favorite_dhcp_command ; $command_ifconfig 
else echo "$duo_md [ info ] [ Install dhcpcd or dhclient or dhclient-script ]"; fi
exit; fi
####
####
#### :rutina-final-dhcp-client:
##########    english: ipforward-list: the ipforwading option en english   ##########
##########    spanish: ipforward-list: la opcion de reenvios  en ingles    ##########
#### :rutina-inicial-ipforward-list:
####
####
if   [ "$first_option" == "ipforward-list" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Show ip forwading in kernel ] || ||"
echo "$tab [ Active 1 or deactive 0 for ipforwading with sysctl ]"
$command_sysctl -a | $command_grep -i  forwarding
exit; fi
####
####
#### :rutina-final-ipforward-list:
##########    english: tcpdump: listen at dump from conexiones     ##########
##########    spanish: tcpdump: escucha al volcado de conexiones   ##########
#### :rutina-inicial-tcpdump:
####
####
if   [ "$first_option" == "tcpdump" ]; then echo $give_cover
case $command_tcpdump in "$NULL") echo "$tab [ fail ] [ Install tcpdump command ]" ; exit ;; esac
echo "$tab [ info ] [ launch several seconds tcpdump ]"
echo 
####
####
echo $head_waiting_gui
echo "$tab" "$tab" "$tab"
timeout -s SIGINT -v $server_waiting tcpdump -v
echo "$tab" "$tab" "$tab"
exit; fi
####
####
#### :rutina-final-tcpdump:
##########    english: info-nodes: listen at dump from conexiones arp    ##########
##########    spanish: info-nodes: escucha al volcado de conexiones arp  ##########
#### :rutina-inicial-info-nodes:
####
####
if   [ "$first_option" == "info-nodes" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ Show the list arp-scan in the lan ] || ||"
if [ $command_arp_scan == "$NULL" ]; then echo "$tab [ fail ] [ install arp-scan command ]"; exit ; fi
echo "$duo_md [ info ] [ local net: ip lan .. ]"
$command_ip -4 route | $command_grep -i -v default
echo "$duo_md [ info ] [ local scan: arp lan scan .. ]"
#### $command_arp_scan -l -x & sleep $server_waiting && killall -9 $command_arp_scan
timeout -s SIGINT -v $server_waiting $command_arp_scan -l -x
exit; fi
####
####
#### :rutina-final-info-nodes:
##########   english: preferences-regen:  regen preferences       ##########
##########   spanish: preferences-regen:  regenera preferencias   ##########
#### :rutina-inicial-preferences-regen:
####
####
if [ "$first_option" == "preferences-regen" ] ; then echo $give_cover
echo "$header_ok [ $first_option ] [ $cmd_binary preferences-regen ] [ preferences-regen md ] || ||"
echo "$duo_md [ info ] [ $cmd_binary preferences-regen.. ]"
head -600 $0 | $command_grep -B 2 fwiptables-file-default > $default_preferences
echo "$duo_md [  ok  ] [ Regenerated: $cmd_binary values for default in default_preferences ]"
exit; fi
####
####
#### :rutina-final-preferences-regen:
##########    english: preferences-read: show pregferences   ##########
##########    spanish: preferences-read: show preferences   ##########
#### :rutina-inicial-preferences-read:
####
####
if [ "$first_option" == "preferences-read" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ show the default $cmd_binary ] || ||"
echo 
cat $default_preferences
echo 
echo "$duo_md [ info ] [ Change variables with: $cmd_binary preferences-modify ]"
echo "$duo_md [ info ] [ file: $default_preferences ]"
exit; fi
####
####
#### :rutina-final-preferences-read:
##########    english: preferences-modify: modify preferences   ##########
##########    spanish: preferences-modify: modify preferences   ##########
#### :rutina-inicial-preferences-modify:
####
####
if [ "$first_option" == "preferences-modify" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ modify the default $cmd_binary ] || ||"
echo 
echo 
echo "$duo_md [ info ] [ edit file $default_preferences to change variables ]"
####
####
#### english: make security copy file
#### spanish: hace copia de seguridad
####
####
cp $default_preferences $default_preferences.old
####
####
#### english: edit file
#### spanish: edita el archivo
####
####
$favorite_text_editor "$default_preferences"
####
####
#### english: probe all that is correct or recover
#### spanish: prueba que todo es correcto o lo recupera
####
####
if [ ! -s "$default_preferences" ] ; then cp $default_preferences.old $default_preferences ; fi
####
####
clear; exit; fi
####
####
#### :rutina-final-preferences-modify:
##########    english: names: file list whith rules in iptables format          ##########
##########    spanish: names: lista de archivos con reglas en formato iptables  ##########
#### :rutina-inicial-names:
####
####
if [ "$first_option" == "names" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ List names from firewall saved ] || ||"
echo "$duo_md [ info ] [ list configs files in standard format ]"
echo "$duo_md [ info ] [ folder ] [ $directory_fwrecover ]"
echo 
echo "$duo_md [ info ] [ Listing firewall names ]"
$command_ls -1 $directory_fwrecover | $command_sed s/\-legacy\-ipv6//g | $command_sed s/\-nft\-ipv6//g | \
$command_sed s/\-legacy\-ipv4//g | $command_sed s/\-nft\-ipv4//g | \
$command_sed s/\-arptables//g | $command_sed s/\-ebtables//g | sort -u 
echo
echo "$duo_md [  ok  ] [ Listed firewall names ]"
exit; fi
####
####
#### :rutina-final-names:
##########    english: reset: reset counter rules            ##########
##########    spanish: reset: resetea contadores de reglas   ##########
#### :rutina-inicial-reset:
####
####
if [ "$first_option" == "reset" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Reset the firewall ] || ||"
echo "$duo_md [ info ] [ Reseting the firewall ]"
$cmd_binary stop &> /dev/null
$cmd_binary continue &> /dev/null
echo "$duo_md [  ok  ] [ firewall reseted ]"
exit; fi
####
####
#### :rutina-final-reset:
##########    english: wizard-mini: wizard-mini      ##########
##########    spanish: wizard-mini: mini-asistente   ##########
#### :rutina-inicial-wizard-mini:
####
####
if [ "$first_option" == "wizard-mini" ]; then echo 
archivo="$first_option" ; launch_firewall=yes ; type_firewall="wizard-mini" ; name_firewall="wizard-mini"
cp "$defaultminicfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_text_editor "$directory_temporal/$cmd_config-$archivo"
clear
$favorite_text_dialog --clear --title "Run this wizard" --yesno "Run this wizard" 0 0 && clear \
&& cp "$directory_temporal/$cmd_config-$archivo" "$directory_config/$archivo" && $zero_option custom $archivo || clear
####
####
exit; fi
####
####
#### :rutina-final-wizard-mini:
##########    english: wizard-full: wizard-full     ##########
##########    spanish: wizard-full: asistente       ##########
#### :rutina-inicial-wizard-full:
####
####
if [ "$first_option" == "wizard-full" ]; then $nada
archivo="$first_option" ; launch_firewall=yes ; type_firewall="wizard-full" ; name_firewall="wizard-full"
cp "$defaultfullcfg_eng" "$directory_temporal/$cmd_config-$archivo"
$favorite_text_editor "$directory_temporal/$cmd_config-$archivo"
clear
$favorite_text_dialog --clear --title "Run this wizard" --yesno "Run this wizard" 0 0 && clear \
&& cp "$directory_temporal/$cmd_config-$archivo" "$directory_config/$archivo" && $zero_option custom $archivo || clear 
####
####
exit; fi
####
####
#### :rutina-final-wizard-full:
##########    english: load: load the rules in iptables format      ##########
##########    spanish: load: carga las reglas en formato iptables   ##########
#### :rutina-inicial-load:
####
####
if [ "$first_option" == "load" ]; then 
####
####
#### English: Void in second option
####
####
if [ "second_option" == "$NULL" ]; then
$cmd_binary names ; echo "$tab [ info ] [ usage: $cmd_binary load fw-to-load ] [ See: $cmd_binary names ]" ; exit ; fi
####
####
#### English if do exist second option in load
####
####
if [ -f $directory_fwrecover/$second_option-nft-ipv4 ] || [ -f $directory_fwrecover/$second_option-legacy-ipv4 ] ; then echo $give_cover
echo $give_load
####
####
#### English: show message
####
####
echo "$duo_md [ info ] [ Loading rules ]"
####
####
#### English: Remove all rules
####
####
$cmd_binary eraserules &> /dev/null
####
####
#### English: Load all rules 
####
####
if [ -f "$directory_fwrecover/$second_option-ebtables" ]; then
cat $directory_fwrecover/$second_option-ebtables | $command_ebtables-restore &> /dev/null; fi
####
####
if [ -f "$directory_fwrecover/$second_option-arptables" ]; then
cat $directory_fwrecover/$second_option-arptables | $command_arptables-restore &> /dev/null; fi
####
#### 
cat $directory_fwrecover/$second_option-nft-ipv4 |  $command_iptables_nft-restore       
cat $directory_fwrecover/$second_option-legacy-ipv4 | $command_iptables_legacy-restore  
cat $directory_fwrecover/$second_option-nft-ipv6 | $command_ip6tables_nft-restore       
cat $directory_fwrecover/$second_option-legacy-ipv6 | $command_ip6tables_legacy-restore 
echo "$duo_md [  ok  ] [ firewall loaded ] [ $second_option ]"
####
####
#### english: if no found #### spanish: si no encuentra
####
####
else
$cmd_binary names
echo "$tab [ info ] [ usage: $cmd_binary load fw-to-load ] [ See: $cmd_binary names ]"
fi 
####
####
#### echo 
exit; fi
####
####
#### :rutina-final-load:
##########    english: save: save the rules in iptables format      ##########
##########    spanish: save: guarda las reglas en formato iptables  ##########
#### :rutina-inicial-save:
####
####
if [ "$first_option" == "save" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ save one firewall with one name ] || ||"
case "$second_option" in
"$NULL") echo "$tab [ info ] [ Usage: $cmd_binary save fw-to-save ]" ; exit ;;
*) archivofin="$second_option" ;; 
esac
####
####
echo "$duo_md [ info ] [ saving firewall ] [ $archivofin ]"
if [ "$command_arptables" == "$NULL"  ]; then $nada ; else
$command_arptables-save          &> $directory_fwrecover/$archivofin-arptables; fi
if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
$command_ebtables-save           &> $directory_fwrecover/$archivofin-ebtables; fi
####
####
if [ "$command_iptables_nft"  = "$NULL"  ]; then $nada ; else
$command_iptables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv4 ; fi
if [ "$command_ip6tables_nft"  = "$NULL"  ]; then $nada ; else
$command_ip6tables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv6 ; fi
if [ "$command_iptables_legacy"  = "$NULL"  ]; then $nada ; else
$command_iptables_legacy-save    &> $directory_fwrecover/$archivofin-legacy-ipv4 ; fi
if [ "$command_ip6tables_legacy"  = "$NULL"  ]; then $nada ; else
$command_ip6tables_legacy-save   &> $directory_fwrecover/$archivofin-legacy-ipv6 ; fi
####
####
echo "$duo_md [  ok  ] [ firewall saved ] [ $archivofin ]"
if [ "$command_arptables" == "$NULL"  ]; then $nada ; else
$command_ls -l $directory_fwrecover/$archivofin-arptables; fi
if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
$command_ls -l $directory_fwrecover/$archivofin-ebtables; fi
####
####
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv4
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv6
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv4
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv6
echo "$duo_md [  ok  ] [ firewall listed ] [ $archivofin ]"
exit; fi
####
####
#### :rutina-final-save:
##########    english: show: show the rules from one firewall in iptables format    ##########
##########    spanish: show: muestra las reglas de un firewall en formato iptables  ##########
#### :rutina-inicial-show:
####
####
if [ "$first_option" == "show" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show one firewall saved ] || ||"
echo 
case "$second_option" in
"$NULL")$cmd_binary names; echo "$tab [ info ] [ Use: $cmd_binary show file-to-show ]" ; exit ;;
*) archivofin=$($command_sed 's/\///g' <<< "$second_option") ;;
esac
$command_ls -l $directory_fwrecover/$archivofin-arptables
$command_ls -l $directory_fwrecover/$archivofin-ebtables
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv4
$command_ls -l $directory_fwrecover/$archivofin-nft-ipv6
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv4
$command_ls -l $directory_fwrecover/$archivofin-legacy-ipv6
echo "$duo_md [ ok ] [ FIREWALL LISTED ] [ $archivofin ]"
echo "$cincuenta $archivofin-arptables"
cat $directory_fwrecover/$archivofin-arptables
echo "$cincuenta $archivofin-ebtables"
cat $directory_fwrecover/$archivofin-ebtables
echo "$cincuenta $archivofin-nft-ipv4"
cat $directory_fwrecover/$archivofin-nft-ipv4
echo "$cincuenta $archivofin-legacy-ipv4"
cat $directory_fwrecover/$archivofin-legacy-ipv4
echo "$cincuenta $archivofin-nft-ipv6"
cat $directory_fwrecover/$archivofin-nft-ipv6
echo "$cincuenta archivofin-legacy-ipv6"
cat $directory_fwrecover/$archivofin-legacy-ipv6
echo "$duo_md [ ok ] [ firewall readed ] [ $archivofin ]"
echo 
exit; fi
####
####
#### :rutina-final-show:
##########    english: actual: show actual firewall          ##########
##########    spanish: actual: muestra las reglas actuales   ##########
#### :rutina-inicial-actual:
####
####
if [ "$first_option" == "actual" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show the last firewall saved ] || ||"
echo 
$command_arptables-save          &> $directory_fwrecover/$cmd_config-actual-arptables
$command_ebtables-save           &> $directory_fwrecover/$cmd_config-actual-ebtables   
$command_iptables_nft-save       &> $directory_fwrecover/$cmd_config-actual-nft-ipv4   
$command_iptables_legacy-save    &> $directory_fwrecover/$cmd_config-actual-legacy-ipv4
$command_ip6tables_nft-save      &> $directory_fwrecover/$cmd_config-actual-nft-ipv6   
$command_ip6tables_legacy-save   &> $directory_fwrecover/$cmd_config-actual-legacy-ipv6
echo "$cincuenta arptables $cinco"
cat $directory_fwrecover/$cmd_config-actual-arptables
echo "$cincuenta ebtables $cinco"
cat $directory_fwrecover/$cmd_config-actual-ebtables
echo "$cincuenta nft with ipv4 $cinco"
cat $directory_fwrecover/$cmd_config-actual-nft-ipv4
echo "$cincuenta legacy with ipv4 $cinco"
cat $directory_fwrecover/$cmd_config-actual-legacy-ipv4
echo "$cincuenta nft with ipv6 $cinco"
cat $directory_fwrecover/$cmd_config-actual-nft-ipv6
echo "$cincuenta legacy with ipv6 $cinco"
cat $directory_fwrecover/$cmd_config-actual-legacy-ipv6
echo
echo "$tab  [ ok ] [ readed firewall actual ]"
exit; fi
####
####
#### :rutina-final-actual:
##########    english: stop: stop firewall      ##########
##########    spanish: stop: para el firewall   ##########
#### :rutina-inicial-stop:
####
####
if [ "$first_option" == "stop" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Stop the firewall ] || ||"
####
####
#### english: save actual fw #### spanish: guarda actual fw
####
####
$command_arptables-save &> $directory_fwrecover/$cmd_config-stoped-arptables
$command_ebtables-save &> $directory_fwrecover/$cmd_config-stoped-ebtables             
$command_iptables_nft-save &> $directory_fwrecover/$cmd_config-stoped-nft-ipv4         
$command_iptables_legacy-save &> $directory_fwrecover/$cmd_config-stoped-legacy-ipv4   
$command_ip6tables_nft-save &> $directory_fwrecover/$cmd_config-stoped-nft-ipv6        
$command_ip6tables_legacy-save &> $directory_fwrecover/$cmd_config-stoped-legacy-ipv6  
####
####
#### english: erase the rules #### spanish: borra las reglas
####
####
$cmd_binary eraserules &> /dev/null
echo "$duo_md [ info ] [ stopping firewall ]"
echo "$duo_md [  ok  ] [ firewall stopped  ]"
exit; fi
####
####
#### :rutina-final-stop:
##########    english: continue: continue the firewall      ##########
##########    spanish: continue: continua el cortafuegos    ##########
#### :rutina-inicial-continue:
####
####
if [ "$first_option" == "continue" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ Continue the stoped firewall ] || ||"
####
####
#### english: restore last fw #### spanish: restaura el ultimo fw
####
####
cat $directory_fwrecover/$cmd_config-stoped-arptables | $command_arptables-restore
cat $directory_fwrecover/$cmd_config-stoped-ebtables | $command_ebtables-restore
cat $directory_fwrecover/$cmd_config-stoped-nft-ipv4 | $command_iptables_nft-restore  
cat $directory_fwrecover/$cmd_config-stoped-legacy-ipv4 | $command_iptables_legacy-restore  
cat $directory_fwrecover/$cmd_config-stoped-nft-ipv6 | $command_ip6tables_nft-restore  
cat $directory_fwrecover/$cmd_config-stoped-legacy-ipv6 | $command_ip6tables_legacy-restore  
echo "$duo_md [ info ] [ continue firewall  ]"
echo "$duo_md [  ok  ] [ firewall continued ]"
exit; fi
####
####
#### :rutina-final-continue:
##########    english: ping-ip4: ping icmp with ipv4   ##########
##########    spanish: ping-ip4: ping icmp with ipv4   ##########
#### :rutina-inicial-ping-ip4:
####
####
if   [ "$first_option" == "ping-ip4" ]; then echo $give_cover
echo "$header_ok [ $first_option ]   [ ping ip or host with ipv4 ] || ||"
echo 
case $command_ping in "$NULL") echo "$tab [ fail ] [ Install ping command ]" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
$cmd_binary stop
echo $head_waiting_gui
if [ "$second_option" == "$NULL" ]; then $nada ; else server_ping_ipv4="$second_option"; fi
echo "$duo_md [ ok ] [  ping -4 -c 5 -A $server_ping_ipv4 ]"
timeout -s SIGINT -v $server_waiting $command_ping -4 -c 5 -A $server_ping_ipv4
$cmd_binary continue
echo 
exit; fi
####
####
#### :rutina-final-ping-ip4:
##########    english: ping-ip6: ping icmp with ipv6   ##########
##########    spanish: ping-ip6: ping icmp con ipv6    ##########
#### :rutina-inicial-ping-ip6:
####
####
if   [ "$first_option" == "ping-ip6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ ping one ip or host with ipv6 ] || ||"
echo 
case $command_ping in "$NULL") echo "$tab [ fail ] [ Install ping command ]" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
$cmd_binary stop
echo $head_waiting_gui
if [ "$second_option" == "$NULL" ]; then $nada ; else server_ping_ipv6="$second_option"; fi
echo "$duo_md [ ok ] [ ping -6 -c 5 -A $server_ping_ipv6 ]"
timeout -s SIGINT -v $server_waiting $command_ping -6 -c 5 -A $server_ping_ipv6
$cmd_binary continue
echo 
exit; fi
####
####
#### :rutina-final-ping-ip6:
##########    english: tracetcp-ip4: traceroute with tcp and ipv4   ##########
##########    spanish: tracetcp-ip4: traceroute con tcp y ipv4      ##########
#### :rutina-inicial-tracetcp-ip4:
####
####
if   [ "$first_option" == "tracetcp-ip4" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ trace ip or host with ipv4 ] || ||"
echo 
case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;;  esac
####
####
#### english: launch #### spanish: lanza
####
####
$cmd_binary stop
echo $head_waiting_gui
if [ "$second_option" == "$NULL" ]; then $nada ; else server_traceroute_ipv4="$second_option"; fi
echo "$duo_md [ ok ] [ traceroute -4 -T $server_traceroute_ipv4 ] "
timeout -s SIGINT -v $server_waiting $command_traceroute -4 -T $server_traceroute_ipv4
echo $head_waiting_gui
$cmd_binary continue
echo 
exit; fi
####
####
#### :rutina-final-tracetcp-ip4:
##########    english: tracetcp-ip6: traceroute with tcp and ipv6   ##########
##########    spanish: tracetcp-ip6: traceroute con tcp e ipv6      ##########
#### :rutina-inicial-tracetcp-ip6:
####
####
if   [ "$first_option" == "tracetcp-ip6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ trace one ip or host with ipv6 ] || ||"
echo 
case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
$cmd_binary stop
echo $head_waiting_gui
if [ "$second_option" == "$NULL" ]; then $nada ; else server_traceroute_ipv6="$second_option"; fi
echo "$duo_md [ ok ] [ traceroute -6 -T $server_traceroute_ipv6 ]"
timeout -s SIGINT -v $server_waiting $command_traceroute -6 -T $server_traceroute_ipv6
$cmd_binary continue
echo 
exit; fi
####
####
#### :rutina-final-tracetcp-ip6:
##########    english: traceicmp-ip4: traceroute with tcp and ipv4   ##########
##########    spanish: traceicmp-ip4: traceroute con tcp y ipv4      ##########
#### :rutina-inicial-traceicmp-ip4:
####
####
if   [ "$first_option" == "traceicmp-ip4" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ trace icmp or host with ipv4 ] || ||"
echo 
case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;;  esac
####
####
#### english: launch #### spanish: lanza
####
####
$cmd_binary stop
echo $head_waiting_gui
if [ "$second_option" == "$NULL" ]; then $nada ; else server_traceroute_ipv4="$second_option"; fi
echo "$duo_md [ ok ] [ traceroute -4 -I $server_traceroute_ipv4 ]"
timeout -s SIGINT -v $server_waiting $command_traceroute -4 -I $server_traceroute_ipv4
echo $head_waiting_gui
$cmd_binary continue
echo 
exit; fi
####
####
#### :rutina-final-traceicmp-ip4:
##########    english: traceicmp-ip6: traceroute with tcp and ipv6    ##########
##########    spanish: traceicmp-ip6: traceroute con tcp y ipv6       ##########
#### :rutina-inicial-traceicmp-ip6:
####
####
if   [ "$first_option" == "traceicmp-ip6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ trace icmp or host with ipv4 ] || ||"
echo 
case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;;  esac
####
####
#### english: launch #### spanish: lanza
####
####
$cmd_binary stop
echo $head_waiting_gui
if [ "$second_option" == "$NULL" ]; then $nada ; else server_traceroute_ipv6="$second_option"; fi
echo "$duo_md [ ok ] [ traceroute -6 -I $server_traceroute_ipv6 ]"
timeout -s SIGINT -v $server_waiting $command_traceroute -6 -I $server_traceroute_ipv4
echo $head_waiting_gui
$cmd_binary continue
echo 
exit; fi
####
####
#### :rutina-final-traceicmp-ip6:
##########    english: host: host to resolve ip       ##########
##########    spanish: host: host para resolver ip    ##########
#### :rutina-inicial-host:
####
####
if   [ "$first_option" == "host" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ resolve one ip or host ] || ||"
echo 
case $command_host in "$NULL") echo "$tab [ fail ] [ Install host command ]" ; exit ;; esac
case "$second_option" in
"$NULL") echo "$$tab [ info ] [ Please select a one host to launch host ]"
echo "$tab Selecting host to fast.com for default" ; trazador="fast.com" ;;
*) trazador="$second_option" ;; esac
echo "$duo_md [ ok ] [ host $trazador ]"
$command_host $trazador
echo 
exit; fi
####
####
#### :rutina-final-host:
##########    english: dig: host to resolve ip      ##########
##########    spanish: dig: host para resolver ip   ##########
#### :rutina-inicial-dig:
####
####
if   [ "$first_option" == "dig" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ resolve one ip or host ] || ||"
echo 
case $command_dig in "$NULL") echo "$tab [ fail ] [ Install dig command ]" ; exit ;; esac
case "$second_option" in
"$NULL") echo "$tab [ info ] [ Use: Please select a one host to launch dig ]"
echo "$tab Selecting host to fast.com for default" ; trazador="fast.com" ;;
*) trazador="$second_option" ;; esac
echo "$duo_md [ ok ] [ dig $trazador ]"
$command_dig $trazador | $command_grep ^$trazador
echo 
exit; fi
####
####
#### :rutina-final-dig:
##########    english: resolveip: host to resolve ip and viceversa   ##########
##########    spanish: resolveip: host to resolve ip and viceversa   ##########
#### :rutina-inicial-resolveip:
####
####
if   [ "$first_option" == "resolveip" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ resolve one ip or host ] || ||"
echo 
case $command_resolveip in "$NULL") echo "$tab [ fail ] [ Install resolveip command ]" ; exit ;; esac
case "$second_option" in
"$NULL") echo "$cinco Please select a one host to launch resolveip"
echo "$tab Selecting host to fast.com for default" ; trazador="fast.com" ;;
*) trazador="$second_option" ;; esac
echo "$duo_md [ ok ] [ resolveip $trazador ]"
$command_resolveip $trazador
echo 
exit; fi
####
####
#### :rutina-final-resolveip:
##########    english: geoip: host to resolve and locate       ##########
##########    spanish: geoip: host para resolver y localizar   ##########
#### :rutina-inicial-geoip:
####
####
if   [ "$first_option" == "geoip" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ resolve the location to one ip or host ] || ||"
echo 
case $command_geoiplookup in "$NULL") echo "$tab [ fail ] [ Install geoiplookup command ]" ; exit  ;; esac
case "$second_option" in
"$NULL") echo "$cinco Selecting host geoip to fast.com for default" ; trazador="fast.com" ;;
*) trazador="$second_option" ;; esac
echo "$duo_md [ ok ] [ geoiplookup -i $trazador ]"
$command_geoiplookup -i $trazador
echo 
exit; fi
####
####
#### :rutina-final-geoip:
##########    english: ntpdate-client: update the date and time    ##########
##########    spanish: ntpdate-client: actualiza la fecha y hora   ##########
#### :rutina-inicial-ntpdate-client:
####
####
if   [ "$first_option" == "ntpdate-client" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ update the computer time and date from internet ] || ||"
echo
if [ "$favorite_date_command" == "$NULL" ]; then echo "$tab [ fail ] [ Install one ntp client ]" ; fi
echo "$tab Old date: $($command_date)"
echo "$tab [ Updating the time and the date .. ]"
pool0="0.debian.pool.ntp.org"
pool1="1.debian.pool.ntp.org"
pool2="2.debian.pool.ntp.org"
pool3="3.debian.pool.ntp.org"
$favorite_date_command $pool0 && echo -e "\n With New date: $($command_date)"
exit; fi
####
####
#### :rutina-final-ntpdate-client:
##########    english: nmap-tcp: scan one net per tcp       ##########
##########    spanish: nmap-tcp: rastrea una red por tcp    ##########
#### :rutina-inicial-nmap-tcp:
####
####
if   [ "$first_option" == "nmap-tcp" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ scan with nmap tcp ] || ||"
echo 
case $command_nmap in $NULL) echo install nmap ; exit ;; esac
echo "$tab [ info ] [ nmap $first_option ip/mask ]"
echo "$duo_md [ ok ] [ Stoped firewall while launching nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
$cmd_binary stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
echo "$duo_md [ ok ] [ Doing nmap ]"
$command_nmap -sT $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
$cmd_binary continue
####
####
echo "$duo_md [ ok ] [ Reloaded firewall rules after run nmap ]"
echo 
exit; fi
####
####
#### :rutina-final-nmap-tcp:
##########    english: nmap-syn: scan one net per syn         ##########
##########    spanish: nmap-syn: rastrea una por peticiones   ##########
#### :rutina-inicial-nmap-syn:
####
####
if   [ "$first_option" == "nmap-syn" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ scan with nmap syn ] || ||"
echo 
case $command_nmap in "$NULL") echo "$tab [ info ] [ Install nmap command ]" ; exit ;; esac
echo "$tab [ info ] [ nmap $first_option ip/mask ]"
echo "$duo_md [ ok ] [ Stoped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
$cmd_binary stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
echo "$duo_md [ ok ] [ Doing nmap ]"
$command_nmap -sF $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
$cmd_binary continue
echo "$duo_md [ ok ] [ Reloaded firewall rules after run nmap ]"
echo 
exit; fi
####
####
#### :rutina-final-nmap-syn:
##########    english: nmap-fin: scan one net per conexiones      ##########
##########    spanish: nmap-fin: rastrea una red por conexiones   ##########
#### :rutina-inicial-nmap-fin:
####
####
if   [ "$first_option" == "nmap-fin" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ scan with nmap fin ] || ||"
echo 
case $command_nmap in "$NULL") echo "$tab [ info ] [ Install nmap command ]" ; exit ;; esac
echo "$tab [ info ] [ nmap $first_option ip/mask ]"
echo "$duo_md [ ok ] [ Stoped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
$cmd_binary stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
echo "$duo_md [ ok ] [ Doing nmap ]"
$command_nmap -sF $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
$cmd_binary continue
####
####
echo "$duo_md [ ok ] [ Reloaded firewall rules after run nmap ]"
echo 
exit; fi
####
####
#### :rutina-final-nmap-fin:
##########    english: nmap-udp: scan one net per udp       ##########
##########    spanish: nmap-udp: rastrea una red por udp    ##########
#### :rutina-inicial-nmap-udp:
####
####
if   [ "$first_option" == "nmap-udp" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ scan with nmap udp ] || ||"
echo 
case $command_nmap in "$NULL") echo "$tab [ fail ] [ Install nmap command ]" ; exit ;; esac
echo "$cinco [ info ] [ nmap $first_option ip/mask ]"
echo "$cinco [ ok ] [ Stoped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
$cmd_binary stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
echo "$duo_md [ ok ] [ Doing nmap ]"
$command_nmap -sU $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
$cmd_binary continue
####
####
echo "$duo_md [ ok ] [ Reloaded firewall rules after run nmap ]"
echo 
exit; fi
####
####
#### :rutina-final-nmap-udp:
##########    english: nmap-ping: scan one net per ping     ##########
##########    spanish: nmap-ping: rastrea una red por ping  ##########
#### :rutina-inicial-nmap-ping:
####
####
if   [ "$first_option" == "nmap-ping" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ scan with nmap ping ] || ||"
echo 
case $command_nmap in "$NULL") echo "$tab [ fail ] [ Install nmap command ]" ; exit ;; esac
echo "$tab [ info ] [ nmap $first_option ip/mask ]"
echo "$duo_md [ ok ] [ Stopped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
$cmd_binary stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
echo "$duo_md [ ok ] [ Doing nmap ]"
$command_nmap -sn $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
$cmd_binary continue
echo "$duo_md [ ok ] [ Reloaded firewall rules after run nmap ]"
echo 
exit; fi
####
####
#### :rutina-final-nmap-ping:
##########    english: free-ram: give one freedom to ram innecesary     ##########
##########    spanish: free-ram: limpia la memoria ram                  ##########
#### :rutina-inicial-free-ram:
####
####
if   [ "$first_option" == "free-ram" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ freedom from innecesary ram ] || ||"
case $command_tee in "$NULL") echo "$tab [ fail ] [ Install tee command ]"; exit ;; esac
echo "$duo_md [ info ] Actual Memory"
free -hw 
echo 3 | $command_tee /proc/sys/vm/drop_caches &> /dev/null
sync
echo "$duo_md [ info ] Now with New Memory ram freedom .. Actual memory now .."
free -hw
exit; fi
####
####
#### :rutina-final-free-ram:
##########    english: speed-disk: Show the speed of disc             ##########
##########    spanish: speed-disk: Muestra la velocidad de el disco   ##########
#### :rutina-inicial-speed-disk:
####
####
if   [ "$first_option" == "speed-disk" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ test the disc speed ] || ||"
case $command_dd in "$NULL") echo "$tab [ fail ] [ Install dd command ]"; exit ;; esac
echo "$tab Testing speed with the temporal file $directory_temporal/borrame.img.img about 100Mb"
####
####
$command_dd if=/dev/zero of=$directory_temporal/borrame.img.img status=progress bs=1M count=100
rm $directory_temporal/borrame.img.img &> /dev/null
exit; fi
####
####
#### :rutina-final-speed-disk:
##########    english: speed-ram: Show the speed of ram             ##########
##########    spanish: speed-ram: Muestra la velocidad de la ram    ##########
#### :rutina-inicial-speed-ram:
####
####
if   [ "$first_option" == "speed-ram" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ test the ram speed ] || ||"
case $command_dd in "$NULL") echo "$tab [ fail ] [ Install dd command ]"; exit ;; esac
case "$(mount | $command_grep -i  "/tmp type tmpfs" | wc -l)" 
in "1")  ;; *) echo "$cinco Mount /tmp with tmpfs so: mount -t tmpfs tmpfs /tmp"; exit ;; esac
echo "$duo_md [ Test speed with the temporal file /tmp/borrame.img.img about 100Mb ]"
####
####
$command_dd if=/dev/zero of=/tmp/borrame.img.img status=progress bs=1M count=100
rm /tmp/borrame.img.img &> /dev/null
exit; fi
####
####
#### :rutina-final-speed-ram:
##########    english: speed-glx: show frammes por seconds with mesa graphicall            ##########
##########    spanish: speed-glx: muestra los fotogramas por segundo con graphicos mesa    ##########
#### :rutina-inicial-speed-glx:
####
####
if   [ "$first_option" == "speed-glx" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ test gl mesa3D speed ] [ for default max $server_waiting seconds ] || ||"
case $command_glxgears in "$NULL") echo "$tab [ fail ] [ Install mesa utils ]"; exit ;; esac
vblank_mode=0  timeout -s SIGINT -v $server_waiting $command_glxgears
echo 
exit; fi
####
####
#### :rutina-final-speed-glx:
##########    english: speed-pi: calculate time with number pi           ##########
##########    spanish: speed-pi: calcula el tiempo con numero pi         ##########
#### :rutina-inicial-speed-pi:
####
####
if   [ "$first_option" == "speed-pi" ]; then  echo $give_cover
digitos=2000
echo "$header_ok [ $first_option ]  [ test pi speed ] [ Calculate pi number with $digitos digits ] || ||"
case $command_bc in "$NULL") echo "$tab [ fail ] [ Install bc ]"; exit ;; esac
time bc -l <<< "scale=$digitos;4*a(1)"
echo  " [  ok  ] The time of proccessor to calculate pi with $digitos digits"
exit; fi
####
####
#### :rutina-final-speed-pi:
##########    english: speed-cpu: show frammes por seconds with mesa graphicall             ##########
##########    spanish: speed-cpu: muestra los fotogramas por segundo con graphicos mesa     ##########
#### :rutina-inicial-speed-cpu:
####
####
if   [ "$first_option" == "speed-cpu" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ test cpu processor ] [ calcule pi with 2000 digits ] || ||"
case $command_bc in "$NULL") echo "$tab [ fail ] [ Install bc command ]"; exit ;; esac
echo "$duo_md [ info ] [ Calculate pi with 2000 digits in only one cpu ]"
echo "$duo_md [ info ] [ For example with 2ghz/cpu is 5 seconds aprox. ] "
time echo 'scale=2000; a(1)*4' | $command_bc -l | tail -0 
exit; fi
####
####
#### :rutina-final-speed-cpu:
##########    english: radio-mp3: url from one radio mp3     ##########
##########    spanish: radio-mp3: url de una radio en mp3    ##########
#### :rutina-inicial-radio-mp3:
####
####
if   [ "$first_option" == "radio-mp3" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Listen radio online ]"
echo "$duo_md [ info ] [ for choose default radio see: $cmd_binary preferences-read ] [ for only protocol http ] || ||"
echo "$duo_md [ info ] [ Usually it do not working likes root, probe as user ]"
####
####
case $favorite_radio_command in "$NULL") echo "$tab [ fail ] [ Install a console mp3 player ]"; exit ;; esac
####
####
if [ "$second_option" == "$NULL" ]; then $nada
#### emisora="$radio_mp3"
echo "$duo_md [ info ] [ launch $cmd_binary radio-rockfm ]       [ for radio rockfm    ]"
echo "$duo_md [ info ] [ launch $cmd_binary radio-kissfm ]       [ for radio kissfm    ]"
echo "$duo_md [ info ] [ launch $cmd_binary radio-cadena100 ]    [ for radio cadena100 ]"
echo "$duo_md [ info ] [ launch $cmd_binary radio-mp3 link-mp3 ] [ to open one link    ]"
exit
else emisora="$second_option"; fi
####
####
echo "$duo_md [  ok  ] [ $favorite_radio_command $emisora ]"
echo 
echo 
sudo -u $(logname) $favorite_radio_command $emisora
exit; fi
####
####
#### :rutina-final-radio-mp3:
##########    english: radio-cadena100: url from one radio mp3      ##########
##########    spanish: radio-cadena100: url de una radio en mp3     ##########
#### :rutina-inicial-radio-cadena100:
####
####
if   [ "$first_option" == "radio-cadena100" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Listen radio online ]"
echo "$duo_md [ info ] [ for choose default radio see: preferences-read ] [ for only protocol http ] || ||"
echo "$duo_md [ info ] [ Usually it do not working likes root, probe as user ]"
####
####
case $favorite_radio_command in "$NULL") echo "$tab [ fail ] [ Install a console mp3 player ]"; exit ;; esac
####
####
if [ "$second_option" == "$NULL" ]; then $nada
emisora="$radio_cadena100"
else emisora="$second_option"; fi
####
####
echo "$duo_md [  ok  ] [ $favorite_radio_command $emisora ]"
echo 
echo 
sudo -u $(logname) $favorite_radio_command $emisora
exit; fi
####
####
#### :rutina-final-radio-cadena100:
##########    english: radio-rockfm: url from one radio mp3    ##########
##########    spanish: radio-rockfm: url de una radio en mp3   ##########
#### :rutina-inicial-radio-rockfm:
####
####
if   [ "$first_option" == "radio-rockfm" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Listen radio online ]"
echo "$duo_md [ info ] [ for choose default radio see: preferences-read ] [ for only protocol http ] || ||"
echo "$duo_md [ info ] [ Usually it do not working likes root, probe as user ]"
####
####
case $favorite_radio_command in "$NULL") echo "$tab [ fail ] [ Install a console mp3 player ]"; exit ;; esac
####
####
if [ "$second_option" == "$NULL" ]; then $nada
emisora="$radio_rockfm"
else emisora="$second_option"; fi
####
####
echo "$duo_md [  ok  ] [ $favorite_radio_command $emisora ]"
echo 
echo 
sudo -u $(logname) $favorite_radio_command $emisora
exit; fi
####
####
#### :rutina-final-radio-rockfm:
##########    english: radio-kissfm: url from one radio mp3    ##########
##########    spanish: radio-kissfm: url de una radio en mp3   ##########
#### :rutina-inicial-radio-kissfm:
####
####
if   [ "$first_option" == "radio-kissfm" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ Listen radio online ]"
echo "$duo_md [ info ] [ for choose default radio see: preferences-read ] [ for only protocol http ] || ||"
echo "$duo_md [ info ] [ Usually it do not working likes root, probe as user ]"
####
####
case $favorite_radio_command in "$NULL") echo "$tab [ fail ] [ Install a console mp3 player ]"; exit ;; esac
####
####
if [ "$second_option" == "$NULL" ]; then $nada
emisora="$radio_kissfm"
else emisora="$second_option"; fi
####
####
echo "$duo_md [  ok  ] [ $favorite_radio_command $emisora ]"
echo 
echo 
sudo -u $(logname) $favorite_radio_command $emisora
exit; fi
####
####
#### :rutina-final-radio-kissfm:
##########    english: el tiempo: muestra el tiempo con wttr.in   ##########
##########    spanish: weather: show the weather with wttr.in     ##########
#### :rutina-inicial-weather:
if   [ "$first_option" == "weather" ]; then 
case $favorite_text_browser in "$NULL") echo "$tab [ fail ] [ Install a text browser ]"; exit ;; esac
$favorite_text_browser -dump wttr.in
exit; fi
#### :rutina-final-weather:
##########    english: game-rgb: convert colour rgb to hex   ##########
##########    spanish: game-rgb: convierte color rgb a hex   ##########
#### :rutina-inicial-game-rgb:
####
####
if   [ "$first_option" == "game-rgb" ]; then  $nada
if [ "$second_option" == "$NULL" ]; then
echo " $cinco [ TYPE one colour in RGB with 9 digits ] [ Example: $cmd_binary game-rgb 255000255 ]"
else
rgb="$(echo "$second_option" | cut -c -9)"
##
number_a="$(echo $rgb | cut -c 1-3)"
number_b="$(echo $rgb | cut -c 4-6)"
number_c="$(echo $rgb | cut -c 7-9)"
##
hexa_red="$(echo   " ibase=A   ; obase=16 ; $number_a" | bc)"
hexa_green="$(echo " ibase=A   ; obase=16 ; $number_b" | bc)"
hexa_blue="$(echo  " ibase=A   ; obase=16 ; $number_c" | bc)"
##
binary_red="$(echo   " ibase=A   ; obase=2  ; $number_a" | bc)"
binary_green="$(echo " ibase=A   ; obase=2  ; $number_b" | bc)"
binary_blue="$(echo  " ibase=A   ; obase=2  ; $number_c" | bc)"
##
echo "$duo_md [ Colour RGB ________:  $number_a $number_b $number_c ]"
echo "$duo_md [ Getting colours ] [ binary and hexadecimal ]"
echo " Number binary________:  $binary_red $binary_green $binary_blue"
echo " Colour HEXADECIMAL___:  $hexa_red $hexa_green $hexa_blue"
echo "$duo_md [ ok ] [ Colour converted ]"
fi; exit ; fi
####
####
#### :rutina-final-game-rgb:
##########    english: game-hex: convert colour hex to rgb  ##########
##########    spanish: game-hex: convierte color hex a rgb  ##########
#### :rutina-inicial-game-hex:
####
####
if   [ "$first_option" == "game-hex" ]; then  $nada
if [ "$second_option" == "$NULL" ]; then
echo " $cinco [ TYPE one colour in HEXADECIMAL with 6 digits ] [ example: $cmd_binary game-hex FF00FF ]"
else
hexadecimal="$(echo $second_option | tr '[:lower:]' '[:upper:]'| cut -c 1-6)"
##
hexa_a="$(echo $hexadecimal | cut -c 1-2)"
hexa_b="$(echo $hexadecimal | cut -c 3-4)"
hexa_c="$(echo $hexadecimal | cut -c 5-6)"
##
binary_red="$(echo   " ibase=16; obase=2 ; $hexa_a" | bc)"
binary_green="$(echo " ibase=16; obase=2 ; $hexa_b" | bc)"
binary_blue="$(echo  " ibase=16; obase=2 ; $hexa_c" | bc)"
##
rgb_red="$(echo   " ibase=16; obase=A ; $hexa_a" | bc)"
rgb_green="$(echo " ibase=16; obase=A ; $hexa_b" | bc)"
rgb_blue="$(echo  " ibase=16; obase=A ; $hexa_c" | bc)"
##
echo "$duo_md [ Colour HEXADECIMAL_:  $hexa_a  $hexa_b  $hexa_c ]"
echo "$duo_md [ Getting colours ] [ binary and RGB ]"
echo " Number binary________:  $binary_red  $binary_green  $binary_blue "
echo " Colour RGB __________:  $rgb_red  $rgb_green  $rgb_blue "
echo "$duo_md [ ok ] [ Colour converted ]"
fi ; exit; fi
####
####
#### :rutina-final-game-hex:
##########    english: game-domain: discover one domain with game-domain   ##########
##########    spanish: game-domain: descubre un dominio con game-domain    ##########
#### :rutina-inicial-game-domain:
####
####
if   [ "$first_option" == "game-domain" ] ; then
file_domain="$directory_default/dictionary-domain"
if [ -s $file_domain ]; then $nada 
else echo "$duo_md [ info ] [ Downloading txt file to play with $favorite_text_browser ]"
$favorite_text_browser -source $url_web_domain &> $file_domain ; fi
numero_maximo="$(cat $file_domain | wc -l)"
numero_aleatorio_one="$(($RANDOM%"$numero_maximo"))"
domain_one="$(head -"$numero_aleatorio_one" $file_domain | tail -1 | cut -d " " -f 2)"
type_domain_one="$(head -"$numero_aleatorio_one" $file_domain | tail -1 | cut -d " " -f 1)"
####
####
if [ "$second_option" == "-cli" ] || [ "$second_option" == "cli" ] ; then
case "$favorite_text_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install dialog ]"; exit ;; esac
$favorite_text_dialog  --stdout --title "Play game domain ole" \
--msgbox " Is this a country domain or a generic domain ? :  $domain_one"  0 0
$favorite_text_dialog  --stdout --title "Play game domain ole" \
--msgbox " Really $domain_one is a $type_domain_one domain."  0 0
clear ; exit ; fi
####
####
if [ "$second_option" == "-gui" ] || [ "$second_option" == "gui" ] ; then
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity ]"; exit ;; esac
$(zenity $graphic_dimension --info --title="gui game-domain" \
--text=" Is this a country domain or a generic domain ? :  $domain_one")
$(zenity $graphic_dimension --info --title="gui game-domain" \
--text=" Really $domain_one is a $type_domain_one domain.")
exit; fi
####
####
echo
echo " # Is this a country domain  or a generic domain ? :  $domain_one"
echo " # type any key to continue"
read
echo " Really $domain_one is a $type_domain_one domain."
exit
####
####
exit; fi
####
####
#### :rutina-final-game-domain:
##########    english: game-word: play game game-word        ##########
##########    spanish: game-word: juega al juego game-word   ##########
#### :rutina-inicial-game-word:
####
####
if   [ "$first_option" == "game-word" ]; then  $nada
####
####
#### variables shared
####
####
language_english="$directory_default/dictionary-english"
language_spanish="$directory_default/dictionary-spanish"
language_number="0"
caracteres="" ; cinco_caracteres="" ; intento="0" ; intento_maximo="12"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
texten_1=" ##### [ ok ] Awasome, the random word is : "
texten_2=" ##### Clon of wordle: discover a radom word of five letters "
texten_3=" Letters in its site  " 
texten_4=" Letters in the word  "
texten_5=" ##### Type a word with five letters_  #  "
texten_5=" ##### Type actual Word         :  "
texten_6=" ##### Actual tried numbers     :  "
texten_7=" ##### The last answered      is:  "
texten_8=" ##### The correct answerd    is:  "
textes_1=" ##### [ ok ] Lo has conseguido, la palabra aleatoria es "
textes_2=" ##### Clon de wordle: Acierta con una palabra aleatoria de cinco caracteres. "
textes_3=" Letras en su sitio   " 
textes_4=" Letras en la palabra "
textes_5=" ##### Escribe una palabra de cinco caracteres_  #  "
textes_5=" ##### Introduce palabra actual        :  "
textes_6=" ##### Numero de intentos actuales     :  "
textes_7=" ##### La ultima respuesta           es:  "
textes_8=" ##### La respuesta correcta         es:  "
####
####
#### english: game-word in cli
#### spanish: game-word en cli
####
####
if [ "$second_option" == "-cli" ] ; then
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
menuprincipal="$($favorite_text_dialog --stdout --clear --title "  Play game word ole" --menu "Select:" 0 0 0\
  01 "    Play word ole in english" \
  02 "    Play word ole in spanish" \
  03 "    quit word ole" \
)"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
case "$menuprincipal" in
  01) clear ; language_number="1" ; clear ;;
  02) clear ; language_number="2" ; clear ;;
  03) clear ; language_number="q" ; clear ;;
esac
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
#### Dicctionary english if download
if [ "$language_number" == "1" ]; then dictionary="$language_english"
if [ -s "$language_english" ]; then echo; else echo "$duo_md [ Wait ] [ Waiting to downloading the english dictionary for first time ] "
#### links -source https://github.com/dolph/dictionary/blob/master/popular.txt > $directory_temporal/directory_english
$favorite_text_browser -source https://github.com/dolph/dictionary/blob/master/popular.txt > $directory_temporal/dictionary-english
$command_grep ^[a-z][a-z][a-z][a-z][a-z]$ $directory_temporal/directory_english \
 | $command_sed  'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > $directory_default/dictionary-english
echo "$duo_md [ ok ] [ english dictionary downloaded ]" ; fi ; fi
#### Dicctionary spanish if dowload
if [ "$language_number" == "2" ]; then dictionary="$language_spanish"
if [ -s "$language_spanish" ]; then echo; else echo "$duo_md [ Espera ] [ Esperando para descargar el diccionario español por primera vez ] "
$ favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > $directory_temporal/dictionary-spanish
$command_grep ^[a-z][a-z][a-z][a-z][a-z]$ $directory_temporal/directory_english \
 | $command_sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > $directory_default/dicionary-spanish
echo "$duo_md [ ok ] [ diccionario español descargado ]" ; fi ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### word of game
caracteres="" ; cinco_caracteres="" ; intento="0" ; intento_maximo="12"
numero_palabra="$(wc -l $dictionary | cut -d " "  -f 1)"
numero_aleatorio="$(($RANDOM%$numero_palabra))"
palabra_aleatoria="$(tail -$numero_aleatorio $dictionary | head -1)"
aleatoria_1="$(echo $palabra_aleatoria | cut -c 1)"
aleatoria_2="$(echo $palabra_aleatoria | cut -c 2)"
aleatoria_3="$(echo $palabra_aleatoria | cut -c 3)"
aleatoria_4="$(echo $palabra_aleatoria | cut -c 4)"
aleatoria_5="$(echo $palabra_aleatoria | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_caracteres" == "$palabra_aleatoria" ]; then clear ; 
acierto="$($favorite_text_dialog  --stdout --title "  Play game word ole" --msgbox "$text_1 $palabra_aleatoria"  0 0)" ; clear ; exit ; fi
if [ "$intento" -gt "$intento_maximo" ]; then clear
echo "$text_1" "  " " || $palabra_aleatoria ||" ; clear ; exit ; fi
bucle="$($favorite_text_dialog  --stdout --title "Play game word ole" --inputbox " $text_6 $intento /// $intento_maximo \n \
$text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||"  0 0)"
intento="$(($intento+1))"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
caracteres="$bucle"
cinco_caracteres="$(echo $caracteres | cut -c 1-5)"
caracter_1="$(echo $caracteres | cut -c 1)"
caracter_2="$(echo $caracteres | cut -c 2)"
caracter_3="$(echo $caracteres | cut -c 3)"
caracter_4="$(echo $caracteres | cut -c 4)"
caracter_5="$(echo $caracteres | cut -c 5)"
echo "$Text_5" "$cinco_caracteres"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_1" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_1" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_1" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_1" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_2" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_2" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_2" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_2" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_2" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_3" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_3" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_3" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_3" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_3" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_4" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_4" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_4" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_4" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_4" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_5" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_5" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_5" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_5" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_5" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_1" == "$caracter_1" ]; then seat_1="$caracter_1"; fi
if [ "$aleatoria_2" == "$caracter_2" ]; then seat_2="$caracter_2"; fi
if [ "$aleatoria_3" == "$caracter_3" ]; then seat_3="$caracter_3"; fi
if [ "$aleatoria_4" == "$caracter_4" ]; then seat_4="$caracter_4"; fi
if [ "$aleatoria_5" == "$caracter_5" ]; then seat_5="$caracter_5"; fi
done
#### when fail the answer
clear
acierto="$($favorite_text_dialog  --stdout --title "Play game word ole" --msgbox "$text_8 $palabra_aleatoria"  0 0)"
clear; exit; fi
####
####
#### english: game-word in gui
#### spanish: game-word en gui
####
####
if [ "$second_option" == "-gui" ] ; then
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]"; exit ;; esac
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list english spanish quit )"
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
"english") language_number="1" ;;
"spanish") language_number="2" ;;
"quit")    language_number="q" ;;
esac
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
#### Dicctionary english if download
if [ "$language_number" == "1" ]; then dictionary="$language_english"
if [ -s "$language_english" ]; then echo; else echo "$duo_md [ Wait ] [ Waiting to downloading the english dictionary for first time ] "
#### links -source https://github.com/dolph/dictionary/blob/master/popular.txt > $directory_temporal/directory_english
$favorite_text_browser -source https://github.com/dolph/dictionary/blob/master/popular.txt > $directory_temporal/dictionary-english
$command_grep ^[a-z][a-z][a-z][a-z][a-z]$ $directory_temporal/directory_english \
 | $command_sed  'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > $directory_default/dictionary-english
echo "$duo_md [ ok ] [ english dictionary downloaded ]" ; fi ; fi
#### Dicctionary spanish if dowload
if [ "$language_number" == "2" ]; then dictionary="$language_spanish"
if [ -s "$language_spanish" ]; then echo; else echo "$duo_md [ Espera ] [ Esperando para descargar el diccionario español por primera vez ] "
$ favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > $directory_temporal/dictionary-spanish
$command_grep ^[a-z][a-z][a-z][a-z][a-z]$ $directory_temporal/directory_english \
 | $command_sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > $directory_default/dicionary-spanish
echo "$duo_md [ ok ] [ diccionario español descargado ]" ; fi ; fi
if [ "$language_number" == "1" ] || [ "$language_number" == "2" ]; then echo -n ; else exit ; fi
##### language of interface english
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### word of game
caracteres="" ; cinco_caracteres="" ; intento="0" ; intento_maximo="12"
numero_palabra="$(wc -l $dictionary | cut -d " "  -f 1)"
numero_aleatorio="$(($RANDOM%$numero_palabra))"
palabra_aleatoria="$(tail -$numero_aleatorio $dictionary | head -1)"
aleatoria_1="$(echo $palabra_aleatoria | cut -c 1)"
aleatoria_2="$(echo $palabra_aleatoria | cut -c 2)"
aleatoria_3="$(echo $palabra_aleatoria | cut -c 3)"
aleatoria_4="$(echo $palabra_aleatoria | cut -c 4)"
aleatoria_5="$(echo $palabra_aleatoria | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
####
if [ "$cinco_caracteres" == "$palabra_aleatoria" ]; then clear 
acierto="$(zenity $graphic_dimension --info --title="gui game-word" --text="$text_1 $palabra_aleatoria")"
clear; exit; fi
####
if [ "$intento" == "$intento_maximo" ]; then clear
fallo="$(zenity $graphic_dimension --info --title="gui game-word" --text="$text_8 $palabra_aleatoria")"
clear ; exit ; fi
####
bucle="$(zenity $graphic_dimension --entry --title "Play game word ole" \
--text " $text_6 $intento /// $intento_maximo \n  $text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||")"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
####
intento="$(($intento+1))"
caracteres="$bucle"
cinco_caracteres="$(echo $caracteres | cut -c 1-5)"
caracter_1="$(echo $caracteres | cut -c 1)"
caracter_2="$(echo $caracteres | cut -c 2)"
caracter_3="$(echo $caracteres | cut -c 3)"
caracter_4="$(echo $caracteres | cut -c 4)"
caracter_5="$(echo $caracteres | cut -c 5)"
if [ "$aleatoria_1" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_1" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_1" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_1" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_1" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_2" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_2" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_2" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_2" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_2" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_3" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_3" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_3" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_3" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_3" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_4" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_4" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_4" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_4" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_4" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_5" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_5" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_5" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_5" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_5" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_1" == "$caracter_1" ]; then seat_1="$caracter_1"; fi
if [ "$aleatoria_2" == "$caracter_2" ]; then seat_2="$caracter_2"; fi
if [ "$aleatoria_3" == "$caracter_3" ]; then seat_3="$caracter_3"; fi
if [ "$aleatoria_4" == "$caracter_4" ]; then seat_4="$caracter_4"; fi
if [ "$aleatoria_5" == "$caracter_5" ]; then seat_5="$caracter_5"; fi
done ; clear ; exit ; fi
####
####
#### english:  game-word in text
#### spanish:  game-word en txt
####
####
if [ "$second_option" == "-txt" ] || [ "$second_option" == "txt" ] || [ "$second_option" == "$NULL" ]; then $nada
echo 
echo "$header_ok [ $first_option ]  [ play game clone game-word ]"
echo ""
##### INICIO ####
#### Choose language english or spanish
until [ "$language_number" == "1" ] || [ "$language_number" == "2" ] || [ "$language_number" == "q" ] ; do echo
echo "$tab $tab ##### Play in your language: Choose 1 for english or 2 for spanish or q for quit"
read -p "$tab $tab ##### Choose one number: # 1 or 2 or q #  " language_number
if [ ! -n "$language_number" ]; then language_number="5"; fi
echo; done
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
#### Dicctionary english if download
if [ "$language_number" == "1" ]; then dictionary="$language_english"
if [ -s "$language_english" ]; then echo; else echo "$duo_md [ Wait ] [ Waiting to downloading the english dictionary for first time ] "
#### links -source https://github.com/dolph/dictionary/blob/master/popular.txt > $directory_temporal/directory_english
$favorite_text_browser -source https://github.com/dolph/dictionary/blob/master/popular.txt > $directory_temporal/dictionary-english
$command_grep ^[a-z][a-z][a-z][a-z][a-z]$ $directory_temporal/directory_english \
 | $command_sed  'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > $directory_default/dictionary-english
echo "$duo_md [ ok ] [ english dictionary downloaded ]" ; fi ; fi
#### Dicctionary spanish if dowload
if [ "$language_number" == "2" ]; then dictionary="$language_spanish"
if [ -s "$language_spanish" ]; then echo; else echo "$duo_md [ Espera ] [ Esperando para descargar el diccionario español por primera vez ] "
$ favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > $directory_temporal/dictionary-spanish
$command_grep ^[a-z][a-z][a-z][a-z][a-z]$ $directory_temporal/directory_english \
 | $command_sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > $directory_default/dicionary-spanish
echo "$duo_md [ ok ] [ diccionario español descargado ]" ; fi ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### word of game
numero_palabra="$(wc -l $dictionary | cut -d " "  -f 1)"
numero_aleatorio="$(($RANDOM%$numero_palabra))"
palabra_aleatoria="$(tail -$numero_aleatorio $dictionary | head -1)"
aleatoria_1="$(echo $palabra_aleatoria | cut -c 1)"
aleatoria_2="$(echo $palabra_aleatoria | cut -c 2)"
aleatoria_3="$(echo $palabra_aleatoria | cut -c 3)"
aleatoria_4="$(echo $palabra_aleatoria | cut -c 4)"
aleatoria_5="$(echo $palabra_aleatoria | cut -c 5)"
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_caracteres" == "$palabra_aleatoria" ]; then  echo "$text_1 $palabra_aleatoria" ; exit; fi
if [ "$intento" -gt "$intento_maximo" ]; then
echo "$text_1" "  " " || $palabra_aleatoria ||" ; exit ; fi
echo "$text_2"
echo "$text_3" " || $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 ||"
echo "$text_4" " || $contenido ||"
read -p "$text_5  #  " caracteres
intento="$(($intento+1))"
cinco_caracteres="$(echo $caracteres | cut -c 1-5)"
caracter_1="$(echo $caracteres | cut -c 1)"
caracter_2="$(echo $caracteres | cut -c 2)"
caracter_3="$(echo $caracteres | cut -c 3)"
caracter_4="$(echo $caracteres | cut -c 4)"
caracter_5="$(echo $caracteres | cut -c 5)"
echo "$Text_5" "$cinco_caracteres"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_1" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_1" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_1" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_1" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_2" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_2" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_2" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_2" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_2" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_3" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_3" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_3" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_3" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_3" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_4" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_4" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_4" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_4" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_4" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_5" == "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_5" == "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_5" == "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_5" == "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_5" == "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_1" == "$caracter_1" ]; then seat_1="$caracter_1"; fi
if [ "$aleatoria_2" == "$caracter_2" ]; then seat_2="$caracter_2"; fi
if [ "$aleatoria_3" == "$caracter_3" ]; then seat_3="$caracter_3"; fi
if [ "$aleatoria_4" == "$caracter_4" ]; then seat_4="$caracter_4"; fi
if [ "$aleatoria_5" == "$caracter_5" ]; then seat_5="$caracter_5"; fi
done
#### when fail the answer
echo
echo "$text_7" "$cinco_caracteres"
echo "$text_8" "$palabra_aleatoria"
####
####
echo ""
exit; fi
####
####
fi
####
####
#### :rutina-final-game-word:
##########    english: game-number: play game game-number         ##########
##########    spanish: game-number: juega al juego game-number    ##########
#### :rutina-inicial-game-number:
####
####
if   [ "$first_option" == "game-number" ]; then  
####
####
#### variables shared
####
####
language_number="0"
digitos="" ; cinco_digitos="" ; caracteres="" ; cinco_caracteres=""
intento="0" ; intento_maximo="12"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
texten_1=" ##### [ ok ] Awasome, the random number is : "
texten_2=" ##### Clon of numberle: discover a radom number of five digits "
texten_3=" Digits in its site     " 
texten_4=" Digits in the number   "
texten_5=" ##### Type a number with five digits_  #  "
texten_5=" ##### Type actual number          :  "
texten_6=" ##### Actual tried numbers        :  "
texten_7=" ##### The last answered         is:  "
texten_8=" ##### The correct answerd       is:  "
textes_1=" ##### [ ok ] Lo has conseguido, el numero aleatorio es "
textes_2=" ##### Clon de numberle: Acierta con un numero aleatorio de cinco digitos. "
textes_3=" Digitos en su sitio   " 
textes_4=" Digitos en el numero  "
textes_5=" ##### Escribe un numero de cinco digitos_  #  "
textes_5=" ##### Introduce el numero actual        :  "
textes_6=" ##### Numero de intentos actuales       :  "
textes_7=" ##### La ultima respuesta             es:  "
textes_8=" ##### La respuesta correcta           es:  "
####
####
#### english: game-number in cli
#### spanish: game-number en cli
####
####
if [ "$second_option" == "-cli" ] || [ "$second_option" == "cli" ]; then $nada
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
menuprincipal="$($favorite_text_dialog  --stdout --clear --title "  Play game number ole" --menu "Select:" 0 0 0\
  01 "    Play number ole in english" \
  02 "    Play number ole in spanish" \
  03 "    quit number ole" \
)"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
case "$menuprincipal" in
  01) clear ; language_number="1" ; clear ;;
  02) clear ; language_number="2" ; clear ;;
  03) clear ; language_number="q" ; clear ;;
esac
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### number of game
numero_aleatorio="$(($(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))))"
aleatoria_1="$(echo $numero_aleatorio | cut -c 1)"
aleatoria_2="$(echo $numero_aleatorio | cut -c 2)"
aleatoria_3="$(echo $numero_aleatorio | cut -c 3)"
aleatoria_4="$(echo $numero_aleatorio | cut -c 4)"
aleatoria_5="$(echo $numero_aleatorio | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_digitos" == "$numero_aleatorio" ]; then clear ; 
acierto="$($favorite_text_dialog  --stdout --title "  Play game number ole" --msgbox "$text_1 $numero_aleatorio"  0 0)" ; clear ; exit ; fi
if [ "$intento" -gt "$intento_maximo" ]; then clear
echo "$text_1" "  " " || $numero_aleatorio ||" ; clear ; exit ; fi
bucle="$($favorite_text_dialog  --stdout --title "Play game number ole" --inputbox " $text_6 $intento /// $intento_maximo \n \
$text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||"  0 0)"
intento="$(($intento+1))"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
digitos="$bucle"
cinco_digitos="$(echo $digitos | cut -c 1-5)"
digito_1="$(echo $digitos | cut -c 1)"
digito_2="$(echo $digitos | cut -c 2)"
digito_3="$(echo $digitos | cut -c 3)"
digito_4="$(echo $digitos | cut -c 4)"
digito_5="$(echo $digitos | cut -c 5)"
echo "$Text_5" "$cinco_digitos"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_1" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_1" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_1" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_1" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_2" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_2" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_2" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_2" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_2" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_3" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_3" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_3" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_3" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_3" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_4" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_4" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_4" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_4" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_4" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_5" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_5" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_5" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_5" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_5" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_1" == "$digito_1" ]; then seat_1="$digito_1"; fi
if [ "$aleatoria_2" == "$digito_2" ]; then seat_2="$digito_2"; fi
if [ "$aleatoria_3" == "$digito_3" ]; then seat_3="$digito_3"; fi
if [ "$aleatoria_4" == "$digito_4" ]; then seat_4="$digito_4"; fi
if [ "$aleatoria_5" == "$digito_5" ]; then seat_5="$digito_5"; fi
done
#### when fail the answer
$favorite_text_dialog  --stdout --title "Play game number ole" --msgbox "$text_8 $numero_aleatorio"  0 0
clear ; exit ; fi
####
####
#### english: game-number in gui
#### spanish: game-number en gui
####
####
if [ "$second_option" == "-gui" ] || [ "$second_option" == "gui" ]; then $nada
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
case "$favorite_graphicall_dialog" in "$NULL") echo "$duo_md [ fail ] [ Install zenity to work ]"; exit ;; esac
selection="$($favorite_graphicall_dialog $graphic_dimension --column="Column" --text="Options" --title="Menu" --separator=" " \
--list english spanish quit )"
selection_final="$(echo $selection | sed 's/\|//g')"
case "$selection_final" in
"english") language_number="1" ;;
"spanish") language_number="2" ;;
"quit")    language_number="q" ;;
esac
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
if [ "$language_number" == "1" ] || [ "$language_number" == "2" ]; then $nada 
else "$cinco [ ok ] [ Exit game ]" ; exit ; fi
##### language of interface english
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### number of game
numero_aleatorio="$(($(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))))"
aleatoria_1="$(echo $numero_aleatorio | cut -c 1)"
aleatoria_2="$(echo $numero_aleatorio | cut -c 2)"
aleatoria_3="$(echo $numero_aleatorio | cut -c 3)"
aleatoria_4="$(echo $numero_aleatorio | cut -c 4)"
aleatoria_5="$(echo $numero_aleatorio | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
#### 
if [ "$cinco_digitos" == "$numero_aleatorio" ]; then clear 
acierto="$(zenity $graphic_dimension --info --title="gui game-number" --text="$text_1 $numero_aleatorio")"
clear; exit; fi
####
if [ "$intento" == "$intento_maximo" ]; then clear
fallo="$(zenity $graphic_dimension --info --title="gui game-number" --text="$text_8 $numero_aleatorio")"
clear ; exit ; fi
####
bucle="$(zenity $graphic_dimension --entry --title "Play game number ole" \
--text " $text_6 $intento /// $intento_maximo \n  $text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||")"
if [ "$?" -eq "0" ]; then echo -n ; else exit; fi
####
intento="$(($intento+1))"
digitos="$bucle"
cinco_digitos="$(echo $digitos | cut -c 1-5)"
digito_1="$(echo $digitos | cut -c 1)"
digito_2="$(echo $digitos | cut -c 2)"
digito_3="$(echo $digitos | cut -c 3)"
digito_4="$(echo $digitos | cut -c 4)"
digito_5="$(echo $digitos | cut -c 5)"
if [ "$aleatoria_1" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_1" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_1" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_1" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_1" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_2" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_2" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_2" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_2" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_2" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_3" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_3" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_3" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_3" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_3" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_4" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_4" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_4" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_4" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_4" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_5" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_5" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_5" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_5" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_5" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_1" == "$digito_1" ]; then seat_1="$digito_1"; fi
if [ "$aleatoria_2" == "$digito_2" ]; then seat_2="$digito_2"; fi
if [ "$aleatoria_3" == "$digito_3" ]; then seat_3="$digito_3"; fi
if [ "$aleatoria_4" == "$digito_4" ]; then seat_4="$digito_4"; fi
if [ "$aleatoria_5" == "$digito_5" ]; then seat_5="$digito_5"; fi
done ; clear ; exit ; fi
####
####
#### english: game-number in txt
#### spanish: game-number en txt
####
####
if [ "$second_option" == "-txt" ] || [ "$second_option" == "txt" ] || [ "$second_option" == "$NULL" ]; then $nada
echo
echo "$header_ok [ $first_option ]  [ play game clone game-number ]"
echo ""
##### INICIO ####
#### Choose language english or spanish
until [ "$language_number" == "1" ] || [ "$language_number" == "2" ] || [ "$language_number" == "q" ] ; do echo
echo "$tab $tab ##### Play in your language: Choose 1 for english or 2 for spanish or q for quit"
read -p "$tab $tab ##### Choose one number: # 1 or 2 or q #  " language_number
if [ ! -n "$language_number" ]; then language_number="5"; fi
echo; done
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### number of game
numero_aleatorio="$(($(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))))"
aleatoria_1="$(echo $numero_aleatorio | cut -c 1)"
aleatoria_2="$(echo $numero_aleatorio | cut -c 2)"
aleatoria_3="$(echo $numero_aleatorio | cut -c 3)"
aleatoria_4="$(echo $numero_aleatorio | cut -c 4)"
aleatoria_5="$(echo $numero_aleatorio | cut -c 5)"
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_digitos" == "$numero_aleatorio" ]; then  echo "$text_1 $numero_aleatorio" ; exit; fi
if [ "$intento" -gt "$intento_maximo" ]; then $nada
echo "$text_1" "  " " || $numero_aleatorio ||" ; exit ; fi
echo "$text_2"
echo "$text_3" " || $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 ||"
echo "$text_4" " || $contenido ||"
read -p "$text_5  #  " digitos
intento="$(($intento+1))"
cinco_digitos="$(echo $digitos | cut -c 1-5)"
digito_1="$(echo $digitos | cut -c 1)"
digito_2="$(echo $digitos | cut -c 2)"
digito_3="$(echo $digitos | cut -c 3)"
digito_4="$(echo $digitos | cut -c 4)"
digito_5="$(echo $digitos | cut -c 5)"
echo "$Text_5" "$cinco_digitos"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_1" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_1" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_1" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_1" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_2" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_2" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_2" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_2" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_2" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_3" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_3" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_3" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_3" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_3" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_4" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_4" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_4" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_4" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_4" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_5" == "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_5" == "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_5" == "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_5" == "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_5" == "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_1" == "$digito_1" ]; then seat_1="$digito_1"; fi
if [ "$aleatoria_2" == "$digito_2" ]; then seat_2="$digito_2"; fi
if [ "$aleatoria_3" == "$digito_3" ]; then seat_3="$digito_3"; fi
if [ "$aleatoria_4" == "$digito_4" ]; then seat_4="$digito_4"; fi
if [ "$aleatoria_5" == "$digito_5" ]; then seat_5="$digito_5"; fi
done
#### when fail the answer
echo
echo "$text_7" "$cinco_digitos"
echo "$text_8" "$numero_aleatorio"
####
clear; exit; fi
####
####
fi
####
####
#### :rutina-final-game-number:
##########    english: sshd-tunnel-info: info over sshd   ##########
##########    spanish: sshd-tunnel-info: info sobre sshd  ##########
#### :rutina-inicial-sshd-tunnel-info:
####
####
if   [ "$first_option" == "sshd-tunnel-info" ] ; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ tool ssh server info ] || ||"
if [ "$command_lsof" == "$NULL" ] ; then echo "$duo_md [ fail ] [ Install lsof ]" ; exit ; fi
#### ssh tunnel
echo "$duo_md [ info ] [ 127.0.0.1 ] [ Above ssh tunnel process ] [ search ssh tunnel with ps ]"
ps aux | $command_grep "ssh -f -N -D" | $command_grep -iv "grep ssh"
#### sshd server
echo "$duo_md [ info ] [ 127.0.0.1 ] [ Above server sshd ] [ search sshd with lsof ]"
$command_lsof -i | $command_grep -i  sshd
#### sshd file
ssh_file="/etc/ssh/sshd_config"
echo "$duo_md [ info ] [ 127.0.0.1 ] [ Above config file ] [ options: gatewaysports and forwardings ]"
if [ ! -f "$ssh_file" ] ; then echo "$duo_md [ without file $ssh_file ]"
else cat $ssh_file | $command_grep -i -v ^# | $command_grep -E -i "gatewayports|forwarding"; fi
#### sshd directory
ssh_dir="/etc/ssh/sshd_config.d"
echo "$duo_md [ info ] [ 127.0.0.1 ] [ Above config directory ] [ options: gatewaysports and forwardings ]"
if [ ! -d "$ssh_dir" ] ; then echo "$duo_md [ without directory $ssh_dir ]"
else for a in $($command_ls "$ssh_dir"); do cat $a | $command_grep -i -v ^# | $command_grep -E -i "gatewayports|forwarding"; done ; fi
echo "$duo_md [ info ] [ server ] [ configure ] [ $cmd_binary sshd-tunnel-on user@server ] "
echo "$duo_md [ info ] [ client ] [ configure ] [ socks=user@server:1080 | http_proxy=user@server:1080 | https_proxy=user@server:1080 ]"
exit; fi
####
####
#### :rutina-final-sshd-tunnel-info:
##########    english: sshd-tunnel-on: active sshd tunnel   ##########
##########    spanish: sshd-tunnel-on: activa shhd tunel    ##########
#### :rutina-inicial-sshd-tunnel-on:
####
####
if   [ "$first_option" == "sshd-tunnel-on" ] ; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ on: ssh server socks on port 1080 like active ssh tunnel ] || ||"
if [ "$second_option" == "$NULL" ]; then echo "$duo_md [ fail ] [ type: $cmd_binary sshd-tunnel-on user@server ]"; exit ; fi
echo "$duo_md [ info ] [ Port Forwarding Sockets with ssh like proxy ]"
ssh -f -N -D 1080 "$second_option" || echo "error no tunnel"
echo "$duo_md [  ok  ] [ Now, tunnel ssh active in port 1080 ] [ $second_option ]"
exit; fi
####
####
#### :rutina-final-sshd-tunnel-on
##########    english: sshd-tunnel-off: deactive sshd tunnel    ##########
##########    spanish: sshd-tunnel-off: desactiva shhd tunel    ##########
#### :rutina-inicial-sshd-tunnel-on:
####
####
if   [ "$first_option" == "sshd-tunnel-off" ] ; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ tool ssh server for deactive ssh tunnel ] || ||"
echo "$duo_md [ info ] [ killing procees with: ssh -f -N -D ]"
for parada in $(ps aux | $command_grep "ssh \-f \-N \-D" | $command_grep -iv "grep ssh" | awk '{print $2}' -);
do echo  "  [ info ] [ kill pid $parada ]"; kill -9 "$parada" ; done
echo "$duo_md [  ok  ] [ sshd-tunnel-off finished ]"
exit; fi
####
####
#### :rutina-final-sshd-tunnel-off
##########   english: pdf-resize  resize one pdf                 ##########
##########   spanish: pdf-resize  reescala la calidad de un pdf  ##########
#### :rutina-inicial-pdf-resize:
if  [ "$first_option" == "pdf-resize" ] ; then  echo $give_cover ; echo $message_info_rules
echo "$header_ok [ $first_option ]  [ pdf resize with gs ] [ minimal pixels: screen | normal pixels: printer ] || ||"
if [ "$quad_option" == "$NULL" ] ; then echo "Capacity to resize pdf with: $zero_option $first_option [screen|printer|prepress|default] pdf-input pdf-output"; exit ;  fi
#### capacity low o large pdf with: screen, printer, prepress, default
case "$second_option" in
"screen")   capacity="/screen"   ;;
"printer")  capacity="/printer"  ;;
"prepress") capacity="/prepress" ;;
"default")  capacity="/default"  ;;
*) echo " Capcity to resize pdf with: $zero_option $first_option [screen|printer|prepress|default] pdf-input pdf-output" ; exit ;;
esac
if [ ! -f "$third_option" ] ; then echo " choose one existent file for pdf-input" ; exit ; fi
#### program
if [ "$command_gs" == "$NULL" ]; then echo "$duo_md [ info ] install ghostscript" ; exit ; fi
$command_gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS="$capacity" -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$quad_option" "$third_option" && echo "$duo_md [ info ] [ working.. ]"
echo "$duo_md [  ok  ] [ finished ]"
exit; fi
#### :rutina-final-pdf-resize:
##########   english: pdf-unite  join several pdf in one pdf    ##########
##########   spanish: pdf-unite  junta varios pdf en un pdf     ##########
#### :rutina-inicial-pdf-unite:
if  [ "$first_option" == "pdf-unite" ] ; then  echo $give_cover ; echo $message_info_rules
echo "$header_ok [ $first_option ]  [ all group pdf in this folder join in pdf_unite.pdf ] || ||"
if [ "$command_pdfunite" == "$NULL" ]; then echo "$duo_md [ info ] install poppler utils" ; exit ; fi
if [ ! -d "$second_option" ] ; then echo " Choose one directory directory" ; exit ; fi
$command_pdfunite $second_option/*.pdf pdf_unite.pdf && echo "$duo_md [ info ] [ working.. Join all pdf in $second_option folder to pdf_unite.pdf ]"
echo "$duo_md [  ok  ] [ finished ]"
exit; fi
#### :rutina-final-pdf-unite:
##########   english: pdf-separate  join several pdf in one pdf    ##########
##########   spanish: pdf-separate  junta varios pdf en un pdf     ##########
#### :rutina-inicial-pdf-separate:
if  [ "$first_option" == "pdf-separate" ] ; then  echo $give_cover ; echo $message_info_rules
echo "$header_ok [ $first_option ]  [ split one pdf in several pdf ] || ||"
if [ "$command_pdfseparate" == "$NULL" ]; then echo "$duo_md [ info ] install poppler utils" ; exit ; fi
if [ ! -f "$second_option" ] ; then echo " Choose one existent file" ; exit ; fi
$command_pdfseparate $second_option pdf-separate-%d.pdf	&& echo "$duo_md [ info ] [ working.. ] [ output: pdf-separate-1,2... .pdf ]"
echo "$duo_md [  ok  ] [ finished ]"
exit; fi
#### :rutina-final-pdf-separate:
##########   english: qemu-start  Start qemu machine        ##########
##########   spanish: qemu-start  Empieza una maquina qemu  ##########
#### :rutina-inicial-qemu-start:
if  [ "$first_option" == "qemu-start" ] ; then echo $give_cover; echo $message_info_rules
echo "$header_ok [ $first_option ]  [ start qemu machine ] [ vm ] [ iso ] || ||"
####
####
#### prepare static variables
####
####
if [ "$2" == "$NULL" ] ; then qemu_vm="$directory_vm/$default_vm" ; else qemu_vm="$2" ; fi
if [ "$3" == "$NULL" ] ; then qemu_cdrom="" ; else qemu_cdrom="-cdrom $3"; fi
####
####
command_qemu="$(command -v $architecture_vm)"
qemu_options="-m $memory_ram -machine accel=kvm -k $language_vm -smp $processor_smp -rtc base=localtime -display $display_vm"
qemu_full="$command_qemu $qemu_options -boot menu=on -hda $qemu_vm $qemu_cdrom"
####
####
if [ ! -f "$qemu_vm" ]; then echo " VM image is not ready" ; exit ; fi 
$qemu_full &
echo "$duo_md [ ok ] [ started ] [ booted vm ] [ arch: $architecture_vm ] [ vm: $qemu_vm ] [ display: $display_vm ]"
exit
fi
#### :rutina-final-qemu-start:
##########   english: qemu-probe  Probe qemu machine        ##########
##########   spanish: qemu-probe  prueba una maquina qemu  ##########
#### :rutina-inicial-qemu-probe:
if  [ "$first_option" == "qemu-probe" ] ; then  echo $give_cover ; echo $message_info_rules
echo "$header_ok [ $first_option ]  [ start qemu machine ] [ vm ] [ iso ] || ||"
####
####
#### prepare static variables
####
####
if [ "$2"  == "$NULL" ] ; then qemu_vm="$directory_vm/$default_vm" ; else qemu_vm="$2" ; fi
if [ "$3"   == "$NULL" ] ; then qemu_cdrom="" ; else qemu_cdrom="-cdrom $3"; fi
####
####
command_qemu="$(command -v $architecture_vm)"
qemu_options="-m $memory_ram -machine accel=kvm -k $language_vm -smp $processor_smp -rtc base=localtime -display $display_vm"
qemu_full="$command_qemu $qemu_options -boot menu=on -hda $qemu_vm $qemu_cdrom"
####
####
if [ ! -f "$qemu_vm" ]; then echo " VM image is not ready" ; exit ; fi 
echo $qemu_full
echo "$duo_md [ ok ] [ probe ]"
exit
fi
#### :rutina-final-qemu-probe:
##########   english: qemu-status  Status qemu machine        ##########
##########   spanish: qemu-status  Estado de maquina qemu  ##########
#### :rutina-inicial-qemu-status:
if  [ "$first_option" == "qemu-status" ] ; then  echo $give_cover ; echo $message_info_rules
echo "$header_ok [ $first_option ]  [ status qemu machine ] || ||"
ps -Af | grep -i  "qemu-system" 
echo "$duo_md [  ok  ] [ status ] [ process listed ] [ qemu-system ]"
exit; fi
#### :rutina-final-qemu-status:
##########   english: qemu-stop  Stop qemu machine        ##########
##########   spanish: qemu-stop  Para la maquina qemu     ##########
#### :rutina-inicial-qemu-stop:
if  [ "$first_option" == "qemu-stop" ] ; then  echo $give_cover ; echo $message_info_rules
echo "$header_ok [ $first_option ]  [ stop qemu machine ] || ||"
ps -Af | grep -i  "$architecture_vm"
echo "$duo_md [  ok  ] [ status ] [ process listed ]"
killall -9 "$architecture_vm"
echo "$duo_md [ ok ] [ stopped ] [ stopped all vm ] [ $architecture_vm ]"
exit; fi
#### :rutina-final-qemu-stop:
##########   english: filelog: Read log fwiptables-filelog  ##########
##########   spanish: filelog: Lee log  fwiptables-filelog  ##########
#### :rutina-inicial-filelog:
####
####
if  [ "$first_option" == "filelog" ] ; then  echo $give_cover
if [ ! -s $default_filelog ]; then touch $default_filelog ; fi
echo "$header_ok [ $first_option ]  [ show $default_filelog ] || ||"
cat $default_filelog
echo "$duo_md [ this file is: ] [ $default_filelog ]"
exit; fi
####
####
#### :rutina-final-fw-filelog:
##########    english: autolog: Read log fwiptables-autolog   ##########
##########    spanish: autolog: Lee log  fwiptables-autolog   ##########
#### :rutina-inicial-autolog:
####
####
if [ "$first_option" == "autolog" ]; then  echo $give_cover
if [ ! -s $default_autolog ]; then touch $default_autolog ; fi
echo "$header_ok [ $first_option ] [ show "$default_autolog" ] || ||"
cat $default_autolog
echo "$duo_md [ info ] [ this file is: ] [ $default_autolog ]"
exit; fi
####
####
#### :rutina-final-autolog:
##########    english: log-ssh: log from ssh server           ##########
##########    spanish: log-ssh: log desde el servidor de ssh  ##########
#### :rutina-inicial-log-ssh:
####
####
if   [ "$first_option" == "log-ssh" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ search sshd in logs ] || ||"
if [ "$command_zgrep" == "$NULL" ] ; then echo "$duo_md [ fail ] [ Install zgrep ]"; exit ; fi
$command_find /var/log -maxdepth 5 -type f | xargs $command_zgrep -a -i "ssh"
exit; fi
####
####
#### :rutina-final-log-ssh:
##########    english: log-search: log from a one search    ##########
##########    spanish: log-search: log desde una busqueda   ##########
#### :rutina-inicial-log-search:
####
####
if   [ "$first_option" == "log-search" ]; then echo $give_cover
echo "$cinco [ $first_option $second_option ] [ search a one pattern in logs ] || ||"
if [ "$command_zgrep" == "$NULL" ] ; then echo "$duo_md [ fail ] [ Install zgrep ]"; exit ; fi
case "$second_option" in
$NULL) echo "$tab [ fail ] [ use: $cmd_binary $first_option pattern ]" ;;
*) $command_find /var/log -maxdepth 5 -type f | xargs $command_zgrep -a -i "$second_option" ;;
esac
exit; fi
####
####
#### :rutina-final-log-search:
##########    english: dev-version: about of program     ##########
##########    spanish: dev-version: acerca del programa  ##########
#### :rutina-inicial-dev-version:
####
####
if   [ "$first_option" == "dev-version" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show the link to dev version from git repository ] || ||"
echo $url_web_development
exit; fi
####
####
#### :rutina-final-dev-version:
##########    english: dev-changes: changes in the version program        ##########
##########    spanish: dev-changes: cambios en la version del programa    ##########
#### :rutina-inicial-dev-changes:
####
#### 
if   [ "$first_option" == "dev-changes" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show the link to dev-changes from git repository ] || ||"
$favorite_text_browser -source $url_web_changes
exit; fi
####
####
#### :rutina-final-dev-changes:
##########    english: new-versions: about of program      ##########
##########    spanish: new-versions: acerca del programa   ##########
#### :rutina-inicial-new-versions:
####
####
if   [ "$first_option" == "new-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the versions in the web ] || ||"
echo
echo "$duo_md [ info ] [ latest version ] [ $url_web_latest ]"
echo
echo "$duo_md [ info ] [ Show the index version ]"
echo "$duo_md [ info ] [ $url_index_files ]"
echo
$cmd_binary index-versions
echo
echo "$duo_md [ info ] [ Show the last minimal version ]"
echo "$duo_md [ info ] [ $url_minimal_files ]"
echo
$cmd_binary minimal-versions
echo
echo "$duo_md [ info ] [ Show the last complete version ]"
echo "$duo_md [ info ] [ $url_complete_files ]"
echo
$cmd_binary complete-versions
exit; fi
####
####
#### :rutina-final-new-versions:
##########    english: index-versions: about of program      ##########
##########    spanish: index-versions: acerca del programa   ##########
#### :rutina-inicial-complete-versions:
####
####
if   [ "$first_option" == "index-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the new versions in the web ] || ||"
case $favorite_text_browser in 
"$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
$favorite_text_browser -dump $url_index_files | $command_grep -i fwiptables | $command_grep -E " ago |[0123456789]-[0123456789][0123456789]-[0123456789]"
exit; fi
####
####
#### :rutina-final-complete-versions:
##########    english: complete-versions: about of program      ##########
##########    spanish: complete-versions: acerca del programa   ##########
#### :rutina-inicial-complete-versions:
####
####
if   [ "$first_option" == "complete-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the new versions in the web ] || ||"
case $favorite_text_browser in 
"$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
$favorite_text_browser -dump $url_complete_files | $command_grep -i fwiptables | $command_grep -E " ago |[0123456789]-[0123456789][0123456789]-[0123456789]" | $command_sed s/\<//g | $command_sed s/\>//g 
exit; fi
####
####
#### :rutina-final-complete-versions:
##########    english: minimal-versions: about of program      ##########
##########    spanish: minimal-versions: acerca del programa   ##########
#### :rutina-inicial-minimal-versions:
####
####
if   [ "$first_option" == "minimal-versions" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ show the new versions in the web ] || ||"
case $favorite_text_browser in 
"$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
$favorite_text_browser -dump $url_minimal_files | $command_grep -i fwiptables | $command_grep -E " ago |[0123456789]-[0123456789][0123456789]-[0123456789]" | $command_sed s/\<//g | $command_sed s/\>//g 
exit; fi
####
####
#### :rutina-final-minimal-versions:
##########    english: gpg-notes: edit file gpg texts         ##########
##########    spanish: gpg-notes: edita archivo de gpg text   ##########
#### :rutina-inicial-gpg-notes:
####
####
if   [ "$first_option" == "gpg-notes" ]; then 
####
####
if [ "$second_option" == "-list" ] || [ "$second_option" == "$NULL" ] ; then
$command_find "$directory_default" | $command_grep -i .gpg | $command_sed 's/\.gpg//g'
echo "$duo_md [ info ] [ type $cmd_binary gpg-notes name-of-gpg" ; exit ; fi
####
####
####  when it is -gui
####
####
if [ "$second_option" == "gui" ] || [ "$second_option" == "-gui" ]; then
if [ "$favorite_graphicall_dialog" == "$NULL" ]; then echo "$duo_md [ fail ] [ install zenity]"; exit ; fi
original="$($favorite_graphicall_dialog $graphic_dimension --entry --title "  [ NAME file gpg to choose WITHOUT path ]" \
--text "$($command_find $directory_default | $command_grep .gpg | $command_sed 's/\.gpg//g' )")"
origina="$(echo "$original" | $command_sed s/\\///g -)" ;
consigna="$($favorite_graphicall_dialog $graphic_dimension --entry --title "[ Passwowrd ]" --text "[ Passwowrd ]")"
gpg_origen_gpg="$directory_default/$origina.gpg"
gpg_firma_gpg="$directory_default/$origina.sign"
gpg_modify_txt="$directory_temporal/$origina.modify"
gpg_temporal_txt="$directory_temporal/$origina.txt"
gpg_temporal_gpg="$directory_temporal/$origina.gpg"
####
####
if [ -f "$gpg_origen_gpg" ];  then
$command_gpg --yes --batch --passphrase $consigna -o "$gpg_modify_txt" -d "$gpg_origen_gpg" &&
$favorite_graphicall_dialog --text-info $graphic_dimension --filename="$gpg_modify_txt" \
--editable --title="MODIFY FILE" &> "$gpg_temporal_txt" &&
$command_gpg --yes --batch --passphrase $consigna -o "$gpg_origen_gpg" -c "$gpg_temporal_txt" ;
$cmd_binary clean-tmp &> /dev/null ; exit ; fi
####
####
if [ ! -f "$gpg_origen_gpg" ]; then 
echo "File created" > "$gpg_modify_txt"
$favorite_graphicall_dialog --text-info $graphic_dimension --filename="$gpg_modify_txt" \
--editable --title="MODIFY FILE" &> "$gpg_temporal_txt" ;
$command_gpg --yes --batch --passphrase  $consigna -o "$gpg_origen_gpg" -c "$gpg_temporal_txt" ;
$cmd_binary clean-tmp &> /dev/null ; exit ; fi
####
####
exit; fi
####
####
####  when it is not -gui
####
####
if [ "$second_option" != "gui" ] && [ "$second_option" != "-gui" ]; then
if [ "$favorite_text_dialog" == "$NULL" ]; then echo "$duo_md [ fail ] [ install dialog ]"; exit ; fi
original="$($favorite_text_dialog --stdout --title "  [ NAME file gpg to choose WITHOUT path ] " \
--inputbox "$($command_find $directory_default/*.gpg | $command_sed 's/\.gpg//g')" 0 0 )"
origina="$(echo "$original" | $command_sed s/\\///g -)"  ;
consigna="$($favorite_text_dialog --stdout --title "  [ Passwowrd ] " \
--inputbox "[ Passwowrd ]" 0 0 )"
gpg_origen_gpg="$directory_default/$origina.gpg"
gpg_firma_gpg="$directory_default/$origina.sign"
gpg_modify_txt="$directory_temporal/$origina.modify"
gpg_temporal_txt="$directory_temporal/$origina.txt"
gpg_temporal_gpg="$directory_temporal/$origina.gpg"
####
####
if [ -f "$gpg_origen_gpg" ];  then
$command_gpg --yes --batch --passphrase $consigna -o "$gpg_modify_txt" -d "$gpg_origen_gpg" &&
$favorite_text_editor $gpg_modify_txt
$command_gpg --yes --batch --passphrase $consigna -o "$gpg_origen_gpg" -c "$gpg_modify_txt" ;
rm $gpg_modify_txt
echo "$duo_md file ok"
####
else
$favorite_text_editor $gpg_modify_txt
$command_gpg --yes --batch --passphrase  $consigna -o "$gpg_origen_gpg" -c "$gpg_temporal_txt" ;
rm $gpg_modify_txt
echo "$duo_md file ok"
exit ; fi
####
####
exit ; fi
####
####
exit ; fi
####
####
#### :rutina-final-gpg-notes:
##########    english: pc-halt: power off computer   ##########
##########    spanish: pc-halt: apaga el ordenador   ##########
#### :rutina-inicial-pc-halt:
####
####
if   [ "$first_option" == "pc-halt" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ power off computer ] || ||"
demora="5"
echo "Halt to power off computer ... in $demora seconds"
$command_sleep $demora
$command_halt
exit; fi
####
####
#### :rutina-final-pc-halt:
##########    english: pc-shutdown: power off computer   ##########
##########    spanish: pc-shutdown: apaga el ordenador   ##########
#### :rutina-inicial-pc-shutdown:
####
####
if   [ "$first_option" == "pc-shutdown" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ power off computer ] || ||"
demora="5"
echo "Halt to power off computer ... in $demora seconds"
$command_sleep $demora
$command_shutdown -h now
exit; fi
####
####
#### :rutina-final-pc-shutdown:
##########    english: pc-reboot: reboot computer         ##########
##########    spanish: pc-reboot: reinicia el ordenador   ##########
#### :rutina-inicial-pc-shutdown:
####
####
if   [ "$first_option" == "pc-reboot" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ reboot computer ] || ||"
demora="5"
echo "Reboot to power reboot ... in $demora seconds"
$command_sleep $demora
$command_reboot
exit; fi
####
####
#### :rutina-final-pc-shutdown:
##########    english: lpinfo: list printers      ##########
##########    spanish: lpinfo: lista impresoras   ##########
#### :rutina-inicial-lpinfo:
####
####
if   [ "$first_option" == "lpinfo" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ list printers with lpinfo and lpstat ] || ||"
echo "$duo_md [ info] [ lpinfo -v -l ]"
echo
$command_lpinfo -v -l || echo "$duo_md [ fail ] install lpinfo"
echo
echo "$duo_md [ info ] [ lpstat -v ]"
echo
$command_lpstat -v || echo "$duo_md [ fail ] install lpstat"
echo 
echo "$duo_md [ info ] [ Use lp or lpr to print with those printers, or lpadmin to admin. ]"
exit; fi
####
####
#### :rutina-final-lpinfo:
##########    english: lsblk: list disks     ##########
##########    spanish: lsblk: lista discos   ##########
#### :rutina-inicial-lsblk:
####
####
if   [ "$first_option" == "lsblk" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ list disks ] || ||"
echo "$duo_md [ info ] [ lsblk ]"
$command_lsblk -o name,size,fsuse%,label,mountpoints || echo "$duo_md [ fail ] install lsblk"
exit; fi
####
####
#### :rutina-final-lsblk:
##########    english: lsusb: list disks    ##########
##########    spanish: lsusb: lista discos  ##########
#### :rutina-inicial-lsusb:
####
####
if   [ "$first_option" == "lsusb" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ list usb ] || ||"
echo "$duo_md [ info ] [ lsusb ]"
$command_lsusb || echo "$duo_md [ fail ] install lsusb"
exit; fi
####
####
#### :rutina-final-lsusb:
##########    english: lscpu: list cpu   ##########
##########    spanish: lscpu: lista cpu  ##########
#### :rutina-inicial-lscpu:
####
####
if   [ "$first_option" == "lscpu" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ list cpu ] || ||"
echo "$duo_md [ info ] [ lscpu ]"
$command_lscpu || echo  "  [ fail ] install lscpu"
exit; fi
####
####
#### :rutina-final-lscpu:
##########    english: lspci: list disks     ##########
##########    spanish: lspci: lista discos   ##########
#### :rutina-inicial-lspci:
####
####
if   [ "$first_option" == "lspci" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ list pci hardware sockets ] || ||"
echo "$duo_md [ info ] [ lspci ]"
$command_lspci || echo  "  [ fail ] install lspci"
exit; fi
####
####
#### :rutina-final-lspci:
##########    english: lsgpu: list gpu    ##########
##########    spanish: lsgpu: lista gpu   ##########
#### :rutina-inicial-lsgpu:
####
####
if   [ "$first_option" == "lsgpu" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ list gpu ] || ||"
echo "$duo_md [ info ] [ lsgpu ]"
$command_lsgpu || echo "$duo_md [ fail ] install lsgpu"
exit; fi
####
####
#### :rutina-final-lsgpu:
##########    english: lsusb: list hardware   ##########
##########    spanish: lsusb: lista hardware  ##########
#### :rutina-inicial-lshw:
####
####
if   [ "$first_option" == "lshw" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ list hardware ] || ||"
echo "$duo_md [ info ] [ lshw ]"
$command_lshw || echo  "  [ fail ] install lshw"
exit; fi
####
####
#### :rutina-final-lshw:
##########    english: hosts: show /etc/hosts     ##########
##########    spanish: hosts: muestra /etc/hosts  ##########
#### :rutina-inicial-hosts:
####
####
if   [ "$first_option" == "hosts" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show the file /etc/hosts ] || ||"
cat /etc/hosts
echo "$duo_md [ ok ] [ This file is /etc/hosts ]"
exit; fi
####
####
#### :rutina-final-hosts:
##########    english: protocols: show /etc/protocols     ##########
##########    spanish: protocols: muestra /etc/protocols  ##########
#### :rutina-inicial-protocols:
####
####
if   [ "$first_option" == "protocols" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show the file /etc/protocols ] || ||"
cat /etc/protocols  | $command_sed s/\&//g 
echo "$duo_md [ ok ] [ This file is /etc/protocols ]"
exit; fi
####
####
#### :rutina-final-protocols:
##########    english: services: show /etc/services     ##########
##########    spanish: services: muestra /etc/services  ##########
#### :rutina-inicial-services:
####
####
if   [ "$first_option" == "services" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show the file /etc/services ] || ||"
cat /etc/services | $command_sed s/\&//g 
echo "$duo_md [ ok ] [ This file is /etc/services ]"
exit; fi
####
####
#### :rutina-final-services:
##########    english: host.allow: show /etc/host.allow     ##########
##########    spanish: host.allow: muestra /etc/host.allow  ##########
#### :rutina-inicial-host.allow:
####
####
if   [ "$first_option" == "hosts.allow" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show the file /etc/allow ] || ||"
cat /etc/hosts.allow
echo "$duo_md [ ok ] [ This file is /etc/hosts.allow ]"
exit; fi
####
####
#### :rutina-final-host.allow:
##########    english: hosts.deny: show /etc/host.deny       ##########
##########    spanish: hosts.deny: muestra /etc/host.deny    ##########
#### :rutina-inicial-hosts.deny:
####
####
if   [ "$first_option" == "hosts.deny" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show the file /etc/deny ] || ||"
cat /etc/hosts.deny
echo "$duo_md [ ok ] [ This file is /etc/hosts.deny ]"
exit; fi
####
####
#### :rutina-final-hosts.deny:
##########    english: resolv.conf: show /etc/resolv.conf      ##########
##########    spanish: resolv.conf: muestra /etc/resolv.conf   ##########
#### :rutina-inicial-resolv.conf:
####
####
if   [ "$first_option" == "resolv.conf" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show resolv.conf ] || ||"
if [ -f /etc/resolv.conf.head ]; then
echo "$tab  [ with resolv.conf.head ]"
cat /etc/resolv.conf.head ; 
else echo "$tab  [ without resolv.conf.head ]"; fi
if [ -f /etc/resolv.conf ]; then
echo "$tab  [ with resolv.conf ]"
cat /etc/resolv.conf ; 
else echo "$tab  [ without resolv.conf ]"; fi
if [ -f /etc/resolv.conf.tail ]; then
echo "$tab  [ with resolv.conf.tail ]"
cat /etc/resolv.conf.tail ; 
else echo "$tab  [ without resolv.conf.tail ]"; fi
exit; fi
####
####
#### :rutina-final-resolv.conf:   
##########    english: about: about of program       ##########
##########    spanish: about: acerca del programa    ##########
#### :rutina-inicial-about:
####
####
if   [ "$first_option" == "about" ]; then  echo $give_cover
echo "$header_ok [ $first_option ] [ about ] [ about md ] || ||" 
echo "$title_md [ $cmd_binary: ]"
echo "$text_md [ Path Program ] $cmd_binary"
echo "$text_md [ Program Name ] $cmd_name"
echo "$text_md [ Program Description] $cmd_description"
echo
echo "$title_md [ Install: ]"
echo "$text_md 1: chmod ugo+x fwiptables-version"
echo "$text_md 2: ./fwiptables-version install"
echo "$text_md And then $cmd_binary is in /usr/bin/fwiptables-cmd"
echo
echo "$title_md [ Sources: ]"
echo
echo "$text_md [ Developer version program ]"
echo "$text_md The fran iptables ver in development in git code at sourceforge:"
echo "$text_md $url_web_development"
echo 
echo "$text_md [ New versions program ]"
echo "$text_md The last versions in files repository at sourceforge:"
echo "$text_md $url_index_files"
echo
echo "$text_md [ Access web with all versions program ]"
echo "$text_md The fran iptables all versions in code repository at sourceforge:"
echo "$text_md $url_web_tree"
echo
echo "$text_md [ Git clone with all versions program ]"
echo "$text_md The fran iptables all versions in code repository at sourceforge:"
echo "$text_md git clone $url_web_git"
echo
echo "$title_md [ Program License ] $flicense"
exit; fi
####
####
#### :rutina-final-about:
##########    english: info-system: get info system              ##########
##########    spanish: info-system: da informacion del sistema   ##########
#### :rutina-inicial-info-system:
####
####
if   [ "$first_option" == "info-system" ]; then  echo $give_cover
echo "$header_ok [ $first_option ]  [ show info about system ] || ||"
echo
echo "$duo_md [ info ] ### [ System info ] [ Distro ] ###"
cat /etc/*-release | $command_grep -i  pretty_name | cut -d "=" -f 2 | $command_sed 's/\"//g'
echo
echo "$duo_md [ info ] ### [ System info ][ Kernel Linux ] ###"
$command_uname -srom
echo
echo "$duo_md [ info ] ### [ Boot system ] [ it works with pid number 1 ] ###"
ps -p1 
echo "$tab Behind /proc/1/com $(cat /proc/1/comm)"
echo
echo "$duo_md [ info ] ### [ System info ] [ Processor ] ###"
lscpu | $command_grep -E -i "socket|Model name|cpu max"
echo
echo "$duo_md [ info ] ### [ System info ] [ Memory RAM ] ###"
free -h
echo
echo "$duo_md [ info ] ### [ System info ] [ Disks ] ###"
lsblk -o name,size,fsuse%,label,mountpoints
exit; fi
####
####
#### :rutina-final-info-system:
##########    english: info-net: get net info               ##########
##########    spanish: info-net: da informacion de la red   ##########
#### :rutina-inicial-info-net:
####
####
if   [ "$first_option" == "info-net" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show info about net ] || ||"
echo
echo "$duo_md [ info ] ### [ Network Route ] [ Route ipv4 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else $command_ip -4 route ; fi
echo
echo "$duo_md [ info ] ### [ Network Route ] [ Route ipv6 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else $command_ip -6 route ; fi
echo
echo "$duo_md [ info ] ### [ Network Listen ] [ Listen ipv4 ] ###"
if [ "$command_ss" == "$NULL" ] ; then echo "$tab [ info ] [ install ss command ]"
else $command_ss -l4 | $command_sed 's/   / /g' ; fi
echo
echo "$duo_md [ info ] ### [ Network Listen ] [ Listen ipv6 ] ###"
if [ "$command_ss" == "$NULL" ] ; then echo "$tab [ info ] [ install ss command ]"
else $command_ss -l6 | $command_sed 's/   / /g' ; fi
echo
echo "$duo_md [ info ] ### [ Private ip ] [ Address ipv4 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else  $command_ip -4 address | $command_grep -i  inet | $command_grep -i -v 127.0.0.1 | cut -d "/" -f 1 ; fi
echo
echo "$duo_md [ info ] ### [ Private ip ] [ Address ipv6 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else $command_ip -6 address | $command_grep -i  inet | $command_grep -i -v ::1/128 | cut -d "/" -f 1 ; fi
echo
echo "$duo_md [ info ] ### [ Public ip ] [ Address ipv4 ] ###"
if [ "$command_curl" == "$NULL" ] ; then echo "$tab [ info ] [ install curl command ]" ; else
public_ip4="$(timeout -s SIGINT -v $server_waiting $command_curl -s -4 http://ifconfig.co/ip -w "\n"| head -1)"
if [ "$public_ip4" == "<!DOCTYPE html>" ] ; then echo "fail: public ip hidden for dns server" ;
else echo "$tab $public_ip4"; fi; fi
echo
echo "$duo_md [ info ] ### [ Public ip ] [ Address ipv6 ] ###"
if [ "$command_curl" == "$NULL" ] ; then echo "$tab [ info ] [ install curl command ]" ; else
public_ip6="$(timeout -s SIGINT -v $server_waiting $command_curl -s -6 http://ifconfig.co/ip -w "\n"| head -1)"
echo "$tab $public_ip6"; fi
echo
echo "$duo_md [ info ] ### [ Proxy ip ] [ Address proxy ] ###"
echo "$duo_md [ info ] Proxy http:    $http_proxy"
echo "$duo_md [ info ] Proxy https:   $https_proxy"
exit; fi
####
####
#### :rutina-final-info-net:
##########    english: ip4: get net info               ##########
##########    spanish: ip4: da informacion de la red   ##########
#### :rutina-inicial-ip4:
####
####
if [ "$first_option" == "ip4" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show info about net ip4 ] || ||"
echo
echo "$duo_md [ info ] ### [ Network Route ] [ Route ipv4 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else $command_ip -4 route ; fi
echo
echo "$duo_md [ info ] ### [ Network Listen ] [ Listen ipv4 ] ###"
if [ "$command_ss" == "$NULL" ] ; then echo "$tab [ info ] [ install ss command ]"
else $command_ss -l4 | $command_sed 's/   / /g' ; fi
echo
echo "$duo_md [ info ] ### [ Private ip ] [ Address ipv4 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else  $command_ip -4 address | $command_grep -i  inet | $command_grep -i -v 127.0.0.1 | $command_sed 's/inet//g' | cut -d "/" -f 1 ; fi
echo
echo "$duo_md [ info ] ### [ Public ip ] [ Address ipv4 ] ###"
if [ "$command_curl" == "$NULL" ] ; then echo "$tab [ info ] [ install curl command ]" ; else
public_ip4="$(timeout -s SIGINT -v $server_waiting $command_curl -s -4 http://ifconfig.co/ip -w "\n"| head -1)"
if [ "$public_ip4" == "<!DOCTYPE html>" ] ; then echo "fail: public ip hidden for dns server" ;
else echo "$tab $public_ip4"; fi; fi
echo
echo "$duo_md [ info ] ### [ Proxy ip ] [ Address proxy ] ###"
echo "$duo_md [ info ] Proxy http:    $http_proxy"
echo "$duo_md [ info ] Proxy https:   $https_proxy"
echo
echo "$duo_md [ info ] ### [ domain resolve ] [ Resolv.conf ] ###"
cat /etc/resolv.conf | $command_grep -i nameserver | $command_grep -iv ^# | sed 's/nameserver/     nameserver/g'
exit; fi
####
####
#### :rutina-final-ip4:
##########    english: ip6: get net info               ##########
##########    spanish: ip6: da informacion de la red   ##########
#### :rutina-inicial-ip6:
####
####
if [ "$first_option" == "ip6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show info about net ip6 ] || ||"
echo
echo "$duo_md [ info ] ### [ Network Route ] [ Route ipv6 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else $command_ip -6 route ; fi
echo
echo "$duo_md [ info ] ### [ Network Listen ] [ Listen ipv6 ] ###"
if [ "$command_ss" == "$NULL" ] ; then echo "$tab [ info ] [ install ss command ]"
else $command_ss -l6 | $command_sed 's/   / /g' ; fi
echo
echo "$duo_md [ info ] ### [ Private ip ] [ Address ipv6 ] ###"
if [ "$command_ip" == "$NULL" ] ; then echo "$tab [ info ] [ install ip command ]"
else  $command_ip -6 address | $command_grep -i inet | $command_grep -iv  "inet6 ::1"  | $command_sed 's/inet6//g' | cut -d "/" -f 1 ; fi
echo
echo "$duo_md [ info ] ### [ Public ip ] [ Address ipv6 ] ###"
if [ "$command_curl" == "$NULL" ] ; then echo "$tab [ info ] [ install curl command ]" ; else
public_ip6="$(timeout -s SIGINT -v $server_waiting $command_curl -s -6 http://ifconfig.co/ip -w "\n"| head -1)"
if [ "$public_ip6" == "<!DOCTYPE html>" ] ; then echo "fail: public ip hidden for dns server" ;
else echo "$tab $public_ip6"; fi; fi
echo
echo "$duo_md [ info ] ### [ Proxy ip ] [ Address proxy ] ###"
echo "$duo_md [ info ] Proxy http:    $http_proxy"
echo "$duo_md [ info ] Proxy https:   $https_proxy"
echo
echo "$duo_md [ info ] ### [ domain resolve ] [ Resolv.conf ] ###"
cat /etc/resolv.conf | $command_grep -i nameserver | $command_grep -iv ^# | sed 's/nameserver/     nameserver/g'
exit; fi
####
####
#### :rutina-final-ip6:
##########    english: speed-ip4: speed from internet        ##########
##########    spanish: speed-ip4: velocidad desde internet   ##########
#### :rutina-inicial-speed-ip4:
####
####
if   [ "$first_option" == "speed-ip4" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ test speed ipv4 with internet ] || ||"
case "$command_iperf"  in  $NULL) echo "$duo_md [ fail ] [ Install Iperf command ]"; exit ;; esac
####
####
echo
echo "$duo_md [ info ] Stop firewall & Run speed ip4 & Continue firewall"
echo
$cmd_binary stop
echo
echo "$duo_md [ Doing bandwidth in ipv4 to $serverip_iperf_ipv4 ] [ with max $server_waiting seconds ]"
$command_iperf -c $serverip_iperf_ipv4 -t 4 -P 1 -p $serverport_iperf_ipv4 |tail -3
echo
$cmd_binary continue
exit; fi
####
####
#### :rutina-final-speed-ip4:
##########    english: speed-ip6: speed from internet        ##########
##########    spanish: speed-ip6: velocidad desde internet   ##########
#### :rutina-inicial-speed-ip6:
####
####
if   [ "$first_option" == "speed-ip6" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ test speed ipv6 with internet ] || ||"
case "$command_iperf"  in  $NULL) echo "$duo_md [ fail ] [ install iperf command ]"; exit ;; esac
####
####
echo
echo "$duo_md [ info ] Stop firewall & Run speed ip4 & Continue firewall"
echo
$cmd_binary stop
echo
echo "$duo_md [ Doing bandwidth in ipv6 to $serverip_iperf_ipv6 ] [ with max $server_waiting seconds ]"
$command_iperf -c $serverip_iperf_ipv6 -V -t 4 -P 1 -p $serverport_iperf_ipv6 | tail -3
echo
$cmd_binary continue
exit; fi
####
####
#### :rutina-final-speed-ip6:
##########    english: web-cert: speed from internet       ##########
##########    spanish: web-cert: velocidad desde internet  ##########
#### :rutina-inicial-web-cert:
####
####
if   [ "$first_option" == "web-cert" ] ; then echo $give_cover
echo "$header_ok [ $first_option ]  [ get one web certifcate from one server with port 443] || ||"
case "$command_openssl"  in  $NULL) echo "$tab [ fail ] [ install openssl ]"; exit ;; esac
####
####
if [ "$second_option" == "$NULL" ]; then echo $tab $tab $tab
echo "[ get one web certifcate ] [ Example: $cmd_binary web-cert www.fast.com ]"; exit; fi
echo
echo | timeout -s SIGINT -v $server_waiting $command_openssl s_client -connect $second_option:443
exit; fi
####
####
#### :rutina-final-web-cert:
##########    english: clean-tmp: clean temporal files             ##########
##########    spanish: clean-tmp: limpia de archivos temporales    ##########
#### :rutina-inicial-clean-tmp:
####
####
if   [ "$first_option" == "clean-tmp" ] ; then echo $give_cover
echo "$header_ok [ $first_option ] [ clean $cmd_binary temporal files ] || ||"
echo "$duo_md [ info ] [ cleaning $cmd_binary temporal files ]"
rm -rf "$directory_tmp" &> /dev/null
echo "[  ok  ] [ cleaned temporal files ]"
exit; fi
####
####
#### :rutina-final-clean-tmp:
##########    english: config-eng: several options to config in english        ##########
##########    spanish: config-eng: varias opciones para configurar en ingles   ##########
#### :rutina-inicial-config-eng:
####
####
if   [ "$first_option" == "config-eng" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show variables cfg from english configuration ] || ||"
cat  $defaultfullcfg_eng
exit; fi
####
####
#### :rutina-final-config-eng:
##########    english: config-spa: several options to config in spanish         ##########
##########    spanish: config-spa: varias opciones para configurar en spanish   ##########
#### :rutina-inicial-config-spa:
####
####
if   [ "$first_option" == "config-spa" ]; then echo $give_cover
echo "$header_ok [ $first_option ]  [ show variables cfg from spanish configuration ] || ||"
cat $defaultfullcfg_spa
exit; fi
####
####
#### :rutina-final-config-spa:
##########    english: info: information of one utility group         ##########
##########    spanish: info: informacion de un grupo de utilidades    ##########
#### :rutina-inicial-info:
####
####
if   [ "$first_option" == "info" ]; then $nada
if [ "$second_option" == "options-interface" ]; then $cmd_binary options-interface ; exit ; fi
if [ "$second_option" == "firewall-control" ]; then $cmd_binary firewall-control ; exit ; fi
if [ "$second_option" == "firewall-numeral" ]; then $cmd_binary firewall-conceptual ; exit ; fi
if [ "$second_option" == "firewall-conceptual" ]; then $cmd_binary firewall-numeral ; exit ; fi
if [ "$second_option" == "firewall-launch" ]; then $cmd_binary firewall-launch ; exit ; fi
if [ "$second_option" == "firewall-custom" ]; then $cmd_binary firewall-custom ; exit ; fi
if [ "$second_option" == "tool-sockets" ]; then $cmd_binary tool-sockets ; exit ; fi
if [ "$second_option" == "tool-forward" ]; then $cmd_binary tool-forward ; exit ; fi
if [ "$second_option" == "tool-tcp" ]; then $cmd_binary tool-tcp ; exit ; fi
if [ "$second_option" == "tool-udp" ]; then $cmd_binary tool-udp ; exit ; fi
if [ "$second_option" == "tool-icmp" ]; then $cmd_binary tool-icmp ; exit ; fi
if [ "$second_option" == "tool-nmap" ]; then $cmd_binary tool-nmap ; exit ; fi
if [ "$second_option" == "tool-sudofw" ]; then $cmd_binary tool-sudofw ; exit ; fi
if [ "$second_option" == "tool-install" ]; then $cmd_binary tool-install ; exit ; fi
if [ "$second_option" == "tool-addblock" ]; then $cmd_binary tool-addblock ; exit ; fi
if [ "$second_option" == "tool-dev" ]; then $cmd_binary tool-dev ; exit ; fi
if [ "$second_option" == "tool-speed" ]; then $cmd_binary tool-speed ; exit ; fi
if [ "$second_option" == "show-hardware" ]; then $cmd_binary show-hardware ; exit ; fi
if [ "$second_option" == "show-etc" ]; then $cmd_binary show-etc ; exit ; fi
if [ "$second_option" == "show-log" ]; then $cmd_binary show-log ; exit ; fi
if [ "$second_option" == "help-about" ]; then $cmd_binary help-about ; exit ; fi
if [ "$second_option" == "help-help" ]; then $cmd_binary help-help ; exit ; fi
####
####
echo $give_cover
echo
echo "$header_ok [ $first_option ]  [ info group ]"
echo
echo "$tab [ launch: ] [ $cmd_binary info group ]"
echo
echo "$tab [ group list: ]"
echo "$tab" "$tab"  "$tab $tab"
echo "$tab" "$tab"  "                                   | Group Options |                              "
echo "$tab" "$tab"  
echo "$tab" "$tab"  " options-firewall   |  firewall-control  firewall-list  firewall-launch  firewall-custom "
echo "$tab" "$tab"  "     options-tool   |  tool-sockets      tool-forward   tool-tcp           tool-udp        "
echo "$tab" "$tab"  "                       tool-icmp         tool-nmap      tool-sudofw        tool-game       "
echo "$tab" "$tab"  "                       tool-speed        tool-install   tool-addblock      tool-dev        "
echo "$tab" "$tab"  "                       tool-connect"
echo "$tab" "$tab"  "     options-show   |  show-hardware     show-etc       show-log         help-about      "
echo "$tab" "$tab"  "                       help-help"
echo
echo "$tab [ Example: ] [ $cmd_binary options-interface ]"
exit; fi
####
####
#### :rutina-final-info:
##########    english: readme: the help option en english    ##########
##########    spanish: readme: la opcion de ayuda en ingles  ##########
#### :rutina-inicial-readme:
####
####
if   [ "$first_option" == "readme" ]; then echo $give_cover
echo "$header_ok [ $first_option ] [ help in english ] [ readme md ] || ||"
echo "$text_md"
echo "$brake_md"
$cmd_binary intro
echo "$text_md"
echo "$brake_md"
$cmd_binary options
echo "$text_md"
echo "$brake_md"
echo "$title_md         [ All options per groups ]  [ Options one to one in each group ]"
echo "$text_md"
echo "$brake_md"
echo "$title_md         [ Launch interface ]"
echo "$text_md"
echo "$text_md         txt OR -txt OR -t : Output at text line | whith bash backend."
echo "$text_md         cli OR -cli OR -c : Output at text menu | whith dialog backend."
echo "$text_md         gui OR -gui OR -g : Output at graphicall window || whith zenity backend."
echo "$text_md         web OR -web OR -w : Output to text web browser."
echo "$text_md         log OR -log OR -l : Output in logfile | whith bash backend."
echo "$text_md       help OR -help OR -h : Output help to text in text plain format."
echo "$text_md       info OR -info OR -i : Output help to text in text rst format."
echo "$text_md       null OR -null OR -n : Output in null    | without backend."
echo "$text_md               tor OR -tor : Run in tor, necesary daemon tor and torify command | whith tor backend."
echo "$text_md"
echo "$brake_md"
echo "$text_md            cli-menu Or -cli-menu : Command line interface with menus | whith dialog backend."
echo "$text_md            gui-menu Or -gui-menu : Graphicall interface with menus | whith zenity backend."
echo "$text_md         gui-shell Or -shell-menu : Graphicall interface with shell | whith zenity backend."
echo "$text_md"
echo "$text_md       #################################################################"
echo "$text_md"
echo "$title_md        [ Control the iptables rules ]"
echo "$text_md"
echo "$text_md          stop : Save and stop firewall iptables."
echo "$text_md      continue : Restore the firewall iptables stopped."
echo "$text_md         reset : Reset the firewall iptables."
echo "$text_md         names : List the firewall iptables saved."
echo "$text_md          show : Show one firewall standard."
echo "$text_md          save : Save one firewall iptables."
echo "$text_md          load : Restore a one firewall iptables."
echo "$text_md        actual : Show the firewall standard actual."
echo "$text_md"
echo "$title_md         [ List iptables rules]"
echo "$text_md"
echo "$text_md              ls4 : likes list-filter4."
echo "$text_md              ls6 : likes list-filter6."
echo "$text_md            list4 : likes list-filter4."
echo "$text_md            list6 : likes list-filter6."
echo "$text_md           status : likes list4 more list6."
echo "$text_md          listnum : List iptables filter rules from ipv4 in numbers."
echo "$text_md  list-forwardnum : List iptables filter rules foward in numbers."
echo "$text_md         listnum6 : List iptables filter rules from ipv6 in numbers."
echo "$text_md list-forwardnum6 : List iptables filter rules forward ipv6 in numbers."
echo "$text_md     list-forward : List iptables filter rules forward ipv4."
echo "$text_md    list-forward6 : List iptables filter rules forward ipv6."
echo "$text_md"
echo "$brake_md"
echo "$text_md     list-filter4 : List iptables filter rules from ipv4."
echo "$text_md     list-filter6 : List iptables filter rules from ipv6."
echo "$text_md        list-nat4 : List iptables nat rules from ipv4."
echo "$text_md        list-nat6 : List iptables nat rules from ipv6."
echo "$text_md     list-mangle4 : List iptables mangle rules from ipv4."
echo "$text_md     list-mangle6 : List iptables mangle rules from ipv6."
echo "$text_md        list-raw4 : List iptables raw rules from ipv4."
echo "$text_md        list-raw6 : List iptables raw rules from ipv4."
echo "$text_md   list-security4 : List iptables security rules from ipv4."
echo "$text_md   list-security6 : List iptables security rules from ipv6"
echo "$text_md    list-ebtables : List rules ebtables mac of ethernet."
echo "$text_md    ist-arptables : List rules arptables arp."
echo "$text_md"
echo "$title_md         [ firewall config ]"
echo "$text_md"
echo "$text_md       new-full-config : Create a new configfile.cfg in english."
echo "$text_md nueva-completa-config : Create a new configfile.cfg in spanish."
echo "$text_md       new-mini-config : Create a new basic configfile.cfg in english."
echo "$text_md     nueva-mini-config : Create a new basic configfile.cfg in spanish."
echo "$text_md          regen-config : regen wizard files and templates cfg."
echo "$text_md          names-config : List config files cfg."
echo "$text_md         modify-config : Edit one config.cfg."
echo "$text_md           show-config : Show one config.cfg."
echo "$text_md            del-config : Delete one configuration file."
$break_md
echo "$title_md        [ Launch firewall iptables rules ]"
echo "$text_md"
echo "$text_md         eraserules : Remove the iptables rules in ipv4 and ipv6."
echo "$text_md        wizard-full : Asistant y launch complete firewall."
echo "$text_md        wizard-mini : Asistant y Launch simple firewall."
echo "$text_md             custom : Configure one custom firewall, made for you with file.cfg."
echo "$text_md           off-line : Launch disconected firewall for all servers and clients except localhost."
echo "$text_md      all-permisive : Launch a firewall very permisive."
echo "$brake_md"
echo "$text_md      games-shooter : Launch a firewall likes games udp non-root games."
echo "$text_md       game-wesnoth : Launch a firewall likes game of the battle for wesnoth."
echo "$text_md      game-minetest : Launch a firewall likes game minecraft or minetest."
echo "$text_md       game-freeciv : Launch a firewall likes game game freeciv."
echo "$text_md     game-widelands : Launch a firewall likes game widelands."
echo "$text_md            lan-tor : Launch a firewall only to browser with tor."
echo "$text_md            lan-vpn : Launch a firewall only to browser with vpn."
echo "$text_md         client-web : Launch a firewall likes web client and ssh client."
echo "$text_md         client-tor : Launch a firewall with brwoser with tor."
echo "$text_md     client-torrent : Launch a firewall likes web client and ssh client and torrent."
echo "$text_md         client-vpn : Launch a firewall likes web client and ssh client and vpn client."
echo "$text_md       client-squid : Launch a firewall likes client squid."
echo "$brake_md"
echo "$text_md         shield-ssh : Launch a firewall likes server ssh with shield for new-conecctions until 6-tries each-hour/each-ip."
echo "$brake_md"
echo "$text_md       ______All server ssh configured with shield ssh server at max $config_shield_maxtries tries to connect at ip/hour_____"
echo "$brake_md"
echo "$text_md         server-ssh : Launch a firewall likes server ssh."
echo "$text_md         server-web : Launch a firewall likes web server and ssh server."
echo "$text_md       server-samba : Launch a firewall likes server and client for samba and ssh."
echo "$text_md       server-print : Launch a firewall likes server ipp, printer and ssh."
echo "$text_md        server-lamp : Launch a firewall likes server LAMP."
echo "$text_md         server-ftp : Launch a firewall likes server ftp."
echo "$text_md        server-news : Launch a firewall likes server news."
echo "$text_md        server-mail : Launch a firewall likes server mail."
echo "$text_md   server-teamspeak : Launch a firewall likes server teamspeak."
echo "$text_md      server-mumble : Launch a firewall likes server mumble."
echo "$text_md         server-sql : Launch a firewall likes server sql."
echo "$text_md    server-asterisk : Launch a firewall likes server asterisk."
echo "$text_md       server-squid : Launch a firewall likes server squid."
echo "$text_md"
echo "$text_md       #################################################################"
echo "$text_md"
echo "$title_md         [ options state ]"
echo "$text_md"
echo "$text_md      preferences-read   : Show values for default."
echo "$text_md      preferences-modify : Modify values for default."
echo "$text_md      preferences-regen  : Regenerate values for default."
echo "$text_md      ip4                : Show net ip4."
echo "$text_md      ip6                : Show net ip6."
echo "$text_md      install            : Install program."
echo "$text_md      uninstall          : Uninstall program."
echo "$text_md      upgrade            : Upgrqade program."
echo "$text_md"
echo "$text_md"
echo "$title_md         [ List sockets ]"
echo "$text_md"
echo "$text_md      info-nodes : List the conentions arp in lan."
echo "$text_md      info-proxy : List system proxy."
echo "$text_md     info-listen : List system listen socket list."
echo "$text_md      info-route : Show net devices and ip route tables."
echo "$text_md     info-system : Show info system."
echo "$text_md        info-net : Show net info."
echo "$text_md             ip4 : Show net ip4."
echo "$text_md             ip6 : Show net ip6."
echo "$text_md              ss : Show net sockets with command ss."
echo "$text_md            lsof : Show net sockets with command lsof."
echo "$text_md         netstat : Show net sockets with command netstat."
echo "$text_md     netstat-nat : Show net sockets with command netstat-nat."
echo "$text_md        web-cert : Download one ssl certificated to one web with port https(443)."
echo "$text_md         tcpdump : Listen the connections."
echo "$text_md"
echo "$title_md         [ tool connect ]"
echo "$text_md"
echo "$text_md               iw-scan : list ssid on wifi"
echo "$text_md               iw-info : Show the connected wifi"
echo "$text_md              wpa-save : Connect to ssid in wifi for first time"
echo "$text_md              wpa-load : Connect to ssid in wifi saved"
echo "$text_md           dhcp-client : run dhcp client"
echo "$text_md"
echo "$title_md         [ tool rules ]"
echo "$text_md"
echo "$text_md         rule-del-rule : Delete a rule for its number"
echo "$text_md       rule-del-shield : Delete the shield to ssh with max number tries"
echo "$text_md       rule-add-shield : Add the shield to ssh with max number tries"
echo "$text_md"
echo "$title_md         [ Tool forward ]"
echo "$text_md"
echo "$text_md  ipforward-list : Show kernel config about forward."
echo "$text_md    ipforward-on : Active kernel config about forward."
echo "$text_md   ipforward-off : Deactive kernel config about forward."
echo "$text_md"
echo "$title_md         [ Tool sshd ]"
echo "$text_md"
echo "$text_md  sshd-tunnel-info : Show info about sshd tunnel"
echo "$text_md    sshd-tunnel-on : Active sshd tunnel."
echo "$text_md   sshd-tunnel-off : Deactive sshd tunnel."
echo "$text_md"
echo "$title_md         [ Tool tcp ]"
echo "$text_md"
echo "$text_md    tracetcp-ip4 : Trace route a one host with ipv4 tcp."
echo "$text_md    tracetcp-ip6 : Trace route a one host with ipv6 tcp."
echo "$text_md       speed-ip4 : Test the bandwidth with ipv4."
echo "$text_md       speed-ip6 : Test the bandwidth with ipv6."
echo "$text_md"
echo "$title_md         [ Tool udp ]"
echo "$text_md"
echo "$text_md           host : Resolve one host."
echo "$text_md            dig : Resolve one host."
echo "$text_md      resolveip : Resolve one host and viceversa."
echo "$text_md          geoip : Locate a one host or ip."
echo "$text_md ntpdate-client : Update the date from ntp server."
echo "$text_md"
echo "$title_md         [ Tool icmp ]"
echo "$text_md"
echo "$text_md  traceicmp-ip4 : Trace route a one host with ipv4 icmp."
echo "$text_md  traceicmp-ip6 : Trace route a one host with ipv6 icmp."
echo "$text_md       ping-ip4 : Do a one ping with to one host with ipv4 icmp."
echo "$text_md       ping-ip6 : Do a one ping with to one host with ipv6 icmp."
echo "$text_md"
echo "$title_md         [ Tool nmap ]"
echo "$text_md"
echo "$text_md       nmap-tcp : Scan a host/mask per tcp protocol."
echo "$text_md       nmap-syn : Scan a host/mask per syn socket."
echo "$text_md       nmap-fin : Scan a host/mask per fin socket."
echo "$text_md       nmap-udp : Scan a host/mask per udp protocol."
echo "$text_md      nmap-ping : Scan a host/mask per ping udp."
echo "$text_md"
echo "$title_md         [ Tool sudo ]"
echo "$text_md"
echo "$text_md    sudofw-adduser : Allow sudo to other choosed users."
echo "$text_md    sudofw-deluser : Remove sudo to other choosed users."
echo "$text_md   sudofw-listuser : List sudo to other choosed users."
echo "$text_md      aliasfw-list : List alias fwiptables and its autocomplete."
echo "$text_md"
echo "$title_md         [ Tool game ]"
echo "$text_md"
echo "$text_md         game-word : Play game to discover a random word with five digits."
echo "$text_md       game-number : Play game to discover a random number with five digits."
echo "$text_md       game-domain : Discover one domain if generic or if country."
echo "$text_md          game-hex : convert one number hexadecimal in rgb."
echo "$text_md          game-rgb : convert one number rgb in hexadecimal."
echo "$text_md"
echo "$title_md         [ Tool speed ]"
echo "$text_md"
echo "$text_md     ram|free|free-ram : Clean for innecesary ram memory."
echo "$text_md             speed-ram : Show the speed of ram memory."
echo "$text_md            speed-disk : Show the speed of root hard disc."
echo "$text_md             speed-glx : Show frammes for seconds with mesa graphicall."
echo "$text_md"
echo "$title_md         [ Tool util ]"
echo "$text_md"
echo "$text_md          weather : Show the weather in your city."
echo "$text_md           md5sum : Show the one file md5sum."
echo "$text_md  radio|radio-mp3 : Connect to one server mp3, see preferences-read preferences-modify."
echo "$text_md        gpg-notes : Write and rewrite notes with crypto."
echo "$text_md"
echo "$title_md         [ Tool pdf ]"
echo "$text_md"
echo "$text_md         pdf-resize : Resize one pdf."
echo "$text_md          pdf-unite : join several pdf in one pdf."
echo "$text_md       pdf-separate : Separate one pdf in several pdf."
echo "$text_md"
echo "$title_md         [ Tool radio ]"
echo "$text_md"
echo "$text_md      radio-mp3 : play one link to mp3."
echo "$text_md"
echo "$title_md         [ Tool qemu ]"
echo "$text_md"
echo "$text_md       qemu-status : Status for qemu"
echo "$text_md         qemu-stop : stop several maquines virtual qemu"
echo "$text_md        qemu-start : Start one maquine virtual qemu"
echo "$text_md"
echo "$title_md         [ Tool Install ]"
echo "$text_md"
echo "$text_md         install : Install this program actual."
echo "$text_md   howto-upgrade : Howto install the latest version."
echo "$text_md         upgrade : Upgrade at the latest stable version."
echo "$text_md     dev-upgrade : Upgrade at the latest git version."
echo "$text_md       clean-tmp : Remove temporal files of fwiptables."
echo "$text_md"
echo "$title_md         [ Tool addblock ]"
echo "$text_md"
echo "$text_md  addblock-list : List options to block dangerous hosts."
echo "$text_md    addblock-on : Write one /etc/hosts with block a dangerous sites."
echo "$text_md   addblock-off : Return to /etc/hosts for default."
echo "$text_md"
echo "$title_md         [ Tool computer ]"
echo "$text_md"
echo "$text_md         reboot : Reboot computer."
echo "$text_md           halt : Stop computer."
echo "$text_md       shutdown : Stop computer."
echo "$text_md"
echo "$title_md         [ Tool dev ]"
echo "$text_md"
echo "$text_md    new-versions : Show the last versions."
echo "$text_md     dev-version : Show the link at the developer version."
echo "$text_md     dev-changes : Show the last changes."
echo "$text_md            code : Show the source code for one option."
echo "$text_md          md5sum : Show the md5 sum from one file."
echo "$text_md"
echo "$title_md         [ Tool computer ]"
echo "$text_md"
echo "$text_md         pc-halt : Turn power off computer."
echo "$text_md     pc-shutdown : Turn power off computer."
echo "$text_md       pc-reboot : Turn reboot the computer."
echo "$text_md"
echo "$title_md         [ Show hardware ]"
echo "$text_md"
echo "$text_md          lpinfo : Show the device printers."
echo "$text_md           lsblk : Show the device disks."
echo "$text_md           lsusb : Show the devices usb."
echo "$text_md           lscpu : Show the devices cpu."
echo "$text_md           lsgpu : Show the devices gpu."
echo "$text_md           lspci : Show the devices pci."
echo "$text_md            lshw : Show the hardware devices."
echo "$text_md"
echo "$title_md         [ Show etc ]"
echo "$text_md"
echo "$text_md           hosts : Show /etc/hosts, hosts local and statics host."
echo "$text_md      protocolos : Show /etc/protocols, protocols names."
echo "$text_md        services : Show /etc/services, ports names."
echo "$text_md     hosts.allow : Show /etc/hosts.allow, hosts allowed in some own server."
echo "$text_md      hosts.deny : Show /etc/hosts.deny, hosts drops in some own server."
echo "$text_md     resolv.conf : Show /etc/resolv.conf, it are the dns configured."
echo "$text_md    preferences-read : Show show variables for fwiptables."
echo "$text_md  preferences-modify : Modify variables for fwiptables."
echo "$text_md"
echo "$title_md         [ Show log ]"
echo "$text_md"
echo "$text_md        log-ssh : Search the logs from sshd for /var/log."
echo "$text_md     log-search : Search the logs from a input pattern for /var/log."
echo "$text_md        filelog : Show saved with -log."
echo "$text_md        filelog : Alias to filelog."
echo "$text_md        autolog : Show autolog headers."
echo "$text_md"
echo "$title_md         [ Show about ]"
echo "$text_md"
echo "$text_md           about : About info."
echo "$text_md         version : Info version program actual."
echo "$text_md         depends : Show depends."
echo "$text_md      config-eng : config example with comments in english."
echo "$text_md      config-spa : config example with comments in spanish."
echo "$text_md examples-config : Show configs examples."
echo "$text_md"
echo "$title_md         [ Show help ]"
echo "$text_md"
echo "$text_md        all-help : Show help in spanish and in english."
echo "$text_md            info : Show group options."
echo "$text_md   group-options : show group options."
echo "$text_md    mini-options : Show necesary options for firewall."
echo "$text_md    full-options : Show the full options."
echo "$text_md         options : Show the full options."
echo "$text_md          readme : Show help in english."
echo "$text_md           leeme : Show help in spanish."
echo "$text_md           notes : Show firewall notes."
echo "$text_md        examples : Show examples to launch."
echo "$text_md"
echo "$title_md [ firewall notes ]"
echo "$text_md"
echo "$text_md     Notes in fwiptables"
echo "$text_md"
echo "$title_md  [vpn]"
echo "$text_md"
echo "$text_md     Host [vpn] excepcionals hosts has conection allowed in firewall."
echo "$text_md"
echo "$title_md  [blacklist]"
echo "$text_md"
echo "$text_md     Host [blacklist] excepcionals hosts has conection dropped in firewall."
echo "$text_md"
echo "$title_md  [uid and/or gid excepcional]"
echo "$text_md"
echo "$text_md     User and/or group excepcional have output conection allowed in firewall."
echo "$text_md"
echo "$title_md  [iptables netftilter]"
echo "$text_md"
echo "$text_md     iptables-legacy   is    support for xtables."
echo "$text_md     iptables-nft      is    support for nftables."
echo "$text_md"
echo "$title_md  [client firewall needs in udp ports]"
echo "$text_md"
echo "$text_md     This port is necesary to update the date  : ntp"
echo "$text_md     This port is necesary to dhcp and get ip  : bootpc"
echo "$text_md     This port is necesary to domain resolver  : domain"
echo "$text_md"
echo "$title_md  [Ipv6 needs protocols]"
echo "$text_md"
echo "$text_md     Necesary protocol: ipv6-icmp."
echo "$text_md     Ipv6 works too with: ipv4 procotols."
echo "$text_md"
echo "$title_md  [License]"
echo "$text_md"
echo "$text_md  Download the latest version from sourceforge"
echo "$text_md  $url_web_latest"
echo "$text_md  $flicense"
echo "$text_md  $license_gpl"
echo "$text_md"
echo 
exit; fi
####
####
#### :rutina-final-readme:
##########    english: leeme: the help option in spanish      ##########
##########    spanish: leeme: la opcion de ayuda en español   ##########
#### :rutina-inicial-leeme:
####
####
if   [ "$first_option" == "leeme" ]; then echo $give_cover
echo "$title_md $tab [ $first_option ] [ ayuda en español ] [ leeme md ] || ||"
echo "$text_md"
echo "$brake_md"
$cmd_binary intro
echo "$text_md"
echo "$brake_md"
$cmd_binary options
echo "$text_md"
echo "$brake_md"
echo "$title_md         [ Todas las opciones por grupos ]  [ Opciones una a una en cada grupo ]"
echo "$brake_md"
echo "$text_md"
echo "$title_md [ Lanza interfaz ]."
echo "$text_md"
echo "$text_md         txt O -txt O -t : Salida a linea de texto."
echo "$text_md         cli O -cli O -c : Salida a menu de texto."
echo "$text_md         gui O -gui O -g : Salida a ventana grafica."
echo "$text_md         log O -log O -l : Salida a archivo log."
echo "$text_md         web O -web O -w : Salida a navegador web de texto"
echo "$text_md       help O -help O -h : Salida con ayuda a formato de texto plano."
echo "$text_md       info O -info O -i : Salida con ayuda a formato de texto rst."
echo "$text_md       null O -null O -n : Salida al sunidero | sin salida visual."
echo "$text_md              tor O -tor : Ejecuta en tor, necesario daemon tor y comando torify."
echo "$text_md"
echo "$text_md            cli-menu O -cli-menu : modo texto with menus."
echo "$text_md            gui-menu O -gui-menu : Graficos con menus."
echo "$text_md         gui-shell O -shell-menu : Graficos con entorno de comandos."
echo "$text_md"
echo "$title_md [ Controla las reglas de iptables ]."
echo "$text_md"
echo "$text_md            stop : Para las reglas del firewall."
echo "$text_md        continue : Continua las reglas del firewall."
echo "$text_md           reset : Resetea las reglas del firewall."
echo "$text_md           names : Apodo a names."
echo "$text_md           names : Lista los archivos de firewall estandard."
echo "$text_md            show : Muestra las reglas del firewall estandard especificado." 
echo "$text_md            save : Guarda las reglas de firewall estandard especificado."
echo "$text_md            load : Reculpera firewall estandard especificado."
echo "$text_md          actual : Muestra el contenido del firewall estandard actual."
echo "$text_md"
echo "$title_md [ Lista las reglas de tablas de iptables ]."
echo "$text_md"
echo "$text_md               ls4 : similar a list-filter4." 
echo "$text_md               ls6 : similar a list-filter6."
echo "$text_md             list4 : similar a list-filter4." 
echo "$text_md             list6 : similar a list-filter6."
echo "$text_md            status : similar a list4 mas list6."
echo "$text_md           listnum : Lista las reglas de ipv4 de filtros en numeros."
echo "$text_md   list-forwardnum : Lista las reglas de ipv4 de filtros de reenvio en numeros."
echo "$text_md          list6num : Lista las reglas de ipv6 de filtros en numeros."
echo "$text_md  list-forward6num : Lista las reglas de ipv6 de filtros de reenvio en numeros."
echo "$text_md      list-forward : Lista las reglas de ipv4 de filtros de reenvio."
echo "$text_md     list-forward6 : Lista las reglas de ipv6 de filtros de reenvio."
echo "$text_md      list-filter4 : Lista las reglas de ipv4 de filtros iptables."
echo "$text_md      list-filter6 : Lista las reglas de ipv6 de filtros iptables."
echo "$text_md         list-nat4 : Lista las reglas de ipv4 de nat iptables."
echo "$text_md         list-nat6 : Lista las reglas de ipv6 de nat iptables."
echo "$text_md      list-mangle4 : Lista las reglas de ipv4 de mangle iptables."
echo "$text_md      list-mangle6 : Lista las reglas de ipv6 de mangle iptables."
echo "$text_md         list-raw4 : Lista las reglas de ipv4 de raw iptables."
echo "$text_md         list-raw6 : Lista las reglas de ipv6 de raw iptables."
echo "$text_md    list-security4 : lista las reglas de ip4 de security iptables."
echo "$text_md    list-security6 : Lista las reglas de ip6 de security iptables."
echo "$text_md     list-ebtables : Lista las reglas mac de ethernet."
echo "$text_md    list-arptables : Lista las reglas de arp arptables."
echo "$text_md"
echo "$title_md [ Reglas modificables de iptables ]."
echo "$text_md"
echo "$text_md        new-full-config : Crea una nueva configuracion.cfg en ingles."
echo "$text_md  nueva-completa-config : Crea una nueva configuracion.cfg en español."
echo "$text_md        new-mini-config : Crea una nueva basica configuracion.cfg en ingles."
echo "$text_md      nueva-mini-config : Crea una nueva basica configuracion.cfg en español."
echo "$text_md           regen-config : regenera wizard files y plantillas cfg ."
echo "$text_md            names-config : Lista los archivos de configuracion cfg ." 
echo "$text_md          modify-config : Edita una existente configuracion.cfg ."
echo "$text_md            show-config : Muestra una existente configuracion.cfg ."
echo "$text_md             del-config : Borra unaa existente configuracion.cfg ."
echo "$text_md"
echo "$title_md [ Lanza reglas de firewall iptables ]."
echo "$text_md"
echo "$text_md           eraserules : Borra las reglas de iptables de ipv4 y de ipv6."
echo "$text_md          wizard-full : Asistente y lanza completo cortafuegos."
echo "$text_md          wizard-mini : Asistente y lanza simple cortafuegos."
echo "$text_md               custom : lanza el cortafuegos especificando un archivo.cfg."
echo "$text_md             off-line : Lanza un desconectado cortafuegos de todo excepto localhost."
echo "$text_md        all-permisive : Lanza el cortafuegos muy permisivo."
echo "$brake_md"
echo "$text_md        games-shooter : Lanza el cortafuegos como cliente de juegos udp non-root."
echo "$text_md         game-wesnoth : Lanza el cortafuegos como cliente de juego de la batalla por wesnoth."
echo "$text_md        game-minetest : Lanza el cortafuegos como cliente de juego minecraft o minetest."
echo "$text_md         game-freeciv : Lanza el cortafuegos como cliente de juego freeciv."
echo "$text_md       game-widelands : Lanza el cortafuegos como cliente de juego widelands."
echo "$text_md           client-web : Lanza el cortafuegos como cliente web y ssh."
echo "$text_md       client-torrent : Lanza el cortafuegos como cliente web y ssh y torrent."
echo "$text_md           client-tor : Lanza el cortafuegos con navegacion con tor."
echo "$text_md           client-vpn : Lanza el cortafuegos como cliente web y ssh y vpn."
echo "$text_md         client-squid : Lanza un firewall como cliente squid."
echo "$text_md              lan-tor : Lanza el cortafuegos solo para navegar con tor."
echo "$text_md              lan-vpn : Lanza el cortafuegos solo para navegar con vpn."
echo "$brake_md"
echo "$text_md           shield-ssh : Lanza un firewall como servidor ssh con escudo maximo $config_shield_maxtries cada-hora/cada-ip."
echo "$brake_md"
echo "$text_md         _____Todos los servidores ssh configurados a maximo 12 intentos de acceso por ip/hora"
echo "$text_md           server-ssh : Lanza un firewall como servidor ssh."
echo "$text_md           server-web : Lanza el cortafuegos como servidor web y ssh."
echo "$text_md         server-samba : Lanza un cortafuegos como servidor y cliente samba y ssh."
echo "$text_md         server-print : Lanza un firewall como servidor ipp, printer y ssh."
echo "$text_md           server-ssh : Lanza un firewall como servidor ssh."
echo "$text_md          server-lamp : Lanza un firewall como servidor LAMP."
echo "$text_md           server-ftp : Lanza un firewall como servidor ftp."
echo "$text_md          server-news : Lanza un firewall como servidor news."
echo "$text_md          server-mail : Lanza un firewall como servidor mail."
echo "$text_md     server-teamspeak : Lanza un firewall como servidor teamspeak."
echo "$text_md        server-mumble : Lanza un firewall como servidor mumble."
echo "$text_md           server-sql : Lanza un firewall como servidor sql."
echo "$text_md      server-asterisk : Lanza un firewall como servidor asterisk."
echo "$text_md         server-squid : Lanza un firewall como servidor squid."
echo "$text_md"
echo "$title_md   [ Lista las conexiones abiertas ]."
echo "$text_md"
echo "$text_md      info-nodes : Lista las conexiones arp in lan."
echo "$text_md      info-proxy : Lista proxy del sistema."
echo "$text_md     info-listen : Lista sockets a la escucha del sistema."
echo "$text_md      info-route : Muestra los dispositivos de red y la tabla de rutas."
echo "$text_md     info-system : Muestra la informacion del sistema."
echo "$text_md        info-net : Muestra informacion de la red."
echo "$text_md             ip4 : Muestra informacion de la red ipv4."
echo "$text_md             ip6 : Muestra informacion de la red ipv6."
echo "$text_md              ss : Muestra las conexiones con comando ss."
echo "$text_md            lsof : Muestra las conexiones con command lsof."
echo "$text_md         netstat : Muestra las conexiones con comando netstat."
echo "$text_md     netstat-nat : Muestra las conexiones con comando netstat-nat."
echo "$text_md        web-cert : Obtiene un certificado ssl a una web con puerto https(443)."
echo "$text_md         tcpdump : Escuchar las conexiones ip."
echo "$text_md"
echo "$title_md         [ tool connect ]"
echo "$text_md"
echo "$text_md               iw-scan : lista ssid en wifi"
echo "$text_md               iw-info : Muestra a que wifi esta conectado"
echo "$text_md              wpa-save : Conecta a un ssid por primera vez"
echo "$text_md              wpa-load : Conecta a un ssid guardado"
echo "$text_md           dhcp-client : corre un cliente de dhcp"
echo "$text_md"
echo "$title_md   [ Herramienta de reglas ]."
echo "$text_md"
echo "$text_md         rule-del-num : Borra una regla por su numero"
echo "$text_md      rule-del-shield : Borra el escudo para ssh con maximo numero de intentos"
echo "$text_md      rule-add-shield : Añade el escudo para ssh con maximo numero de intentos"
echo "$text_md"
echo "$title_md [ Herramienta de ip forwading ]."
echo "$text_md"
echo "$text_md  ipforward-list : Muestra la configuracion del kernel sobre reenvios ip."
echo "$text_md    ipforward-on : Activa la configuracion del kernel sobre reenvios ip."
echo "$text_md   ipforward-off : Desactiva la configuracion del kernel sobre reenvios ip."
echo "$text_md"
echo "$title_md [ Herramienta de tunel ssh ]."
echo "$text_md"
echo "$text_md  sshd-tunnel-info : Muestra la configuracion del kernel sobre reenvios ip."
echo "$text_md    sshd-tunnel-on : Activa la configuracion del kernel sobre reenvios ip."
echo "$text_md   sshd-tunnel-off : Desactiva la configuracion del kernel sobre reenvios ip."
echo "$text_md"
echo "$title_md [ Herramienta tcp ]."
echo "$text_md"
echo "$text_md  tracetcp-ip4 : Traza ruta a una host con ipv4 tcp."
echo "$text_md  tracetcp-ip6 : Traza ruta a una host con ipv6 tcp."
echo "$text_md     speed-ip4 : Testea el ancho de banda con ipv4."
echo "$text_md     speed-ip6 : Testea el ancho de banda con ipv6."
echo "$text_md"
echo "$title_md [ Herramienta udp ]."
echo "$text_md"
echo "$text_md           host : Resuelve la ip de un host ."
echo "$text_md            dig : Resuelve la ip de un host ."
echo "$text_md      resolveip : Resuelve la ip de un host y viceversa."
echo "$text_md          geoip : Localiza una ip o host ."
echo "$text_md ntpdate-client : Actualiza la fecha desde un ntp server."
echo "$text_md"
echo "$title_md [ Herramienta icmp ]."
echo "$text_md"
echo "$text_md traceicmp-ip4 : Traza ruta a una host con ipv4 icmp."
echo "$text_md traceicmp-ip6 : Traza ruta a una host con ipv6 icmp."
echo "$text_md      ping-ip4 : Hace un ping a una host con ipv4 icmp."
echo "$text_md      ping-ip6 : Hace un ping a una host con ipv6 icmp."
echo "$text_md"
echo "$title_md [ Herramienta nmap ]."
echo "$text_md" 
echo "$text_md      nmap-tcp : Rastrea una host/mask por tcp protocolo."
echo "$text_md      nmap-syn : Rastrea una host/mask por syn socket."
echo "$text_md      nmap-fin : Rastrea una host/mask por fin socket."
echo "$text_md      nmap-udp : Rastrea una host/mask por udp protocolo."
echo "$text_md     nmap-ping : Rastrea una host/mask por ping udp."
echo "$text_md"
echo "$title_md [ Herramienta de autorizacion ]."
echo "$text_md"
echo "$text_md   sudofw-adduser : Permite autorizacion de usuarios elegidos."
echo "$text_md   sudofw-deluser : Borra la autorizacion otorgada."
echo "$text_md  sudofw-listuser : Lista autorizacion de usuarios elegidos."
echo "$text_md"
echo "$title_md [ Herramienta de juego ]."
echo "$text_md"
echo "$text_md   game-word    : Juega a descubrir una palabra aleatoria de cinco caracteres."
echo "$text_md   game-number  : Juega a descubrir un numero aleatorio de cinco digitos."
echo "$text_md   game-domain  : Descubre un dominio si es generico o si es de un pais."
echo "$text_md   game-hex  : convierte un numero hexadecimal en rgb ."
echo "$text_md   game-rgb  : convierte un numero rgb en hexadecimal ."
echo "$text_md"
echo "$title_md [ Herramienta de velocidad ]."
echo "$text_md"
echo "$text_md      free-ram : Libera la memoria ram innecesaria."
echo "$text_md     speed-ram : Muestra la velocidad de la memoria ram."
echo "$text_md    speed-disk : Muestra la velocidad de el disco duro raiz."
echo "$text_md     speed-glx : Muestra fotogramas por segundo con graficos mesa."
echo "$text_md"
echo "$title_md [ Herramienta de utilidad ]."
echo "$text_md"
echo "$text_md       weather : Muestra el tiempo en tu ciudad"
echo "$text_md        md5sum : Muestra la huella md5sum de un archivo"
echo "$text_md     radio-mp3 : connecta a un servidor mp3, mira preferences-read o preferences-modify."
echo "$text_md     gpg-notes : Escribre y reescribe notas con cifrado"
echo "$text_md"
echo "$title_md [ Herramienta de pdf ]"
echo "$text_md"
echo "$text_md        pdf-resize : Redimensiona la calidad de un pdf."
echo "$text_md         pdf-unite : Junta varios pdf en un pdf."
echo "$text_md       pdf-seprate : Separa un pdf en varios pdf."
echo "$text_md"
echo "$title_md [ Herramienta de radio ]"
echo "$text_md"
echo "$text_md         radio-mp3 : linnk to mp3 from internet."
echo "$text_md"
echo "$title_md [ Herramienta de maquina virtual ]."
echo "$text_md"
echo "$text_md       qemu-status : Estado de qemu"
echo "$text_md        qemu-start : Empieza una maquina virtual qemu"
echo "$text_md         qemu-stop : Para maquinas virtuales qemu"
echo "$text_md"
echo "$title_md [ Herramienta de instalacion ]."
echo "$text_md"
echo "$text_md        install : Instala este programa actual."
echo "$text_md        upgrade : Actualiza a la ultima estable version."
echo "$text_md    dev-upgrade : Actualiza a la ultima git version."
echo "$text_md  howto-upgrade : Indicacion para actualizar."
echo "$text_md      clean-tmp : borra archivos temporales de program."
echo "$text_md"
echo "$title_md [ Herramienta de lista de bloqueo ]."
echo "$text_md"
echo "$text_md  addblock-list : Lista de opciones para bloquear hosts peligrosas."
echo "$text_md    addblock-on : Escribe un /etc/hosts con bloqueo a hosts peligrosas."
echo "$text_md   addblock-off : Vuelve a /etc/hosts por defecto."
echo "$text_md"
echo "$title_md [ Herramienta de desarrollador ]."
echo "$text_md"
echo "$text_md    new-versions : Muestra las ultimas versiones."
echo "$text_md     dev-version : Muestra en enlace a la version de desarrollo."
echo "$text_md     dev-changes : Muestra los ultimos cambios."
echo "$text_md            code : Muestra el codigo fuente para una opcion."
echo "$text_md          md5sum : Muestra la suma md5 de un archivo"
echo "$text_md"
echo "$title_md [ Herramienta de computador ]."
echo "$text_md"
echo "$text_md         pc-halt : Apaga el computador."
echo "$text_md     pc-shutdown : Apaga el computador."
echo "$text_md       pc-reboot : Reinicia el computador."
echo "$text_md"
echo "$title_md [ Informacion del hardware ]."
echo "$text_md"
echo "$text_md          lpinfo : Muestra los dispositivos de impresora."
echo "$text_md           lsblk : Muestra los dispositivos de disco."
echo "$text_md           lsusb : Muestra los dispositivos de usb."
echo "$text_md           lscpu : Muestra los dispositivos cpu."
echo "$text_md           lsgpu : Muestra los dispositivos gpu."
echo "$text_md           lspci : Muestra los dispositivos pci."
echo "$text_md            lshw : Muestra los dispositivos de hardware."
echo "$text_md"
echo "$title_md [ Mostrar etc ]."
echo "$text_md"
echo "$text_md               hosts : Muestra /etc/hosts, hosts locales y hosts estaticos."
echo "$text_md          protocolos : Muestra /etc/protocols, nombres de protocolos."
echo "$text_md            services : Muestra /etc/services, nombres de puertos y servicios."
echo "$text_md         hosts.allow : Muestra /etc/hosts.allow, hosts permitidas en algunos propios servidores."
echo "$text_md          hosts.deny : Muestra /etc/hosts.deny, hosts denegadas en algunos propios servidores."
echo "$text_md         resolv.conf : Muestra /etc/resolv.conf, este es el dns configurado."
echo "$text_md    preferences-read : Muestra muestra variables por defecto en fwiptables."
echo "$text_md  preferences-modify : Modifica variables por defecto en fwiptables."
echo "$text_md"
echo "$title_md [ Mostrar log ]."
echo "$text_md"
echo "$text_md        filelog : Muestra los volcados con -log ."
echo "$text_md        sentlog : alias a filelog ."
echo "$text_md        autolog : Muestra las cabeceras de fwiptables lanzados."
echo "$text_md        log-ssh : Busca los logs de sshd en /var/log ."
echo "$text_md     log-search : Busca los logs dando un patron para /var/log ."
echo "$text_md"
echo "$title_md [ Mostrar acerca ]."
echo "$text_md"
echo "$text_md           About : Acerca de."
echo "$text_md         version : Informacion de la actual version."
echo "$text_md         Depends : Muestra las dependencias." 
echo "$text_md    new-versions : Muestra las ultimas versiones."
echo "$text_md      config-eng : Ejemplo de custom config con comentarios en ingles."
echo "$text_md      config-spa : Ejemplo de custom config con comentarios en castellano."
echo "$text_md examples-config : Muestra ejemplos de configuraciones"
echo "$text_md"
echo "$title_md [ Mostrar ayuda ]."
echo "$text_md"
echo "$text_md        all-help : Muestra la ayuda en español y en ingles."
echo "$text_md            info : Muestra las opciones de grupo."
echo "$text_md   group-options : Muestra las opciones de grupo."
echo "$text_md    mini-options : Muestra las opciones necesarias."
echo "$text_md    full-options : Muestra las opciones."
echo "$text_md         options : Muestra las opciones."
echo "$text_md          readme : Muestra la ayuda en ingles."
echo "$text_md           leeme : Muestra la ayuda en español."
echo "$text_md           notes : Muestra notas de Fran firewall."
echo "$text_md        examples : Muestra ejemplos para lanzar."
echo "$text_md"
echo "$title_md $tab Notas de firewall"
echo "$text_md"
echo "$text_md"
echo "$title_md [vpn]."
echo "$text_md"
echo "$text_md     Host [vpn] excepcionales tienen conexion permitida en el firewall."
echo "$text_md"
echo "$title_md [blacklist]."
echo "$text_md"
echo "$text_md     Host [blacklist] excepcionales tienen conexion denegada en el firewall."
echo "$text_md"
echo "$title_md [uid y/o gid excepcional]."
echo "$text_md"
echo "$text_md     Usuario y/o grupo excepcional tienen conexion de salida permitida en el firewall."
echo "$text_md"
echo "$title_md [iptables netftilter]."
echo "$text_md"
echo "$text_md     iptables-legacy   es    soporte para xtables."
echo "$text_md     iptables-nft      es    soporte para nftables."
echo "$text_md"
echo "$title_md [Puertos cliente udp necesarios]."
echo "$text_md"
echo "$text_md     necesario para actualizar la fecha :   ntp ."
echo "$text_md     necesario para dhcp y conseguir ip :   bootpc . "
echo "$text_md     necesario para resolver dominios   :   domain ."
echo "$text_md"
echo "$title_md [Protocolos necesarios para ipv6]."
echo "$text_md"
echo "$text_md     Necesario protocolo: ipv6-icmp."
echo "$text_md     Ipv6 funciona tambien con: ipv4 procolos."
echo "$text_md"
echo "$title_md [Licencia]."
echo "$text_md"
echo "$text_md  Descarga la ultima version desde la web de sourceforge."
echo "$text_md  $url_web_latest"
echo "$text_md  $flicense"
echo "$text_md  $license_gpl"
echo "$text_md"
echo 
exit; fi
####
####
#### :rutina-final-leeme:
############################       english: default: without other valid options
############################	   spanish: default: sin otra valida opcion
####
####
if [ "$launch_firewall" != "yes" ] ; then
echo "### ### [ fail ] [ Option: $first_option ] ### [ it is not valid option. ]  ###  [ Choose a one valid option ... ] ###" ;
$cmd_binary $default_security ;
exit ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####           Knowed now sure that:         launch_firewall="yes"                              ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules ..                                                          ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall with designed previous             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema con diseño previo             ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
########################################     english: ipv4 iptables all-permisive:
########################################     spanish: ipv4 iptables todo permisivo
#### :rutina-inicial-code-allpermisive:
####
####
#### legacy ip4
####
####
if [ "$type_firewall" == "all-permisive" ]; then $cmd_binary eraserules &> /dev/null ; 
####
####
#### english: legacy ipv4 127.0.0.1 acept and the others legacy ipv4 accept too
#### spanish: legacy ipv4 127.0.0.1 acepta y los otros legacy ipv4 acepta tambien
####
####
$allow_legacy  $command_iptables_legacy -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy  $command_iptables_legacy -A INPUT \
$input_state  -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_legacy  $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy  $command_iptables_legacy -A OUTPUT \
-j ACCEPT \
-m comment --comment "all output" &> /dev/null
$allow_legacy  $command_iptables_legacy -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
#### english: nft ipv4 127.0.0.1 acept and the others nft ipv4 accept too
#### spanish: nft ipv4 127.0.0.1 acepta y los otros nft ipv4 acepta tambien
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
-m state --state NEW,RELATED,ESTABLISHED -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT \
-j ACCEPT \
-m comment --comment "all output" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
########################################     english: ipv6 iptables all-permisive:
########################################     spanish: ipv6 iptables todo permisivo
####
####
#### english: legacy ipv6 127.0.0.1 acept and the others legacy ipv6 accept too
#### spanish: legacy ipv6 127.0.0.1 acepta y los otros legacy ipv6 acepta tambien
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT  \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT \
-m state --state NEW,RELATED,ESTABLISHED -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT \
-j ACCEPT \
-m comment --comment "all otuput" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
#### english: nft ipv6 127.0.0.1 acept and the others nft ipv6 accept too
#### spanish: nft ipv6 127.0.0.1 acepta y los otros nft ipv6 acepta tambien
####
####
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
-m state --state NEW,RELATED,ESTABLISHED -j ACCEPT \
-m comment --comment "state input" &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A OUTPUT  \
-j ACCEPT \
-m comment --comment "all output" &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A FORWARD \
-j ACCEPT \
-m comment --comment "all forward" &> /dev/null
####
####
#### english: ipv6-icmp accept in legacy and accept in nft
#### spanish: ipv6-icmp acepta en legacy y acepta en nft
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
####
####
#### english: close with drop legacy and close with drop nft
#### spanish: cierra con drop legacy y cierra con drop nft
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
$allow_legacy $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-allpermisive:
########################################     english: ipv4 iptables off-line:
########################################     spanish: ipv4 iptables desconectado
#### :rutina-inicial-code-off-line:
####
####
#### legacy ip4
####
####
if [ "$type_firewall" == "off-line" ];  then $cmd_binary eraserules &> /dev/null ;
####
####
#### english: legacy ipv4 127.0.0.1 acept
#### spanish: legacy ipv4 127.0.0.1 acepta
####
####
$allow_legacy $command_iptables_legacy -A INPUT  \
-s $config_ip4_localhost -d $config_ip4_localhost    -j ACCEPT \
-m comment --comment "host localhost"  &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy ipv4 127.0.0.1 acept
#### spanish: nft ipv4 127.0.0.1 acepta
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
########################################     english: ipv6 iptables off-line
########################################     spanish: ipv6 iptables desconectado
####
####
#### english: legacy ipv6 127.0.0.1 acept
#### spanish: legacy ipv6 127.0.0.1 acepta
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT  \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: nft ipv6 127.0.0.1 acept
#### spanish: nft ipv6 127.0.0.1 acepta
####
####
$allow_nft $command_ip6tables_nft -A INPUT  \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
########################################     english: close in off-line
########################################     spanish: cierra en off-line
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
ç-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####  
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-off-line:
########################################     english: ipv4 iptables shield-ssh:
########################################     spanish: ipv4 iptables shield-ssh:
#### :rutina-inicial-code-shield-ssh:
####
####
if [ "$type_firewall" == "shield-ssh" ];  then $cmd_binary eraserules &> /dev/null ;
####
####
#### loopback localhost legacy ip4
####
####
$allow_legacy $command_iptables_legacy -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv4
#### escudo ssh legacy ipv4 
####
####
$allow_shield_maxtries $allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv4
#### log servidor legacy ipv4
####
#### 
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null &> /dev/null
####
####
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv4
#### reglas de filtros legacy ipv4 
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp"&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
#### loopback localhost nft ip4
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv4
#### escudo ssh nft ipv4 
####
####
$allow_shield_maxtries $allow_nft  $allow_ipv4  $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports ssh -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft $allow_ipv4  $command_iptables_nft -A INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server nft ipv4
#### log servidor nft ipv4
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv4
#### reglas de filtros nft ipv4 
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
########################################     english: ipv6 iptables 
########################################     spanish: ipv6 iptables 
####
####
#### loopback localhost legacy ip6
####
####
$allow_legacy  $command_ip6tables_legacy -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy  $command_ip6tables_legacy -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv6
#### escudo ssh legacy ipv6 
####
####
$allow_shield_maxtries $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports ssh -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv6
#### log servidor legacy ipv6 
####
####
#### $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv6
#### reglas de filtros legacy ipv6 
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
#### loopback localhost nft ip6
#### loopback localhost nft ipv6
####
####
$allow_nft $command_ip6tables_nft -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv6
#### escudo ssh nft ipv6 
####
####
$allow_shield_maxtries $allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft     $allow_ipv6  $command_ip6tables_nft -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server nft ipv6
#### log servidor nft ipv6
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv6
#### reglas de filtros nft ipv6 
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
########################################     english: close iptables 
########################################     spanish: cierra iptables 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny   \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny  \
-m comment --comment "close rule" &> /dev/null
$allow_nft  $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft  $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft  $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft  $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
$allow_nft  $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-shield-ssh:
########################################     english: ipv4 iptables legacy rules default predesignated
########################################     spanish: ipv4 iptables legacy reglas predesignadas por defecto
#### :rutina-inicial-code-rulesdefault:
####
####
if [ "$type_firewall" == "predesignated" ];  then $cmd_binary eraserules &> /dev/null ;
####
####
#### loopback localhost legacy ip4
####
####
$allow_legacy $command_iptables_legacy -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv4
#### escudo ssh legacy ipv4 
####
####
$allow_shield_maxtries $allow_legacy $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent --set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy $allow_ipv4 $command_iptables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 --hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv4
#### log servidor legacy ipv4
####
#### 
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null &> /dev/null
####
####
#### $allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv4 without separate rules
#### reglas de filtros legacy ipv4 sin separar reglas
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp"&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
fi
####
####
####
#### filter rules legacy ipv4 with separte rules
#### reglas de filtros legacy ipv4 con separar reglas
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
for client_portudp in $(echo $client_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
for client_porttcp in $(echo $client_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp"&> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
####
fi
####
####
########################################     english: ipv4 iptables nft
########################################     spanish: ipv4 iptables nft
####
####
#### loopback localhost nft ip4
####
####
$allow_nft $command_iptables_nft -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv4
#### escudo ssh nft ipv4 
####
####
$allow_shield_maxtries $allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent --set --name "shield-tries" \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-m recent --name "shield-tries" --update --seconds 3600 --hitcount "$config_shield_maxtries" -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
#### 
####
#### log server nft ipv4
#### log servidor nft ipv4
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv4 with separate rules
#### reglas de filtros nft ipv4 with separate rules
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
fi
####
####
#### filter rules nft ipv4 without separate rules
#### reglas de filtros nft ipv4 without separate rules
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
####
for client_portudp in $(echo $client_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
####
for client_porttcp in $(echo $client_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
####
####
fi
####
####
########################################     english: ipv6 iptables legacy
########################################     spanish: ipv6 iptables legacy
####
####
#### loopback localhost legacy ip6
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh legacy ipv6
#### escudo ssh legacy ipv6 
####
####
$allow_shield_maxtries $allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server legacy ipv6
#### log servidor legacy ipv6 
####
####
#### $allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules legacy ipv6
#### reglas de filtros legacy ipv6 
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
fi
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
####
####
for clientport_udp in $(echo $client_port_udp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
for client_porttcp in $(echo $client_port_tcp | $command_sed 's/,/ /g');
do
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
fi
####
####
########################################     english: ipv6 iptables nft
########################################     spanish: ipv6 iptables nft
####
####
#### loopback localhost nft ip6
#### loopback localhost nft ipv6
####
####
$allow_nft $command_ip6tables_nft -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### shield ssh nft ipv6
#### escudo ssh nft ipv6 
####
####
$allow_shield_maxtries $allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports "$config_shield_port" -m state --state NEW -m recent \
--set --name shield-tries \
-m comment --comment "shield tries" &> /dev/null
$allow_shield_maxtries $allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-m recent --name shield-tries --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
####
####
#### log server nft ipv6
#### log servidor nft ipv6
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
#### -p udp -m multiport --dports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### $allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
#### -p udp -m multiport --sports $server_port_udp -j LOG \
#### -m comment --comment "logserver udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j LOG \
-m comment --comment "logserver tcp" &> /dev/null
####
####
#### filter rules nft ipv6
#### reglas de filtros nft ipv6 
####
####
if [ "$allow_separate_rules" == "no" ]; then
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
fi
####
####
if [ "$allow_separate_rules" != "no" ]; then
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_portudp -j ACCEPT \
-m comment --comment "client udp" &> /dev/null
done
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_porttcp -j ACCEPT \
-m comment --comment "client tcp" &> /dev/null
done
####
####
for server_portudp in $(echo $server_port_udp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports $server_portudp -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
done
####
for server_porttcp in $(echo $server_port_tcp | $command_sed 's/,/ /g');
do
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_porttcp -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
done
####
fi
####
####
########################################     english: close iptables 
########################################     spanish: cierra iptables 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "nexthop ip6" &> /dev/null
####
####
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny   \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny  \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule"  &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit; fi
####
####
#### :rutina-final-code-rulesdefault:
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules CUSTOM                                                      ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall custom                             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema custom                        ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
#### :rutina-inicial-code-wizard:
####
####
##############################       english: overwrite system varibles with the config cfg
##############################       spanish: sobreescribe las variables con la config cfg
####
####
if [ "$first_option" == "custom" ]; then if [ -f $directory_config/$second_option ]; 
then source $directory_config/$second_option &> /dev/null ; else echo "$tab [ fail ] [ Config file not found ]"; exit ; fi ; fi
####
####
##############################      english: selective state of intput/oputut          #####################
##############################      spanish: estado selectivo de entrada/salida        #####################
####
####
if [ "$allow_input_state" == "$NULL" ]  ; then config_input_state="-m state --state $config_input_state"   ;
else config_input_state="$NULL"  ; fi
if [ "$allow_output_state" == "$NULL" ] ; then config_output_state="-m state --state $config_output_state" ;
else config_output_state="$NULL" ; fi
####
####
##############################      english: output_uid or output_gid for input established status        #####################
##############################      spanish: usuario o grupo para establecidos de entrada de estado        #####################
####
####
config_uid_gid=no
if [ "$allow_output_uid" == "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
if [ "$allow_output_gid" == "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          launching rules ..                                                                ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
############################       english: iptables rules ipv4  iptables-legacy
############################       spanish: reglas de iptables ipv4   iptables-legacy
####
####
#### english: erase all rules
#### spanish: borra todas las reglas
####
####
$cmd_binary eraserules &> /dev/null ; 
####
####
#######################################        english: ebtables mac rules
#######################################        spanish: ebtables mac rules
####
####
$allow_mac_whitelist $command_ebtables -A INPUT  -s $config_mac_whitelist  -j ACCEPT \
-m comment --comment "mac whitelist" &> /dev/null
$allow_mac_whitelist $command_ebtables -A OUTPUT -d $config_mac_whitelist  -j ACCEPT \
-m comment --comment "mac whitelist" &> /dev/null
####
####
$allow_mac_blacklist $command_ebtables -A INPUT  -s $config_mac_blacklist  -j $config_close_deny \
-m comment --comment "mac blacklist"  &> /dev/null
$allow_mac_blacklist $command_ebtables -A OUTPUT -d $config_mac_blacklist  -j $config_close_deny \
-m comment --comment "mac blacklist" &> /dev/null
####
####
#######################################        english: Accept  localhost rules
#######################################        spanish: aceptar reglas localhost
####
####
$allow_legacy $command_iptables_legacy -A INPUT  -s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
$allow_legacy $command_ip6tables_legacy -A INPUT  -s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
$allow_nft $command_iptables_nft -A INPUT  -s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -s $config_ip4_localhost -d $config_ip4_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
$allow_nft $command_ip6tables_nft -A INPUT  -s $config_ip6_localhost -d $config_ip6_localhost   -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
####################################### english: rules for max tries for ssh
####################################### spanish: reglas for max ties for ssh
####
####
if [ "$allow_shield_maxtries" == "" ]; then $nada
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
$allow_nft  $allow_ipv4  $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dport $config_shield_port -m state --state NEW -m recent \
--set --name count-tries-ssh \
-m comment --comment "shield tries" &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
$allow_nft     $allow_ipv6  $command_ip6tables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_shield_maxtries -j $config_close_deny \
-m comment --comment "shield tries" &> /dev/null
fi
####
####
#######################################        english: limit bandwidth in kb/s
#######################################        spanish: limitar ancho de banda en kb/s
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
####
####
$allow_ipv4 $allow_legacy $allow_input_bandwidth $command_iptables_legacy     -A  INPUT \
-m hashlimit --hashlimit-above   "$config_input_bandwidth"kb/sec \
--hashlimit-name maxinputlegacy  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_bandwidth $command_iptables_legacy    -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip --hashlimit-name maxoutputlegacy -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_bandwidth $command_iptables_nft           -A INPUT \
-m hashlimit    --hashlimit-above "$config_input_bandwidth"kb/sec  \
--hashlimit-name maxinputnft  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_bandwidth $command_iptables_nft          -A OUTPUT \
-m hashlimit  --hashlimit-above "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip  --hashlimit-name maxoutputnft -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
#######################################        english: ipv6 bandwidth
#######################################        spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_bandwidth $command_ip6tables_legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_bandwidth $command_ip6tables_legacy -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_bandwidth $command_ip6tables_nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_bandwidth $command_ip6tables_nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j $config_close_deny \
-m comment --comment "bandwidth kb/s"  &> /dev/null
####
####
#######################################        english: limit number of all connections
#######################################        spanish: limitar numero de conexiones totales
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
$allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect   -j $config_close_deny  \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_maxconnect $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
#### english: ipv6 bandwidth
#### spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect  -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_maxconnect $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j $config_close_deny \
-m comment --comment "max connect"  &> /dev/null
####
####
####################################### english: Drop rules for blacklist
####################################### spanish: reglas de denegar para lista negra
####
####
for one_blacklist in $(echo $config_net_blacklist | $command_sed 's/,/ /g')
####
####
#### ipv4
####
####
do
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A INPUT  \
-s $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A OUTPUT \
-d $one_blacklist -j $config_close_deny \
-m comment --comment "blacklist $one_blacklist" &> /dev/null
done
#### 
####
####################################### english: Accept rules for vpn
####################################### spanish: reglas de aceptar para vpn
####
####
for one_vpn in $(echo $config_net_vpn | $command_sed 's/,/ /g') 
#### ipv4
####
do
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  INPUT  \
-s $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  OUTPUT \
-d $one_vpn -j ACCEPT \
-m comment --comment "vpn $one_vpn" &> /dev/null
done
####
####
####################################### english: rules to allow client ports with without separate rules
####################################### spanish: reglas para permitir puertos cliente without separate rules
####
####
if [ "$allow_separate_rules" == "no" ]; then 
####
####
####    CLIENT  UDP
####
#### ipv4 legacy udp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
#### 
#### ipv4 nft udp
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 legacy udp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 nft udp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
####    CLIENT  TCP
####
#### ipv4 legacy tcp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
#### 
#### ipv4 nft tcp
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 legacy tcp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 nft tcp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
fi
####
####
####################################### english: rules to allow client ports with with separate rules
####################################### spanish: reglas para permitir puertos cliente with separate rules
####
####
if [ "$allow_separate_rules" != "no" ]; then 
for one_udp in $(echo $client_udp | $command_sed 's/,/ /g') ;
do
####
####
####    CLIENT  UDP
####
#### ipv4 legacy udp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
#### 
#### ipv4 nft udp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft $allow_ipv4     $command_iptables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 legacy udp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
#### ipv6 nft udp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_udp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_udp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client udp"  &> /dev/null
####
####
done; fi
####
####
if [ "$allow_separate_rules" != "no" ]; then 
for one_tcp in $(echo $client_tcp | $command_sed 's/,/ /g') ;
do
####
####
####    CLIENT TCP
####
#### ipv4 legacy tcp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
#### 
#### ipv4 nft tcp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft $allow_ipv4     $command_iptables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv4_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 legacy tcp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
#### ipv6 nft tcp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv6_client -j ACCEPT \
-m comment --comment "client tcp"  &> /dev/null
####
####
done ; fi
####
####
####################################### english: rules to log servers
####################################### spanish: reglas para logear servers
####
####
#### ipv4
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
#### ipv6
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver tcp"  &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" \
-m comment --comment "logserver udp"  &> /dev/null
####
####
####################################### english: rules allow server ports
####################################### spanish: reglas para permitir puertos servidor 
####
####
#### ipv4 legacy
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
#### 
#### ipv4 nft
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
#### ipv6 legacy
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
#### ipv6 nft
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server udp" &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT \
-m comment --comment "server tcp" &> /dev/null
####
####
####################################### english: rules from input of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de entrada de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy -A INPUT  \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp resquest" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $config_uid_gid $command_iptables_legacy -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "state uid-gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols $command_iptables_legacy -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
####################################### english: rules from output of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de salida de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping  $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_uid $command_iptables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "state uid" &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_gid $command_iptables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "state gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols      $command_iptables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
####################################### english: ipv6 filter legacy rules input and output for ping, uid, gid and protocols
####################################### spanish: ipv6 filtros legacy reglas de entrada y salida para ping, uid, gid y protocolos
####
#### 
#### english: ipv6 filter legacy rules input 
#### spanish: ipv6 filtros de legacy reglas de entrada
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping      $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping    $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $config_uid_gid $command_ip6tables_legacy -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "state uid-gid" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
#### english: ipv6 filter legacy rules output
#### spanish: ipv6 filtros legacy reglas de salida
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping  $command_ip6tables_legacy   -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping  $command_ip6tables_legacy -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_uid $command_ip6tables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "state uid" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_gid $command_ip6tables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "state gid" &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $others_protocols | $command_sed 's/,/ /g') ;
do $allow_legacy6  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
############################       english: iptables rules ipv4  iptables-nft for ping, uid, gid and protocols
############################       spanish: reglas de iptables ipv4 iptables-nft para ping, uid, gid y protocolos
####
####
#### english: ipv4 filter nft rules input
#### spanish: ipv4 filter nft reglas de entrada
####
####
$allow_nft $allow_ipv4 $allow_output_ping     $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_nft $allow_ipv4 $config_uid_gid $command_iptables_nft -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "state uid-gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols       $command_iptables_nft -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
#### english: ipv4 filter nft rules output
#### spanish: ipv4 filter nft reglas de salida
####
####
$allow_nft $allow_ipv4 $allow_output_ping    $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping  $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_uid $command_iptables_nft   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "status uid" &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_gid $command_iptables_nft   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "status gid" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols      $command_iptables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
########## english: ipv6 filter nft rules input and output for ping, uid, gid and protocols
########## spanish: ipv6 filtros nft relgas de entrada y salida para ping, uid, gid y protocolos
####
####
#### ipv6 filter nft rules input
#### ipv6 filtros nft reglas d entrada
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "imcp request" &> /dev/null
####
####
$allow_nft $allow_ipv6 $config_uid_gid $command_ip6tables_nft -A INPUT \
-m state --state related,established -j ACCEPT \
-m comment --comment "status uid-gid" &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A INPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
#### english: ipv6 filter nft rules output
#### spanish: ipv6 filtros nft reglas de salida
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT \
-m comment --comment "icmp request" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT \
-m comment --comment "icmp reply" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_uid     $command_ip6tables_nft -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT \
-m comment --comment "status uid" &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_gid     $command_ip6tables_nft -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT \
-m comment --comment "status gid" &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT \
-m comment --comment "icmp nexthop" &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | $command_sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT \
-m comment --comment "other protocols" &> /dev/null
done
####
####
########################################## english: nat for ipv4 and ipv6
########################################## spanish: nat para ipv4 y ipv6
####
####
#### english: nat DELETED
#### spanish: borrado nat
####
####
#### $command_iptables_nft -t nat -F
#### $command_iptables_legacy -t nat -F
#### $command_ip6tables_nft -t nat -F
#### $command_ip6tables_legacy -t nat -F
####
####
#### english: do masquerade nat ip4 and ip6 ALLOW GATEWAY
#### spanish: hace nat masquerade ip4 y ip6 PERMITIR GATEWAY
####
####
$allow_nft    $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
$allow_legacy $allow_ipv4 $allow_gateway_ip4 $command_iptables_legacy -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A POSTROUTING -j MASQUERADE \
-m comment --comment "ip gateway" &>/dev/null
####
####
$allow_nft $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gateway"  &>/dev/null
$allow_legacy $allow_ipv4     $allow_gateway_ip4 $command_iptables_legacy -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gateway" &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gateway" &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A PREROUTING -j ACCEPT \
-m comment --comment "ip gatway" &>/dev/null
####
####
####
####
#### english: do DMZ nat ip4 and ip6 ALLOW GATEWAY SERVER IN LAN
#### spanish: hace nat DMZ ip4 y ip6 PERMITIR GATEWAY SERVER IN LAN
####
####
$allow_nft    $allow_ipv4    $allow_dmz_ip4 $command_iptables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4 \
-m comment --comment "ip dmz" &>/dev/null
$allow_legacy $allow_ipv4    $allow_dmz_ip4 $command_iptables_legacy -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4 \
-m comment --comment "ip dmz" &>/dev/null
####
####
$allow_nft $allow_ipv6    $allow_dmz_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip6 \
-m comment --comment "ip dmz" &>/dev/null
$allow_legacy $allow_ipv6 $allow_dmz_ip6 $command_ip6tables_legacy -t nat \
-A PERROUTING -j DNAT --to-destination $config_dmz_ip6 \
-m comment --comment "ip dmz" &>/dev/null
####
####
######################################## english: iptables ipv4 and ipv6 with forward rules ALLOW FORWARD
######################################## spanish: iptables ipv4 y ipv6 con reglas de reenvio PERMITIR FORWARD
####
####
#### english: deactive for default with forward or without forward
#### spanish: desactiva por defecto con reenvio o sin reenvio
####
####
$command_sysctl -w net.ipv4.conf.all.forwarding=0 &> /dev/null
$command_sysctl -w net.ipv6.conf.all.forwarding=0 &> /dev/null
####
####
####   Active when there is forward
$ipv4 $allow_forward $command_sysctl -w net.ipv4.conf.all.forwarding=1 &> /dev/null
$ipv6 $allow_forward $command_sysctl -w net.ipv6.conf.all.forwarding=1 &> /dev/null
####
####
####   ipv4 filter legacy rules forward
$allow_legacy $allow_forward_ip4 $command_iptables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter legacy rules forward
$allow_legacy $allow_forward_ip6 $command_ip6tables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv4 filter nft rules forward
$allow_nft $allow_forward_ip4 $command_iptables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter nft rules forward
$allow_nft $allow_forward_ip6 $command_ip6tables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
#######################################       iptables ipv4 and ipv6 closed with drop input, and drop forward, and drop output rules
#######################################       iptables ipv4 y ipv6 cierran la entrada, reemvio y salida con reglas de dropeo
####
####
#### ipv4 drop rules iptables-legacy
$allow_legacy $command_iptables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### ipv6 drop rules iptables-legacy
$allow_legacy $command_ip6tables_legacy -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### ipv4 drop rules iptables-nft
$allow_nft $command_iptables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
#### ipv6 drop rules iptables-nft
$allow_nft $command_ip6tables_nft -A INPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
########################################       english: iptables ipv4 and ipv6 with variable input_all
########################################       english: iptables ipv4 y ipv6 con variable input_all
####
####
#### english: nft INPUT deleted
#### spanish: nft INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F INPUT  &> /dev/null
####
####
#### english: legacy INPUT deleted
#### spanish: legacy INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F INPUT  &> /dev/null
####
####
#### english: nft INPUT 127.0.0.1 accept
#### spanish: nft INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy INPUT 127.0.0.1 accept
#### spanish: legacy INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "close rule" &> /dev/null
####
####
#### english: legacy4 INPUT  limit bandwidth
#### spanish: legacy6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_bandwidth iptables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_bandwidth ip6tables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
####
####
#### english: nft4 INPUT limit bandwidth
#### spanish: nft6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_bandwidth iptables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_bandwidth ip6tables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j $config_close_deny \
-m comment --comment "input-bandwidth kb/s" &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j $config_close_deny \
-m comment --comment "input maxconnect"  &> /dev/null
####
####
#### english: nft INPUT ACCEPT all or input_state
#### spanish: nft INPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT \
-m comment --comment "input state"  &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_ipv4 $command_iptables_nft -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
####
####
########################################       english: iptables ipv4 and ipv6 with variable output_all
########################################       english: iptables ipv4 y ipv6 con variable output_all
####
####
#### english: nft OUTPUT deleted
#### spanish: nft OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F OUTPUT  &> /dev/null
####
####
#### english: legacy OUTPUT deleted
#### spanish: legacy OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F OUTPUT  &> /dev/null
####
####
#### english: nft OUTPUT 127.0.0.1 accept
#### spanish: nft OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy OUTPUT 127.0.0.1 accept
#### spanish: legacy OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A OUTPUT \
-s $config_ip4_localhost -d $config_ip4_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
-s $config_ip6_localhost -d $config_ip6_localhost  -j ACCEPT \
-m comment --comment "host localhost" &> /dev/null
####
####
#### english: legacy4 OUTPUT  limit bandwidth
#### spanish: legacy6 OUTPUT limita ancho de banda
####
#### 
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_bandwidth iptables-legacy -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_bandwidth ip6tables-legacy -A  OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
####
####
#### english: nft4 OUTPUT limit bandwidth
#### spanish: nft6 OUTPUT limita ancho de banda
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_bandwidth iptables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_bandwidth ip6tables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j $config_close_deny \
-m comment --comment "output-bandwidth kb/s" &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_maxconnect  $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_maxconnect  $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j $config_close_deny \
-m comment --comment "output maxconnect" &> /dev/null
####
####
#### english: nft OUTPUT ACCEPT all or input_state
#### spanish: nft OUTPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter  -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
$input_state -j ACCEPT \
-m comment --comment "input state" &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy  -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT  -j $config_close_deny \
-m comment --comment "close rule" &> /dev/null
####
####
########################################       english: show text when active custom rules
########################################       spanish: muestra texto cuando activas las custom reglas
####
####  
####
if [ -f "$directory_config/$second_option" ]; then $cmd_binary reset &> /dev/null ;
echo "$duo_md [  ok  ] [ Launched: firewall ] [ Type: $type_firewall ] [ Name: $name_firewall ]"
exit ; else $nada ; fi
####
####
#### :rutina-final-code-wizard:
#######################
####     left script
#######################
####
####
#######################         english: End of script
#######################         spanish: Fin del script
####    
####
####    ### Git mini tutorial: with fwiptables.
####
####
####    # Download repository: tree methods with clone/pull/fetch https:// or ssh://
####
####    First time, download repository to folder user            :  git clone https://git.code.sf.net/p/f-iptables/code
####    Download updates from repository to folder user           :  git pull  https://f-iptables@git.code.sf.net/p/f-iptables/code
####    Recover repository from server repository to folder user  :  git fetch https://f-iptables@git.code.sf.net/p/f-iptables/code
####
####    # upload repository: update commit and push
####
####    Update files from local repository                        :  git commit -a 
####    Upload files to repository from local repository          :  git push ssh://f-iptables@git.code.sf.net/p/f-iptables/code
####
####
####    # Create repository local: with folder /var/git/repository.localhost
####
####    mkdir /var/git/repository.localhost
####    cd /var/git/repository.localhost
####    git init --bare
####    chmod user /var/git/repository.localhost -R
####    service ssh start or systemctl restart ssh
####
####
#######################
#######################
####
####
exit
