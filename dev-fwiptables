#!/bin/bash
####
####
#### File:        fwiptables
#### Description: Fran FireWall fwiptables Generator
#### Author:      Francisco Garcia <fwiptables@gmx.com>
#### Copyright:   (c) 2020-2022 Francisco Garcia <fwiptables@gmx.com>
####
#### This program is free software; you can redistribute it and/or modify
#### it under the terms of the GNU General Public License as published by
#### the Free Software Foundation; either version 2 of the License, or
#### (at your option) any later version.
####
#### This program is distributed in the hope that it will be useful,
#### but WITHOUT ANY WARRANTY; without even the implied warranty of
#### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#### GNU General Public License for more details.
####
#### You should have received a copy of the GNU General Public License along 
#### with this program; if not, write to the Free Software Foundation, Inc., 
#### 51 Franklin St, Fifth Floor, Boston MA 02110-1301 USA
####
####
####   #### english: necesary to find several PATH and auth xhost to root
####   #### spanish: necesario para encontrar varios PATH y autorizar xhost para root
####
####
####     #### english: whereis path     #### spanish: donde esta el path
directory_fiptables="/usr/bin" ;
####
####
####     #### english: program name     #### spanish: nombre de el programa
fwiptables="fwiptables" ;
####
####
####     #### english: launch profile         #### spanish: lanza profile
if [ -f /etc/profile ] ; then . /etc/profile ; fi
####
####     #### english: launch completion      #### spanish: lanza autocompletar
if [ -f /etc/bash_completion.d/$fwiptables ] ; then . /etc/bash_completion.d/$fwiptables ; fi
####
####
####     #### english: stablished the path    #### spanish: establece el path
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
####
####     #### english: add auth xhost for root    #### spanish: añade autorización xhost para root
####     #### code for add xhost to root for graphicall use
####
####
command_id="$(command -v id)" &> /dev/null
command_xhost="$(command -v xhost)" &> /dev/null
####
####
terminal_tty="$(tty | grep -i tty | tail -1)"
if [ "$terminal_tty" = "$NULL" ] ; then
if [ "$(logname)" = "$NULL" ] || [ "$(logname)" = "root" ]    ; then echo -n
else sudo -u "$(logname)" $command_xhost +SI:localuser:root &> /dev/null ; fi; fi
####
####
#### deprecated
## sudo -u "$(logname)" command_xhost +root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +INET:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +INET6:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +DNET:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +KRB:root@127.0.0.1 &> /dev/null
## sudo -u "$(logname)" command_xhost +NIS:root@127.0.0.1 &> /dev/null
####
####
################################################   english: begin the script
################################################   spanish: empieza el script
####
####
####   license
####   english: This program has gpl license GPL v2, this program is copyleft, it is free.
####   spanish: Este programa tiene licencia GPL v2, este programa es copyleft, esto es libre.
####
####   comments
####   english: The comments are in english language and spanish language
####   spanish: Los comentarios estan en idioma ingles y en idioma español
####
####
################################################   english: basic system variables
################################################   spanish: las variables basicas del sistema
####
####
####       #### english: for all predefined system firewall: EXCEPT custom, and wizards, and load
####       #### spanish: para todos los cortafuegos predefinidos del sistema: EXCEPTO custom, y wizards, y load
allow_legacy="no"                     ## fwiptables-default ## void or no
allow_nft=""                          ## fwiptables-default ## void or no
allow_ipv4=""                         ## fwiptables-default ## void or no
allow_ipv6=""                         ## fwiptables-default ## void or no
####       #### english: allow info HEADER in each option    
####       #### spanish: permitir informacion de CABECERA en cada opcion
allow_header_notice="no"                       ## fwiptables-default ## void or no
####       #### english: void to AUTOLOG one line from command launched
####       #### spanish: vacio para AUTOLOG del comando lanzado o no
allow_autolog=""                 ## fwiptables-default ## void or no
####       #### english: void to AUTOSAVE fwrecover or no 
####       #### spanish: AUTOGUARDAR fwrecover o no
allow_autosave="no"                 ## fwiptables-default ## void or no
####       #### english: close from networking ping, trace.. with timeout in seconds 
####       #### spanish: cierra conexion de ping, trace.. con retardo en segundos    
server_waiting="7s"                    ## fwiptables-default ## choose seconds: 1..,9..30
####       #### english: PING server for default         
####       #### spanish: servidor de PING por defecto    
server_ping_ipv4="fast.com"           ## fwiptables-default ## default fast.com
server_ping_ipv6="fast.com"           ## fwiptables-default ## default fast.com
####       #### english: TRACEROUTE server for default         
####       #### spanish: servidor de TRACEROUTE por defecto    
server_traceroute_ipv4="fast.com"     ## fwiptables-default ## default fast.com
server_traceroute_ipv6="fast.com"     ## fwiptables-default ## default fast.com
####       #### english: iperf server for default for test net SPEED                 
####       #### spanish: servidor de iperf por defecto para testear VELOCIDAD de internet    
serverip_iperf_ipv4="ping.online.net"   ## fwiptables-default ## default ping.online.net
serverport_iperf_ipv4="5001"            ## fwiptables-default ## default 5201
serverip_iperf_ipv6="ping6.online.net"   ## fwiptables-default ## default ping.online.net
serverport_iperf_ipv6="5001"            ## fwiptables-default ## default 5201
####       #### english: zenity GRAPHIC DIMENSIONS        
####       #### spanish: DIMESIONES GRAFICAS de zenity  
graphic_dimension="--width=950 --height=650"   ## fwiptables-default ## default: "--width=950 --height=650"
####       #### english: RADIO URL streaming audio for default
####       #### spanish: direccion de RADIO DE INTERNET por defecto
radio_mp3="http://cadena100-cope-rrcast.flumotion.com/cope/cadena100.mp3" ;   ## fwiptables-default ## streaming url
radio_cadena100="http://cadena100-cope-rrcast.flumotion.com/cope/cadena100.mp3" ;   ## fwiptables-default ## streaming url
radio_cadenadial="http://playerservices.streamtheworld.com/api/livestream-redirect/CADENADIAL.mp3" ;   ## fwiptables-default ## streaming url
#### #### english: option for default    #### spanish: opcion por defecto
zero_dir="$(pwd)"
#### #### english: option for default    #### spanish: opcion por defecto
zero_option="$0"
#### #### english: variables to launch   #### spanish: variables a lanzar
first_option="$(echo $1 | sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
second_option="$(echo $2 | sed s/\\///g -)" ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
third_option="$(echo $3 | sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
quarter_option="$(echo $4 | sed s/\\///g -)"  ;                     
#### #### english: variable without "/"  #### spanish: variable sin "/"
genfiles="$zero_option regen-config"                        
#### #### english: whereis path          #### spanish: donde esta el path
fdescription="One Script in bash for iptables firewall"             
#### #### english: program description   #### spanish: descripcion del programa
fprogram="Fran FireWall FWiptables Generator" ;                     
#### #### english: program name          #### spanish: nombre del porgrama
fversion="2.23-Luisa" ;
#### #### english: program version       #### spanish: Version del programa
directory_config="/etc/fwiptables" ;                                
####  #### english: default variable version whithout update for config cfg
####  #### spanish: default version de variables sin actualizar por config cfg
config_variable_version="1" ;                                       
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultcfg="$directory_config/default-full-english.cfg"             
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultfullcfg_eng="$directory_config/default-full-english.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultfullcfg_spa="$directory_config/default-full-spanish.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultminicfg_eng="$directory_config/default-mini-english.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultminicfg_spa="$directory_config/default-mini-spanish.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
directory_fwrecover="/etc/fwrecover" ;                              
#### #### english: path to save firewall #### spanish: ruta de firewall guardado
#### #### english: look  #### spanish: apariencia
quad="####" cinco="#####" ; tab="     " ;  tabz="# _ _ _ _ _ _ _ "  ; rallica="_____" ; sinco=" || " ;
#### #### english: look .md .markdown  #### spanish: apariencia con .md .markdown
title_md="###  "; text_md="     "; brake_md="echo ---" ; center_in_md="<-"; center_out_md="->"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
cincuenta="##################################################" ;    
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
ralla="______________________"                                      
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_principal="$text_md || $tab || $fwiptables || Version $fversion || Use: $fwiptables options || $(date) ||"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_autolog="[ $fwiptables ] [ $fversion ] [ $(date) ] [ $first_option $second_option $third_option ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_waiting_cli="$tab [ cli ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_gui="$tab [ gui ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_log="$tab [ log ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_web="$tab [ web ] [ Wait several seconds.. ] [ With aprox several seconds ]"
head_waiting_rst="$tab [ rst ] [ Wait several seconds.. ] [ With aprox several seconds ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
header_ender="$tab"      
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
header_lineal="$tab   $tab  "                           
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
footer_lineal="$tab   $tab  "                            
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_cover="$fwiptables header"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_autosave="$fwiptables autosave"
#### #### english: echo void            #### spanish: impresion vacia
nada="$(echo -n)" ; 
#### #### several languages 
tab_lang_english=" eng "
tab_lang_spanish=" spa "
#### #### your language 
show_lang_english=""
show_lang_spanish="##"
#### #### english: without cli or gui   #### spanish: sin cli o gui
message_without_cli="$tab [ cli ] [ Without support for output cli for this option ]"
message_without_gui="$tab [ gui ] [ Without support for output gui for this option ]"
message_without_web="$tab [ web ] [ Without support for output web for this option ]"
message_without_rst="$tab [ rst ] [ Without support for output rst for this option ]"
####
####
####       #### english: zenity dimensions     #### spanish: dimensiones de zenity
####       #### english: close from graphicall with timeout in seconds #####
####       #### spanish: cierre desde graficos con retardo en segundos #####
close_graphicall="1"
####       #### english: message to close graphicall with timeout in seconds #####
####       #### spanish: mensage de cierre para graficos con retardo en segundos #####
mensage_timeout="Closing gui menu in $close_graphicall seconds"
####       #### english: autovariables        #### spanish: autovariables
launch_iptables="no" ;   #  autoconfigure with launch iptables rules
launch_custom="no";      #  autoconfigure with custom rules
####       #### english: [download web link]  #### spanish: [descarga del enlace web]
fweb_main="https://sourceforge.net/projects/f-iptables/"
fweb_files="https://sourceforge.net/projects/f-iptables/files/" ;
fweb_latest="https://sourceforge.net/projects/f-iptables/files/latest/download" ;
fweb_changes="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-changes?format=raw" ;
fweb_development="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-fwiptables?format=raw" ;
fweb_newfiles="https://sourceforge.net/projects/f-iptables/files" ;
fweb_tree="https://sourceforge.net/p/f-iptables/code/ci/master/tree/" ;
fweb_git="https://git.code.sf.net/p/f-iptables/code f-iptables-code" ;
####       #### english: [Program license] #### spanish: [Licencia del programa]
flicense="Copyleft, without warranty, gnu license GPL v2."
license_gpl="https://sourceforge.net/p/f-iptables/code/ci/master/tree/LICENSE.txt?format=raw"
fweb_domain="https://sourceforge.net/p/f-iptables/code/ci/master/tree/domain-list?format=raw"
####
####  english: pause, spanish: pausa
####  do_pause="read -p 'press [enter] to continue with the $fwiptables cli-menu'"
####
####
#### english: if wrong in whithout_option
#### spanish: si esta mal definidad definida whithout_option
####
####
default_security="mini-options"
####
####
############################## english: variables: variables to declare     ##############################
############################## spanish: variables: variables para declarar  ##############################
####
####
#### allow_legacy="" ; allow_nft="" ; allow_ipv4="" ; allow_ipv6="" ;
client_tcp="ssh,http,https" ; client_udp="domain,bootpc,ntp,https" ;
server_tcp="" ; server_udp="" ; 
logserver_tcp="no" ; logserver_udp="no" ;
logserver_prefix_input="fwlog-input::" ; 
logserver_prefix_output="fwlog-output::" ;
separate_port_rules="no" ; allow_maxtries_ssh="no"
allow_forward_ip4="no" ; allow_forward_ip6="no" ; 
allow_gateway_ip4="no" ; allow_gateway_ip6="no" ;
allow_dmz_ip4="no" ; allow_dmz_ip6="no" ;
allow_input_all="no" ; allow_output_all="no" ; 
allow_input_state="no" ; allow_output_state="no" ;
allow_input_bandwidth="no" ; allow_output_bandwidth="no" ;
allow_input_maxconnect="no" ; allow_output_maxconnect="no" ;
allow_input_ping="no" ; allow_output_ping="no" ;
allow_mac_whitelist="no" ; allow_mac_blacklist="no" ; 
allow_net_vpn="no" ; allow_net_blacklist="no" ;
allow_output_uid="no" ; allow_output_gid="no" ;
allow_others_protocols="no" ;
config_maxtries_ssh="20"
config_dmz_ip4="" ; config_dmz_ip6="" ;
config_input_state="new,related,stablished" ;
config_output_state="new,related,stablished" ;
config_input_bandwidth="12512" ; config_output_bandwidth="512" ;
config_input_maxconnect="72" ; config_output_maxconnect="72" ;
config_mac_whitelist="" ; config_mac_blacklist=""
config_net_vpn="wesnoth.org" ; config_net_blacklist="yandex.com" ;
config_output_uid="root" ; config_output_gid="root" ;
config_others_protocols="icmp,igmp" ;
net_ipv4_client="0/0" ; net_ipv4_server="0/0" ;
net_ipv6_client="::/0" ; net_ipv6_server="::/0" ;
####
####
##############################       english: Update variables             ################################### 
##############################       spanish: Actualiza variables          ###################################
####
####
####     #### english: launch /etc/default/fwiptables for update variables
####     #### spanish: lanza /etc/default/fwiptables para actualizar variables
####
####
if [ -f /etc/default/fwiptables ] ; then . /etc/default/fwiptables ; fi
####
####
#### english: if null option is void return default to mini-options
#### spanish: si la opcion por defecto esta vacia vuelve a mini-options
####
####
if [ "$whithout_option" = "$NULL" ] ; then whithout_option="$default_security" ; fi
####
####
############################## english: are you root: uid 0 ?                ############################## 
############################## spanish: eres admnistrador: identificador 0 ? ##############################
####
####
if [ "$(id -u)" = "0" ]; then $nada
else
echo $head_principal
echo "$cincuenta need to be root to work"
echo "$tab"
echo "$cincuenta  Be root to work $fwiptables"
echo $footer_lineal
exit ; fi
####
####
##############################       english: intro: show intro
##############################       spanish: intro: show intro
#### :rutina-inicial-intro:
####
####
if [ "$first_option" = "intro" ]; then $nada
echo  $text_md
echo  $text_md
echo "$title_md     Fran fwiptables intro. "
echo  $text_md
echo "$text_md       Use Fran Firewall to configure both iptables netfilter for linux.        "
echo "$text_md     Done with support in xtables and/or nftables and ipv4 and/or ipv6.         "
echo "$text_md     Done to running in command shell, cli text, and gui graphicall.            "
echo  $text_md
echo "$text_md       Create one firewall custom with one wizard and save it in standard file. "
echo "$text_md     Control the firewall with the standard iptables files for all tables.      "
echo "$text_md     Choose run iptables rules of one firewall with your own config files.      "
echo "$text_md     And too, use this firewall with some utilities for ipv4 and ipv6.          "
echo  $text_md
echo "$title_md     Fran fwiptables installer. "
echo  $text_md
cmp -s $0 $directory_fiptables/$fwiptables || echo "$text_md          $fwiptables $fversion   ||   Actually, this version is not installed  "
cmp -s $0 $directory_fiptables/$fwiptables && echo "$text_md          $fwiptables $fversion   ||   Actually, this version is installed  "
echo "$text_md     Install this version from this file     ||  TYPE:  ./fwiptables-$fversion install" 
echo "$text_md     Install lastest version from the web    ||  TYPE:  ./fwiptables-$fversion upgrade" 
echo "$text_md     Uninstall $fwiptables from the computer  ||  TYPE:  ./fwiptables-$fversion uninstall" 
echo  $text_md
echo "$title_md     Fran fwiptables project.  "
echo  $text_md
echo "$text_md     License gnu / gpl v2.                                                    "
echo "$text_md     See web page project in $fweb_main                                       "
echo  $text_md
echo  $text_md
exit; fi
####
####
#### :rutina-final-intro:
##############################      english: search programs: programs path           #####################
##############################      spanish: busca los programas: ruta de programas   #####################
#### :rutina-inicial-command:
####
####
command_bash="$(command -v bash | cut -d " " -f 1)"
command_iptables_legacy="$(command -v iptables-legacy | cut -d " " -f 1)"
command_iptables_nft="$(command -v iptables-nft | cut -d " " -f 1)"
command_ip6tables_legacy="$(command -v ip6tables-legacy | cut -d " " -f 1)"
command_ip6tables_nft="$(command -v ip6tables-nft | cut -d " " -f 1)"
command_arptables="$(command -v arptables |cut -d " " -f 1)"
command_ebtables="$(command -v ebtables | cut -d " " -f 1)"
command_fmt="$(command -v fmt | cut -d " " -f 1)"
command_date="$(command -v date | cut -d " " -f 1)"
command_uname="$(command -v uname | cut -d " " -f 1)"
command_sed="$(command -v sed | cut -d " " -f 1)"
command_xrandr="$(command -v xrandr | cut -d " " -f 1)"
command_mdp="$(command -v mdp | cut -d " " -f 1)"
command_txt2html="$(command -v txt2html | cut -d " " -f 1)"
command_m2r="$(command -v m2r | cut -d " " -f 1)"
command_ip="$(command -v ip | cut -d " " -f 1)"
command_curl="$(command -v curl | cut -d " " -f 1)"
command_host="$(command -v host | cut -d " " -f 1)"
command_dig="$(command -v dig | cut -d " " -f 1)"
command_resolveip="$(command -v resolveip | cut -d " " -f 1)"
command_geoiplookup="$(command -v geoiplookup | cut -d " " -f 1)"
command_route="$(command -v route | cut -d " " -f 1)"
command_ss="$(command -v ss| cut -d " " -f 1)"
command_netstat="$(command -v netstat | cut -d " " -f 1)"
command_netstat_nat="$(command -v netstat-nat | cut -d " " -f 1)"
command_lsof="$(command -v lsof | cut -d " " -f 1)"
command_sysctl="$(command -v sysctl | cut -d " " -f 1)"
command_tcpdump="$(command -v tcpdump | cut -d " " -f 1)"
command_arp="$(command -v arp | cut -d " " -f 1)"
command_arp_scan="$(command -v arp-scan | cut -d " " -f 1)"
command_ping="$(command -v ping | cut -d " " -f 1)"
command_traceroute="$(command -v traceroute | cut -d " " -f 1)"
command_dialog="$(command -v dialog | cut -d " " -f 1)"
command_zenity="$(command -v zenity | cut -d " " -f 1)"
command_lynx="$(command -v lynx | cut -d " " -f 1)"
command_links="$(command -v links | cut -d " " -f 1)"
command_links2="$(command -v links2 | cut -d " " -f 1)"
command_elinks="$(command -v elinks | cut -d " " -f 1)"
command_shc="$(command -v shc | cut -d " " -f 1)"
command_nmap="$(command -v nmap | cut -d " " -f 1)"
command_ntpdate="$(command -v ntpdate | cut -d " " -f 1)"
command_openssl="$(command -v openssl | cut -d " " -f 1)"
command_sntp="$(command -v sntp | cut -d "" -f 1)"
command_rdate="$(command -v rdate | cut -d "" -f 1)"
command_wget="$(command -v wget | cut -d " " -f 1)"
command_iperf="$(command -v iperf | cut -d " " -f 1)"
command_tee="$(command -v tee | cut -d " " -f 1)"
command_dd="$(command -v dd | cut -d " " -f 1)"
command_glxgears="$(command -v glxgears | cut -d " " -f 1)"
command_mpg123="$(command -v mpg123 | cut -d " " -f 1)"
command_mpg321="$(command -v mpg321 | cut -d " " -f 1)"
command_torify="$(command -v torify | cut -d " " -f 1)"
####
####
#### :rutina-final-command:
##############################      english: search favorite browser: favorite browser     #####################
##############################      spanish: busca preferido navegador: favorite browser   #####################
####
####
favorite_text_browser=""
if [ "$command_links"  = "$NULL" ] ; then $nada ; else favorite_text_browser="$command_links"   ; fi
if [ "$command_links2" = "$NULL" ] ; then $nada ; else favorite_text_browser="$command_links2"  ; fi
if [ "$command_lynx"   = "$NULL" ] ; then $nada ; else favorite_text_browser="$command_lynx"    ; fi
if [ "$command_elinks" = "$NULL" ] ; then $nada ; else favorite_text_browser="$command_elinks"  ; fi
####
####
##############################       english: uninstall:    $fwiptables           ###########################################
##############################       spanish: desinstalador: $fwiptables           ###########################################
#### :rutina-inicial-uninstall:
####
####
if [ "$first_option" = "uninstall" ] ; then $zero_option intro
echo "$title_md [ $first_option ] [ $fwiptables uninstaller ] [ uninstall.md ]"
echo "$text_md [ running ] [ $fwiptables uninstalling ]"
if  [ -f $directory_fiptables/$fwiptables ]; then
rm $directory_fiptables/$fwiptables &> /dev/null
rm $directory_fiptables/$fwiptables-cli-menu &> /dev/null
rm $directory_fiptables/$fwiptables-gui-menu &> /dev/null
rm $directory_fiptables/$fwiptables-gui-shell &> /dev/null
echo "$text_md [ status ] [ deleted binaries ]"
echo "$text_md [ ok ] [ $fwiptables uninstalled ]" ;
else echo "$text_md [ status ] [ $fwiptables is not installed ]"; fi
exit; fi
####
####
#### :rutina-final-uninstall:
##############################       english: install:    $fwiptables           ###########################################
##############################       spanish: instalador: $fwiptables           ###########################################
#### :rutina-inicial-install:
####
####
if [ "$first_option" = "install" ] ; then $zero_option intro
echo "$title_md [ $first_option ] [ $fwiptables installer ] [ install.md ]"
#### echo "$text_md [ status ] [ Install $fwiptables in $directory_fiptables ]"
#### 
#### 
####  english: copy the file
####  spanish: copia el archivo
#### 
#### 
echo "$text_md [ running ] [ $zero_option installing ]"
cp $zero_option $directory_fiptables/$fwiptables &> /dev/null
#### 
#### 
####  english: create /etc/bash_completion.d/$fwiptables and /etc/default/fwiptables
####  spanish: crea  /etc/bash_completion.d/$fwiptables y   /etc/default/fwiptables
#### 
#### 
####  english: Install new /etc/bash_completion/fwiptables
####  spanish: instala nuevo /etc/bash_completion/fwiptables
#### 
#### 
if [ -d "/etc/bash_completion.d" ]; then $nada ; else mkdir /etc/bash_completion.d/ &> /dev/null ; fi 
####
####
####  english: remove old file ##### spanish: borra el viejo archivo
####
####
rm /etc/bash_completion.d/$fwiptables &> /dev/null
rm /etc/bash_completion.d/$fwiptables.sh &> /dev/null
####
####
####  english: new file generated  ##### spanish: genera el nuevo archivo
####
####
echo "alias $fwiptables='sudo $directory_fiptables/$fwiptables'"       &>  /etc/bash_completion.d/$fwiptables
echo "complete -W 'output-interface firewall-rules firewall-list firewall-launch \
firewall-custom tool-sockets tool-forward tool-tcp tool-udp \
tool-icmp tool-nmap tool-sudo tool-game tool-system tool-install tool-blacklist tool-dev \
show-hardware show-etc show-log show-about \
show-help show-example' $fwiptables"  &>> /etc/bash_completion.d/$fwiptables
####
####
####  english: Install new /etc/profile.d/fwiptables
####  spanish: instala nuevo /etc/profile.d/fwiptables
#### 
#### 
if [ -d "/etc/profile.d" ]; then $nada ; else mkdir /etc/profile.d/ &> /dev/null ; fi 
####
####
####  english: remove old file 
####  spanish: borra el viejo archivo
####
####
rm /etc/profile.d/$fwiptables &> /dev/null
rm /etc/profile.d/$fwiptables.sh &> /dev/null
####
####
####  english: new file generated  
####  spanish: genera el nuevo archivo
####
####
cp /etc/bash_completion.d/$fwiptables /etc/profile.d/$fwiptables &> /dev/null
####
####  english: generate /etc/default/fwiptables
####  spanish: genera /etc/default/fwiptables
####
####
echo "$(head -200 $0 | grep -B 2 fwiptables-default)" &> /etc/default/fwiptables
#### 
#### 
####  english: probe sane dir /etc/bash_completion.d
####  spanish: comprueba directorio sano /etc/bash_completion.d
#### 
#### 
chmod ugo+rx /etc/bash_completion.d/$fwiptables &> /dev/null
chmod ugo+rx $directory_fiptables/$fwiptables &> /dev/null
$fwiptables regen-config &> /dev/null
####
####
####  english: generate fwiptables-gui-menu fwiptables-gui-shell and fwiptables-cli-menu in /usr/bin
####  spanish: genera fwiptables-gui-menu fwiptables-gui-shell y fwiptables-cli-menu en /usr/bin
####
####
echo "#!/bin/bash" &> $directory_fiptables/$fwiptables-gui-menu
echo "$command_xhost +SI:localuser:root" &>> $directory_fiptables/$fwiptables-gui-menu
echo "sudo $fwiptables gui-menu" &>> $directory_fiptables/$fwiptables-gui-menu
chmod ugo+rx $directory_fiptables/$fwiptables-gui-menu &> /dev/null
####
####
echo "#!/bin/bash" &> $directory_fiptables/$fwiptables-gui-shell
echo "$command_xhost +SI:localuser:root" &>> $directory_fiptables/$fwiptables-gui-shell
echo "sudo $fwiptables gui-shell" &>> $directory_fiptables/$fwiptables-gui-shell
chmod ugo+rx $directory_fiptables/$fwiptables-gui-shell &> /dev/null
####
####
echo "#!/bin/bash" &> $directory_fiptables/$fwiptables-cli-menu
echo "sudo $fwiptables cli-menu" &>> $directory_fiptables/$fwiptables-cli-menu
chmod ugo+rx $directory_fiptables/$fwiptables-cli-menu &> /dev/null
####
####
####  english: assing graphicall icons if desktop_directory
####  spanish: asigna iconos graficos si hay desktop_direcoty
####
####
desktop_directory="/usr/share/applications"
fwiptables_icon="/usr/share/zenity/zenity.png"
####
####
if [ -d "$desktop_directory" ] ;
then echo "$text_md [ status ] [ $fwiptables $fversion Regenering icon desktop ]"
echo "[Desktop Entry]" &> $desktop_directory/$fwiptables-cli-menu.desktop
echo "[Desktop Entry]" &> $desktop_directory/$fwiptables-gui-shell.desktop
echo "[Desktop Entry]" &> $desktop_directory/$fwiptables-gui-menu.desktop
echo "Terminal=false" &>> $desktop_directory/$fwiptables-cli-menu.desktop
echo "Terminal=false" &>> $desktop_directory/$fwiptables-gui-shell.desktop
echo "Terminal=false" &>> $desktop_directory/$fwiptables-gui-menu.desktop
echo "Type=Application" &>> $desktop_directory/$fwiptables-cli-menu.desktop
echo "Type=Application" &>> $desktop_directory/$fwiptables-gui-shell.desktop
echo "Type=Application" &>> $desktop_directory/$fwiptables-gui-menu.desktop
echo "Categories=System" &>> $desktop_directory/$fwiptables-cli-menu.desktop
echo "Categories=System" &>> $desktop_directory/$fwiptables-gui-shell.desktop
echo "Categories=System" &>> $desktop_directory/$fwiptables-gui-menu.desktop
echo "Icon=$fwiptables_icon" &>> $desktop_directory/$fwiptables-cli-menu.desktop
echo "Icon=$fwiptables_icon" &>> $desktop_directory/$fwiptables-gui-shell.desktop
echo "Icon=$fwiptables_icon" &>> $desktop_directory/$fwiptables-gui-menu.desktop
echo "Name=$fwiptables cli-menu" &>> $desktop_directory/$fwiptables-cli-menu.desktop
echo "Name=$fwiptables gui-menu" &>> $desktop_directory/$fwiptables-gui-menu.desktop
echo "Name=$fwiptables gui-shell" &>> $desktop_directory/$fwiptables-gui-shell.desktop
echo "Exec=$directory_fiptables/$fwiptables-cli-menu" &>> $desktop_directory/$fwiptables-cli-menu.desktop
echo "Exec=$directory_fiptables/$fwiptables-gui-menu" &>> $desktop_directory/$fwiptables-gui-menu.desktop
echo "Exec=$directory_fiptables/$fwiptables-gui-shell" &>> $desktop_directory/$fwiptables-gui-shell.desktop
chmod ugo+rx $desktop_directory/$fwiptables-* &>> /dev/null
else $nada ; fi
####
####
####   english: Show final status from installer
####   spanish: Muestra el estatus final desde el instalador
####
####
echo "$text_md [ status ] [ Configuration folder: ] [ /etc/fwiptables | /etc/fwrecover | /etc/default/fwiptables ]"
echo "$text_md [ status ] [ Completion files: ]     [ /etc/bash_completion.d/fwiptables | /etc/profile.d/fwiptables ]"
echo "$text_md [ status ] [ Menu entry desktop: ]   [ $fwiptables-cli-menu ] [ $fwiptables-gui-menu ] [ $fwiptables-gui-shell ]"
#### 
#### 
####  english: site of the file installed
####  spanish: Lugar del archivo instalado
#### 
#### 
echo "$text_md [ ok ] [ firewall installed ] [ $directory_fiptables/$fwiptables ]"
echo "$text_md [ ok ] [ Launch command $fwiptables to run /  type:  ] [ $fwiptables ]" 
exit; fi
####
####
#### :rutina-final-install:
##############################       english: upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: upgrade: actualiza en el archivo /usr/bin/fwiptables
#### :rutina-inicial-upgrade:
####
####
if [ "$first_option" = "upgrade" ]; then $give_cover
echo "$title_md [ $first_option ] [ upgrade from web ] [ upgrade.md ]"
echo "$text_md [ status ] [ upgrade $fwiptables at latest version from sourceforge.net web ]"
echo "$text_md [ status ] [ upgrade $fwiptables in $directory_fiptables ]"
case "$favorite_text_browser" in
"$NULL")echo "$text_md $tab [ notice ] [ Install a text web browser for upgrade fwiptables ]"; exit ;; esac
echo "$text_md [ status ] [ Upgrade The $fwiptables in file $directory_fiptables/$fwiptables with $favorite_text_browser command ]"
echo "$text_md [ status ] [ Downloading $fwiptables with the command $favorite_text_browser browser ]"
rm /tmp/$fwiptables &> /dev/null
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$text_md [ downloading ] [ $fweb_latest ]"
echo "$text_md [ status ] [ Waiting several seconds .. ]"
$favorite_text_browser -source $fweb_latest &> "/tmp/$fwiptables-installer" || echo "[ fail ] [ disconnected ]"
chmod ugo+rx /tmp/$fwiptables-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "/tmp/$fwiptables-installer" ]; then /tmp/$fwiptables-installer install; rm /tmp/$fwiptables-installer
else echo "$text_md [ fail ] [ Install fail ]"; fi
exit ; fi
####
####
#### :rutina-final-upgrade:
##############################       english: Notice Installer with intro      ###################################
##############################       spanish: noticia de Instalador con intro  ###################################
#### :rutina-inicial-notice:
####
####
cmp -s $0 $directory_fiptables/$fwiptables || . $0 intro
####
####
#### :rutina-final-notice:
##############################       temporal files for fwiptables       ##############################
##############################       archivos temporales de fwiptables      ##############################
####
####
#### english: temporal files
#### spanish: archivos temporales
####
####
mkdir -p /tmp/fwiptables-$fversion-data/ &> /dev/null
file_temporal_path="/tmp/fwiptables-$fversion-data/"
file_temporal_text="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option"
file_temporal_textfinal="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option-2"
file_temporal_gui="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option"
file_temporal_guifinal="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option-2"
file_output_log="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option"
file_output_filelog="/var/log/fwiptables-filelog"
file_output_autolog="/var/log/fwiptables-autolog"
####
####
##############################     ALIAS  simple y campus    ##############################
##############################     ALIAS simple y campo     ##############################
####
####
#### english: alias simple
####
####
if [ "$first_option" = "ls" ]; then first_option="list"; fi
if [ "$first_option" = "ls4" ]; then first_option="list"; fi
if [ "$first_option" = "ls6" ]; then first_option="list6"; fi
if [ "$first_option" = "$NULL" ]  ; then first_option="mini-options" ; fi
if [ "$first_option" = "filelog" ]; then first_option="sentlog"; fi
if [ "$first_option" = "radio" ]; then first_option="radio-mp3"; fi
if [ "$first_option" = "regen" ]; then first_option="regen-config"; fi
if [ "$first_option" = "list" ]  ; then first_option="txt" ; second_option="list" ; fi
if [ "$first_option" = "list6" ]  ; then first_option="txt" ; second_option="list6" ; fi
if [ "$first_option" = "cfg" ]; then first_option="names-config" ; fi
if [ "$first_option" = "cfg-custom" ]; then first_option="custom" ; fi
if [ "$first_option" = "list-fw" ]; then first_option="names"; fi
if [ "$first_option" = "ram-free" ]; then first_option="free-ram"; fi
if [ "$first_option" = "list-allrules" ]; then first_option="list-alltables"; fi
####
####
#### english:  alias firewall names 
####
####
if [ "$first_option" = "erase-rules" ] ; then first_option="eraserules" ; fi
if [ "$first_option" = "games-udp" ]; then first_option="games-shooter"; fi
if [ "$first_option" = "off-line" ] ; then first_option="offline" ; fi
if [ "$first_option" = "clientweb" ] ; then first_option="client-web" ; fi
if [ "$first_option" = "clientvpn" ] ; then first_option="client-vpn" ; fi
if [ "$first_option" = "gamesudp" ] ; then first_option="games-shooter" ; fi
if [ "$first_option" = "allpermisive" ] ; then first_option="all-permisive" ; fi
if [ "$first_option" = "torbrowser" ] ; then first_option="client-tor" ; fi
if [ "$first_option" = "tor-browser" ] ; then first_option="client-tor" ; fi
if [ "$first_option" = "onlyweb-tor" ] ; then first_option="lan-tor" ; fi
if [ "$first_option" = "serversamba" ] ; then first_option="server-samba" ; fi
if [ "$first_option" = "serverprint" ] ; then first_option="server-print" ; fi
if [ "$first_option" = "serverweb" ] ; then first_option="server-web" ; fi
if [ "$first_option" = "serverssh" ] ; then first_option="server-ssh" ; fi
if [ "$first_option" = "serverlamp" ] ; then first_option="server-lamp" ; fi
####
####
#### english:  alias -txt or -cli or -gui and more
####
####
if [ "$first_option" = "text" ] || [ "$first_option" = "-text" ] ; then first_option="-txt"; fi
if [ "$first_option" = "txt"  ] || [ "$first_option" = "-txt"  ] ; then first_option="-txt"; fi
if [ "$first_option" = "cli"  ] || [ "$first_option" = "-cli"  ] ; then first_option="-cli"; fi
if [ "$first_option" = "gui"  ] || [ "$first_option" = "-gui"  ] ; then first_option="-gui"; fi
if [ "$first_option" = "rst"  ] || [ "$first_option" = "-rst"  ] ; then first_option="-rst"; fi
if [ "$first_option" = "web"  ] || [ "$first_option" = "-web"  ] ; then first_option="-web"; fi
if [ "$first_option" = "tor"  ] || [ "$first_option" = "-tor"  ] ; then first_option="-tor"; fi
####
####
##############################     ALIAS CAMPUS
##############################     ALIAS CAMPUS
####
####
#### output txt:
####
####
if [ "$first_option" = "txt" ] || [ "$first_option" = "-txt" ]; then $nada
case "$second_option" in
cli-menu) first_option="cli-menu"   ;;
gui-menu) first_option="gui-menu"   ;;
gui-shell) first_option="gui-shell" ;;
"nueva-mini-config")  $fwiptables $second_option $third_option ;  exit ;;
"nueva-completa-config") $fwiptables $second_option $third_option ;  exit ;;
"new-mini-config") $fwiptables $second_option $third_option ;  exit ;;
"new-full-config") $fwiptables $second_option $third_option ;  exit ;;
"modify-config") $fwiptables $second_option $third_option ;  exit ;;
"modify-default") $fwiptables $second_option $third_option  ;  exit ;;
"ole-domain") $fwiptables ole-domain -txt ; exit ;; 
"ole-word") $fwiptables ole-word -txt ; exit ;;
"ole-number") $fwiptables ole-number -txt ; exit ;;
"colour-hex"|"colour-rgb") $fwiptables $second_option $third_option  ;  exit ;;
"blacklist-on") $fwiptables $second_option $third_option  ;  exit ;;
"list") $fwiptables list4-ip &> $file_temporal_text 
cat $file_temporal_text | grep -v Warning:  &> $file_temporal_textfinal
cat $file_temporal_textfinal ; exit ;;
"list6") $fwiptables list6-ip &> $file_temporal_text 
cat $file_temporal_text | grep -v Warning:  &> $file_temporal_textfinal
cat $file_temporal_textfinal ; exit ;;
*) $fwiptables $second_option $third_option &> $file_temporal_textfinal
cat $file_temporal_textfinal ; exit ;;
esac; fi
####
####
#### output cli:
####
####
if [ "$first_option" = "cli" ] || [ "$first_option" = "-cli" ]; then echo $head_waiting_cli
case "$second_option" in 
cli-menu) first_option="cli-menu"   ;;
gui-menu) first_option="gui-menu"   ;;
gui-shell) first_option="gui-shell" ;;
wizard-*) echo $message_without_cli ; $fwiptables $second_option $third_option ;  exit ;;
"nueva-mini-config")  $fwiptables $second_option $third_option ;  exit ;;
"nueva-completa-config") $fwiptables $second_option $third_option ;  exit ;;
"new-mini-config") $fwiptables $second_option $third_option ;  exit ;;
"new-full-config") $fwiptables $second_option $third_option ;  exit ;;
"modify-config") $fwiptables $second_option $third_option ;  exit ;;
"modify-default") $fwiptables $second_option $third_option  ;  exit ;;
# scan-*) echo $message_without_cli ; $fwiptables $second_option $third_option  ;  exit ;;
"radio") echo $message_without_cli ; $fwiptables $second_option $third_option ;  exit ;;
"ole-domain") $fwiptables ole-domain -cli ; exit ;;
"ole-word") $fwiptables ole-word -cli ; exit ;;
"ole-number") $fwiptables ole-number -cli ; exit ;;
"blacklist-on") echo $message_without_cli ; $fwiptables $second_option $third_option  ;  exit ;;
"log-search") 
pattern="$(dialog --stdout --title "type the pattern to search" --inputbox "example: sshd" 0 0)" 
clear; $fwiptables log-search $pattern ; exit ;; 
log-*) echo $message_without_cli ; $fwiptables $second_option $third_option ;  exit ;;
fw-*)  echo $message_without_cli ; $fwiptables $second_option $third_option  ;  exit ;;
*) dialog --title " CLI Output || $(date) " --msgbox "$($fwiptables -txt $second_option $third_option)" 0 0 ; clear ; exit ;;
####
####
esac ; fi
####
####
#### english: change the -gui and go to default output
#### spanish: cambia el -gui y va a salida por defecto
####
####
if [ "$first_option" = "gui" ] || [ "$first_option" = "-gui" ]; then $nada
case "$second_option" in 
cli-menu) first_option="cli-menu"   ;;
gui-menu) first_option="gui-menu"   ;;
gui-shell) first_option="gui-shell" ;;
esac ; fi
####
####
#### output log
####
####
if [ "$first_option" = "-log" ] || [ "$first_option" = "log" ] ; 
then first_option="-log" 
echo $head_waiting_log
$fwiptables $second_option $third_option &> $file_output_log
cat $file_output_log | grep -v Warning: &>> $file_output_filelog
echo "$tab [ ok ] \
[ Output $fwiptables $second_option $third_option sended to $file_output_filelog ] \
[ show: fwiptables filelog ]" ;
exit ; fi
####
####
#### output rst:
####
####
if [ "$first_option" = "-rst" ] || [ "$first_option" = "rst" ] ; then
if [ "$command_m2r" = "$NULL" ]; then echo [ fail ] [ install m2r command ]; exit; fi
if [ "$command_txt2html" = "$NULL" ]; then echo [ fail ] [ install txt2html command ]; exit; fi
echo $head_waiting_rst
case "$second_option" in
group-options);;
"help");;
"ayuda");;
"help-options");;
"all-help");;
"output-interface") ;;
firewall-*);;
tool-*) ;;
show-*) ;;
*) echo $message_without_rst ;  exit ;;
esac
fwiptables $second_option $third_option &> $file_temporal_text.1 ;
sed -e 's/^/ /' $file_temporal_text.1 &> $file_temporal_text.2  ;
$command_m2r --overwrite --dry-run --no-underscore-emphasis --disable-inline-math \
$file_temporal_text.2 | grep -iv "::"  &> $file_temporal_text.rst ;
cat $file_temporal_text.rst
exit ; fi
####
####
#### output web:
####
####
if [ "$first_option" = "-web" ] || [ "$first_option" = "web" ] ; then
if [ "$command_txt2html" = "$NULL" ]; then echo [ fail ] [ install txt2html command ]; exit; fi
if [ "$favorite_text_browser" = "$NULL" ]; then echo [ fail ] [ install one text browser ]; exit; fi
case "$second_option" in 
*-config) echo $message_without_web ; exit ;;
ole-*) echo $message_without_web ; exit ;;
colour-*) echo $message_without_web ; exit ;;
esac
echo $head_waiting_web
rm "$file_temporal_text"* &> /dev/null
$fwiptables $second_option $third_option &> $file_temporal_text.1 ;
sed -e 's/^/ /' $file_temporal_text.1 &> $file_temporal_text.2  ;
$command_txt2html --outfile $file_temporal_text.html $file_temporal_text.2 ;
$favorite_text_browser $file_temporal_text.html
exit ; fi
####
####
#### first_option tor
####
####
if [ "$first_option" = "tor"  ] || [ "$first_option" = "-tor"  ] ; then $nada
echo "$tab [ message ] [ to connect web is necessary tor configured and browser elinks or lynx ]"
torify -i $fwiptables $second_option $third_option ; exit ; fi
####
####
##############################     english: autolog:         ###################################
##############################     spanish: autoguardado     ###################################
#### :rutina-inicial-allow-autolog:
####
####
####   english: autolog  #### spanish: autoguardado
####
####
if [ "$first_option" != "header" ] ; then
if [ "$allow_autolog" = "no" ]   ; then echo $nada
else echo $head_autolog >> "$file_output_autolog" ; fi; fi
####
####
#### :rutina-final-allow-autolog:
##############################     english: allow header          ###################################
##############################     spanish: permite cabeceras     ###################################
#### :rutina-inicial-header:
####
####
#### english:  allow_header_notice  #### spanish: permitir cabecera
####
####
if [ "$first_option" = "header" ] ; then
############################  dont allow header notice, allow_header_notice="no"
if [ "$allow_header_notice" = "no" ]   ; then 
echo $head_principal ; exit 0
############################  allow header notice, allow_header_notice=""
else 
####  english: notice install iptables if necesary
####  spanish: noticia instala iptables en caso necesario
command_iptables_legacy="$(command -v iptables-legacy | cut -d " " -f 1)"
command_iptables_nft="$(command -v iptables-nft | cut -d " " -f 1)"
command_ip6tables_legacy="$(command -v ip6tables-legacy | cut -d " " -f 1)"
command_ip6tables_nft="$(command -v ip6tables-nft | cut -d " " -f 1)"
if [ "$command_iptables_legacy" = "$NULL" ]; then echo "install iptables-legacy"; fi
if [ "$command_ip6tables_legacy" = "$NULL" ]; then echo "install ip6tables-legacy"; fi
if [ "$command_iptables_nft" = "$NULL" ]; then echo "install iptables-nft"; fi
if [ "$command_ip6tables_nft" = "$NULL" ]; then echo "install ip6tables-nft"; fi
#### english: command default route ip  #### spanish: comando de ruta por defecto ip
command_ip="$(command -v ip | cut -d " " -f 1)"                                                
#### english: default route ipv4        #### english: routa por defecto ipv4
case "$NULL" in
"$command_ip") default_route_cuatro="" ;;
"$($command_ip -4 route show | grep -i default | head -1)") default_route_cuatro="" ;;
*) default_route_cuatro="$sinco Default route ip.v4 ||  $("$command_ip" -4 route show | grep -i default | head -1) " ;; esac
#### english: default route ipv6 #### english: routa por defecto ipv6
case "$NULL" in
"$command_ip") default_route_seis="" ;;
"$($command_ip -6 route show | grep -i default | head -1)") default_route_seis="" ;;
*) default_route_seis="$sinco Default route ip.v6 ||  $("$command_ip" -6 route show | grep -i default | head -1) " ;; esac
####       #### english: to know if there is mac rules #### spanish: saber si hay reglas mac
command_ebtables="$(command -v ebtables | cut -d " " -f 1)"
if [ "$command_ebtables" = "$NULL" ]; then rules_filter_ebtables="0" ; rules_nat_ebtables="0" ; 
else
rules_filter_ebtables="$($command_ebtables -L -t filter | grep -- "-j" | wc -l)"
rules_nat_ebtables="$($command_ebtables -L -t nat       | grep -- "-j" | wc -l)"
fi
####       #### english: to know if there is arptables rules #### spanish: saber si hay reglas arptables
command_arptables="$(command -v arptables | cut -d " " -f 1 )"
if [ "$command_arptables" = "$NULL" ]; then rules_arptables="0" ;
else rules_arptables="$($command_arptables -L | grep -- "-j" | wc -l)" ; fi
####
echo $head_principal
if [ "$default_route_cuatro" != "$NULL" ] ; then echo "$default_route_cuatro" ; fi
if [ "$default_route_seis" != "$NULL" ]   ; then echo "$default_route_seis"   ; fi
if [ "$rules_arptables" != "0" ]          ; then echo "$sinco Whith ebtables arp rules"        ; fi
if [ "$rules_filter_ebtables" != "0" ]    ; then echo "$sinco Whith ebtables filter mac rules" ; fi
if [ "$rules_nat_ebtables" != "0" ]       ; then echo "$sinco Whith ebtables nat mac rules"    ; fi
fi ; exit ; fi
####
####
#### :rutina-final-header:
##################################### english: regen-config: regen-config template wizard files       #####################################
##################################### spanish: regen-config: regen-configera template wizard archivos #####################################
#### :rutina-inicial-regen-config:
####
####
if [ "$first_option" = "regen-config" ]; then $nada
echo "$tab [ status]  [ regenerate template wizard and template cfg ]"
####
####
####  english: variables to prepare to gen files
####  spanish: variables para preparar para generar archivos
####
####
#### english: basic options in configuration file cfg
#### spanish: opciones basicas en configuracion de archivo cfg
####
####
var0=$(echo "$cinco $fprogram from $fwiptables version $fversion whith config_variable_version=2 " )
var1=$(echo "$cinco BEGIN NECESARY #" )
eng1=$(echo "$cinco  .......... BEGIN Necesary options .......... .......... #")
spa1=$(echo "$cinco INICIO .......... Opciones Necesarias .......... .......... #")
var2=$(echo "$cinco NETFILTER #" )
eng2=$(echo "$cinco the iptables firewall netfilter, choose one or two")
spa2=$(echo "$cinco el iptables firewall netfilter, elige uno o dos")
var3=$(echo "allow_legacy=no" )
eng3=$(echo "$cinco launch xtables, void to yes or type no")
spa3=$(echo "$cinco lanza xtables, vacio para si, o escribe no")
var4=$(echo "allow_nft=" ) 
eng4=$(echo "$cinco launch nftables, void to yes or type no")
spa4=$(echo "$cinco lanza nftables, vacio para si, o escribe no")
var5=$(echo "$cinco PROTOCOL IP #" )
eng5=$(echo "$cinco ip protocol, modify with void or no")
spa5=$(echo "$cinco procolo ip, modificar con vacio o no")
var6=$(echo "allow_ipv4=" )
eng6=$(echo "$cinco void to config firewall with ipv4 or no to dont configure ipv4")
spa6=$(echo "$cinco varcio para ejecutar el firewall con ipv4 o no para no")
var7=$(echo "allow_ipv6=" )
eng7=$(echo "$cinco void to config firewall with ipv6 or no to dont configure ipv6")
spa7=$(echo "$cinco varcio para ejecutar el firewall con ipv6 o no para no")
var8=$(echo "$cinco CLIENT PORTS #")
eng8=$(echo "$cinco Client ports, add with ',' and join ranges with ':'")
spa8=$(echo "$cinco puertos Cliente, añadir con ',' y poner rangos con ':' ")
var9=$(echo "client_tcp=http,https,ssh")
eng9=$(echo "$cinco tcp ports for client")
spa9=$(echo "$cinco puertos tcp para ser cliente")
var10=$(echo "client_udp=domain,bootpc,bootps,ntp,https")
eng10=$(echo "$cinco udp ports for client")
spa10=$(echo "$cinco puertos udp para ser cliente")
var11=$(echo "$cinco SERVER PORTS #" )
eng11=$(echo "$cinco Server ports, add with ',' and join ranges with ':'")
spa11=$(echo "$cinco Puertos Servidor, añadir con ',' y poner rangos con ':'")
var12=$(echo "server_tcp=ssh" )
eng12=$(echo "$cinco tcp ports for server")
spa12=$(echo "$cinco puertos tcp para servidor")
var13=$(echo "server_udp= ")
eng13=$(echo "$cinco udp ports for server")
spa13=$(echo "$cinco puertos udp para servidor")
var14=$(echo "$cinco LOG TO SERVER PORTS #" )
eng14=$(echo "$cinco Log to server ports, add with ',' and join ranges with ':'")
spa14=$(echo "$cinco logear para puertos de Servidor, añadir con ',' y poner rangos con ':'")
var15=$(echo "logserver_tcp= ")
eng15=$(echo "$cinco the tcp ports to log server")
spa15=$(echo "$cinco puertos tcp para logear servidor")
var16=$(echo "logserver_udp= ")
eng16=$(echo "$cinco the udp ports to log server")
spa16=$(echo "$cinco puertos udp para logear servidor")
var17=$(echo "$cinco LOG PREFIX TO SERVER #" )
eng17=$(echo "$cinco Log to server ports with prefix")
spa17=$(echo "$cinco logear para puertos de servidor con prefijo")
var18=$(echo "logserver_prefix_input=fwlog-input::")
eng18=$(echo "$cinco type input prefix for logserver")
spa18=$(echo "$cinco especifica prefijo de entrada para logserver")
var19=$(echo "logserver_prefix_output=fwlog-output::")
eng19=$(echo "$cinco type output prefix for logserver")
spa19=$(echo "$cinco especifica prefijo de salida para logserver")
var20=$(echo "$cinco END NECESARY #" )
eng20=$(echo "$cinco .......... END Necesary options .......... .......... #")
spa20=$(echo "$cinco FINAL .......... Opciones Necesarias .......... .......... #")
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var31=$(echo "$cinco BEGIN OPTIONAL #" )
eng31=$(echo "$cinco .......... BEGIN Optional options .......... .......... #")
spa31=$(echo "$cinco INICIO .......... Opciones opcionales .......... .......... #")
var32=$(echo "$cinco choose void or no #" )
eng32=$(echo "$cinco Allow Other Options,  modify with void, or no")
spa32=$(echo "$cinco Permitir Otras Opciones, modificar con vacio o no")
var33=$(echo "separate_port_rules=no" )
eng33=$(echo "$cinco Separate the rules for each port or no")
spa33=$(echo "$cinco separar reglas por cada puerto o no")
var34=$(echo "allow_maxtries_ssh=no" )
eng34=$(echo "$cinco void to allow max tries login in ssh for hour or no")
spa34=$(echo "$cinco vacio para permitir maximos intentos de logins in ssh por hora o no")
var35=$(echo "allow_forward_ip4=no" )
eng35=$(echo "$cinco void to yes to forward ip4, or no to no")
spa35=$(echo "$cinco vacio para reenvios ip4, o no para no")
var36=$(echo "allow_forward_ip6=no" )
eng36=$(echo "$cinco void to allow ip forward ip6 or no")
spa36=$(echo "$cinco vacio para permitir reenvio ip6, o no")
var37=$(echo "allow_gateway_ip4=no" )
eng37=$(echo "$cinco void to allow gateway ip4 to others nets or no")
spa37=$(echo "$cinco vacio para permitir gateway ip4  a otras redes, o no")
var38=$(echo "allow_gateway_ip6=no" )
eng38=$(echo "$cinco void to allow gateway ip6 to other nets or no")
spa38=$(echo "$cinco vacio para hacer gateway ip6 a otras redes o no")
var39=$(echo "allow_dmz_ip4=no" )
eng39=$(echo "$cinco void to allow dmz ip4 to one host local or no")
spa39=$(echo "$cinco vacio para permitir dmz ip4  a una host local, o no")
var40=$(echo "allow_dmz_ip6=no" )
eng40=$(echo "$cinco void to allow dmz ip6 to one host local or no")
spa40=$(echo "$cinco vacio para hacer dmz ip6 a una host local o no")
var41=$(echo "allow_input_all=no ")
eng41=$(echo "$cinco void when the rules are to allow input to all or no")
spa41=$(echo "$cinco vacio, reglas para permitir toda entrada o no")
var42=$(echo "allow_output_all=no ")
eng42=$(echo "$cinco void when the rules are to allow output to all or no")
spa42=$(echo "$cinco vacio, reglas para permitir toda salida o no")
var43=$(echo "allow_input_state=no ")
eng43=$(echo "$cinco Selective Input state with void or no")
spa43=$(echo "$cinco Estado de entrada selectivo con vacio o no")
var44=$(echo "allow_output_state=no ")
eng44=$(echo "$cinco Selective Output state with void or no")
spa44=$(echo "$cinco Estado de salida selectivo con vacio o no")
var45=$(echo "allow_input_bandwidth=no ")
eng45=$(echo "$cinco void to limit bandwidth input in kbits/sec for all sources or no")
spa45=$(echo "$cinco vacio para limitar ancho de banda de entrada para todas las fuentes en kbits/sec o no")
var46=$(echo "allow_output_bandwidth=no" )
eng46=$(echo "$cinco void to limit bandwidth output in kbits/sec for each destination or no")
spa46=$(echo "$cinco vacio limitar ancho de banda de salida en kbits/sec por cada destino o no")
var47=$(echo "allow_input_maxconnect=no" )
eng47=$(echo "$cinco void to limit max number for input simultaneous connections or no" )
spa47=$(echo "$cinco vacio para limitar numero de conexiones simultaneas de entrada o no" )
var48=$(echo "allow_output_maxconnect=no" )
eng48=$(echo "$cinco void to limit max number for output simultaneous connections or no" )
spa48=$(echo "$cinco vacio para limitar numero de conexiones simultaneas de salida o no" )
var49=$(echo "allow_input_ping=no" )
eng49=$(echo "$cinco void to allow RECIVE PING or no" )
spa49=$(echo "$cinco vacio para permitir RECIVIR PING o no")
var50=$(echo "allow_output_ping=no" )
eng50=$(echo "$cinco void to allow SEND PING or no" )
spa50=$(echo "$cinco vacio para permitir ENVIAR PING o no" )
var51=$(echo "allow_mac_whitelist=no" )
eng51=$(echo "$cinco void to allow some exceptional MAC-ADDRESS or no")
spa51=$(echo "$cinco vacio para permitir DIRECCION-MAC excepcionales o no")
var52=$(echo "allow_mac_blacklist=no")
eng52=$(echo "$cinco void to drop some excepcional MAC-ADDRESS or no")
spa52=$(echo "$cinco vacio para denegar DIRECCION-MAC excepcionales o no")
var53=$(echo "allow_net_vpn=no" )
eng53=$(echo "$cinco void to allow some exceptional HOST/IP or no")
spa53=$(echo "$cinco vacio para permitir HOST/IP excepcionales o no")
var54=$(echo "allow_net_blacklist=no")
eng54=$(echo "$cinco void to drop some excepcional HOST/IP or no")
spa54=$(echo "$cinco vacio para denegar HOST/IP excepcionales o no")
var55=$(echo "allow_output_uid=no" )
eng55=$(echo "$cinco void to allow excepcional USER or no" )
spa55=$(echo "$cinco vacio permite salida de paquetes de un USUARIO excepcional o no" )
var56=$(echo "allow_output_gid=no" )
eng56=$(echo "$cinco void to allow excepcional GROUP or no" )
spa56=$(echo "$cinco vacio permite salida de paquetes de un GRUPO excepcional o no" )
var57=$(echo "allow_others_protocols=no" )
eng57=$(echo "$cinco void to allow other PROTOCOL-IP excepcional or no" )
spa57=$(echo "$cinco vacio para permitir otro PROTOCOLO-IP excepcional o no" )
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var58=$(echo "$cinco Begin Variables #.......... .......... #.........." )
eng58=$(echo "$cinco Fill Variables" )
spa58=$(echo "$cinco Rellena Variables" )
var59=$(echo "$cinco Options" )
eng59=$(echo "$cinco Other Options, add with , and join ranges with :" )
spa59=$(echo "$cinco Otras Opciones, añadir con , y poner rangos con :" )
var60=$(echo "config_maxtries_ssh=20")
eng60=$(echo "$cinco modify with number max of tries to log in us ssh server for hour")
spa60=$(echo "$cinco modificar con los maximos intentos de logeo a nuestro servidor ssh por hora")
var61=$(echo "config_dmz_ip4=192.168.1.7")
eng61=$(echo "$cinco ip server ip lan to other external nets, nat prerouting")
spa61=$(echo "$cinco servidor ip lan para otras redes esternas, nat prerouting")
var62=$(echo "config_dmz_ip6=d4:12:43:01:36:2e")
eng62=$(echo "$cinco ip server ip lan to other external nets, nat prerouting")
spa62=$(echo "$cinco servidor ip lan para otras redes esternas, nat prerouting")
var63=$(echo "config_input_state=new,related,established")
eng63=$(echo "$cinco void for all or new,related,established,untracked,invalid")
spa63=$(echo "$cinco modificar con vacio o new,related,established,untracked,invalid")
var64=$(echo "config_output_state=new,related,established")
eng64=$(echo "$cinco void for all or new,related,established,untracked,invalid")
spa64=$(echo "$cinco modificar con vacio o new,related,established,untracked,invalid")
var65=$(echo "config_input_bandwidth=12512" )
eng65=$(echo "$cinco max input bandwidth in kbits/sec for all" )
spa65=$(echo "$cinco maximo entrada de ancho de banda en kbit/sec para todos" )
var66=$(echo "config_output_bandwidth=512" )
eng66=$(echo "$cinco max output bandwidth in kbits/sec for each ip" )
spa66=$(echo "$cinco maximo salida de ancho de banda en kbits/sec para cada ip" )
var67=$(echo "config_input_maxconnect=72" )
eng67=$(echo "$cinco max number for input simultaneous connections" )
spa67=$(echo "$cinco maximo numero de conexiones simultaneas de entrada" )
var68=$(echo "config_output_maxconnect=72" )
eng68=$(echo "$cinco max number for output simultaneous connections" )
spa68=$(echo "$cinco maximo numero de conexiones simultaneas de salida" )
var69=$(echo "config_mac_whitelist=d4:12:43:01:36:2e" )
eng69=$(echo "$cinco allow this excepcitonal MAC-ADRESS" )
spa69=$(echo "$cinco permitir estos MAC-ADDRESS excepcionales" )
var70=$(echo "config_mac_blacklist=d4:12:43:01:36:2e" )
eng70=$(echo "$cinco drop this excepcional MAC-ADDRESS" )
spa70=$(echo "$cinco deniega estos MAC-ADDRESS excepcionales" )
var71=$(echo "config_net_vpn=wesnoth.org,sf.net" )
eng71=$(echo "$cinco allow this excepcitonal HOST/IP" )
spa71=$(echo "$cinco permitir estos HOST/IP excepcionales" )
var72=$(echo "config_net_blacklist=facebook.com,www.facebook.com" )
eng72=$(echo "$cinco drop this excepcional HOST/IP" )
spa72=$(echo "$cinco deniega estos HOST/IP excepcionales" )
var73=$(echo "config_output_uid=root" )
eng73=$(echo "$cinco allow out packages excepcional from this USER excepcional" )
spa73=$(echo "$cinco permite salida de paquetes de este USUARIO excepcional" )
var74=$(echo "config_output_gid=root" )
eng74=$(echo "$cinco allow out packages excepcional from this GROUP excepcional" )
spa74=$(echo "$cinco permite salida de paquetes de este GRUPO excepcional" )
var75=$(echo "config_others_protocols=icmp,igmp" )
eng75=$(echo "$cinco allow others protocols from /etc/protocolos" )
spa75=$(echo "$cinco permitir otros protocolos desde /etc/protocols" )
var76=$(echo "$cinco NET CLIENT AND NET SERVER #" )
eng76=$(echo "$cinco Net to connect like client or server" )
spa76=$(echo "$cinco Red para conectar como cliente o server" )
var77=$(echo "net_ipv4_client=0/0" )
eng77=$(echo "$cinco the net to client ipv4, all is 0/0" )
spa77=$(echo "$cinco la red cual cliente ipv4, todos es 0/0" )
var78=$(echo "net_ipv4_server=0/0" )
eng78=$(echo "$cinco the net to server ipv4, all is 0/0" )
spa78=$(echo "$cinco la red cual servidor ipv4, todos es 0/0" )
var79=$(echo "net_ipv6_client=::/0" )
eng79=$(echo "$cinco the net to client ipv6, all is ::/0" )
spa79=$(echo "$cinco la red cual cliente ipv6, todos es ::/0" )
var80=$(echo "net_ipv6_server=::/0" )
eng80=$(echo "$cinco the net to server ipv6, all is ::/0" )
spa80=$(echo "$cinco la red cual servidor ipv6, todos es ::/0" )
var81=$(echo "$cinco #" )
eng81=$(echo "$cinco .......... END Optional options .......... .......... #")
spa81=$(echo "$cinco FINAL .......... Opciones opcionales .......... .......... #")
####
####
##############################   english: continue with autogen defaults configs cfg
##############################   spanish: continua con auto genera configs cfg por defecto
####
####
#### english: where save default files #### spanish: donde se guardan los archivos
####
####
me="$defaultminicfg_eng"
ms="$defaultminicfg_spa"
fe="$defaultfullcfg_eng"
fs="$defaultfullcfg_spa"
####
####
#### wizard mini-english
####
####
echo $var0  &> $me
echo $var1  $tabz $eng1  &>> $me
echo $var2  $tabz $eng2  &>> $me
echo $var3  $tabz $eng3  &>> $me
echo $var4  $tabz $eng4  &>> $me
echo $var5  $tabz $eng5  &>> $me
echo $var6  $tabz $eng6  &>> $me
echo $var7  $tabz $eng7  &>> $me
echo $var8  $tabz $eng8  &>> $me
echo $var9  $tabz $eng9  &>> $me
echo $var10 $tabz $eng10 &>> $me
echo $var11 $tabz $eng11 &>> $me
echo $var12 $tabz $eng12 &>> $me
echo $var13 $tabz $eng13 &>> $me
echo $var14 $tabz $eng14 &>> $me
echo $var15 $tabz $eng15 &>> $me
echo $var16 $tabz $eng16 &>> $me
echo $var17 $tabz $eng17 &>> $me
echo $var18 $tabz $eng18 &>> $me
echo $var19 $tabz $eng19 &>> $me
echo $var20 $tabz $eng20 &>> $me
####
####
#### wizard mini-spanish
####
####
echo $var0  &> $ms
echo $var1  $tabz $spa1  &>> $ms
echo $var2  $tabz $spa2  &>> $ms
echo $var3  $tabz $spa3  &>> $ms
echo $var4  $tabz $spa4  &>> $ms
echo $var5  $tabz $spa5  &>> $ms
echo $var6  $tabz $spa6  &>> $ms
echo $var7  $tabz $spa7  &>> $ms
echo $var8  $tabz $spa8  &>> $ms
echo $var9  $tabz $spa9  &>> $ms
echo $var10 $tabz $spa10 &>> $ms
echo $var11 $tabz $spa11 &>> $ms
echo $var12 $tabz $spa12 &>> $ms
echo $var13 $tabz $spa13 &>> $ms
echo $var14 $tabz $spa14 &>> $ms
echo $var15 $tabz $spa15 &>> $ms
echo $var16 $tabz $spa16 &>> $ms
echo $var17 $tabz $spa17 &>> $ms
echo $var18 $tabz $spa18 &>> $ms
echo $var19 $tabz $spa19 &>> $ms
echo $var20 $tabz $spa20 &>> $ms
####
####
#### wizard full-english
####
####
echo $var0  &> $fe
echo $var1  $tabz $eng1  &>> $fe
echo $var2  $tabz $eng2  &>> $fe
echo $var3  $tabz $eng3  &>> $fe
echo $var4  $tabz $eng4  &>> $fe
echo $var5  $tabz $eng5  &>> $fe
echo $var6  $tabz $eng6  &>> $fe
echo $var7  $tabz $eng7  &>> $fe
echo $var8  $tabz $eng8  &>> $fe
echo $var9  $tabz $eng9  &>> $fe
echo $var10 $tabz $eng10 &>> $fe
echo $var11 $tabz $eng11 &>> $fe
echo $var12 $tabz $eng12 &>> $fe
echo $var13 $tabz $eng13 &>> $fe
echo $var14 $tabz $eng14 &>> $fe
echo $var15 $tabz $eng15 &>> $fe
echo $var16 $tabz $eng16 &>> $fe
echo $var17 $tabz $eng17 &>> $fe
echo $var18 $tabz $eng18 &>> $fe
echo $var19 $tabz $eng19 &>> $fe
echo $var20 $tabz $eng20 &>> $fe
##### english: advance variables
##### spanish: avanzadas variables
echo $var30 $tabz $eng30 &>> $fe
echo $var31 $tabz $eng31 &>> $fe
echo $var32 $tabz $eng32 &>> $fe
echo $var33 $tabz $eng33 &>> $fe
echo $var34 $tabz $eng34 &>> $fe
echo $var35 $tabz $eng35 &>> $fe
echo $var36 $tabz $eng36 &>> $fe
echo $var37 $tabz $eng37 &>> $fe
echo $var38 $tabz $eng38 &>> $fe
echo $var39 $tabz $eng39 &>> $fe
echo $var40 $tabz $eng40 &>> $fe
echo $var41 $tabz $eng41 &>> $fe
echo $var42 $tabz $eng42 &>> $fe
echo $var43 $tabz $eng43 &>> $fe
echo $var44 $tabz $eng44 &>> $fe
echo $var45 $tabz $eng45 &>> $fe
echo $var46 $tabz $eng46 &>> $fe
echo $var47 $tabz $eng47 &>> $fe
echo $var48 $tabz $eng48 &>> $fe
echo $var49 $tabz $eng49 &>> $fe
echo $var50 $tabz $eng50 &>> $fe
echo $var51 $tabz $eng51 &>> $fe
echo $var52 $tabz $eng52 &>> $fe
echo $var53 $tabz $eng53 &>> $fe
echo $var54 $tabz $eng54 &>> $fe
echo $var55 $tabz $eng55 &>> $fe
echo $var56 $tabz $eng56 &>> $fe
echo $var57 $tabz $eng57 &>> $fe
echo $var58 $tabz $eng58 &>> $fe
echo $var59 $tabz $eng59 &>> $fe
echo $var60 $tabz $eng60 &>> $fe
echo $var61 $tabz $eng61 &>> $fe
echo $var62 $tabz $eng62 &>> $fe
echo $var63 $tabz $eng63 &>> $fe
echo $var64 $tabz $eng64 &>> $fe
echo $var65 $tabz $eng65 &>> $fe
echo $var66 $tabz $eng66 &>> $fe
echo $var67 $tabz $eng67 &>> $fe
echo $var68 $tabz $eng68 &>> $fe
echo $var69 $tabz $eng69 &>> $fe
echo $var70 $tabz $eng70 &>> $fe
echo $var71 $tabz $eng71 &>> $fe
echo $var72 $tabz $eng72 &>> $fe
echo $var73 $tabz $eng73 &>> $fe
echo $var74 $tabz $eng74 &>> $fe
echo $var75 $tabz $eng75 &>> $fe
echo $var76 $tabz $eng76 &>> $fe
echo $var77 $tabz $eng77 &>> $fe
echo $var78 $tabz $eng78 &>> $fe
echo $var79 $tabz $eng79 &>> $fe
echo $var80 $tabz $eng80 &>> $fe
echo $var81 $tabz $eng81 &>> $fe
####
####
#### wizard full-spanish
####
####
echo $var0  &> $fs
echo $var1  $tabz $spa1 &>> $fs
echo $var2  $tabz $spa2 &>> $fs
echo $var3  $tabz $spa3 &>> $fs
echo $var4  $tabz $spa4 &>> $fs
echo $var5  $tabz $spa5 &>> $fs
echo $var6  $tabz $spa6 &>> $fs
echo $var7  $tabz $spa7 &>> $fs
echo $var8  $tabz $spa8 &>> $fs
echo $var9  $tabz $spa9 &>> $fs
echo $var10 $tabz $spa10 &>> $fs
echo $var11 $tabz $spa11 &>> $fs
echo $var12 $tabz $spa12 &>> $fs
echo $var13 $tabz $spa13 &>> $fs
echo $var14 $tabz $spa14 &>> $fs
echo $var15 $tabz $spa15 &>> $fs
echo $var16 $tabz $spa16 &>> $fs
echo $var17 $tabz $spa17 &>> $fs
echo $var18 $tabz $spa18 &>> $fs
echo $var19 $tabz $spa19 &>> $fs
echo $var20 $tabz $spa20 &>> $fs
##### english: advance variables
##### spanish: avanzadas variables
echo $var30 $tabz $spa30 &>> $fs
echo $var31 $tabz $spa31 &>> $fs
echo $var32 $tabz $spa32 &>> $fs
echo $var33 $tabz $spa33 &>> $fs
echo $var34 $tabz $spa34 &>> $fs
echo $var35 $tabz $spa35 &>> $fs
echo $var36 $tabz $spa36 &>> $fs
echo $var37 $tabz $spa37 &>> $fs
echo $var38 $tabz $spa38 &>> $fs
echo $var39 $tabz $spa39 &>> $fs
echo $var40 $tabz $spa40 &>> $fs
echo $var41 $tabz $spa41 &>> $fs
echo $var42 $tabz $spa42 &>> $fs
echo $var43 $tabz $spa43 &>> $fs
echo $var44 $tabz $spa44 &>> $fs
echo $var45 $tabz $spa45 &>> $fs
echo $var46 $tabz $spa46 &>> $fs
echo $var47 $tabz $spa47 &>> $fs
echo $var48 $tabz $spa48 &>> $fs
echo $var49 $tabz $spa49 &>> $fs
echo $var50 $tabz $spa50 &>> $fs
echo $var51 $tabz $spa51 &>> $fs
echo $var52 $tabz $spa52 &>> $fs
echo $var53 $tabz $spa53 &>> $fs
echo $var54 $tabz $spa54 &>> $fs
echo $var55 $tabz $spa55 &>> $fs
echo $var56 $tabz $spa56 &>> $fs
echo $var57 $tabz $spa57 &>> $fs
echo $var58 $tabz $spa58 &>> $fs
echo $var59 $tabz $spa59 &>> $fs
echo $var60 $tabz $spa60 &>> $fs
echo $var61 $tabz $spa61 &>> $fs
echo $var62 $tabz $spa62 &>> $fs
echo $var63 $tabz $spa63 &>> $fs
echo $var64 $tabz $spa64 &>> $fs
echo $var65 $tabz $spa65 &>> $fs
echo $var66 $tabz $spa66 &>> $fs
echo $var67 $tabz $spa67 &>> $fs
echo $var68 $tabz $spa68 &>> $fs
echo $var69 $tabz $spa69 &>> $fs
echo $var70 $tabz $spa70 &>> $fs
echo $var71 $tabz $spa71 &>> $fs
echo $var72 $tabz $spa72 &>> $fs
echo $var73 $tabz $spa73 &>> $fs
echo $var74 $tabz $spa74 &>> $fs
echo $var75 $tabz $spa75 &>> $fs
echo $var76 $tabz $spa76 &>> $fs
echo $var77 $tabz $spa77 &>> $fs
echo $var78 $tabz $spa78 &>> $fs
echo $var79 $tabz $spa79 &>> $fs
echo $var80 $tabz $spa80 &>> $fs
echo $var81 $tabz $spa81 &>> $fs
####
####
echo "$tab [ ok ] [ Wizard and configs cfg templates regenerated ]"
exit ; fi
####
####
#### :rutina-final-regen-config:
##############################  english:  sane variables: for working sane         ############################## 
##############################  spanish:  sana variables: para funcionamiento sano ##############################
#### :rutina-inicial-sane:
####
####
case "$NULL" in
"$allow_header_notice");;
*)allow_header_notice="no";;
"$allow_legacy");; 
*)allow_legacy="no";;
"$allow_nft");; 
*)allow_nft="no";;
"$allow_ipv4");; 
*)allow_ipv4="no";;
"$allow_ipv6");; 
*)allow_ipv6="no";;
"$allow_forward_ip4");; 
*)allow_forward_ip4="no";;
"$allow_forward_ip6");; 
*)allow_forward_ip6="no";;
"$allow_gateway_ip4");; 
*)allow_gateway_ip4="no";;
"$allow_gateway_ip6");; 
*)allow_gateway_ip6="no";;
"$allow_only_output");; 
*)allow_only_output="no";;
"$allow_input_all");; 
*)allow_input_all="no";;
"$allow_output_all");; 
*)allow_output_all="no";;
"$allow_input_state");; 
*)allow_input_state="no";;
"$allow_output_state");; 
*)allow_output_state="no";;
"$allow_input_bandwidth");;
*)allow_input_bandwidth="no";;
"$allow_output_bandwidth");; 
*)allow_output_bandwidth="no";;
"$allow_input_maxconnect");; 
*)allow_input_maxconnect="no";;
"$allow_output_maxconnect");; 
*)allow_output_maxconnect="no";;
"$allow_input_ping");; 
*)allow_input_ping="no";;
"$allow_output_ping");; 
*)allow_output_ping="no";;
"$allow_net_vpn");; 
*)allow_net_vpn="no";;
"$allow_net_blacklist");; 
*)allow_net_blacklist="no";;
"$allow_output_uid");; 
*)allow_output_uid="no";;
"$allow_output_gid");; 
*)allow_output_gid="no";;
"$allow_other_protocols");; 
*)allow_other_protocols="no";;
"$allow_autosave");;
*)allow_autosave="no";;
"$choosed_iptables");;
*)choosed_iptables="no";;
esac
####
####
#### :rutina-final-sane:
##############################       english: if sane config dir                       #############################
##############################       spanish: comprobar sanos directorios              #############################
####
####
if [ -d "$directory_config" ]; then $nada ; else rm "$directory_config" &> /dev/null ; mkdir "$directory_config" &> /dev/null ; fi
if [ -d "$directory_fwrecover" ]; then $nada ; else rm "$directory_fwrecover" &> /dev/null ; mkdir "$directory_fwrecover" &> /dev/null ; fi
####
####
########################################       english: autosave: autosave of firewall to restore standard rules
########################################       english: autosave: autoguardado de firewall para recuperador de reglas estandar
#### :rutina-inicial-autosave:
####
####
#### english: iptables saved
#### spanish: iptables guardado
####
####
#### english: autosave with name autosave
#### spanish: autoguardado con nombre autosave
####
####
if [ "$first_option" = "autosave" ]; then
if [ "$allow_autosave" = "$NULL" ] ; then $nada ;
echo "$tab [ autosave ] [ previus firewall saved ] [ autosave-fwiptables ]"
$fwiptables save autosave-fwiptables &> /dev/null
fi; exit; fi
####
####
#### :rutina-final-autosave:
##############################      english: search favorite date: favorite date command        #####################
##############################      spanish: busca preferida fecha: favorita comando de fecha   #####################
####
####
favorite_date_command=""
if [ "$command_rdate" = "$NULL"   ]    ; then $nada ; else favorite_date_command="$command_rdate -4 -a -n"  ; fi
if [ "$command_sntp" = "$NULL"  ]    ; then $nada ; else favorite_date_command="$command_sntp"              ; fi
if [ "$command_ntpdate" = "$NULL" ]    ; then $nada ; else favorite_date_command="$command_ntpdate"         ; fi
####
####
##############################      english: search favorite music player            #####################
##############################      spanish: busca preferida reproductor de musica   #####################
####
####
favoite_music_command=""
if [ "$command_mpg321" = "$NULL" ]   ; then $nada ; else favorite_radio_command="$command_mpg321"   ; fi
if [ "$command_mpg123" = "$NULL" ]   ; then $nada ; else favorite_radio_command="$command_mpg123"   ; fi
####
####
##############################      english: ready system rules con its option               #####################
##############################      spanish: preprara reglas del sistema con sus opciones    #####################
####
####
####   #### english: The first        firewall of system  
####   #### spanish: El primero       cortafuego del sistema
####
####
if [ "$first_option" = "custom" ];       then $give_cover  ;
echo "$tab [ running ] [ loading firewall custom ]" ; 
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "offline" ];       then $give_cover ;
echo "$tab [ running ] [ loading firewall offline ]" ; 
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "all-permisive" ];  then $give_cover ;
echo "$tab [ running ] [ loading firewall all-permisive ]" ; 
launch_iptables="" ;     config_variable_version="2"  ;  fi
####
####
####   #### english: The first        firewall of system  
####   #### spanish: El primero       cortafuego del sistema
####
####
if [ "$first_option" = "client-web" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall client-web ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ;
client_port_tcp="http,https,ssh" ;
client_port_udp="domain,bootpc,ntp,https" ;
server_port_tcp="" ; server_port_udp="" ; fi
####
####
if [ "$first_option" = "client-torrent" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall client-torrent ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ; 
client_port_udp="domain,bootpc,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,9091,51413" ;
server_port_tcp="9091,51413" ; fi
####
####
if [ "$first_option" = "client-vpn" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall client-vpn ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ;
client_port_udp="domain,bootpc,ntp,https,500,1194,1701,4500" ; 
client_port_tcp="http,https,ssh,443,1701,1723" ; 
server_port_tcp="" ; server_port_udp="" ; fi
####
####
if [ "$first_option" = "client-tor" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall client-tor ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ;
client_port_udp="domain,bootpc,ntp,https" ;
client_port_tcp="http,https,ssh,9000:9150" ;
server_port_tcp="" ; server_port_udp="" ; fi
####
####
if [ "$first_option" = "lan-vpn" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall lan-vpn ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ;  
client_port_udp="domain,bootpc,ntp,500,1194,1701,4500" ; 
client_port_tcp="1701,1723" ; 
server_port_tcp="" ; server_port_udp="" ; fi
####
####
if [ "$first_option" = "lan-tor" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall lan-tor ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ;
client_port_udp="bootpc,domain,ntp" ;
client_port_tcp="9000:9150" ;
server_port_tcp="" ; server_port_udp="" ; fi
####
####
if [ "$first_option" = "server-web" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall server-web ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ; 
client_port_udp="domain,bootpc,ntp,https" ;
server_port_udp="https"
client_port_tcp="http,https,ssh" ;
server_port_tcp="http,https,ssh" ; fi
####
####
if [ "$first_option" = "server-samba" ];   then $give_cover ;
echo "$tab [ running ] [ loading firewall server-samba ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ; 
client_tcp="http,https,ssh,ldap,ldaps,microsoft-ds" ;
client_udp="domain,bootpc,ntp,https,ldap,ldaps,137:139" ;
server_tcp="ssh,ldap,ldaps,microsoft-ds" ; 
server_udp="ntp,domain,ldap,ldaps,137:139" ; 
fi
####
####
if [ "$first_option" = "server-print" ];   then $give_cover ;
echo "$tab [ running ] [ loading firewall server-print ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ; 
client_port_udp="domain,bootpc,ntp,https" ;
server_port_udp=""
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh,printer,ipp" ; fi
####
####
if [ "$first_option" = "server-ssh" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall server-ssh ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ; 
client_port_udp="domain,bootpc,ntp,https" ;
server_port_udp=""
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh" ; fi
####
####
if [ "$first_option" = "server-lamp" ];     then $give_cover ;
echo "$tab [ running ] [ loading firewall server-lamp ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ; 
client_port_udp="domain,bootpc,ntp,https" ;
server_port_udp="https"
####  english: udp: 20 is ftp-data, 21 is ftp, 989 is ftps-data y 990 is ftps
client_port_tcp="http,https,ssh,20,21,989,990" ;
####  english: tcp: 10000 is webmin, 3306 is mysql, 5432 is postgresql
server_port_tcp="http,https,ssh,10000,3306,5432" ;fi
####
####
if [ "$first_option" = "games-shooter" ];     then $give_cover  ;
echo "$tab [ running ] [ loading firewall games-shooter ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ; 
client_port_udp="domain,bootpc,ntp,https" ;
server_port_udp="1025:65000" ;
client_port_tcp="http,https,ssh,ftp,ftp-data,ftps,ftps-data" ;
server_port_tcp="" ; fi
####
####
if [ "$first_option" = "game-westnoth" ]; then $give_cover  ;
echo "$tab [ running ] [ loading firewall game-westnoth ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ;
client_port_udp="domain,bootpc,ntp,https" ; 
client_port_tcp="http,https,ssh,14950:15050" ;
server_port_tcp="14950:15050" ; server_port_udp="" ; fi
####
####
if [ "$first_option" = "game-minetest" ]; then $give_cover  ;
echo "$tab [ running ] [ loading firewall game-minetest ]" ; 
launch_iptables="default" ;     config_variable_version="2"  ;
client_port_udp="domain,bootpc,ntp,https,25000:35000" ; 
client_port_tcp="http,https,ssh,25000:35000" ;
server_port_tcp="25000:35000" ; server_port_udp="" ; fi
####
####
##############################   english: custom without valid config cfg
##############################   spanish: custom sin valido configuracion cfg
#### :rutina-inicial-custom:
####
####
if [ "$first_option" = "custom" ]; then $nada
if [ -f $directory_config/$second_option ]; then $nada
else  $fwiptables cfg 
echo "$tab [ Usage ] [ $fwiptables custom file-cfg ]"
echo "$tab [ See ]   [ $fwiptables firewall-custom ]"; fi ; fi
####
####
#### :rutina-final-custom:
##############################       english: mini-options: wellcome with semi help
##############################       spanish: mini-options: bienvenida con semi ayuda
#### :rutina-inicial-mini-options:
####
####
if [ "$first_option" = "mini-options" ] || [ "$first_option" = "$NULL" ] ; then $give_cover
echo "$title_md $tab [ $first_option ] [ List mini options ] [ mini-options.md ]"
echo "$text_md output-interface   |  cli-menu gui-menu gui-shell -txt -cli -gui -log -web -rst -tor    "
echo "$title_md                                      [ firewall-options ]                              "
echo "$text_md   firewall-rules   |  stop continue reset names actual show save load                   "
echo "$text_md    firewall-list   |  ls ls4 ls6 list list6 listnum listnum6 status                     "
echo "$text_md                       list-alltables list-filter4 list-filter6                           "
echo "$text_md                       list-nat4 list-nat6 list-raw4 list-raw6 list-mangle4 list-mangle6 "
echo "$text_md                       list-security4 list-security6 list-ebtables list-arptables        "
echo "$text_md  firewall-launch   |  eraserules wizard-mini wizard-full custom                         "
echo "$text_md                       client-web client-torrent client-vpn client-tor lan-tor lan-vpn   "
echo "$text_md                       offline all-permisive games-shooter game-westnoth game-minetest   "
echo "$text_md                       server-samba server-print server-web server-ssh server-lamp       "
echo "$text_md  firewall-custom   |  new-full-config nueva-completa-config regen-config                "
echo "$text_md                       new-mini-config nueva-mini-config examples-config                 "
echo "$text_md                       show-config modify-config del-config names-config                 "
echo "$title_md                                      [ help-options ]                                  "
echo "$text_md firewall-options   |  firewall-rules  firewall-list  firewall-launch  firewall-custom   "
echo "$text_md     tool-options   |  tool-sockets    tool-forward   tool-tcp         tool-udp          "
echo "$text_md                       tool-icmp       tool-nmap      tool-sudo        tool-game         "
echo "$text_md                       tool-system     tool-install   tool-blacklist   tool-dev          "
echo "$text_md     show-options   |  show-hardware   show-etc       show-log         show-about        "
echo "$text_md                       show-help       show-example                                      "
echo "$title_md                                      [ some-example ]                                  "
echo "$text_md        [ Example command ]                       [ Example Description ]                "
echo "$text_md    $fwiptables options                  |  Show more options likes output txt           "
echo "$text_md    $fwiptables -txt list                |  List iptables rules with output txt          "
echo "$text_md    $fwiptables -cli save one-name       |  Save rules with output cli                   "
echo "$text_md    $fwiptables -cli names               |  List firewall saved with output cli          "
echo "$text_md    $fwiptables -gui ss                  |  List sockets ip with output gui              "
echo "$text_md    $fwiptables -gui wizard-mini         |  Generate rules with output gui               "
exit ; fi
####
####
#### :rutina-final-mini-options:
##############################       english: full-options: wellcome with semi help
##############################       spanish: full-options: bienvenida con semi ayuda
#### :rutina-inicial-full-options:
####
####
if [ "$first_option" = "full-options" ] || [ "$first_option" = "options" ] ; then $give_cover
echo "$title_md    $tab [ $first_option ] [ List full options ] [ options.md ]"
echo "$text_md   output-interface   |  cli-menu gui-menu gui-shell -txt -cli -gui -log -web -rst -tor      " 
echo "$title_md                                      [ firewall-options ]                                  "
echo "$text_md    firewall-rules     |  stop continue reset names actual show save load                    "
echo "$text_md    firewall-list      |  ls ls4 ls6 list list6 listnum listnum6 status                      "
echo "$text_md                          list-alltables list-filter4 list-filter6                            "
echo "$text_md                          list-nat4 list-nat6 list-raw4 list-raw6 list-mangle4 list-mangle6  " 
echo "$text_md                          list-security4 list-security6 list-ebtables list-arptables         "
echo "$text_md   firewall-launch     |  eraserules wizard-mini wizard-full custom                          "
echo "$text_md                          client-web client-torrent client-vpn client-tor lan-tor lan-vpn    "
echo "$text_md                          offline all-permisive games-shooter game-westnoth game-minetest    "
echo "$text_md                          server-samba server-print server-web server-ssh server-lamp        "
echo "$text_md   firewall-custom     |  new-full-config nueva-completa-config regen-config                 "
echo "$text_md                          new-mini-config nueva-mini-config examples-config                  "
echo "$text_md                          show-config modify-config del-config names-config                  "
echo "$title_md                                      [ tool-options ]                                      "   
echo "$text_md    tool-sockets       |  info-listen info-nodes info-route info-net info-proxy              "
echo "$text_md                          info-system ss lsof tcpdump netstat netstat-nat web-cert           "
echo "$text_md    tool-forward       |  ipforward-list ipforward-on ipforward-off                          "
echo "$text_md    tool-tcp           |  tracetcp-ip4 tracetcp-ip6 speed-ip4 speed-ip6                      "
echo "$text_md    tool-udp           |  host dig resolveip geoip ntpdate                                   "
echo "$text_md    tool-icmp          |  traceicmp-ip4 traceicmp-ip6 ping-ip4 ping-ip6                      "
echo "$text_md    tool-nmap          |  scan-tcp scan-syn scan-fin scan-udp scan-ping                      "
echo "$text_md    tool-sudo          |  sudo-adduser sudo-deluser sudo-list alias-list                     "
echo "$text_md    tool-game          |  ole-word ole-number ole-domain colour-rgb colour-hex               "
echo "$text_md    tool-system        |  free-ram speed-ram speed-disk speed-glx radio-mp3                  "
echo "$text_md    tool-install       |  install upgrade howto-upgrade                                      "
echo "$text_md    tool-blacklist     |  blacklist-list blacklist-on blacklist-off                          "
echo "$text_md    tool-dev           |  new-versions dev-version dev-changes code                          "
echo "$title_md                                     [ show-options ]                                       " 
echo "$text_md    show-hardware      |  lpinfo lsblk lsusb lscpu lspci lsgpu lshw                          "
echo "$text_md    show-log           |  log-search log-ssh sentlog autolog                                 "
echo "$text_md    show-etc           |  hosts resolv.conf  protocols services                              "
echo "$text_md                          hosts.allow hosts.deny show-default modify-default                 "
echo "$text_md    show-about         |  about version depends config-eng config-spa license                "
echo "$text_md    show-help          |  all-help help ayuda notes options info                             "
echo "$text_md                          group-options mini-options full-options                            "
echo "$title_md       [ Example command ]                       [ Example Description ]                    "
echo "$text_md    $fwiptables options                  |  Show more options likes output txt               "
echo "$text_md    $fwiptables -txt list                |  List iptables rules with output txt              "
echo "$text_md    $fwiptables -cli save one-name       |  Save rules with output cli                       "
echo "$text_md    $fwiptables -cli names               |  List firewall saved with output cli              "
echo "$text_md    $fwiptables -gui ss                  |  List sockets ip with output gui                  "
echo "$text_md    $fwiptables -gui wizard-mini         |  Generate rules with output gui                   "
exit ; fi
####
####
#### :rutina-final-full-options:
##############################       english: firewall-options: firewall options       ##############################
##############################       spanish: firewall-options: opciones de firewall   ##############################
#### :rutina-final-firewall-options:
####
####
if [ "$first_option" = "firewall-options" ] ; then $give_cover
echo "$text_md $tab [ $first_option ] [ List firewall options ] [ firewall-options.md ]"
echo "$title_md                                    | firewall-options |                                  "
echo "$text_md   firewall-rules      |  stop continue reset names actual show save load                  "
echo "$text_md   firewall-list       |  list listnum list6 listnum6                                      "  
echo "$text_md                          list-alltables list-forward list-forward6                         "
echo "$text_md                          list-filter4 list-filter6 list-nat4 list-nat6                    "
echo "$text_md                          list-raw4 list-raw6 list-mangle4 list-mangle6                    "
echo "$text_md                          list-security4 list-security6                                    "
echo "$text_md                          list-ebtables list-arptables                                     "
echo "$text_md   firewall-launch     |  eraserules wizard-mini wizard-full custom                        "
echo "$text_md                          client-web client-torrent client-vpn client-tor lan-tor lan-vpn  "
echo "$text_md                          offline all-permisive games-shooter game-westnoth game-minetest "
echo "$text_md                          server-samba server-print server-web server-ssh server-lamp      "
echo "$text_md   firewall-custom     |  new-full-config nueva-completa-config regen-config               "
echo "$text_md                          new-mini-config nueva-mini-config examples-config                "
echo "$text_md                          show-config modify-config del-config names-config                "
echo "$text_md"
echo "$text_md  | Group |  firewall-options     tool-options        show-options                         "
exit ; fi
####
####
#### :rutina-final-firewall-options:
##############################       english: tool-options: firewall options       ##############################
##############################       spanish: tool-options: opciones de firewall   ##############################
#### :rutina-final-tool-options:
####
####
if [ "$first_option" = "tool-options" ] ; then $give_cover
echo "$text_md $tab [ $first_option ] [ Tool options ] [ tool-options.md ]"
echo "$title_md                                    | tool-options |                         " 
echo "$text_md    tool-sockets      | info-listen info-nodes info-route info-net info-proxy "
echo "$text_md                        info-system lsof tcpdump netstat netstat-nat web-cert "
echo "$text_md    tool-forward      | ipforward-list ipforward-on ipforward-off             "
echo "$text_md    tool-tcp          | tracetcp-ip4 tracetcp-ip6 speed-ip4 speed-ip6         "
echo "$text_md    tool-udp          | host dig resolveip geoip ntpdate                      "
echo "$text_md    tool-icmp         | traceicmp-ip4 traceicmp-ip6 ping-ip4 ping-ip6         "
echo "$text_md    tool-nmap         | scan-tcp scan-syn scan-fin scan-udp scan-ping         "
echo "$text_md    tool-sudo         | sudo-adduser sudo-deluser sudo-list alias-list        "
echo "$text_md    tool-game         | ole-word ole-number colour-rgb colour-hex             "
echo "$text_md    tool-system       | free-ram speed-ram speed-disk speed-glx radio         "
echo "$text_md    tool-install      | install upgrade howto-upgrade                         "
echo "$text_md    tool-blacklist    | blacklist-list blacklist-on blacklist-off             "
echo "$text_md    tool-dev          | new-versions dev-version dev-changes code             "
echo "$text_md"
echo "$text_md  | Group |  firewall-options     tool-options        show-options            "
exit ; fi
####
####
#### :rutina-final-tool-options:
##############################       english: show-options: options show           ##############################
##############################       spanish: show-options: opciones de mostrar    ##############################
#### :rutina-final-show-options:
####
####
if [ "$first_option" = "show-options" ] ; then $give_cover
echo "$text_md $tab [ $first_option ] [ Show options ] [ show-options.md ]"
echo "$title_md                                   | show-options |                          " 
echo "$text_md    show-hardware     | lpinfo lsblk lsusb lscpu lspci lsgpu lshw             "
echo "$text_md    show-log          | log-search log-ssh sentlog autolog                    "
echo "$text_md    show-etc          | hosts resolv.conf  protocols services                 "
echo "$text_md                        hosts.allow hosts.deny show-default modify-default    "
echo "$text_md    show-about        | about version depends examples-config                 "
echo "$text_md                        config-eng config-spa license                         "
echo "$text_md    show-help         | all-help help ayuda notes options info                "
echo "$text_md                        group-options mini-options full-options               "
echo "$text_md"
echo "$text_md  | Group |  firewall-options     tool-options        show-options            "
exit ; fi
####
####
#### :rutina-final-show-options:
##############################       english: all-help: long help        ##############################
##############################       spanish: toda-opcion: larga ayuda   ##############################
#### :rutina-inicial-all-help:
####
####
if [ "$first_option" = "all-help" ]; then $give_cover
echo "$text_md $tab [ $first_option ] [ help in english and spanish ] [ all-help.md ]"
echo "$text_md [ Choose only help in english ]        [ Type:     $fwiptables help ]"
echo "$text_md [ Elige solo ayuda en español ]        [ Escribe:  $fwiptables ayuda ]"
echo "$text_md [ all-help in english and spanish ]    [ Type:     $fwiptables all-help ]"
$brake_md
$fwiptables intro
echo  $text_md
$brake_md
echo "$title_md [ full-options ]"
echo  $text_md
$fwiptables full-options
$brake_md
echo  $text_md
echo "$title_md [ group-options ]"
echo  $text_md
echo  $text_md
echo "$title_md [ Principal options ]"
echo  $text_md
$brake_md
echo  $text_md
$fwiptables output-interface
$brake_md
echo  $text_md
$fwiptables firewall-rules
$brake_md
echo  $text_md
$fwiptables firewall-list
$brake_md
echo  $text_md
$fwiptables firewall-launch
echo  $text_md
$brake_md
$fwiptables firewall-custom
echo  $text_md
echo "$title_md [ Secondary options ]"
echo  $text_md
$brake_md
$fwiptables tool-sockets
echo  $text_md
$brake_md
$fwiptables tool-forward
echo  $text_md
$brake_md
$fwiptables tool-udp
echo  $text_md
$brake_md
$fwiptables tool-tcp
echo  $text_md
$brake_md
$fwiptables tool-icmp
echo  $text_md
$brake_md
$fwiptables tool-nmap
echo  $text_md
$brake_md
$fwiptables tool-sudo
echo  $text_md
$brake_md
$fwiptables tool-game
echo  $text_md
$brake_md
$fwiptables tool-system
echo  $text_md
$brake_md
$fwiptables tool-install
echo  $text_md
$brake_md
$fwiptables tool-blacklist
echo  $text_md
$brake_md
$fwiptables tool-dev
echo  $text_md
$brake_md
$fwiptables show-hardware
echo  $text_md
$brake_md
$fwiptables show-log
echo  $text_md
$brake_md
$fwiptables show-etc
echo  $text_md
$brake_md
$fwiptables show-about
echo  $text_md
$brake_md
$fwiptables show-help
echo  $text_md
$brake_md
$fwiptables notes
echo  $text_md
echo "$title_md  [Config cfg example] [Configuracion cfg ejemplo]"
echo  $text_md
$brake_md
cat $defaultcfg
echo  $text_md
$brake_md
$fwiptables version
echo  $text_md
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-all-help:
##############################       english: all-options: all options
##############################       spanish: all-options: todas las opciones
#### :rutina-inicial-help-options:
####
####
if [ "$first_option" = "help-options" ]; then $give_cover
echo "$text_md [ $first_option ] [ List group options help ]"
$fwiptables output-interface
$fwiptables firewall-options
$fwiptables tool-options
$fwiptables show-options
echo $text_md $footer_lineal
exit; fi
####
####
#### :rutina-final-help-options:
##############################       english: names-config: list some config
##############################       spanish: names-config: lista alguna config
#### :rutina-inicial-names-config:
####
####
if [ "$first_option" = "names-config" ]; then $give_cover
echo "$tab [ $first_option ] [ List configs cfg ]"
echo "$tab $tab [ English ] [ list configs files in cfg format ]"
echo "$tab $tab [ Spanish ] [ Lista de archivos de configuraciones en cfg formato ]"
default_files_cfg="default-full-english.cfg|default-full-spanish.cfg|default-mini-english|default-mini-spanish|wizard-full|wizard-mini"
echo "$tab"
echo "$tab [ System files ]"
ls -1 $directory_config/ | egrep -i $default_files_cfg
echo "$tab"
echo "$tab [ User files ]"
ls -1 $directory_config/ | egrep -iv $default_files_cfg
echo "$tab"
echo "$tab [OK CFG FILES NAMES]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-names-config:
##############################       english: some-example: some example
##############################       spanish: some-example: algun ejemplo
#### :rutina-inicial-some-example:
####
####
if [ "$first_option" = "some-example" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ List examples ] [ some-examples.md ]"
echo "$text_md $tab [ list examples ]"
echo "$text_md $tab [ Lista ejemplos ]"
echo "$text_md $tab $tab"
echo "$text_md   Generate new iptables rules :#            $fwiptables wizard-mini         "
echo "$text_md   Save iptables rules in name :#            $fwiptables save name           "
echo "$text_md   Load iptables rules :#                    $fwiptables load name           "
echo "$text_md   Load iptables rules to output log :#      $fwiptables -log load name      "
echo "$text_md   Load iptables rules to output gui :#      $fwiptables -gui load name      "
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-some-example:
##############################       english: group-options: some option
##############################       spanish: group-options: alguna opcion
#### :rutina-inicial-group-options:
####
####
if [ "$first_option" = "group-options" ]; then $give_cover
echo "$text_md [ $first_option ] [ List group options ] [ group-options.md ]"
echo  $text_md 
echo "$text_md [ english info ] [ Help to one group ]"
echo "$text_md [ spanish info ] [ Ayuda a un grupo  ]"
echo  $text_md 
echo "$title_md                   [ Principal options ]"
echo  $text_md 
echo "$text_md $tab output-interface" 
echo "$text_md $tab_lang_english                  Manage the interface with txt or cli or gui or log"
echo "$text_md $tab_lang_spanish                  Manage el interfaz con txt o cli o gui or log"
echo "$text_md $tab firewall-rules"
echo "$text_md $tab_lang_english                  Control the iptables firewall rules"
echo "$text_md $tab_lang_spanish                  Controla las reglas de iptables"
echo "$text_md $tab firewall-list"
echo "$text_md $tab_lang_english                  List the iptables firewall rules"
echo "$text_md $tab_lang_spanish                  Lista las reglas de iptables"
echo "$text_md $tab firewall-launch"
echo "$text_md $tab_lang_english                  Launch the iptables firewall rules"
echo "$text_md $tab_lang_spanish                  Lanza las reglas de iptables"
echo "$text_md $tab firewall-custom"
echo "$text_md $tab_lang_english                  Create, modify and show configurations"
echo "$text_md $tab_lang_spanish                  Crea, modifica y muestra configuraciones"
echo  $text_md
$brake_md
echo "$title_md                   [ tool options ]"
echo  $text_md 
echo "$text_md $tab tool-sockets"
echo "$text_md $tab_lang_english                  List net sockets ip in system"
echo "$text_md $tab_lang_spanish                  Lista sockets de red ip en el sistema"
echo "$text_md $tab tool-forward"
echo "$text_md $tab_lang_english                  list, active and desactive ipforward in linux"
echo "$text_md $tab_lang_spanish                  lista, activa y desactiva ipforward en linux"
echo "$text_md $tab tool-tcp"
echo "$text_md $tab_lang_english                  Several tools tcp"
echo "$text_md $tab_lang_spanish                  Varias herramientas tcp"
echo "$text_md $tab tool-udp"
echo "$text_md $tab_lang_english                  Several tools udp"
echo "$text_md $tab_lang_spanish                  Varias herramientas udp"
echo "$text_md $tab tool-icmp"
echo "$text_md $tab_lang_english                  Several tools icmp"
echo "$text_md $tab_lang_spanish                  Varias herramientas icmp"
echo "$text_md $tab tool-nmap"
echo "$text_md $tab_lang_english                  Port scan"
echo "$text_md $tab_lang_spanish                  Escaneo de puertos"
echo "$text_md $tab tool-sudo"
echo "$text_md $tab_lang_english                  Tool to auth sudo a users for fwiptables"
echo "$text_md $tab_lang_spanish                  Herramienta de autorizacion a usuarios para fwiptables"
echo "$text_md $tab tool-install"
echo "$text_md $tab_lang_english                  Tool to install and upgrade fwiptables"
echo "$text_md $tab_lang_spanish                  Herramienta para instalar y actualizar fwiptables"
echo "$text_md $tab tool-blacklist"
echo "$text_md $tab_lang_english                  Tool for block dangerous sites"
echo "$text_md $tab_lang_spanish                  Herramienta para bloquear peligrosos sitios"
echo "$text_md $tab tool-dev"
echo "$text_md $tab_lang_english                  Tool to developer"
echo "$text_md $tab_lang_spanish                  Herramienta de desarrollo"
echo "$text_md $tab tool-system"
echo "$text_md $tab_lang_english                  Several tools for the system"
echo "$text_md $tab_lang_spanish                  Varias herramientas para el sistema"
echo  $text_md 
$brake_md
echo "$title_md                   [ show options ]"
echo  $text_md 
echo "$text_md $tab show-etc"
echo "$text_md $tab_lang_english                  Show net files in /etc/"
echo "$text_md $tab_lang_spanish                  Muestra archivos de red de /etc/"
echo "$text_md $tab show-log"
echo "$text_md $tab_lang_english                  Show logs systems"
echo "$text_md $tab_lang_spanish                  Muestra logs del sistema"
echo "$text_md $tab show-about"
echo "$text_md $tab_lang_english                  About"
echo "$text_md $tab_lang_spanish                  Acerca de"
echo "$text_md $tab show-help"
echo "$text_md $tab_lang_english                  Help"
echo "$text_md $tab_lang_spanish                  Ayuda"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-group-options:
##############################       english: firewall-launch: options
##############################       spanish: firewall-launch: opciones
#### :rutina-inicial-firewall-launch:
####
####
if [ "$first_option" = "firewall-launch" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ launch rules ] [ firewall-launch.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Launch iptables rules ]"
echo "$text_md [ spanish info ] [ Lanza reglas de iptables ]"
echo  $text_md
echo "$text_md $tab eraserules" 
echo "$text_md $tab_lang_english          : Remove the iptables rules in ipv4 and ipv6"
echo "$text_md $tab_lang_spanish          : Borra las reglas de iptables en ipv4 y ipv6"
echo "$text_md $tab wizard-mini"
echo "$text_md $tab_lang_english          : Launch one wizard mini to launch iptables rules"
echo "$text_md $tab_lang_spanish          : Lanza un wizard mini para lanzar reglas de iptables"
echo "$text_md $tab wizard-full"
echo "$text_md $tab_lang_english          : Launch one wizard full to launch rules"
echo "$text_md $tab_lang_spanish          : Lanza un wizard completo para lanzar reglas de iptables"
echo "$text_md $tab offline"
echo "$text_md $tab_lang_english          : Launch one firewall disconected for all servers and clients except localhost"
echo "$text_md $tab_lang_spanish          : Lanza un Firewall desconectado para todo servidores y clientes excepto localhost"
echo "$text_md $tab all-permisive"
echo "$text_md $tab_lang_english          : Launch one firewall very permisive"
echo "$text_md $tab_lang_spanish          : Lanza un firewall muy permisivo"
echo "$text_md $tab games-shooter"
echo "$text_md $tab_lang_english          : Launch one firewall like client games for udp non-root"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente juegos udp no-root"
echo "$text_md $tab game-westnoth"
echo "$text_md $tab_lang_english          : Launch one firewall like client game of battle for westnoth"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente del juego la batalla por westnoth"
echo "$text_md $tab game-minetest"
echo "$text_md $tab_lang_english          : Launch one firewall like client game of minecraft or minetest"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente de juego minecraft or minetest"
echo "$text_md $tab custom"
echo "$text_md $tab_lang_english          : Launch one custom firewall with one file cfg"
echo "$text_md $tab_lang_spanish          : Lanza un modificado firewall con un archivo cfg"
echo "$text_md $tab client-web"
echo "$text_md $tab_lang_english          : Launch one firewall like client web and ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente web y ssh"
echo "$text_md $tab client-torrent"
echo "$text_md $tab_lang_english          : Launch one firewall like client web and ssh and torrent"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente web y ssh y torrent"
echo "$text_md $tab client-vpn"
echo "$text_md $tab_lang_english          : Launch one firewall like client web and ssh and vpn"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como cliente web y ssh y vpn"
echo "$text_md $tab client-tor"
echo "$text_md $tab_lang_english          : Launch one firewall with browser with tor"
echo "$text_md $tab_lang_spanish          : Lanza un firewall para nevagar con tor"
echo "$text_md $tab lan-tor"
echo "$text_md $tab_lang_english          : Launch one firewall only to browser with tor"
echo "$text_md $tab_lang_spanish          : Lanza un firewall solo para nevagar con tor"
echo "$text_md $tab lan-vpn"
echo "$text_md $tab_lang_english          : Launch one firewall only to browser with vpn"
echo "$text_md $tab_lang_spanish          : Lanza un firewall solo para nevagar con vpn"
echo "$text_md $tab server-web" 
echo "$text_md $tab_lang_english          : Launch one firewall like server web and ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor web y ssh"
echo "$text_md $tab server-samba"
echo "$text_md $tab_lang_english          : Launch one firewall samba and ssh like client and server both"
echo "$text_md $tab_lang_spanish          : Lanza un firewall sambla y ssh como cliente y servidor ambos"
echo "$text_md $tab server-print"
echo "$text_md $tab_lang_english          : Launch one firewall like server ipp, printer and ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor ipp, printer y ssh"
echo "$text_md $tab server-ssh"
echo "$text_md $tab_lang_english          : Launch one firewall like server ssh"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor ssh"
echo "$text_md $tab server-lamp"
echo "$text_md $tab_lang_english          : Launch one firewall like server LAMP"
echo "$text_md $tab_lang_spanish          : Lanza un firewall como servidor LAMP"
echo "$text_md $tab cfg" 
echo "$text_md $tab_lang_english          : Alias to custom"
echo "$text_md $tab_lang_spanish          : Apodo to custom"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-firewall-launch:
##############################       english: firewall-rules: options
##############################       spanish: firewall-rules: opciones
#### :rutina-inicial-firewall-rules:
####
####
if [ "$first_option" = "firewall-rules" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ control rules ] [ firewall-rules.md ]"
echo  $text_md 
echo "$text_md [ english info ] [ Control iptables rules ]"
echo "$text_md [ spanish info ] [ Controla reglas de iptables ]"
echo  $text_md
echo "$text_md $tab stop" 
echo "$text_md $tab_lang_english          : Save and stop the rules"
echo "$text_md $tab_lang_spanish          : Guarda y para las reglas"
echo "$text_md $tab continue"
echo "$text_md $tab_lang_english          : continue with old rules"
echo "$text_md $tab_lang_spanish          : Continua con las viejas reglas"
echo "$text_md $tab reset" 
echo "$text_md $tab_lang_english          : Reset the rules"
echo "$text_md $tab_lang_spanish          : Resetea las reglas"
echo "$text_md $tab list-fw" 
echo "$text_md $tab_lang_english          : Alias to names"
echo "$text_md $tab_lang_spanish          : Apodo a names"
echo "$text_md $tab names" 
echo "$text_md $tab_lang_english          : Show the files of firewall standard"
echo "$text_md $tab_lang_spanish          : Muestra los archivos de firewall estandard guardados"
echo "$text_md $tab show" 
echo "$text_md $tab_lang_english          : Show the files in firewall standard"
echo "$text_md $tab_lang_spanish          : Muestra los archivos de firewall estandard"
echo "$text_md $tab save" 
echo "$text_md $tab_lang_english          : Save the files in firewall standard"
echo "$text_md $tab_lang_spanish          : Guarda los archivos de firewall estandard"
echo "$text_md $tab load" 
echo "$text_md $tab_lang_english          : Restore files from firewall standard"    
echo "$text_md $tab_lang_spanish          : Recupera los archivos de firewall estandard"
echo "$text_md $tab actual" 
echo "$text_md $tab_lang_english          : Show the actual iptables standard"
echo "$text_md $tab_lang_spanish          : Muestra el actual firewall estandard"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-firewall-rules:
##############################       english: firewall-list: options
##############################       spanish: firewall-list: opciones
#### :rutina-inicial-firewall-list:
####
####
if [ "$first_option" = "firewall-list" ]; then $give_cover
echo "$title_md [ $first_option ] [ List rules ] [ firewall-list.md ]"
echo  $text_md
echo "$text_md [ english info ] [ List filter iptables rules ]"
echo "$text_md [ spanish info ] [ Lista reglas de iptables filtros ]"
echo  $text_md
echo "$text_md $tab list"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv4 with hide no used"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla filtros desde ipv4 esconde no usadas"
echo "$text_md $tab list6"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv6 with hide no used"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla filtros desde ipv6 esconde no usadas"
echo  $text_md 
echo "$text_md $tab status"
echo "$text_md $tab_lang_english          : List iptables filter rules ip4 and ipv6 when there are only default route"
echo "$text_md $tab_lang_spanish          : Lista filtros de iptables rules ip4 y ip6 solo cuando hay ruta por defecto"
echo "$text_md $tab list-forward"
echo "$text_md $tab_lang_english          : List iptables filter rules foward"
echo "$text_md $tab_lang_spanish          : Lista tabla de iptables de reenvio ipv4"
echo "$text_md $tab list-forward6"
echo "$text_md $tab_lang_english          : List iptables filter rules forward ipv6"
echo "$text_md $tab_lang_spanish          : Lista tabla de iptables de reenvio ipv6"
echo "$text_md $tab listnum"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv4 in numbers"
echo "$text_md $tab_lang_spanish          : Lista la tabla de reglas de filtros desde ipv4 en numeros"
echo "$text_md $tab listnum6"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv6 in numbers"
echo "$text_md $tab_lang_spanish          : Lista la tabla de reglas de filtros desde ipv6 en numeros"
echo "$text_md $tab list-forwardnum"
echo "$text_md $tab_lang_english          : List iptables filter rules foward in numbers"
echo "$text_md $tab_lang_spanish          : Lista la tabla de reglas de filtros de reenvio ipv4 en numeros"
echo "$text_md $tab list-forwardnum6"
echo "$text_md $tab_lang_english          : List iptables filter rules forward ipv6 in numbers"
echo "$text_md $tab_lang_spanish          : Lista la tabla de reglas de filtros de reenvio ipv6 en numeros"
echo  $text_md 
echo "$text_md $tab list-filter4"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista iptables reglas de filtros desde ipv4"
echo "$text_md $tab list-filter6"
echo "$text_md $tab_lang_english          : List iptables filter rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista iptables reglas de filtros desde ipv6"
echo "$text_md $tab list-nat4"
echo "$text_md $tab_lang_english          : List iptables nat rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista iptables nat reglas de ipv4"
echo "$text_md $tab list-nat6"
echo "$text_md $tab_lang_english          : List iptables nat rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista iptables nat reglas de ipv6"
echo "$text_md $tab list-mangle4"
echo "$text_md $tab_lang_english          : List iptables mangle rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista reglas de manipulacion ipv4"
echo "$text_md $tab list-mangle6"
echo "$text_md $tab_lang_english          : List iptables mangle rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista reglas de manipulacion ipv6"
echo "$text_md $tab list-raw4"
echo "$text_md $tab_lang_english          : List iptables raw rules from ipv4"
echo "$text_md $tab_lang_spanish          : Lista reglas directas de ipv4"
echo "$text_md $tab list-raw6"
echo "$text_md $tab_lang_english          : List iptables raw rules from ipv6"
echo "$text_md $tab_lang_spanish          : Lista reglas directas de ipv6"
echo "$text_md $tab list-security4"
echo "$text_md $tab_lang_english          : List iptables security rules from ipv4"
echo "$text_md $tab_lang_spanish          : lista reglas de seguridad de ipv4"
echo "$text_md $tab list-security6"
echo "$text_md $tab_lang_english          : List iptables security rules from ipv6"
echo "$text_md $tab_lang_spanish          : lista reglas de seguridad de ipv6"
echo  $text_md
echo "$text_md $tab list-ebtables"
echo "$text_md $tab_lang_english          : List rules mac ethernet"
echo "$text_md $tab_lang_spanish          : Lista reglas mac de ethernet"
echo "$text_md $tab arp-tables"
echo "$text_md $tab_lang_english          : List rules arptables arp"
echo "$text_md $tab_lang_spanish          : Lista reglas de tabla de arpanet"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-firewall-list:
##############################       english: list-numrules: options
##############################       spanish: list-numrules: opciones
#### :rutina-inicial-list-numrules:
####
####
if [ "$first_option" = "list-numrules" ]; then $give_cover
echo "$tab [ $first_option ] [ List rules in numerical ]"
echo "$tab [ List iptables numerical rules ]"
echo "$tab [ Lista reglas numericas de iptables ]"
echo
echo "               listnum : List iptables filter rules input and output ipv4 in numbers"
echo "                       : Lista la tabla de reglas de filtros de entrada y salida ipv4 in numeros"
echo "       list-forwardnum : List iptables filter rules foward in numbers"
echo "                       : Lista la tabla de reglas de filtros de reenvio ipv4 in numeros"
echo "              listnum6 : List iptables filter rules input and output ipv6 in numbers"
echo "                       : Lista la tabla de reglas de filtros de entrada y salida ipv6 in numeros"
echo "      list-forwardnum6 : List iptables filter rules forward ipv6 in numbers"
echo "                       : Lista la tabla de reglas de filtros de reenvio ipv6 in numeros"
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-list-numrules:
##############################       english: firewall-custom: options
##############################       spanish: firewall-custom: opciones
#### :rutina-inicial-firewall-custom:
####
####
if [ "$first_option" = "firewall-custom" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ tool custom rules config ] [ firewall-custom.md ]"
echo  $text_md 
echo "$text_md [ english info ] [ custom configs ]"
echo "$text_md [ spanish info ] [ Herramienta de configuraciones de reglas ]"
echo  $text_md
echo "$text_md $tab new-full-config"
echo "$text_md $tab_lang_english          : Create a new advance configfile.cfg in english"
echo "$text_md $tab_lang_spanish          : Crea una nueva avanzada configfile.cfg en ingles"
echo "$text_md $tab nueva-completa-config"
echo "$text_md $tab_lang_english          : Create a new advance configfile.cfg in spanish"
echo "$text_md $tab_lang_spanish          : Crea una nueva avanzada configfile.cfg en español"
echo "$text_md $tab new-mini-config"
echo "$text_md $tab_lang_english          : Create a new basic configfile.cfg in english"
echo "$text_md $tab_lang_spanish          : Crea una nueva basica configfile.cfg en ingles"
echo "$text_md $tab nueva-mini-config"
echo "$text_md $tab_lang_english          : Create a new basic configfile.cfg in spanish"
echo "$text_md $tab_lang_spanish          : Crea una nueva basica configfile.cfg en español"
echo "$text_md $tab regen-config"
echo "$text_md $tab_lang_english          : regen-config wizard templates y cfg templates files"
echo "$text_md $tab_lang_spanish          : regen-configera plantillas wizard y plantillas cfg"
echo "$text_md $tab names-config"
echo "$text_md $tab_lang_english          : List config files cfg"
echo "$text_md $tab_lang_spanish          : Lista las configuraciones de archivo cfg"
echo "$text_md $tab modify-config"
echo "$text_md $tab_lang_english          : Edit one configfile.cfg"
echo "$text_md $tab_lang_spanish          : Edita una configuracion.cfg"
echo "$text_md $tab show-config"
echo "$text_md $tab_lang_english          : Show one configfile.cfg"
echo "$text_md $tab_lang_spanish          : Muestra una configuracion.cfg"
echo "$text_md $tab del-config"
echo "$text_md $tab_lang_english          : Delete one configuration file"
echo "$text_md $tab_lang_spanish          : Borra una configuracion.cfg"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-firewall-custom:
##############################       english: output-interface: options
##############################       spanish: user-intarface: opciones
#### :rutina-inicial-output-interface:
####
####
if [ "$first_option" = "output-interface" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ control interface ] [ output-interface.md ]"
echo  $text_md
echo "$text_md [ english info ] [ control interface ]" 
echo "$text_md [ spanish info ] [ control de interfaz ]"
echo  $text_md
echo "$text_md $tab txt OR -txt"
echo "$text_md $tab_lang_english          : Output to Text line"
echo "$text_md $tab_lang_spanish          : Salida a linea de texto"
echo "$text_md $tab cli OR -cli"
echo "$text_md $tab_lang_english          : Output to text menu"
echo "$text_md $tab_lang_spanish          : Salida a menu de texto"
echo "$text_md $tab gui OR -gui"
echo "$text_md $tab_lang_english          : Output to graphicall window"
echo "$text_md $tab_lang_spanish          : Salida a ventana grafica"
echo "$text_md $tab log OR -log"
echo "$text_md $tab_lang_english          : Save the output"
echo "$text_md $tab_lang_spanish          : Guarda la salida"
echo "$text_md $tab web OR -web"
echo "$text_md $tab_lang_english          : Output in favorite text web browser"
echo "$text_md $tab_lang_spanish          : Salida en favorito navegador web de texto"
echo "$text_md $tab rst OR -rst"
echo "$text_md $tab_lang_english          : Output in text with rst format"
echo "$text_md $tab_lang_spanish          : Salida en text con formato rst"
echo "$text_md $tab tor OR -tor"
echo "$text_md $tab_lang_english          : Run in tor, necesary tor daemon ant torify command"
echo "$text_md $tab_lang_spanish          : Ejecuta en tor, necesario daemon tor y comando torify"
echo "$text_md $tab cli-menu"
echo "$text_md $tab_lang_english          : Text cli interface from menus"
echo "$text_md $tab_lang_spanish          : Interfaz de menus desde texto"
echo "$text_md $tab gui-menu"
echo "$text_md $tab_lang_english          : Gui interface from menu"
echo "$text_md $tab_lang_english          : Interfaz grafica desde menu"
echo "$text_md $tab gui-shell"
echo "$text_md $tab_lang_english          : Gui with command line interface"
echo "$text_md $tab_lang_spanish          : Gui con interfaz desde linea de comandos"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-output-interface:
##############################       english: tool-sockets: options sockets
##############################       spanish: tool-sockets: opciones sockets
#### :rutina-inicial-tool-sockets:
####
####
if [ "$first_option" = "tool-sockets" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ tool sockets ] [ tool-sockets.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool sockets ]"
echo "$text_md [ spanish info ] [ Herramienta de sockets ]"
echo  $text_md
echo "$text_md $tab info-sockets"
echo "$text_md $tab_lang_english          : List system listen sockets"
echo "$text_md $tab_lang_spanish          : Lista sockets a la escuha del sistema"
echo "$text_md $tab info-nodes"
echo "$text_md $tab_lang_english          : List the conentions arp in the lan"
echo "$text_md $tab_lang_spanish          : Lista las conexiones arp en la red local"
echo "$text_md $tab info-proxy"
echo "$text_md $tab_lang_english          : List system proxy"
echo "$text_md $tab_lang_spanish          : Lista proxy del sistema"
echo "$text_md $tab info-route"
echo "$text_md $tab_lang_english          : Show net devices and ip route tables"
echo "$text_md $tab_lang_spanish          : Muestra los dispositivos de red y la tabla de rutas"
echo "$text_md $tab ss"
echo "$text_md $tab_lang_english          : Show net sockets with command ss"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones de red con ss"
echo "$text_md $tab lsof"
echo "$text_md $tab_lang_english          : Show net sockets with command lsof"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones con lsof"
echo "$text_md $tab netstat"
echo "$text_md $tab_lang_english          : Show net sockets with command netstat"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones con netstat"
echo "$text_md $tab netstat-nat"
echo "$text_md $tab_lang_english          : Show net sockets with command netstat-nat"
echo "$text_md $tab_lang_spanish          : Muestra las conexiones con netstat-nat"
echo "$text_md $tab web-cert"
echo "$text_md $tab_lang_english          : Get one ssl certificated to one web with port https(443)"
echo "$text_md $tab_lang_spanish          : Obtiene un certificado ssl a una web con puerto https(443)" 
echo "$text_md $tab tcpdump"
echo "$text_md $tab_lang_english          : Listen the connections"
echo "$text_md $tab_lang_spanish          : Escucha las conexiones"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-sockets:
##############################       english: tool-game: options utils
##############################       spanish: tool-game: opciones utiles
#### :rutina-inicial-tool-game:
####
####
if [ "$first_option" = "tool-game" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ tool game ] [ tool-game.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool game ]"
echo "$text_md [ spanish info ] [ Herramienta de juego ]"
echo  $text_md
echo "$text_md $tab ole-word"
echo "$text_md $tab_lang_english          : Play game to discover a random word with five digits"
echo "$text_md $tab_lang_spanish          : Juega a descubrir una palabra aleatoria de cinco caracteres"
echo "$text_md $tab ole-number"
echo "$text_md $tab_lang_english          : Play game to discover a random number with five digits"
echo "$text_md $tab_lang_spanish          : Juega a descubrir un numero aleatorio de cinco digitos"
echo "$text_md $tab ole-domain"
echo "$text_md $tab_lang_english          : Discover one domain if generic or if country"
echo "$text_md $tab_lang_spanish          : Descubre un dominio si es generico o si es de pais"
echo "$text_md $tab colour-hex"
echo "$text_md $tab_lang_english          : Convert one number hexadecimal in rgb"
echo "$text_md $tab_lang_spanish          : Convierte un numero hexadecimal en rgb"
echo "$text_md $tab colour-rgb"
echo "$text_md $tab_lang_english          : Convert one number rgb in hexadecimal"
echo "$text_md $tab_lang_spanish          : Convierte un numero rgb en hexadecimal"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-game:
##############################       english: tool-forward: options ipforwading
##############################       spanish: tool-forward: opciones ipforwading
#### :rutina-inicial-tool-forward:
####
####
if [ "$first_option" = "tool-forward" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ tool forward ] [ tool-forward.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool forward ]"
echo "$text_md [ spanish info ] [ Herramienta de ipforwading ]"
echo  $text_md
echo "$text_md $tab ipforward-list"
echo "$text_md $tab_lang_english          : Show kernel config about forward"
echo "$text_md $tab_lang_spanish          : Muestra configuracion del kernel sobre reenvios"
echo "$text_md $tab ipforward-on"
echo "$text_md $tab_lang_english          : Active the kernel config about forward"
echo "$text_md $tab_lang_spanish          : Activa la configuracion del kernel sobre reenvios"
echo "$text_md $tab ipforward-off"
echo "$text_md $tab_lang_english          : Deactive kernel config about forward"
echo "$text_md $tab_lang_spanish          : Desactiva la configuracion del kernel sobre reenvios"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-forward:
##############################       english: tool-icmp: options
##############################       spanish: tool-cimp: opciones
#### :rutina-inicial-tool-icmp:
####
####
if [ "$first_option" = "tool-icmp" ]; then $give_cover
echo "$tab [ $first_option ] [ tool icmp ] [ tool-icmp.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool icmp ]"
echo "$text_md [ spanish info ] [ Herramienta icmp ]"
echo  $text_md
echo "$text_md $tab traceicmp-ip4"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv4 icmp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv4 icmp"
echo "$text_md $tab traceicmp-ip6"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv6 icmp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv6 icmp"
echo "$text_md $tab ping-ip4"
echo "$text_md $tab_lang_english          : Do a one ping with to one host with ipv4 icmp"
echo "$text_md $tab_lang_spanish          : Hace un ping con una direccion con ipv4 icmp"
echo "$text_md $tab ping-ip6"
echo "$text_md $tab_lang_english          : Do a one ping with to one host with ipv6 icmp"
echo "$text_md $tab_lang_spanish          : Hace un ping con una direccion con ipv6 icmp"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-icmp:
##############################       english: tool-tcp: options
##############################       spanish: tool-tcp: opciones
#### :rutina-inicial-tool-tcp:
####
####
if [ "$first_option" = "tool-tcp" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ tool tcp ] [ tool-tcp.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool tcp ]"
echo "$text_md [ spanish info ] [ Herramienta tcp ]"
echo  $text_md
echo "$text_md $tab tracetcp-ip4"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv4 tcp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv4 tcp"
echo "$text_md $tab tracetcp-ip6"
echo "$text_md $tab_lang_english          : Trace route a one host with ipv6 tcp"
echo "$text_md $tab_lang_spanish          : Traza la routa a una direccion con ipv6 tcp"
echo "$text_md $tab speed-ip4"
echo "$text_md $tab_lang_english          : test bandwith with ipv4"
echo "$text_md $tab_lang_spanish          : Testea la velocidad de conexion con ipv4"
echo "$text_md $tab speed-ip6"
echo "$text_md $tab_lang_english          : Test net bandwith with ipv6"
echo "$text_md $tab_lang_spanish          : Testea la velocidad de conexion con ipv6"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-tcp:
##############################       english: tool-udp: options
##############################       spanish: tool-udp: opciones
#### :rutina-inicial-tool-udp:
####
####
if [ "$first_option" = "tool-udp" ]; then $give_cover
echo "$title_md $tab [ $first_option ] [ tool udp ] [ tool-udp.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool udp ]"
echo "$text_md [ spanish info ] [ Herramienta udp ]"
echo  $text_md
echo "$text_md $tab host"
echo "$text_md $tab_lang_english          : Resolve one host"
echo "$text_md $tab_lang_spanish          : Resuelve una direccion a ip"
echo "$text_md $tab dig"
echo "$text_md $tab_lang_english          : Resolve one host"
echo "$text_md $tab_lang_spanish          : Resuelve una direccion a ip"
echo "$text_md $tab resolveip"
echo "$text_md $tab_lang_english          : Resolve one host and viceversa"
echo "$text_md $tab_lang_spanish          : Resuelve una direccion a ip y a host"
echo "$text_md $tab geip"
echo "$text_md $tab_lang_english          : Locate a one host or ip"
echo "$text_md $tab_lang_spanish          : Localiza una direccion o ip"
echo "$text_md $tab ntpdate"
echo "$text_md $tab_lang_english          : Update the system date from ntp server"
echo "$text_md $tab_lang_spanish          : Actualiza la fecha del sistema desde un servidor de fecha"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-udp:
##############################       english: tool-nmap: options
##############################       spanish: tool-nmap: opciones
#### :rutina-inicial-tool-nmap:
####
####
if [ "$first_option" = "tool-nmap" ]; then $give_cover
echo "$title_md [ $first_option ] [ tool nmap ] [ tool-nmap.md]"
echo  $text_md
echo "$text_md [ english info ] [ Tool nmap ]"
echo "$text_md [ spanish info ] [ Herramienta nmap ]"
echo  $text_md
echo "$text_md $tab scan-tcp"
echo "$text_md $tab_lang_english          : Scan a host/mask per tcp protocol"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por tcp protocolo"
echo "$text_md $tab scan-syn"
echo "$text_md $tab_lang_english          : Scan a host/mask per syn socket"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por syn socket"
echo "$text_md $tab scan-fin"
echo "$text_md $tab_lang_english          : Scan a host/mask per fin socket"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por fin socket"
echo "$text_md $tab scan-udp"
echo "$text_md $tab_lang_english          : Scan a host/mask per udp protocol"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por udp protocolo"
echo "$text_md $tab scan-ping"
echo "$text_md $tab_lang_english          : Scan a host/mask per ping udp"
echo "$text_md $tab_lang_spanish          : Escanea una host/mascara por ping protocolo"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-nmap:
##############################       english: tool-sudo: options
##############################       spanish: tool-sudo: opciones
#### :rutina-inicial-tool-sudo:
####
####
if [ "$first_option" = "tool-sudo" ]; then $give_cover
echo "$title_md [ $first_option ] [ tool sudo ] [ tool-sudo.md ]"
echo  $text_md
echo "$text_md [ Tool sudo ]"
echo "$text_md [ Herramienta sudo ]"
echo  $text_md
echo "$text_md $tab sudo-adduser" 
echo "$text_md $tab_lang_english          : Allow sudo $fwiptables to other choosed users"
echo "$text_md $tab_lang_spanish          : Permite sudo $fwiptables a otros elegidos usuarios"
echo "$text_md $tab sudo-deluser" 
echo "$text_md $tab_lang_english          : Remove sudo $fwiptables to other choosed users"
echo "$text_md $tab_lang_spanish          : Borra sudo $fwiptables a otros elegidos usuarios"
echo "$text_md $tab sudo-list" 
echo "$text_md $tab_lang_english          : List sudo $fwiptables to other choosed users"
echo "$text_md $tab_lang_spanish          : Lista sudo $fwiptables a otros elegidos usuarios"
echo "$text_md $tab alias-list" 
echo "$text_md $tab_lang_english          : List the autocompletion alias for $fwiptables"
echo "$text_md $tab_lang_spanish          : Lista los alias de autocompletar para $fwiptables"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-sudo:
##############################       english: tool-install: options
##############################       spanish: tool-install: opciones
#### :rutina-inicial-tool-install:
####
####
if [ "$first_option" = "tool-install" ]; then $give_cover
echo "$title_md [ $first_option ] [ tool install ] [ tool-install.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool install ]"
echo "$text_md [ spanish info ] [ Herramienta instalar ]"
echo  $text_md
echo "$text_md $tab install"
echo "$text_md $tab_lang_english          : Install this version actual"
echo "$text_md $tab_lang_spanish          : Instala esta version actual"
echo "$text_md $tab howto-upgrade"
echo "$text_md $tab_lang_english          : Show howto upgrade at the latest version"
echo "$text_md $tab_lang_spanish          : Muestra como actualizar a la ultima version"
echo "$text_md $tab upgrade"
echo "$text_md $tab_lang_english          : Upgrade at the latest version"
echo "$text_md $tab_lang_spanish          : Actualiza a la ultima version"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-install:
##############################       english: tool-blacklist: options
##############################       spanish: tool-blacklist: opciones
#### :rutina-inicial-tool-blacklist:
####
####
if [ "$first_option" = "tool-blacklist" ]; then $give_cover
echo "$title_md [ $first_option ] [ tool blacklist in /etc/hosts ] [ tool-blacklist.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool blacklist ]"
echo "$text_md [ spanish info ] [ Herramienta de lista negra ]"
echo  $text_md
echo "$text_md $tab blacklist-list"
echo "$text_md $tab_lang_english               : Options list to block at dangerous sites from /etc/hosts"
echo "$text_md $tab_lang_spanish               : Lista de opciones para bloquear a peligrosos sitios desde /etc/hosts"
echo "$text_md $tab blacklist-on"
echo "$text_md $tab_lang_english               : Active a list to block dangerous sites in /etc/hosts"
echo "$text_md $tab_lang_spanish               : Activa una lista para bloquear sitios peligrosos in /etc/hosts"
echo "$text_md $tab blacklist-off"
echo "$text_md $tab_lang_english               : Return to default /etc/hosts"
echo "$text_md $tab_lang_spanish               : Vuelve al archivo por defecto /etc/hosts"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-blacklist:
##############################       english: tool-dev: options
##############################       spanish: tool-dev: opciones
#### :rutina-inicial-tool-dev:
####
####
if [ "$first_option" = "tool-dev" ]; then $give_cover
echo "$title_md [ $first_option ] [ tool install ] [ tool-dev.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool install ]"
echo "$text_md [ spanish info ] [ Herramienta instalar ]"
echo  $text_md
echo "$text_md $tab new-versions"
echo "$text_md $tab_lang_english               : Show the list of the last versions"
echo "$text_md $tab_lang_spanish               : Muestra el listado de las ultivas versiones"
echo "$text_md $tab dev-version"
echo "$text_md $tab_lang_english               : Show the link at developer version"
echo "$text_md $tab_lang_spanish               : Muestra en enlace a la version de desarrollo"
echo "$text_md $tab dev-changes"
echo "$text_md $tab_lang_english               : Show the last changes"
echo "$text_md $tab_lang_spanish               : Muestra los ultimos cambios"
echo "$text_md $tab code"
echo "$text_md $tab_lang_english               : Show code source from one option"
echo "$text_md $tab_lang_spanish               : Muestra el codigo fuente de una opcion"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-dev:
##############################       english: tool-system: options
##############################       spanish: tool-system: opciones
#### :rutina-inicial-tool-system:
####
####
if [ "$first_option" = "tool-system" ]; then $give_cover
echo "$title_md [ $first_option ] [ tool system ] [ tool-system.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Tool system ]"
echo "$text_md [ spanish info ] [ Herramienta sistema ]"
echo  $text_md
echo "$text_md $tab free-ram"
echo "$text_md $tab_lang_english           : Clean for innecesary memory ram"
echo "$text_md $tab_lang_spanish           : Libera la memoria ram innecesaria"
echo "$text_md $tab speed-ram" 
echo "$text_md $tab_lang_english           : Show the speed of ram memory"
echo "$text_md $tab_lang_spanish           : Muestra la velocidad de la memoria ram"
echo "$text_md $tab speed-disk"
echo "$text_md $tab_lang_english           : Show the speed of root hard disk"
echo "$text_md $tab_lang_spanish           : Muestra la velocidad de el disco duro raiz"
echo "$text_md $tab speed-glx"
echo "$text_md $tab_lang_english           : Show frammes for seconds with mesa graphicall"
echo "$text_md $tab_lang_spanish           : Muestra fotogramas por segundo con graficos mesa"
echo "$text_md $tab radio-mp3"
echo "$text_md $tab_lang_english           : connect to one server mp3, see show-default or modify-default"
echo "$text_md $tab_lang_spanish           : connecta a on servidor mp3, mira show-default o modify-default"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-system:
##############################       english: show-etc: options
##############################       spanish: show-etc: opciones
#### :rutina-inicial-show-etc:
####
####
if [ "$first_option" = "show-etc" ]; then $give_cover
echo "$title_md [ $first_option ] [ show etc files ] [ show-etc.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Show configs files from etc ]"
echo "$text_md [ spanish info ] [ Mostrar configuraciones de archivos de etc ]"
echo  $text_md
echo "$text_md $tab hosts"
echo "$text_md $tab_lang_english           : Show /etc/hosts, hosts local and statics host"
echo "$text_md $tab_lang_spanish           : Muestra /etc/hosts, hosts locales y hosts estaticos"
echo "$text_md $tab protocols"
echo "$text_md $tab_lang_english           : Show /etc/protocols, protocols names"
echo "$text_md $tab_lang_spanish           : Muestra /etc/protocols, nombres de protocolos"
echo "$text_md $tab services"
echo "$text_md $tab_lang_english           : Show /etc/services, ports names"
echo "$text_md $tab_lang_spanish           : Muestra /etc/services, nombres de los puertos"
echo "$text_md $tab hosts.allow" 
echo "$text_md $tab_lang_english           : Show /etc/hosts.allow, hosts allowed in some own server"
echo "$text_md $tab_lang_spanish           : Muestra /etc/hosts.allow, hosts permitidas en algunos propios servidores"
echo "$text_md $tab hosts.deny"
echo "$text_md $tab_lang_english           : Show /etc/hosts.deny, hosts drops in some own server"
echo "$text_md $tab_lang_spanish           : Muestra /etc/hosts.deny, hosts denegadas en algunos propios servidores"
echo "$text_md $tab resolv.conf"
echo "$text_md $tab_lang_english           : Show /etc/resolv.conf, it are the dns configured"
echo "$text_md $tab_lang_spanish           : Muestra /etc/resolv.conf, este es el dns configurado"
echo "$text_md $tab show-default"
echo "$text_md $tab_lang_english           : Show variables for default"
echo "$text_md $tab_lang_spanish           : Muestra variables por defecto"
echo "$text_md $tab modify-default"
echo "$text_md $tab_lang_english           : Change variables for default"
echo "$text_md $tab_lang_spanish           : Cambia variables por defecto"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-etc:
##############################       english: show-hardware: options
##############################       spanish: show-hardware: opciones
#### :rutina-inicial-show-hardware:
####
####
if [ "$first_option" = "show-hardware" ]; then $give_cover
echo "$title_md [ $first_option ] [ show hardware info ] [ show-hardware.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Show hardware info ]"
echo "$text_md [ spanish info ] [ Muestra informacion del hardware ]"
echo  $text_md
echo "$text_md $tab lpinfo"
echo "$text_md $tab_lang_english           : Show the device printers"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de impresora"
echo "$text_md $tab lsblk"
echo "$text_md $tab_lang_english           : Show the device disks"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de disco"
echo "$text_md $tab lsusb"
echo "$text_md $tab_lang_english           : Show the devices usb"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de usb"
echo "$text_md $tab lscpu"
echo "$text_md $tab_lang_english           : Show the devices cpu"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos cpu"
echo "$text_md $tab lsgpu"
echo "$text_md $tab_lang_english           : Show the devices gpu"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos gpu"
echo "$text_md $tab lspci"
echo "$text_md $tab_lang_english           : Show the devices pci"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos pci"
echo "$text_md $tab lshw"
echo "$text_md $tab_lang_english           : Show the hardware devices"
echo "$text_md $tab_lang_spanish           : Muestra los dispositivos de hardware"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-hardware:
##############################       english: show-log: options
##############################       spanish: show-log: opciones
#### :rutina-inicial-show-log:
####
####
if [ "$first_option" = "show-log" ]; then $give_cover
echo "$title_md [ $first_option ] [ show log files ] [ show-log.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Show log ]"
echo "$text_md [ spanish info ] [ Mostrar log ]"
echo  $text_md
echo "$text_md $tab log-ssh"
echo "$text_md $tab_lang_english           : Search logs for ssh in /var/log"
echo "$text_md $tab_lang_spanish           : Busca logs con sshd en /var/log"
echo "$text_md $tab log-search"
echo "$text_md $tab_lang_english           : Search logs whith a prefix in /var/log"
echo "$text_md $tab_lang_spanish           : Busca logs con patron en /var/log"
echo "$text_md $tab sentlog"
echo "$text_md $tab_lang_english           : Show over launches with -log"
echo "$text_md $tab_lang_spanish           : Muestra volcados con -log"
echo "$text_md $tab filelog"
echo "$text_md $tab_lang_english           : Alias a sentlog"
echo "$text_md $tab_lang_spanish           : Apodo a sentlog"
echo "$text_md $tab autolog"
echo "$text_md $tab_lang_english           : Show the headers from autolog"
echo "$text_md $tab_lang_spanish           : Muestra las cabeceras autolog"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-log:
##############################       english: show-about: options
##############################       spanish: show-about: opciones
#### :rutina-inicial-show-about:
####
####
if [ "$first_option" = "show-about" ]; then $give_cover
echo "$title_md [ $first_option ] [ show about ] [ show-about.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Show about ]"
echo "$text_md [ spanish info ] [ Mostrar acerca de ]"
echo  $text_md
echo "$text_md $tab about"
echo "$text_md $tab_lang_english           : About"
echo "$text_md $tab_lang_spanish           : Acerca"
echo "$text_md $tab version"
echo "$text_md $tab_lang_english           : Info version"
echo "$text_md $tab_lang_spanish           : Informacion de version"
echo "$text_md $tab depends"
echo "$text_md $tab_lang_english           : Show depends"
echo "$text_md $tab_lang_spanish           : Muestra dependencias"
echo "$text_md $tab examples"
echo "$text_md $tab_lang_english           : Show examples"
echo "$text_md $tab_lang_spanish           : Muestra ejemplos"
echo "$text_md config-eng"
echo "$text_md $tab_lang_english           : Config example with comments in english"
echo "$text_md $tab_lang_spanish           : Ejemplo de configuracion con comentarios en ingles"
echo "$text_md config-spa"
echo "$text_md $tab_lang_english           : Config example with comments in spanish"
echo "$text_md $tab_lang_spanish           : Ejemplo de configuracion con comentarios en español"
echo "$text_md $tab license"
echo "$text_md $tab_lang_english           : Show license gpl v2"
echo "$text_md $tab_lang_spanish           : Muestra la licencia gpl v2"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-about:
##############################       english: show-help: options
##############################       spanish: show-help: opciones
#### :rutina-inicial-show-help:
####
####
if [ "$first_option" = "show-help" ]; then $give_cover
echo "$title_md [ $first_option ] [ show help ] [ show-help.md ]"
echo  $text_md
echo "$text_md [ english info ] [ Show help ]"
echo "$text_md [ spanish info ] [ Mostrar ayuda ]"
echo  $text_md
echo "$text_md $tab all-help"
echo "$text_md $tab_lang_english           : Show help in english and spanish"
echo "$text_md $tab_lang_spanish           : Muestra la ayuda en ingles y en español"
echo "$text_md $tab help"
echo "$text_md $tab_lang_english           : Show help in english"
echo "$text_md $tab_lang_spanish           : Muestra la ayuda en ingles"
echo "$text_md $tab ayuda"
echo "$text_md $tab_lang_english           : Show help in spanish"
echo "$text_md $tab_lang_spanish           : Muestra la ayuda en español"
echo "$text_md $tab group-options" 
echo "$text_md $tab_lang_english           : Show the options groups"
echo "$text_md $tab_lang_spanish           : Muestra los grupos de opciones"
echo "$text_md $tab mini-options"
echo "$text_md $tab_lang_english           : Show basic options"
echo "$text_md $tab_lang_spanish           : Muestra lista de opciones"
echo "$text_md $tab full-options"
echo "$text_md $tab_lang_english           : Show full options"
echo "$text_md $tab_lang_spanish           : Muestra lista de opciones"
echo "$text_md $tab  options"
echo "$text_md $tab_lang_english           : Alias to full options"
echo "$text_md $tab_lang_spanish           : Apodo a full-options"
echo "$text_md $tab notes"
echo "$text_md $tab_lang_english           : Several notes"
echo "$text_md $tab_lang_spanish           : Varias notas"
exit; fi
####
####
#### :rutina-final-show-help:
##############################       english: notes: notes to configure iptables
##############################       spanish: notes: notas para configurar iptables
#### :rutina-inicial-notes:
####
####
if [ "$first_option" = "notes" ]; then $give_cover
echo "$tab [ $first_option ] [ List notes about $fwiptables ]"
echo
echo " [ legacy or nft ] [ whith one of them is sufficent ] [ becouse when one accept then go to the other one ]"
echo " [ legacy or nft ] [ con uno de ellos es suficiente ] [ porque cuando uno acepta despues va a la otro ]" 
echo
echo " [ allow_maxtries_ssh ] [ limit a attack per bruteforce to us ssh server] "
echo " [ allow_maxtries_ssh ] [ limita un ataque por fuerza bruta a nuestro servidor ssh ]"
echo
echo " [ net vpn ]  [ virtual private network ] [ whitelist ]"
echo " [ net vpn ] [ red privada virtual ]     [ lista blanca ]"
echo
echo "$tab Host [net vpn] excepcionals hosts has conection allowed in firewall"
echo "$tab Host [net vpn] excepcionales hosts tienen la conexion permitida en el firewall"
echo
echo " [net blacklist] [deny host]"
echo " [net blacklist] [Lista negra]"
echo
echo "$tab Host [ net blacklist ] excepcionals hosts has conection dropped in firewall"
echo "$tab Host [ net blacklist ] expcecionales hosts tienen la conexion denegada en firewall"
echo
echo " [ allow output uid ] [user and group]"
echo " [ allow output uid ] [usuario y grupo]"
echo
echo "$tab User and/or group excepcional have output conection allowed in firewall"
echo "$tab Usuario y/o grupo excepcional tienen la salida permitida en firewall"
echo
echo " [ Notes ] [ Two iptables netfilter ]"
echo " [ Notas ] [ Dos iptables netfilter ]"
echo
echo "$tab iptables-legacy   is    support for xtables "
echo "$tab iptables-nft      is    support for nftables "
echo
echo " [ Notes ] [necesary ports to connect with ipv4 and ipv6 in UDP protocol]"
echo " [ Notas ] [puertos necesarios para conectar con ipv4 y ipv6 en UDP protocolo]"
echo
echo "    ntp : Port necesary to update the time and date"
echo "        : Puerto necesario para actualizar la hora y fecha"
echo " bootpc : Port necesary to dhcp and get ip"
echo "        : Puerto necesario para actualizar y conseguir la ip"
echo " domain : This port is necesary to domain resolver"
echo "        : Puerto necesario para resolver dominios"
echo "  https : This port is necesary for udp named web html5"
echo "        : Puerto necesario para udp llamado web html5"
echo
echo " [ Notes ] [necesary protocols for ip v6]"
echo " [ Notas ] [protocolos necesarios para ip v6]"
echo
echo "      ipv6-icmp : Necesary protocol in ipv6"
echo "                : Protocolo necesario en ipv6"
echo " ipv4 protocols : ipv6 works too with old ipv4 procotols"
echo "                : ipv6 funciona tambien con viejos ipv4 protocolos"
echo
echo " [ License ]"
echo 
echo "  Download the latest version $fprogram from sourceforge"
echo "  $fweb_latest"
echo "  $flicense"
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-notes:
##############################       english: depends: depends for $fwiptables
##############################       spanish: dependencias: dependencias para $fwiptables
#### :rutina-inicial-depends:
####
####
if [ "$first_option" = "depends" ]; then $give_cover
echo "$tab [ $first_option ] [ List programs depends about $fwiptables ]"
echo $tab
echo "$tab [ It are all the depends to full work in $fwiptables $fversion ]"
echo $tab
echo "$tab [Configuration directory]"
echo "list cfg:            $directory_config"
echo "names fw:            $directory_fwrecover"
echo $tab
echo "$tab [Configuration file]"
echo "default variables:   /etc/default/fwiptables"
echo "shell completions:   /etc/completion.d/fwiptables"
echo "                     /etc/profile.d/fwiptables"
echo "auth users:          /etc/sudoers.d/fwiptables"
echo $tab
echo "$tab [output log]"
echo "destination filelog: $file_output_filelog"
echo "destination autolog: $file_output_autolog"
echo $tab
echo "$tab [$fwiptables util]"
echo "sed:       $command_sed"
echo "fmt:       $command_fmt"
echo $tab
echo "$tab [$fwiptables cli]"
echo "dialog:    $command_dialog"
echo $tab
echo "$tab [$fwiptables gui]"
echo "zenity:      $command_zenity"
echo $tab
echo "$tab [$fwiptables auto text browser]"
echo "automatic: lynx or links or links2 "
echo "auto text browser: $favorite_text_browser"
echo $tab
echo "$tab [$fwiptables auto date command]"
echo "automatic: rdate or sntp or ntpdate"
echo "auto text browser: $favorite_date_command"
echo $tab
echo "$tab [$fwiptables auto music browser]"
echo "automatic: mpg321 or mpg123"
echo "auto text browser: $favorite_radio_command"
echo $tab
echo "$tab [the iptables]"
echo "iptables legacy:   $command_iptables_legacy"
echo "iptables nft:      $command_iptables_nft"
echo "ip6tables legacy:  $command_ip6tables_legacy"
echo "ip6tables nft:     $command_ip6tables_nft"
echo "arptables:         $command_arptables"
echo "ebtables:          $command_ebtables"
echo $tab
echo "$tab [$fwiptables tool]"
echo "date:       $command_date"
echo "uname:      $command_uname"
echo "ip:         $command_ip"
echo "curl:       $command_curl"
echo "route:      $command_route"
echo "ss:         $command_ss"
echo "netstat:    $command_netstat"
echo "netstat-nat:$command_netstat_nat"
echo "lsof:       $command_lsof"
echo "sysctl:     $command_sysctl"
echo "tcpdump:    $command_tcpdump"
echo "arp:        $command_arp"
echo "arp-scan:   $command_arp_scan"
echo "ping:       $command_ping"
echo "ntpdate:    $command_ntpdate"
echo "rdate:      $command_rdate"
echo "sntp:       $command_sntp"
echo "traceroute: $command_traceroute"
echo "host:       $command_host"
echo "dig:        $command_dig"
echo "resolveip:  $command_resolveip"
echo "geoip:      $command_geoiplookup"
echo "nmap:       $command_nmap"
echo "wget:       $command_wget"
echo "iperf:      $command_iperf"
echo "openssl:    $command_openssl"
echo "dd:         $command_dd"
echo "tee:        $command_tee"
echo "glxgears:   $command_glxgears"
echo "txt2html:   $command_txt2html"
echo $tab
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-depends:
############################## english: -gui: Manage gui con three options  ##############################
############################## spanish: -gui: Maneja gui con tres opciones  ##############################
####
####
#### english: with third option
#### spanish: con tercera opcion
####
####
if [ "$first_option" = "-gui" ] && [ "$third_option" != "$NULL" ] ; then $nada
echo $head_waiting_gui
case "$command_zenity" in "$NULL") echo " [ fail ] [ Install zenity to work ]" ; exit ;; esac
case $second_option in
#### 
#### 
"new-mini-config")
cp "$defaultminicfg_eng" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"new-full-config")
cp "$defaultfullcfg_eng" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-mini-config")
cp "$defaultminicfg_spa" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-completa-config")
cp "$defaultfullcfg_spa" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"modify-config")
if [ -f "$directory_config/$third_option" ] ; then $nada
else zenity --forms $graphic_dimension --text="file not found: $third_option" ; exit ; fi 
cp "$directory_config/$third_option" "/tmp/fiptables-$third_option"
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option"
if [ -s "$directory_config/$third_option" ]; then $nada ; 
zenity --forms $graphic_dimension --text="OK. file: $third_option"
else cp "/tmp/fiptables-$third_option" "$directory_config/$third_option"
zenity --forms $graphic_dimension --text="Canceled. file: $third_option"; fi
;;
#### 
####
"ole-word") $fwiptables ole-word gui ; exit ;;
"ole-number") $fwiptables ole-number gui ; exit ;;
"ole-domain") $fwiptables ole-domain gui ; exit ;;
####
####
*)
$fwiptables $second_option $third_option &> $file_temporal_gui
cat $file_temporal_gui | grep -v Warning: &> $file_temporal_guifinal
zenity --text-info $graphic_dimension --title "[$fwiptables gui] [$second_option]" \
--filename=$file_temporal_guifinal --auto-scroll
;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
############################## english: -gui: with second option ##############################
############################## spanish: -gui: con segunda opcion ##############################
####
####
if [ "$first_option" = "-gui" ] && [ "$second_option" != "$NULL" ] ; then $nada
echo $head_waiting_gui
case "$command_zenity" in "$NULL") echo " [ fail ] [ Install zenity to work ]" ; exit ;; esac
case $second_option in
#### 
#### 
wizard-mini)
archivo=wizard-mini
cp "$defaultminicfg_eng" "/tmp/fiptables-$archivo"
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$archivo" \
--editable --title="MODIFY FILE" &> "$directory_config/$second_option"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$fwiptables -gui custom $second_option ; $fwiptables -gui list ;
else rm "$directory_config/$second_option" ;
zenity --info $graphic_dimension --text "Ok. $archivo canceled"; fi
;;
#### 
#### 
wizard-full)
archivo=wizard-full
cp "$defaultfullcfg_eng" "/tmp/fiptables-$archivo"
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$archivo" \
--editable --title="MODIFY FILE" &> "$directory_config/$second_option"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$fwiptables -gui custom $second_option ; $fwiptables -gui list ;
else rm "$directory_config/$second_option" ;
zenity --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
####
modify-default)
cp /etc/default/fwiptables /tmp/fiptables-modify-default
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-modify-default" \
--editable --title="MODIFY FILE" &> /etc/default/fwiptables
if [  -s "/etc/default/fwiptables" ]; then $nada ; 
$fwiptables -gui show-default ;
else cp /tmp/fiptables-modify-default /etc/default/fwiptables;
zenity --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
####
"ole-word") $fwiptables ole-word gui ; exit ;;
"ole-number") $fwiptables ole-number gui ; exit ;;
"ole-domain") $fwiptables ole-domain gui ; exit ;;
####
####
*)
$fwiptables $second_option $third_option &> $file_temporal_gui
cat $file_temporal_gui | grep -v Warning: &> $file_temporal_guifinal
zenity --text-info $graphic_dimension --title "[$fwiptables gui] [$second_option]" \
--filename=$file_temporal_guifinal --auto-scroll
;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
############################## english: -gui: without more options ##############################
############################## spanish: -gui: sin mas opcion       ##############################
####
####
if [ "$first_option" = "-gui" ] && [ "$second_option" = "$NULL" ] ; then echo $head_waiting_gui
case "$command_zenity" in "$NULL") echo " [ fail ] [ Install zenity to work ]" ; exit ;; esac
zenity --forms $graphic_dimension --title="Type of Interface" --text="$($fwiptables mini-options)"
exit; fi
####
####
############################## english: gui-menu: gui menu general: gui con menu  ##############################
############################## spanish: gui-menu: gui menu general: gui con menu  ##############################
#### :rutina-inicial-gui-menu:
####
####
if [ "$first_option" = "gui-menu" ] ; then echo $head_waiting_gui
case "$command_zenity" in "$NULL") echo " [ fail ] [ Install zenity to work ]"; exit ;; esac
selection=$(zenity $graphic_dimension  \
 --list "01 Firewall Rules" "02 Firewall List" "03 Firewall Launch" "04 Firewall Custom" "05 Tool rules" \
"06 Tool sockets" "07 Tool forward" "08 Tool tcp" "09 Tool udp" "10 Tool icmp"  "11 Tool sudo" \
"12 Tool game" "13 Tool system" "14 Tool install" "15 Tool blacklist" "16 Tool dev" \
"17 Show hardware" "18 Show etc" "19 Show log" "20 Show about" "21 Show help" \
--column="Option list $fwiptables" --text="Select one option" --title="Gui Menu || $fwiptables || $(date) ")
#### 
#### 
case "$selection" in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"01 Firewall Rules")$fwiptables gui-menu-firewall-rules ; exit ;;
"02 Firewall List")$fwiptables gui-menu-firewall-list ; exit ;;
"03 Firewall Launch")$fwiptables gui-menu-firewall-launch ; exit ;;
"04 Firewall Custom")$fwiptables gui-menu-firewall-custom ; exit ;;
"05 Tool rules")$fwiptables gui-menu-firewall-custom ; exit ;;
"06 Tool sockets")$fwiptables gui-menu-tool-sockets ; exit ;;
"07 Tool forward")$fwiptables gui-menu-tool-forward ; exit ;;
"08 Tool tcp")$fwiptables gui-menu-tool-tcp ; exit ;;
"09 Tool udp")$fwiptables gui-menu-tool-udp ; exit ;;
"10 Tool icmp")$fwiptables gui-menu-tool-icmp ; exit ;;
"11 Tool sudo")$fwiptables gui-menu-tool-sudo ; exit ;;
"12 Tool game") $fwiptables gui-menu-tool-game ; exit ;;
"13 Tool system")$fwiptables gui-menu-tool-system ; exit ;;
"14 Tool install")$fwiptables gui-menu-tool-install ; exit ;;
"15 Tool blacklist")$fwiptables gui-menu-tool-blacklist ; exit ;;
"16 Tool dev")$fwiptables gui-menu-tool-dev ; exit ;;
"17 Show hardware")$fwiptables gui-menu-show-hardware ; exit ;;
"18 Show etc")$fwiptables gui-menu-show-etc ; exit ;;
"19 Show log")$fwiptables gui-menu-show-log ; exit ;;
"20 Show about")$fwiptables gui-menu-show-about ; exit ;;
"21 Show help")$fwiptables gui-menu-show-help ; exit ;;
#### 
esac
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu:
############################## english: gui-menu-firewall-launch: gui with menu ##############################
############################## spanish: gui-menu-firewall-launch: gui con menu  ##############################
#### :rutina-inicial-gui-menu-firewall-launch:
####
####  
if [ "$first_option" = "gui-menu-firewall-launch" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "eraserules" "wizard-mini" "wizard-full" "custom cfg" "offline" "all-permisive" \
"games-shooter" "game-westnoth" "game-minetest" "client-web" "client-torrent" "client-vpn" "client-tor" "lan-tor" "lan-vpn" \
"server-web" "server-samba" "server-ssh" "server-print" "server-lamp" \
--column="Option list $fwiptables" --text="Select one option" \
--title="[Launch Rules] [$fwiptables]")
#### 
#### 
case "$selection" in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui firewall-launch ;;
"eraserules") $fwiptables -gui eraserules ; $fwiptables gui list ;;
"wizard-full")$fwiptables -gui wizard-full ;;
"wizard-mini")$fwiptables -gui wizard-mini ;;
"offline") $fwiptables -gui offline ; $fwiptables gui list ;;
"all-permisive") $fwiptables -gui all-permisive ; $fwiptables gui list ;;
"client-web") $fwiptables -gui client-web ; $fwiptables gui list ;;
"client-torrent") $fwiptables -gui client-torrent ; $fwiptables gui list ;;
"client-vpn") $fwiptables -gui client-vpn ; $fwiptables gui list ;;
"games-shooter") $fwiptables -gui games-shooter ; $fwiptables gui list ;;
"game-westnoth") $fwiptables -gui game-westnoth ; $fwiptables gui list ;;
"game-minetest") $fwiptables -gui game-minetest ; $fwiptables gui list ;;
"client-tor") $fwiptables -gui client-tor ; $fwiptables gui list ;;
"lan-tor") $fwiptables -gui lan-tor ; $fwiptables gui list ;;
"lan-vpn") $fwiptables -gui lan-vpn ; $fwiptables gui list ;;
"server-web") $fwiptables -gui server-web ; $fwiptables gui list ;;
"server-samba") $fwiptables -gui server-samba ; $fwiptables gui list ;;
"server-ssh") $fwiptables -gui server-ssh ; $fwiptables gui list ;;
"server-print") $fwiptables -gui server-print ; $fwiptables gui list ;;
"server-lamp") $fwiptables -gui server-lamp ; $fwiptables gui list ;;
"custom cfg")archivo="$(zenity --entry $graphic_dimension --title "[Launch Custom]" --text="$(ls -1 $directory_config)")" ; 
$fwiptables -gui custom $archivo ; $fwiptables gui list ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-launch:
############################## english: gui-menu-firewall-rules: gui with menu ##############################
############################## spanish: gui-menu-firewall-rules: gui con menu  ##############################
#### :rutina-inicial-gui-menu-firewall-rules:
####
####
if [ "$first_option" = "gui-menu-firewall-rules" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "stop" "continue" "reset" "names" "show" "save" "load" "actual" \
--column="Option list $fwiptables" --text="Select one option" --title="[Control Rules] [$fwiptables]")
#### 
#### 
case "$selection" in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui firewall-rules ;;
"stop") $fwiptables -gui stop ; $fwiptables -gui list ;;
"continue") $fwiptables -gui continue ; $fwiptables -gui list ;;
"reset") $fwiptables -gui reset ; $fwiptables -gui list ;;
"names") $fwiptables -gui list-fw ;;
"show")archivo="$(zenity --entry $graphic_dimension --title "[Save Firewall]" --text="$($fwiptables list-fw)")" ; 
$fwiptables -gui show $archivo ;;
"save")archivo="$(zenity --entry $graphic_dimension --title "[Save Firewall]" --text="$($fwiptables list-fw)")" ; 
$fwiptables -gui save $archivo ;;
"load")archivo="$(zenity --entry $graphic_dimension --title "[Load Firewall]" --text="$($fwiptables list-fw)")" ;
$fwiptables -gui load $archivo ; $fwiptables -gui list ;;
"actual") $fwiptables -gui actual ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-rules:
############################## english: gui-menu-firewall-list: gui with menu ##############################
############################## spanish: gui-menu-firewall-list: gui con menu  ##############################
#### :rutina-inicial-gui-menu-firewall-list:
####
####
if [ "$first_option" = "gui-menu-firewall-list" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "list" "list6" "list-filter4" "list-filter6" "list-alltables" \
"listnum" "listnum6" "list-nat4" "list-nat6" "list-mangle4" "list-mangle6" "list-raw4" "list-raw6" \
"list-security4" "list-security6" "list-ebtables" "list-arptables" \
--column="Option list $fwiptables" --text="Select one option" --title="[List Rules] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui firewall-list ;;
"list") $fwiptables -gui list ;;
"list6") $fwiptables -gui list6 ;;
"list-alltables") $fwiptables -gui list-alltables ;;
"list-filter4") $fwiptables -gui list-filter4 ;;
"list-filter6") $fwiptables -gui list-filter6 ;;
"list-forward") $fwiptables -gui forward ;;
"list-forward6") $fwiptables -gui forward6 ;;
"listnum") $fwiptables -gui listnum ;;
"listnum6") $fwiptables -gui listnum6 ;;
"list-nat4") $fwiptables -gui list-nat4 ;;
"list-nat6") $fwiptables -gui list-nat6 ;;
"list-mangle4") $fwiptables -gui list-mangle4 ;;
"list-mangle6") $fwiptables -gui list-mangle6 ;;
"list-raw4") $fwiptables -gui list-raw4 ;;
"list-raw6") $fwiptables -gui list-raw6 ;;
"list-security4") $fwiptables -gui list-security4 ;;
"list-security6") $fwiptables -gui list-security6 ;;
"list-ebtables") $fwiptables -gui list-ebtables ;;
"list-arptables") $fwiptables -gui list-arptables ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-list:
############################## english: gui-menu-firewall-custom: gui with menu ##############################
############################## spanish: gui-menu-firewall-custom: gui con menu  ##############################
#### :rutina-inicial-gui-menu-firewall-custom:
####
####
if [ "$first_option" = "gui-menu-firewall-custom" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "new-full-config" "nueva-completa-config" "new-mini-config" "nueva-mini-config" \
"names-config" "show-config" "modify-config" "del-config" "regen-config" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Config] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui firewall-custom;;
"new-full-config")
archivo="$(zenity $graphic_dimension --entry --title "[new-full-config]" --text="Input file name to new full configuration")" ;
$fwiptables -gui new-full-config $archivo ;;
"nueva-completa-config")
archivo="$(zenity $graphic_dimension --entry --title "[nueva-completa-config]" --text="Introduce el nombre del nuevo archivo cfg")" ;
$fwiptables -gui nueva-completa-config $archivo ;;
"new-mini-config")
archivo="$(zenity $graphic_dimension --entry --title "[new-mini-config]" --text="Input file name to new mini configuration")" ;
$fwiptables -gui new-mini-config $archivo ;;
"nueva-mini-config")
archivo="$(zenity $graphic_dimension --entry --title "[nueva-mini-config]" --text="Introduce el nombre del nuevo archivo cfg")" ;
$fwiptables -gui nueva-mini-config $archivo ;;
"names-config")
$fwiptables -gui names-config ;;
"show-config")
archivo="$(zenity $graphic_dimension --entry --title "[show-config]" --text="$($fwiptables cfg)")" ;
$fwiptables -gui show-config $archivo ;;
"modify-config")
archivo="$(zenity $graphic_dimension --entry --title "[modify-config]" --text="$($fwiptables cfg)")" ;
$fwiptables -gui modify-config $archivo ;;
"del-config")
archivo="$(zenity $graphic_dimension --entry --title "[del-config]" --text="$($fwiptables cfg)")" ;
$fwiptables -gui del-config $archivo;;
"regen-config")$fwiptables -gui regen-config ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-firewall-custom:
############################## english: gui-menu-tool-sockets: gui with menu ##############################
############################## spanish: gui-menu-tool-sockets: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-sockets:
####
####
if [ "$first_option" = "gui-menu-tool-sockets" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "info-proxy" "info-listen" "info-route" "info-nodes" \
"info-net" "info-system" "ss" "lsof" "netstat" "netstat-nat" "tcpdump" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Sockets] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu") $fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-sockets ;;
"info-route") $fwiptables -gui route ;;
"info-nodes") $fwiptables -gui info-nodes ;;
"info-net") $fwiptables -gui info-net ;;
"info-system")$fwiptables -gui info-system ;;
"ss") $fwiptables -gui ss ;;
"lsof") $fwiptables -gui lsof ;;
"netstat") $fwiptables -gui netstat ;;
"netstat-nat") $fwiptables -gui netstat-nat ;;
"tcpdump") $fwiptables -gui tcpdump ;;
"info-proxy") $fwiptables -gui info-proxy ;;
"info-listen") $fwiptables -gui info-listen ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-sockets:
############################## english: gui-menu-tool-forward: gui with menu ##############################
############################## spanish: gui-menu-tool-forward: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-forward:
####
####
if [ "$first_option" = "gui-menu-tool-forward" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "ipforward-list" "ipforward-on" "ipforward-off" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Sockets] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu") $fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-forward    ;;
"ipforward-list") $fwiptables -gui ipforward-list ;;
"ipforward-on") $fwiptables -gui ipforward-on     ;;
"ipforward-off") $fwiptables -gui ipforward-off   ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-forward:
############################## english: gui-menu-tool-icmp: gui with menu ##############################
############################## spanish: gui-menu-tool-icmp: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-icmp:
####
####
if [ "$first_option" = "gui-menu-tool-icmp" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "traceicmp-ip4" "traceicmp-ip6" "ping-ip4" "ping-ip6" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Icmp] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-icmp ;;
"traceicmp-ip4") $fwiptables -gui traceicmp-ip4 ;;
"traceicmp-ip6") $fwiptables -gui traceicmp-ip6 ;;
"ping-ip4")  $fwiptables -gui ping-ip4  ;;
"ping-ip6")  $fwiptables -gui ping-ip6  ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-icmp:
############################## english: gui-menu-tool-udp: gui with menu ##############################
############################## spanish: gui-menu-tool-udp: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-udp:
####
####
if [ "$first_option" = "gui-menu-tool-udp" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "host" "dig" "resolveip" "geoip" "ntpdate" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool tcp] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-udp ;;
"host")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$fwiptables -gui host $archivo ;;
"dig")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$fwiptables -gui dig $archivo ;;
"resolveip")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv6 or host to resolve with ipv6 ]")" ; 
$fwiptables -gui resolveip $archivo ;;
"geoip")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$fwiptables -gui geoip $archivo ;;
"ntpdate")$fwiptables -gui ntpdate ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-udp:
############################## english: gui-menu-tool-tcp: gui with menu ##############################
############################## spanish: gui-menu-tool-tcp: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-tcp:
####
####
if [ "$first_option" = "gui-menu-tool-tcp" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "tracetcp-ip4" "tracetcp-ip6" "speed-ip4" "speed-ip6" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool tcp] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-tcp ;;
"tracetcp-ip4") $fwiptables -gui tracetcp-ip4   ;;
"tracetcp-ip6") $fwiptables -gui tracetcp-ip6   ;;
"speed-ip4") $fwiptables -gui speed-ip4 ;;
"speed-ip6") $fwiptables -gui speed-ip6 ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-tcp:
############################## english: gui-menu-tool-sudo: gui with menu ##############################
############################## spanish: gui-menu-tool-sudo: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-sudo:
####
####
if [ "$first_option" = "gui-menu-tool-sudo" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "sudo-adduser" "sudo-deluser" "sudo-list" "alias-list" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Sudo] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-sudo ;;
"sudo-adduser")archivo="$(zenity $graphic_dimension --entry --text="[ type username to allow sudo: username1,username2 ]")" ;
$fwiptables -gui sudo-adduser $archivo ;;
"sudo-deluser")$fwiptables -gui sudo-deluser ;;
"sudo-list")$fwiptables -gui sudo-list ;;
"alias-list")$fwiptables -gui alias-list ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-sudo:
############################## english: gui-menu-tool-game: gui with menu ##############################
############################## spanish: gui-menu-tool-game: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-game:
####
####
if [ "$first_option" = "gui-menu-tool-game" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "ole-word" "ole-number" "ole-domain" "colour-rgb" "colour-hex" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Sudo] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu") $fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-game ;;
"ole-word")$fwiptables -gui ole-word ;;
"ole-number")$fwiptables -gui ole-number ;;
"ole-domain")$fwiptables -gui ole-domain ;;
"colour-rgb")
onecolour="$(zenity $graphic_dimension --entry --text="[ type one colour in RGB with 9 digits. Example: 255000255 ]")" ;
$fwiptables gui colour-rgb $onecolour ;;
"colour-hex") 
onecolour="$(zenity $graphic_dimension --entry --text="[ type one colour in HEX with 6 digits. Example: ff00ff ]")" ;
$fwiptables gui colour-hex $onecolour ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-game:
############################## english: gui-menu-tool-system: gui with menu ##############################
############################## spanish: gui-menu-tool-system: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-system:
####
####
if [ "$first_option" = "gui-menu-tool-system" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "free-ram" "speed-ram" "speed-disk" "speed-glx" "radio-mp3 link" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool System] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-system ;;
"free-ram")   $fwiptables -gui free-ram ;;
"speed-ram")  $fwiptables -gui speed-ram ;;
"speed-disk") $fwiptables -gui speed-disk ;;
"speed-glx")  $fwiptables -gui speed-glx ;;
"radio-mp3 link") 
radio_enlace="$(zenity $graphic_dimension --entry --text="[ typea one mp3 link ] [ example: $radio_mp3 ]")" ;
$fwiptables -gui radio-mp3 $radio_enlace ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-system:
############################## english: gui-menu-tool-install: gui with menu ##############################
############################## spanish: gui-menu-tool-install: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-install:
####
####
if [ "$first_option" = "gui-menu-tool-install" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "install" "howto-upgrade" "upgrade" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Install] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui tool-install ;;
"install")$fwiptables -gui install ;;
"howto-upgrade")$fwiptables -gui howto-upgrade ;;
"upgrade")$fwiptables -gui upgrade ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-install:
############################## english: gui-menu-tool-blacklist: gui with menu ##############################
############################## spanish: gui-menu-tool-blacklist: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-blacklist:
####
####
if [ "$first_option" = "gui-menu-tool-blacklist" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "blacklist-list" "blacklist-list info" \
"blacklist-on" "blacklist-off" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Install] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu;;
"Gui Info Menu") $fwiptables -gui tool-blacklist;;
"blacklist-list")$fwiptables -gui blacklist-list;;
"blacklist-list info")$fwiptables -gui blacklist-list info ;;
"blacklist-on")
 archivo="$(zenity $graphic_dimension --entry --text="[ type one: fademind, mvps, adaway, stevenblack ]")" ;
 $fwiptables -gui blacklist-on $archivo;;
"blacklist-off") $fwiptables -gui blacklist-off;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-blacklist:
############################## english: gui-menu-tool-dev: gui with menu ##############################
############################## spanish: gui-menu-tool-dev: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-dev:
####
####
if [ "$first_option" = "gui-menu-tool-dev" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "new-versions" "dev-version" "dev-changes" "code" \
--column="Option list $fwiptables" --text="Select one option" --title="[Tool Install] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu  ;;
"Gui Info Menu") $fwiptables -gui tool-dev ;;
"new-versions")$fwiptables -gui new-versions ;;
"dev-version") $fwiptables -gui dev-version  ;;
"dev-changes") $fwiptables -gui dev-changes ;;
"code") archivo="$(zenity $graphic_dimension --entry --text="[ type one option to show its source code ]")" 
$fwiptables -gui code $archivo
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-dev:
############################## english: gui-menu-show-hardware: gui with menu ##############################
############################## spanish: gui-menu-show-hardware: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-hardware:
####
####
if [ "$first_option" = "gui-menu-show-hardware" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "lpinfo" "lsblk" "lsusb" "lscpu" "lspci" "lsgpu" "lshw" \
--column="Option list $fwiptables" --text="Select one option" --title="[Show etc] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui show-hardware;;
"lpinfo")$fwiptables -gui lpinfo;;
"lsblk")$fwiptables -gui lsblk;;
"lpusb")$fwiptables -gui lsusb;;
"lscpu")$fwiptables -gui lscpu;;
"lspci")$fwiptables -gui lspci;;
"lsgpu")$fwiptables -gui lsgpu;;
"lshw")$fwiptables -gui lshw;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-hardware:
############################## english: gui-menu-show-etc: gui with menu ##############################
############################## spanish: gui-menu-show-etc: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-etc:
####
####
if [ "$first_option" = "gui-menu-show-etc" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "hosts" "protocols" "services" "hosts.allow" "hosts.deny" \
 "show-default" "modify-default" \
--column="Option list $fwiptables" --text="Select one option" --title="[Show etc] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui show-etc ;;
"hosts") $fwiptables -gui hosts ;;
"protocols") $fwiptables -gui protocols ;;
"services") $fwiptables -gui services ;;
"hosts.allow") $fwiptables -gui hosts.allow ;;
"hosts.deny") $fwiptables -gui hosts.deny ;;
"show-default") $fwiptables -gui show-default ;;
"modify-default") $fwiptables -gui modify-default ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-etc:
############################## english: gui-menu-show-log: gui with menu ##############################
############################## spanish: gui-menu-show-log: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-log:
####
####
if [ "$first_option" = "gui-menu-show-log" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "log-ssh" "sentlog" "autolog" "log-search" \
--column="Option list $fwiptables" --text="Select one option" --title="[Show log] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui show-log ;;
"log-ssh")   $fwiptables -gui log-ssh ;;
"sentlog") $fwiptables -gui sentlog ;;
"autolog") $fwiptables -gui autolog ;;
"log-search")
pattern="$(zenity $graphic_dimension --entry --text="[ type a one PATTERN to search in log files ]")" ;
$fwiptables -gui log-search $pattern;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-log:
############################## english: gui-menu-show-about: gui with menu ##############################
############################## spanish: gui-menu-show-about: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-about:
####
####
if [ "$first_option" = "gui-menu-show-about" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "about" "version" \
"depends" "examples" "config-eng" "config-spa" \
--column="Option list $fwiptables" --text="Select one option" --title="[Show about] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui show-about ;;
"about")$fwiptables -gui about ;;
"version")$fwiptables -gui version ;;
"depends")$fwiptables -gui depends ;;
"examples")$fwiptables -gui examples ;;
"config-eng")$fwiptables -gui config-eng ;;
"config-spa")$fwiptables -gui config-spa ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-about:
############################## english: gui-menu-show-help: gui with menu ##############################
############################## spanish: gui-menu-show-help: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-help:
####
####
if [ "$first_option" = "gui-menu-show-help" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "mini-options" "full-options" \
"all-help" "help" "ayuda" "notes" "license" \
--column="Option list $fwiptables" --text="Select one option" --title="[Show help] [$fwiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fwiptables good bye"; exit ;;
"Gui Principal Menu")$fwiptables gui-menu ;;
"Gui Info Menu") $fwiptables -gui show-help ;;
"mini-options")$fwiptables -gui mini-options ;;
"full-options")$fwiptables -gui full-options ;;
"all-help") $fwiptables -gui all-help ;;
"help") $fwiptables -gui help ;;
"ayuda") $fwiptables -gui ayuda ;;
"notes") $fwiptables -gui notes ;;
"license") $fwiptables -gui license ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fwiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-help:
############################## english: gui-shell: graphic enviroment          ##############################
############################## spanish: gui-shell: entorno de comandos grafico ##############################
#### :rutina-inicial-gui-shell:
####
####
if [ "$first_option" = "gui-shell" ] ; then echo $head_waiting_gui
case "$command_zenity" in "$NULL") echo " [ fail ] [ Install zenity to work ]" ; exit ;; esac
####
####
####  english: principal gui  #### spanish: principal gui
####
####
titulo="$fwiptables gui-shell"
untexto="$fwiptables gui-shell"
####
####
#### cd $directory_config
####
####
menugtk=$(zenity --forms $graphic_dimension --title="Gui Shell || $fwiptables || $(date) " \
--text="$($fwiptables mini-options)" --add-entry="$fwiptables " )
case $? in
1)
####
####
#### zenity --info $graphic_dimension --text="$fwiptables good bye";
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" \
--auto-close --auto-kill ; exit;;
esac
####
####
#### english: manage some configs    ####
#### spanish: maneja algunas configs ####
####
####
case $menugtk in
####
####
"ole-word") $fwiptables ole-word -gui ;;
"ole-number") $fwiptables ole-number -gui ;;
"ole-domain") $fwiptables ole-domain -gui ;;
####
####
#### english: new-full-config and nueva-completa-config whithout parameters ####
#### spanish: new-full-config and nueva-completa-config sin parametros      ####
####
####
"new-full-config")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables new-full-config config.cfg ]"
;;
"new-mini-config")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables new-mini-config config.cfg ]"
;;
"nueva-completa-config")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables nueva-completa-config config.cfg ]"
;;
"new-mini-config")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables nueva-mini-config config.cfg ]"
;;
"modify-config")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables modify-config config.cfg ]"
;;
####
####
#### english: new-full-config and nueva-completa-config whithout parameters and with one space  ####
#### spanish: new-full-config and nueva-completa-config sin parametros y con un espacio         ####
####
####
"new-full-config ")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables new-full-config config.cfg ]"
;;
"new-mini-config ")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables new-mini-config config.cfg ]"
;;
"nueva-completa-config ")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables nueva-completa-config config.cfg ]"
;;
"new-mini-config ")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables nueva-mini-config config.cfg ]"
;;
"modify-config ")
zenity --forms $graphic_dimension --text="$tab [ info ] [ Use: $fwiptables modify-config config.cfg ]"
;;
####
####
#### english: several options con parametros
#### spanish: varias opciones con parametros
####
####
new-full-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fwiptables -gui new-full-config $unarchivo
;;
nueva-completa-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fwiptables -gui nueva-completa-config $unarchivo
;;
new-mini-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fwiptables -gui new-mini-config $unarchivo
;;
nueva-mini-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fwiptables -gui nueva-mini-config $unarchivo
;;
modify-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fwiptables -gui modify-config $unarchivo
;;
show-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fwiptables -gui show-config $unarchivo
;;
wizard-full*) $fwiptables gui wizard-full ;;
wizard-mini*) $fwiptables gui wizard-mini ;;
####
####
#### english: all other otpions    ####
#### spanish: las demas opciones   ####
####
####
"$NULL")
zenity --info $graphic_dimension --text="$fwiptables good bye";
zenity --progress $graphic_dimension --timeout=1 --text="Closing gui menu" --auto-close --auto-kill ; exit ;;
*) fecha_temporal=$(date | sed s/\ //g) ; $fwiptables $menugtk &> /tmp/fwiptables-$fecha_temporal
zenity --text-info $graphic_dimension --title "[$fwiptables gui-shell] [$menugtk]" --filename=/tmp/fwiptables-$fecha_temporal --auto-scroll
rm /tmp/fwiptables-$fecha_temporal
;;
esac
$fwiptables gui-shell
exit ; fi
####
####
#### :rutina-final-gui-shell:
##############################       english: cli-menu: Manage list rules with one text menu
##############################       spanish: cli-menu: Maneja lista de reglas con un menu de texto
#### :rutina-inicial-cli-menu:
####
####
if [ "$first_option" = "cli-menu" ]; then $nada
case "$command_dialog" in "$NULL") echo " [ fail ] [ Install dialog to work ]" ; exit ;; esac
#### cd "$directory_config"
menuprincipal="$(dialog --stdout --clear --no-tags --title "  Cli Menu || $fwiptables || $(date)" --menu "Select:" 0 0 0\
  0000 "$quad $tab [$fwiptables cli-menu] $tab $cinco" \
  0100 "$quad [ Full Options ] $cinco" \
  0200 "$quad [ Firewall Rules ] $cinco" \
  0201  "$tab stop" \
  0202  "$tab continue" \
  0203  "$tab reset" \
  0204  "$tab list-fw"  \
  0205  "$tab show" \
  0206  "$tab save" \
  0207  "$tab load" \
  0208  "$tab actual" \
  0300 "$quad [ Firewall List	 ] $cinco" \
  0301  "$tab list" \
  0302  "$tab list6"  \
  0303  "$tab list-filter4" \
  0304  "$tab list-filter6" \
  0305  "$tab list-forward" \
  0306  "$tab list-forward6" \
  0307  "$tab list-nat4" \
  0308  "$tab list-nat6" \
  0309  "$tab list-alltables" \
  0310  "$tab listnum" \
  0311  "$tab list-forwardnum" \
  0312  "$tab listnum6" \
  0313  "$tab list-forwardnum6" \
  0314  "$tab list-raw4" \
  0315  "$tab list-raw6" \
  0316  "$tab list-mangle4" \
  0317  "$tab list-mangle6" \
  0318  "$tab list-security4" \
  0319  "$tab list-security6" \
  0320  "$tab list-ebtables" \
  0321  "$tab list-arptables" \
  0400 "$quad [ Firewall Launch ] $cinco" \
  0401  "$tab eraserules" \
  0402  "$tab wizard-mini" \
  0403  "$tab wizard-full" \
  0404  "$tab offline" \
  0405  "$tab all-permisive" \
  0406  "$tab custom cfg" \
  0407  "$tab games-shooter" \
  0408  "$tab game-westnoth" \
  0409  "$tab game-minetest" \
  0410  "$tab client-web" \
  0411  "$tab client-torrent" \
  0412  "$tab client-vpn" \
  0413  "$tab client-tor" \
  0414  "$tab server-web" \
  0415  "$tab server-ssh" \
  0416  "$tab server-print" \
  0417  "$tab server-samba" \
  0418  "$tab server-lamp" \
  0419  "$tab lan-tor" \
  0420  "$tab lan-vpn" \
  0500 "$quad [ Firewall Custom ] $cinco" \
  0501  "$tab new-full-config" \
  0502  "$tab nueva-completa-config" \
  0503  "$tab new-mini-config" \
  0504  "$tab nueva-mini-config" \
  0505  "$tab show-config" \
  0506  "$tab modify-config" \
  0507  "$tab del-config" \
  0508  "$tab names-config" \
  0509  "$tab regen-config" \
  0600 "$quad [ Tool Sockets ] $cinco" \
  0601  "$tab ss" \
  0602  "$tab netstat" \
  0603  "$tab lsof" \
  0604  "$tab tcpdump" \
  0605  "$tab info-route" \
  0606  "$tab info-nodes" \
  0607  "$tab info-listen" \
  0608  "$tab info-proxy" \
  0609  "$tab info-net" \
  0610  "$tab info-system" \
  0700 "$quad [ Tool Ipfwarding ] $cinco" \
  0701  "$tab ipforward-list" \
  0702  "$tab ipforward-on" \
  0703  "$tab ipforward-off" \
  0800 "$quad [ Tool Tcp ] $cinco " \
  0801  "$tab speed-ip4" \
  0802  "$tab speed-ip6" \
  0803  "$tab tracetcp-ip4" \
  0804  "$tab tracetcp-ip6" \
  0900 "$quad [ Tool Icmp ] $cinco" \
  0901  "$tab traceicmp-ip4" \
  0902  "$tab traceicmp-ip6" \
  0903  "$tab ping-ip4" \
  0904  "$tab ping-ip6" \
  1000 "$quad [ Tool Udp ] $cinco"  \
  1001  "$tab host" \
  1002  "$tab dig" \
  1003  "$tab resolveip" \
  1004  "$tab geoip" \
  1005  "$tab ntpdate" \
  1100 "$quad [ Tool Sudo ] $cinco"  \
  1101  "$tab sudo-adduser" \
  1002  "$tab sudo-deluser" \
  1003  "$tab sudo-list" \
  1200 "$quad [ Tool Game ] $cinco" \
  1201  "$tab ole-word" \
  1202  "$tab ole-number" \
  1203  "$tab colour-rgb" \
  1204  "$tab colour-hex" \
  1300 "$quad [ Tool Install ] $cinco" \
  1301  "$tab install" \
  1302  "$tab howto-upgrade" \
  1303  "$tab upgrade" \
  1400 "$quad [ Tool Blacklist ] $cinco" \
  1401  "$tab blacklist-list" \
  1402  "$tab blacklist-list info" \
  1403  "$tab blacklist-on" \
  1404  "$tab blacklist-off" \
  1500 "$quad [ Tool Dev ] $cinco" \
  1501  "$tab new-versions" \
  1502  "$tab dev-version" \
  1502  "$tab dev-changes" \
  1600 "$quad [ Tool System ] $cinco" \
  1601  "$tab free-ram" \
  1602  "$tab speed-ram" \
  1603  "$tab speed-disk" \
  1604  "$tab speed-glx" \
  1605  "$tab radio-mp3-default" \
  1606  "$tab radio-mp3-link" \
  1700 "$quad [ Show Hardware ] $cinco" \
  1701  "$tab lpinfo" \
  1702  "$tab lsblk" \
  1703  "$tab lsusb" \
  1704  "$tab lscpu" \
  1705  "$tab lspci" \
  1706  "$tab lsgpu" \
  1707  "$tab lshw" \
  1800 "$quad [ Show Etc ] $cinco" \
  1801  "$tab hosts" \
  1802  "$tab protocols" \
  1803  "$tab services" \
  1804  "$tab hosts.allow" \
  1805  "$tab hosts.deny" \
  1806  "$tab resolv.conf" \
  1807  "$tab show-default" \
  1808  "$tab modify-default" \
  1900 "$quad [ Show Log ] $cinco" \
  1901  "$tab log-ssh" \
  1902  "$tab log-search" \
  1903  "$tab sentlog" \
  1904  "$tab autolog" \
  2000 "$quad [ Show About ] $cinco" \
  2001  "$tab about" \
  2002  "$tab depends" \
  2003  "$tab examples" \
  2004  "$tab config-eng" \
  2005  "$tab config-spa" \
  2100 "$quad [ Show Help ] $cinco" \
  2101  "$tab mini-options" \
  2102  "$tab full-options" \
  2103  "$tab help" \
  2104  "$tab ayuda" \
  2105  "$tab all-help" \
  2106  "$tab notes" \
  2107  "$tab license" \
 )"  
#### 
#### 
#### english: dialog choosed #### spanish: dialogo elegido
#### 
#### 
 case "$menuprincipal" in
################################
 0000) clear ; $fwiptables info ;;
 0100) clear ; $fwiptables cli options ;;
 0200) clear ; $fwiptables cli firewall-rules ;;
 0300) clear ; $fwiptables cli firewall-list ;;
 0400) clear ; $fwiptables cli firewall-launch ;;
 0500) clear ; $fwiptables cli firewall-custom ;;
 0600) clear ; $fwiptables cli tool-socket ;;
 0700) clear ; $fwiptables cli tool-ipforward ;;
 0800) clear ; $fwiptables cli tool-tcp ;;
 0900) clear ; $fwiptables cli tool-icmp ;;
 1000) clear ; $fwiptables cli tool-udp ;;
 1100) clear ; $fwiptables cli tool-sudo ;;
 1200) clear ; $fwiptables cli tool-game ;;
 1300) clear ; $fwiptables cli tool-install ;;
 1400) clear ; $fwiptables cli tool-blacklist ;;
 1500) clear ; $fwiptables cli tool-dev ;;
 1600) clear ; $fwiptables cli tool-system ;;
 1700) clear ; $fwiptables cli show-hardware ;;
 1800) clear ; $fwiptables cli show-etc ;;
 1900) clear ; $fwiptables cli show-log ;;
 1000) clear ; $fwiptables cli show-about ;;
 2100) clear ; $fwiptables cli show-help ;;
################################
 0201) clear ; $fwiptables cli stop ;;
 0202) clear ; $fwiptables cli continue ;;
 0203) clear ; $fwiptables cli reset ;;
 0204) clear ; $fwiptables cli list-fw ;;
 0205) clear ; $fwiptables "list-fw" ; echo "$cincuenta"
 read -p "Type the firewall name to read   " nombrecillo
 nombrecillo=$(echo $nombrecillo | sed s/\\///g) ; $fwiptables show $nombrecillo ;; 
 0206)archivo="$(dialog --stdout --title "| Save the firewall format standar  |" --inputbox "New name" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ;  echo "$cincuenta saved $archivo" ; $fwiptables save $archivo ;;
 0207) clear ; $fwiptables "list-fw" ; echo "$cincuenta"
 read -p "| Type the firewall name to restore |   " nombrecillo
 nombrecillo=$(echo $nombrecillo | sed s/\\///g) ; $fwiptables load $nombrecillo ;;
 0208) clear ; $fwiptables cli actual ;;
 0301) clear ; $fwiptables cli list ;;
 0302) clear ; $fwiptables cli list6 ;;
 0303) clear ; $fwiptables cli list-filter4 ;;
 0304) clear ; $fwiptables cli list-filter6 ;;
 0305) clear ; $fwiptables cli list-forward ;;
 0306) clear ; $fwiptables cli list-forward6 ;;
 0307) clear ; $fwiptables cli list-nat4 ;;
 0308) clear ; $fwiptables cli list-nat6 ;;
 0309) clear ; $fwiptables cli list-alltables ;;
 0310) clear ; $fwiptables cli listnum ;;
 0311) clear ; $fwiptables cli list-forwardnum ;;
 0312) clear ; $fwiptables cli listnum6 ;;
 0313) clear ; $fwiptables cli list-forwardnum6 ;;
 0314) clear ; $fwiptables cli list-raw4 ;;
 0315) clear ; $fwiptables cli list-raw6 ;;
 0316) clear ; $fwiptables cli list-mangle4 ;; 
 0317) clear ; $fwiptables cli list-mangle6 ;;
 0318) clear ; $fwiptables cli list-security4 ;;
 0319) clear ; $fwiptables cli list-security6 ;;
 0320) clear ; $fwiptables cli list-ebtables ;;
 0321) clear ; $fwiptables cli list-arptables ;;
 0401) clear ; $fwiptables cli eraserules ; $fwiptables cli list  ;;
 0402) clear ; $fwiptables cli wizard-mini ; $fwiptables cli list ;;
 0403) clear ; $fwiptables cli wizard-full ; $fwiptables cli list ;;
 0404) clear ; $fwiptables cli offline ; $fwiptables cli list ;;
 0405) clear ; $fwiptables cli all-permisive ; $fwiptables cli list  ;;
 0406) archivo="$(dialog --title "custom" --stdout --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g) ;  clear ; $fwiptables custom $archivo ;;
 0407) clear ; $fwiptables cli games-shooter ; $fwiptables cli list  ;; 
 0408) clear ; $fwiptables cli game-westnoth ; $fwiptables cli list ;;
 0409) clear ; $fwiptables cli game-minetest ; $fwiptables cli list ;;
 0410) clear ; $fwiptables cli client-web ; $fwiptables cli list ;;
 0411) clear ; $fwiptables cli client-torrent ; $fwiptables cli list ;;
 0412) clear ; $fwiptables cli client-vpn ; $fwiptables cli list  ;;
 0413) clear ; $fwiptables cli client-tor ; $fwiptables cli list  ;; 
 0414) clear ; $fwiptables cli server-web ; $fwiptables cli list  ;;
 0415) clear ; $fwiptables cli server-ssh ; $fwiptables cli list ;;
 0416) clear ; $fwiptables cli server-print ; $fwiptables cli list ;;
 0417) clear ; $fwiptables cli server-samba ; $fwiptables cli list ;;
 0418) clear ; $fwiptables cli server-lamp ; $fwiptables cli list ;;
 0419) clear ; $fwiptables cli lan-tor ; $fwiptables cli list ;;
 0420) clear ; $fwiptables cli lan-vpn ; $fwiptables cli list ;;
 0501) archivo="$(dialog --stdout --title "new-full-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fwiptables new-full-config $archivo ;;
 0502) archivo="$(dialog --stdout --title "nueva-completa-config example: archivo.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fwiptables nueva-completa-config $archivo ;;
 0503) archivo="$(dialog --stdout --title "new-mini-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fwiptables new-mini-config $archivo ;;
 0504) archivo="$(dialog --stdout --title "nueva-mini-config example: archivo.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fwiptables nueva-mini-config $archivo ;;
 0505) archivo="$(dialog --stdout --title "show-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fwiptables show-config $archivo ; echo "$tab [ info ] [ Use: Launch: $fwiptables custom $archivo ]";;
 0506) archivo="$(dialog --stdout --title "modify-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fwiptables modify-config $archivo ;;
 0507) archivo="$(dialog --stdout --title "del-config" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fwiptables del-config $archivo ; echo "deleted $archivo" ;;
 0508) clear ; $fwiptables cli names-config ;;
 0509) clear ; $fwiptables cli regen-config ;;
 0601) clear ; $fwiptables cli ss ;;
 0602) clear ; $fwiptables cli netstat ;;
 0603) clear ; $fwiptables cli lsof ;;
 0604) clear ; $fwiptables cli tcpdump ;;
 0605) clear ; $fwiptables cli info-route ;;
 0606) clear ; $fwiptables cli info-nodes ;;
 0607) clear ; $fwiptables cli info-listen ;;
 0608) clear ; $fwiptables cli info-proxy ;;
 0609) clear ; $fwiptables cli info-net ;;
 0610) clear ; $fwiptables cli info-system ;;
 0701) clear ; $fwiptables cli ipforward-list ;;
 0702) clear ; $fwiptables cli ipforward-on ;;
 0703) clear ; $fwiptables cli ipforward-off ;;
 0801) clear ; $fwiptables cli speed-ip4 ;;
 0802) clear ; $fwiptables cli speed-ip6 ;;
 0803) clear ; $fwiptables cli tracetcp-ip4 ;;
 0804) clear ; $fwiptables cli tracetcp-ip6 ;;
 0901) clear ; $fwiptables cli traceicmp-ip4 ;;
 0902) clear ; $fwiptables cli traceicmp-ip6 ;;
 0903) clear ; $fwiptables cli ping-ip4 ;;
 0904) clear ; $fwiptables cli ping-ip6 ;;
 1001) resolve="$(dialog --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fwiptables host $resolve ;;
 1002) resolve="$(dialog --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fwiptables dig $resolve ;;
 1003) resolve="$(dialog --stdout --title "type host  or ip to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fwiptables resolveip $resolve ;;
 1004) resolve="$(dialog --stdout --title "type host or ip to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fwiptables geoip $resolve ;;
 1005) clear ; $fwiptables "ntpdate" ;;
  1101) resolve="$(dialog --stdout --title "type username to auth sudo" --inputbox "example: user1,user2,user3" 0 0)"
 clear ; $fwiptables sudo-adduser $resolve ;;
 1102) clear ; $fwiptables cli sudo-deluser ;;
 1103) clear ; $fwiptables cli sudo-list ;;
 1201) clear ; $fwiptables cli ole-word  ;;
 1202) clear ; $fwiptables cli ole-number ;;
 1203) resolve="$(dialog --stdout --title "type one colour in rgb with 9 digits" --inputbox "example: 255000255" 0 0)"
 $fwiptables cli colour-rgb $resolve ;;
 1204) resolve="$(dialog --stdout --title "type one colour in hex with 6 digits" --inputbox "example: ff00ff" 0 0)"
 $fwiptables cli colour-hex $resolve ;;
 1301) clear ; $zero_option install ;;
 1302) clear ; $fwiptables cli howto-upgrade ;;
 1303) clear ; $fwiptables cli upgrade ;;
 1401) clear ; $fwiptables cli blacklist-list ;;
 1402) clear ; $fwiptables cli blacklist-list info ;;
 1403) clear ; resolve="$(dialog --stdout --title "type the blacklist" --inputbox "type only one: fademind mvps adaway stevenblack" 0 0)" 
 clear ; $fwiptables blacklist-on $resolve ;;
 1404) clear ; $fwiptables cli blacklist-off ;;
 1501) clear ; $fwiptables cli new-versions ;;
 1502) clear ; $fwiptables cli dev-version ;;
 1503) clear ; $fwiptables cli dev-changes ;; 
 1601) clear ; $fwiptables cli free-ram ;;
 1602) clear ; $fwiptables cli speed-ram ;;
 1603) clear ; $fwiptables cli speed-disk ;;
 1604) clear ; $fwiptables cli speed-glx ;;
 1605) clear ; $fwiptables cli radio-mp3 ;;
 1606) clear ; emisora_mp3="$(dialog --stdout --title "Type one mp3 link" --inputbox "Type one mp3 link" 0 0)"; $fwiptables cli radio-mp3 $emisora_mp3 ;;
 1701) clear ; $fwiptables cli lpinfo ;;
 1702) clear ; $fwiptables cli lsblk ;;
 1703) clear ; $fwiptables cli lsusb ;; 
 1704) clear ; $fwiptables cli lscpu ;;
 1705) clear ; $fwiptables cli lspci ;;  
 1706) clear ; $fwiptables cli lsgpu ;;
 1707) clear ; $fwiptables cli lshw ;;
 1801) clear ; $fwiptables cli hosts ;;
 1802) clear ; $fwiptables cli protocols ;;
 1803) clear ; $fwiptables cli services ;;
 1804) clear ; $fwiptables cli hosts.allow ;;
 1805) clear ; $fwiptables cli hosts.deny ;;
 1806) clear ; $fwiptables cli resolv.conf ;;
 1807) clear ; $fwiptables cli show-default ;;
 1808) clear ; $fwiptables cli modify-default ;;
 1901) clear ; $fwiptables cli log-ssh ;;
 1902) pattern="$(dialog --stdout --title "type the pattern to search" --inputbox "example: sshd" 0 0)"
 clear ; $fwiptables "log-search" "$pattern" | less ;;
 1903) clear ; $fwiptables cli sentlog ;;
 1904) clear ; $fwiptables cli autolog ;;
 2001) clear ; $fwiptables cli about ;;
 2002) clear ; $fwiptables cli depends ;;
 2003) clear ; $fwiptables cli examples ;;
 2004) clear ; $fwiptables cli config-eng ;;
 2005) clear ; $fwiptables cli config-spa ;;
 2101) clear ; $fwiptables cli mini-options ;;
 2102) clear ; $fwiptables cli full-options ;;
 2103) clear ; $fwiptables cli help ;;
 2104) clear ; $fwiptables cli ayuda ;;
 2105) clear ; $fwiptables cli all-help ;;
 2106) clear ; $fwiptables cli notes ;;
 2107) clear ; $fwiptables cli license ;;
 *) clear ; dialog --msgbox "fwiptables good bye" 0 0 ; clear ; exit ;;
 esac 
 $fwiptables text-pause
 clear ; 
 $fwiptables cli-menu
 exit; fi
####
####
#### :rutina-final-cli-menu:
##############################       english: text-pause: do pause 
##############################       spanish: text-pause: hace pausa
#### :rutina-inicial-text-pause:
####
####
if [ "$first_option" = "text-pause" ]; then $nada
read -p '##### [ ok ] ##### Press [enter] to continue now with the cli-menu ##### '
exit; fi
####
####
#### :rutina-final-text-pause:
##############################       english: version: system script, the version option
##############################       spanish: version: script de sistema, la opcion mostrar version
#### :rutina-inicial-version:
####
####
 if [ "$first_option" = "version" ]; then $give_cover
 echo "$tab [ $first_option ] [ Show version about $fwiptables ]"
#### echo $header_lineal
 echo
 echo "$tab [Name program]"
 echo "$fprogram"
 echo
 echo "$tab [Description program]"
 echo "$fdescription"
 echo
 echo "$tab [Exec program]"
 echo "$directory_fiptables/$fwiptables"
 echo
 echo "$tab [File format]"
 file $directory_fiptables/$fwiptables | cut -d "," -f 1-2
 echo
 echo "$tab [Config cfg directory]"
 echo "$directory_config"
 echo "$tab [Firewall standard directory]"
 echo "$directory_fwrecover"
 echo "$tab [Config files]"
 echo "variables:    /etc/default/fwiptables"
 echo "completion:   /etc/profile.d/fwiptables"
 echo "completion:   /etc/bash_completion.d/fwiptables"
 echo "auth users:   /etc/sudoers/fwiptables"
 echo "$tab [Output log]"
 echo "output filelog: $file_output_filelog"
 echo "output autolog: $file_output_autolog"
 echo
 echo "$tab [Version program]"
 echo "$fversion"
 echo
#### echo $footer_lineal
 exit ; fi
####
####
#### :rutina-final-version:
##############################       english: examples-config: system script to show config files examples
##############################       spanish: examples-config: script de sistema para mostrar ejemplos de configuraciones
#### :rutina-inicial-examples-config:
####
####
 if [ "$first_option" = "examples-config" ]; then $give_cover
 echo "$tab [ $first_option ] [ Show examples for $fwiptables ]"
 echo $header_lineal
 echo"[ examples ] [ examples for some services in client mode ]"
 echo
####
####
#### config: web example ####
####
####
 echo
 echo "# config web example #" 
 echo "config_client_tcp=http,https ;"
 echo "config_client_udp=domain,ntp,bootpc,http ;"
####
####
#### config:  games example  ####
####
####
 echo
 echo "# config games example #"
 echo "config_client_udp=domain,bootpc,ntp,https,1025:65499; "
 echo "config_client_tcp=http,https"
####
####
#### config: wesnoth game example ####
####
####
 echo
 echo "# config web example #" 
 echo "config_client_tcp=http,https,14995:15000 ;"
 echo "config_client_udp=domain,ntp,bootpc,http ;"
####
####
#### config:  torrent-example1 ####
####
####
 echo
 echo "# config torrent example #"
 echo "config_client_udp=domain,bootpc,ntp,https,1025:65499; "
 echo "config_client_tcp=http,https"
####
####
#### config: samba-example1 ####
####
####
 echo
 echo "# config samba example #"
 echo "config_client_udp=domain,bootpc,ntp,https,137:139 ; "
 echo "config_client_tcp=http,https,ipp,microsoft-ds"
 echo "allow_output_ping= ; allow_input_ping= ; "
####
####
#### config: server gateway masquerade ##
####
####
 echo
 echo "# config vpn example #"
 echo "allow_gateway_ip4= ; "
####
####
#### config: vpn-sample1 ##
####
####
 echo
 echo "# config vpn example #"
 echo "allow_forward_ip4= ; "
 echo "allow_net_vpn= ; "
 echo "config_net_vpn=wesnoth.org,sourceforge.net"
####
####
#### config: email-example1 ####
####
####
 echo
 echo "# config email example #"
 echo "config_client_tcp=http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps"
####
####
#### config: ssh-example1 ####
####
####
 echo
 echo "# config ssh example #"
 echo "config_client_tcp=http,https,printer,ipp,ssh,rsync,git"
####
####
#### config: vnc-example1 ####
####
####
 echo
 echo "# config vnc example #"
 echo "config_client_tcp=http,https,ssh,5900:5910"
####
####
#### config: ftp-example1 ####
####
####
 echo
 echo "# config ftp example #"
 echo "config_client_tcp=http,https,ftp,ftp-data,ftps,ftps-data,gsiftp,zope-ftp"
 echo "config_client_udp=domain,bootpc,ntp,https,tftp"
####
####
#### config: printer-example1 ####
####
####
 echo
 echo "# config printer example #"
 echo "config_client_tcp=http,https,ipp,printer"
####
####
#### config: irc-example1 ####
####
####
 echo
 echo "# config irc example #"
 echo "config_client_tcp=http,https,ircd,ircs-u"
####
####
#### config: sql-example1 ####
####
####
 echo
 echo "# config sql example #"
 echo "config_client_tcp=http,https,mysql,postgresql,mysql-proxy,ms-sql-s"
####
####
 echo $footer_lineal
 exit ; fi
####
####
#### :rutina-final-examples-config:
##############################       english: code: source from loop
##############################       spanish: code: fuente de la rutina
#### :rutina-inicial-code:
####
####
if [ "$first_option" = "code" ]; then $give_cover
echo $header_lineal
echo " [ code ] [ show source code for options from $fwiptables ]"
echo $tab
code_error="$tab [ Usage: ] [ $fwiptables code option_above ]"
if [ "$second_option" = "$NULL" ]; then echo ;echo "$code_error" ; echo ; echo $tab $tab $tab
salida_code="$(cat $directory_fiptables/$fwiptables | grep -i rutina-inicial | grep -iv cat | sed -s s/####\ :rutina-inicial-//g | \
sort | sed -s s/://g )"
echo $salida_code
exit ; fi
value_first="$(cat -n $directory_fiptables/$fwiptables | grep  :rutina-inicial-$2: | cut -d "#" -f 1 | head -1)"
value_second="$(cat -n $directory_fiptables/$fwiptables | grep :rutina-final-$2:  | cut -d "#" -f 1 | head -1)"
value_count="$(("$value_second"-"$value_first+1"))"
if [ ! -n "$value_first" ];   then echo; echo "$code_error" ; exit ; fi
if [ ! -n "$value_second" ];  then echo; echo "$code_error" ; exit ; fi
if [ ! -n "$value_count" ];   then echo; echo "$code_error" ; exit ; fi
echo "$tab [ code ] [ option: "$second_option" ] [ show $value_count lines ] \
[ from the "$value_first" line number to "$value_second" line number ]"
echo "$tab"
cat $directory_fiptables/$fwiptables | head -n $value_second | tail -n $value_count
exit; fi
####
####
#### :rutina-final-code:
##############################       english: license: license gpl v2
##############################       spanish: license: license gpl v2
#### :rutina-inicial-license:
####
####
 if [ "$first_option" = "license" ]; then $give_cover
 echo "$tab [ $first_option ] [ Show license from git sourceforge for $fwiptables ]"
 echo $header_lineal
 echo"license text for gpl v2 downloading .."
 echo "$tab" "$tab" "$tab"
 $favorite_text_browser -source "$license_gpl" | more
 echo $footer_lineal
 exit;  fi
####
####
#### :rutina-final-license:
##############################       english: howto-upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: howto-upgrade: actualiza en el archivo /usr/bin/fwiptables
#### :rutina-inicial-howto-upgrade:
####
####
 if [ "$first_option" = "howto-upgrade" ]; then $give_cover
 echo "$tab [ $first_option ] [ Show howto upgrade $fwiptables ]"
 echo $header_lineal
 echo "$tab [ status ] [ The actually version is: $fwiptables $fversion actual ]"
 echo "$tab [ status ] [ The latest version is: ]"
 $favorite_text_browser -dump $fweb_newfiles  | grep -i fwiptables | grep -i download | head -1
 echo 
 echo "$tab [ status ] [ Upgrade The fwiptables in file $directory_fiptables/$fwiptables with $favorite_text_browser ]"
 echo "$tab [ status ] [ OR download manually   || OR $fwiptables upgrade || OR look down: ]"
 echo "$tab [ info ] [ launch: $favorite_text_browser -source $fweb_latest &> /tmp/$fwiptables ]"
 echo "$tab [ info ] [ launch: chmod ugo+x /tmp/$fwiptables ]"
 echo "$tab [ info ] [ launch: /tmp/$fwiptables install ]"
 echo "$tab [ info ] [ ok and it will be upgrade with the name $directory_fiptables/$fwiptables ]"
 echo $footer_lineal
 exit;  fi
####
####
#### :rutina-final-howto-upgrade:
#############################      english: blacklist-list:
#############################      spanish: blacklist-list:
#### :rutina-inicial-blacklist-list:
####
####
if [ "$first_option" = "blacklist-list" ]; then $give_cover
echo $tab
 echo "$tab [ $first_option ] [ Show blacklist servers ]"
blacklist_server_fademind="https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts"
blacklist_server_mvps="http://winhelp2002.mvps.org/hosts.txt"
blacklist_server_adaway="https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt"
blacklist_server_stevenblack="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
####
####
echo
echo "$tab [ actually ] [ File /etc/hosts has "$(cat /etc/hosts | wc -l)" numbers lines ]"
echo "$tab [ actually ] [ Show the file: $fwiptables hosts ]"
echo
echo "$tab [   info:  ] [ Get server lines numbers total ] [ $fwiptables blacklist-list info ]"
echo "$tab [ change:  ] [ $fwiptables blacklist-on name-bl ] OR [ $fwiptables blacklist-off ]" 
echo
echo "$tab"
echo "$tab"
echo "$tab  name-bl          link-bl"
echo "$tab fademind        $blacklist_server_fademind"
echo "$tab mvps            $blacklist_server_mvps"
echo "$tab adaway          $blacklist_server_adaway"
echo "$tab stevenblack     $blacklist_server_stevenblack"
echo "$tab"
####
####
if [ "$second_option" = "info" ]; then echo "$tab Getting lines numbers total.."; echo 
echo
echo "$tab [ actually ] [ File /etc/hosts has "$(cat /etc/hosts | wc -l)" numbers lines ]"
echo "$tab [ actually ] [ Show the file: $fwiptables hosts ]"
echo
echo "$tab [ info ] [ total addblocker hosts ] [ waiting until $server_waiting seconds for max timeout each one ]"
timeout 10 $favorite_text_browser -source "$blacklist_server_fademind" > $file_temporal_path/hosts.fademind 
blacklist_lines_fademind="$(cat $file_temporal_path/hosts.fademind | wc -l)"
echo "$tab fademind:    $blacklist_lines_fademind hosts"
timeout $server_waiting $favorite_text_browser -source "$blacklist_server_mvps" > $file_temporal_path/hosts.mvps 
blacklist_lines_mvps="$(cat $file_temporal_path/hosts.mvps | wc -l)"
echo "$tab mvps:        $blacklist_lines_mvps hosts"
timeout $server_waiting $favorite_text_browser -source "$blacklist_server_adaway" > $file_temporal_path/hosts.adaway 
blacklist_lines_adaway="$(cat $file_temporal_path/hosts.adaway | wc -l)"
echo "$tab adaway:      $blacklist_lines_adaway hosts"
timeout $server_waiting $favorite_text_browser -source "$blacklist_server_stevenblack" > $file_temporal_path/hosts.stevenblack 
blacklist_lines_stevenblack="$(cat $file_temporal_path/hosts.stevenblack | wc -l)"
echo "$tab stevenblack: $blacklist_lines_stevenblack hosts"
echo "$tab"; fi
####
####
echo "$footer_lineal"
exit; fi
####
####
#### :rutina-final-blacklist-list:
#############################      english: blacklist-on
#############################      spanish: blacklist-on
#### :rutina-inicial-blacklist-on:
####
####
if [ "$first_option" = "blacklist-on" ]; then $give_cover
echo "$tab [ $first_option ] [ Configure blacklist server ]"
echo $tab
####
####
if [ "$second_option" = "$NULL" ]; then
echo "$tab [ Launched without options ] [ $fwiptables blacklist-list ]"
echo $tab
$fwiptables blacklist-list
echo $tab
exit; fi
####
####
blacklist_server_fademind="https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts"
blacklist_server_adaway="https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt"
blacklist_server_mvps="http://winhelp2002.mvps.org/hosts.txt"
blacklist_server_stevenblack="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
####
####
if [ "$second_option" = "fademind" ]; then 
echo "$tab [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_fademind" > $file_temporal_path/hosts.fademind 
$fwiptables blacklist-off &> /dev/null
cat $file_temporal_path/hosts.fademind >> /etc/hosts
echo "$tab New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like localhost"; exit; fi
####
####
if [ "$second_option" = "adaway" ]; then 
echo "$tab [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_adaway" > $file_temporal_path/hosts.adaway 
$fwiptables blacklist-off &> /dev/null
cat $file_temporal_path/hosts.adaway >> /etc/hosts
echo "$tab New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like localhost"; exit; fi
####
####
if [ "$second_option" = "mvps" ]; then 
echo "$tab [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_mvps" > $file_temporal_path/hosts.mvps 
$fwiptables blacklist-off &> /dev/null
cat $file_temporal_path/hosts.mvps >> /etc/hosts
echo "$tab New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like localhost"; exit; fi
####
####
if [ "$second_option" = "stevenblack" ]; then 
echo "$tab [ Working ] [ Waiting a moment ] [ Getting adblocker $second_option ]"
$favorite_text_browser -source "$blacklist_server_stevenblack" > $file_temporal_path/hosts.stevenblack 
$fwiptables blacklist-off &> /dev/null
cat $file_temporal_path/hosts.stevenblack >> /etc/hosts
echo "$tab New file /etc/hosts has its hostname: $HOSTNAME, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like localhost"; exit; fi
####
####
echo "$tab [ Invalid option ] [ See: $fwiptables blacklist-list ]"
echo $tab; exit; fi
####
####
#### :rutina-final-blacklist-on:
#############################      english: blacklist-off:
#############################      spanish: blacklist-off:
#### :rutina-inicial-blacklist-off:
####
####
if [ "$first_option" = "blacklist-off" ]; then 
echo "$tab [ $first_option ] [ Remove blacklist server ]"
echo $tab
echo $file_temporal_path
echo $cincuenta > $file_temporal_path/$first_option-hosts
echo "## ip v4 loopback ##" >> $file_temporal_path/$first_option-hosts
echo "127.0.0.1	localhost-ip4 localhost localhost.localdomain" >> $file_temporal_path/$first_option-hosts
echo "## ip v6 loopback ##" >> $file_temporal_path/$first_option-hosts
echo "::1      localhost-ip6 localhost localhost.localdomain" >> $file_temporal_path/$first_option-hosts
echo "ff02::1 ip6-allnodes" >> $file_temporal_path/$first_option-hosts
echo "ff02::2 ip6-allrouters"  >> $file_temporal_path/$first_option-hosts
echo $cincuenta >> $file_temporal_path/$first_option-hosts
cat  $file_temporal_path/$first_option-hosts | sed "s/localhost.localdomain/$HOSTNAME/g" > /etc/hosts
echo "$tab [ ok ] [ HOSTS RESTAURED ] [ FILE BASIC HOSTS FOR DEFAULT, hostname: $HOSTNAME ]"
echo $footer_lineal
cat  /etc/hosts
exit; fi
####
####
#### :rutina-final-blacklist-off:
#############################       english: eraserules: system script, the erase rules option
#############################       spanish: eraserules: script de sistema, la opcion borra reglas
#### :rutina-inicial-eraserules:
####
####
 if [ "$first_option" = "eraserules" ]; then $nada 
 #### give_cover to null, so you can head_autolog.
 $give_cover &> /dev/null
 echo $head_principal
 echo $header_lineal
 ####
 ####
 #### english: erase the rules
 #### spanish: borra las reglas
 ####
 ####
 $command_arptables -F
 $command_ebtables -t filter -F
 $command_ebtables -t nat -F
 $command_iptables_nft -t filter -F
 $command_ip6tables_nft -t filter  -F
 $command_iptables_legacy -t filter -F
 $command_ip6tables_legacy -t filter -F
 $command_iptables_nft -t nat -F
 $command_ip6tables_nft -t nat  -F
 $command_iptables_legacy -t nat -F
 $command_ip6tables_legacy -t nat -F
 $command_iptables_nft -t mangle -F
 $command_ip6tables_nft -t mangle  -F
 $command_iptables_legacy -t mangle -F
 $command_ip6tables_legacy -t mangle -F
 $command_iptables_nft -t raw -F
 $command_ip6tables_nft -t raw  -F
 $command_iptables_legacy -t raw -F
 $command_ip6tables_legacy -t raw -F
 $command_iptables_nft -t security -F
 $command_ip6tables_nft -t security -F
 $command_iptables_legacy -t security -F
 $command_ip6tables_legacy -t security -F
####
####
 $command_ebtables -t filter -P INPUT ACCEPT
 $command_ebtables -t filter -P FORWARD ACCEPT 
 $command_ebtables -t filter -P OUTPUT ACCEPT
 $command_ebtables -t nat -P PREROUTING ACCEPT
 $command_ebtables -t nat -P OUTPUT ACCEPT 
 $command_ebtables -t nat -P POSTROUTING ACCEPT
 $command_iptables_nft -t filter -P INPUT ACCEPT
 $command_iptables_nft -t filter -P FORWARD ACCEPT
 $command_iptables_nft -t filter -P OUTPUT ACCEPT
 $command_ip6tables_nft -t filter -P INPUT ACCEPT
 $command_ip6tables_nft -t filter -P FORWARD ACCEPT
 $command_ip6tables_nft -t filter -P OUTPUT ACCEPT
 $command_iptables_legacy -t filter -P INPUT ACCEPT
 $command_iptables_legacy -t filter -P FORWARD ACCEPT
 $command_iptables_legacy -t filter -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t filter -P INPUT ACCEPT
 $command_ip6tables_legacy -t filter -P FORWARD ACCEPT
 $command_ip6tables_legacy -t filter -P OUTPUT ACCEPT
 $command_iptables_nft -t nat -P INPUT ACCEPT
 $command_iptables_nft -t nat -P OUTPUT ACCEPT
 $command_iptables_nft -t nat -P PREROUTING ACCEPT
 $command_iptables_nft -t nat -P POSTROUTING ACCEPT
 $command_ip6tables_nft -t nat -P INPUT ACCEPT
 $command_ip6tables_nft -t nat -P OUTPUT ACCEPT
 $command_ip6tables_nft -t nat -P PREROUTING ACCEPT
 $command_ip6tables_nft -t nat -P POSTROUTING ACCEPT
 $command_iptables_legacy -t nat -P INPUT ACCEPT
 $command_iptables_legacy -t nat -P OUTPUT ACCEPT
 $command_iptables_legacy -t nat -P PREROUTING ACCEPT
 $command_iptables_legacy -t nat -P POSTROUTING ACCEPT
 $command_ip6tables_legacy -t nat -P INPUT ACCEPT
 $command_ip6tables_legacy -t nat -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t nat -P PREROUTING ACCEPT
 $command_ip6tables_legacy -t nat -P POSTROUTING ACCEPT
 $command_iptables_nft -t mangle -P INPUT ACCEPT
 $command_iptables_nft -t mangle -P FORWARD ACCEPT
 $command_iptables_nft -t mangle -P OUTPUT ACCEPT
 $command_iptables_nft -t mangle -P PREROUTING ACCEPT
 $command_iptables_nft -t mangle -P POSTROUTING ACCEPT
 $command_ip6tables_nft -t mangle -P INPUT ACCEPT
 $command_ip6tables_nft -t mangle -P FORWARD ACCEPT
 $command_ip6tables_nft -t mangle -P OUTPUT ACCEPT
 $command_ip6tables_nft -t mangle -P PREROUTING ACCEPT
 $command_ip6tables_nft -t mangle -P POSTROUTING ACCEPT
 $command_iptables_legacy -t mangle -P INPUT ACCEPT
 $command_iptables_legacy -t mangle -P FORWARD ACCEPT
 $command_iptables_legacy -t mangle -P OUTPUT ACCEPT
 $command_iptables_legacy -t mangle -P PREROUTING ACCEPT
 $command_iptables_legacy -t mangle -P POSTROUTING ACCEPT
 $command_ip6tables_legacy -t mangle -P INPUT ACCEPT
 $command_ip6tables_legacy -t mangle -P FORWARD ACCEPT
 $command_ip6tables_legacy -t mangle -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t mangle -P PREROUTING ACCEPT
 $command_ip6tables_legacy -t mangle -P POSTROUTING ACCEPT
 $command_iptables_nft -t raw -P OUTPUT ACCEPT
 $command_iptables_nft -t raw -P PREROUTING ACCEPT
 $command_ip6tables_nft -t raw -P OUTPUT ACCEPT
 $command_ip6tables_nft -t raw -P PREROUTING ACCEPT
 $command_iptables_legacy -t raw -P OUTPUT ACCEPT
 $command_iptables_legacy -t raw -P PREROUTING ACCEPT
 $command_ip6tables_legacy -t raw -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t raw -P PREROUTING ACCEPT
 $command_iptables_nft -t security -P INPUT ACCEPT
 $command_iptables_nft -t security -P FORWARD ACCEPT
 $command_iptables_nft -t security -P OUTPUT ACCEPT
 $command_ip6tables_nft -t security -P INPUT ACCEPT
 $command_ip6tables_nft -t security -P FORWARD ACCEPT
 $command_ip6tables_nft -t security -P OUTPUT ACCEPT
 $command_iptables_legacy -t security -P INPUT ACCEPT
 $command_iptables_legacy -t security -P FORWARD ACCEPT
 $command_iptables_legacy -t security -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t security -P INPUT ACCEPT
 $command_ip6tables_legacy -t security -P FORWARD ACCEPT
 $command_ip6tables_legacy -t security -P OUTPUT ACCEPT
####
####
 echo "$tab [ ok ] [ firewall erased ] [ deleted ruse ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-eraserules:
#############################       english: info-route: system script, the route option
#############################       spanish: info-route: script de sistema, la opcion route
#### :rutina-inicial-info-route:
####
####
#### comments: sed is necesary to full work in graphicall
####
####
 if [ "$first_option" = "info-route" ]; then  $give_cover
 echo "$tab [ $first_option ] [ Show route tables ]"
 echo $header_lineal
 if [ "$command_ip" = "$NULL" ]; then echo "$tab [ fail ] [ Install ip command ]"; exit; fi
 echo "$tab [ ip route ipv4 ]"
 echo "$($command_ip -4 route)"
 echo $tab
 echo "$tab [ ip route ipv6 ]"
 echo "$($command_ip -6 route)"
 echo $footer_lineal
 exit ; fi
####
####
#### :rutina-final-info-route:
#############################       english: ss: system script, the sockets option
#############################       spanish: ss: script de sistema, la opcion sockets
#### :rutina-inicial-ss:
####
####
 if [ "$first_option" = "ss" ]; then  $give_cover
 echo "$tab [ $first_option ] [ Show sockets with ss ]"
 echo $header_lineal
 if [ "$command_ss" = "$NULL" ]; then echo "$tab [ fail ] [ Install ss command ]"; exit; fi
 echo "$tab [ The ipv6 sockets ]"
 $command_ss -a6
 echo "$tab"
 echo "$tab [ The ipv4 sockets ]"
 $command_ss -a4
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ss:
#############################       english: lsof: system script, the lsof option
#############################       spanish: lsof: script de sistema, la lsof sockets
#### :rutina-inicial-lsof:
####
####
 if [ "$first_option" = "lsof" ]; then $give_cover
 echo "$tab [ $first_option ] [ Show sockets with lsof ]"
 echo $header_lineal
 if [ "command_lsof" = "$NULL" ]; then echo "$tab [ fail ] [ Install lsof command ]"; exit; fi
 echo "$tab [The sockets with lsof ipv6 ]"
 $command_lsof -i | grep -i ipv6
 echo $tab
 echo "$tab [The sockets with lsof ipv4 ]"
 $command_lsof -i | grep -i ipv4
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsof:
#############################      english: netstat: system script, the netstat sockets
#############################      spanish: netstat: script de sistema, el netstat sockets
#### :rutina-inicial-netstat:
####
####
 if [ "$first_option" = "netstat" ]; then  $give_cover
 echo "$tab [ $first_option ] [ Show sockets with netstat ]"
 echo $header_lineal
 if [ "$command_netstat" = "$NULL" ]; then echo "$tab [ fail ] [ Install netstat command ]"; exit; fi
 echo "$tab [The sockets list with netstat ]"
 $command_netstat -a -4 -6
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-netstat:
#############################      english: info-listen: system script, the netstat sockets
#############################      spanish: info-listen: script de sistema, el netstat sockets
#### :rutina-inicial-info-listen:
####
####
 if [ "$first_option" = "info-listen" ]; then  $give_cover
 echo "$tab [ $first_option ] [ Show info address proxy ]"
 echo $header_lineal
 if [ "$command_ss" = "$NULL" ]; then echo "$tab [ fail ] [ Install ss command ]"; exit; fi
 echo "$tab info socket list:"
 echo $tab
 echo "$tab [ Network Listen ] [ Listen ipv4 ]"
 $command_ss -l4 | sed 's/   / /g'
 echo $tab
 echo "$tab [ Network Listen ] [ Listen ipv6 ]"
 $command_ss -l6 | sed 's/   / /g'
 echo $tab
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-listen:
#############################      english: info-proxy: system script, the netstat sockets
#############################      spanish: info-proxy: script de sistema, el netstat sockets
#### :rutina-inicial-info-proxy:
####
####
 if [ "$first_option" = "info-proxy" ]; then  $give_cover
 echo "$tab [ $first_option ] [ Show info address proxy whith its system variable ]"
 echo $header_lineal
 echo "$tab Info address proxy"
 echo "$tab Web http_proxy:    $http_proxy"
 echo "$tab Web https_proxy:   $https_proxy"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-proxy:
#############################      english: netstat-nat: system script, the netstat sockets
#############################      spanish: netstat-nat: script de sistema, el netstat sockets
#### :rutina-inicial-netstat-nat:
####
####
 if [ "$first_option" = "netstat-nat" ]; then  $give_cover
 if [ "$command_netstat_nat" = "$NULL" ]; then echo "$tab [ fail ] [ Install netstat-nat command ]"; exit; fi
 echo "$tab [ $first_option ] [ Show sockets with netstat for proxy ]"
 echo $header_lineal
 echo "$tab [ The devices list with netstat for nat ]"
 $command_netstat_nat
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-netstat-nat:
#############################      english: ipforward-on: active ip forward
#############################      spanish: ipforward-on: activa ip forward
#### :rutina-inicial-ipforward-on:
####
####
 if [ "$first_option" = "ipforward-on" ]; then  $give_cover
 echo "$tab [ $first_option ] [ Active ip forwading in kernel ]"
 echo $header_lineal
 for a in $($command_sysctl -a | grep -i forwarding | cut -d " " -f 1)
 do $command_sysctl -w $a=1 ; done
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ipforward-on:
#############################      english: ipforward-off: active ip forward
#############################      spanish: ipforward-off: activa ip forward
#### :rutina-inicial-ipforward-off:
####
####
 if [ "$first_option" = "ipforward-off" ]; then  $give_cover
 echo "$tab [ $first_option ] [ Deactive ip forwading in kernel ]"
 echo $header_lineal
 for a in $($command_sysctl -a | grep -i forwarding | cut -d " " -f 1)
 do $command_sysctl -w $a=0 ; done
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ipforward-off
#############################      english: list-alltables: list all rules
#############################      spanish: list-alltables: list all rules 
#### :rutina-inicial-list-alltables:
####
####
 if [ "$first_option" = "list-alltables" ]; then  $nada
 echo "$tab [ $first_option ] [ List all rules ]"
 echo $header_lineal
 echo; echo; echo "### LIST ARPTABLES ###"
 $fwiptables list-arptables
 echo; echo; echo "### LIST EBTABLES ###"
 $fwiptables list-ebtables
 echo; echo; echo "### LIST FILTER IP4 TABLE ###"
 $fwiptables list-filter4
 echo; echo; echo "### LIST FILTER IP6 TABLE ###"
 $fwiptables list-filter6
 echo; echo; echo "### LIST NAT IP4 TABLE ###"
 $fwiptables list-nat4
 echo; echo; echo "### LIST NAT IP4 TABLE ###"
 $fwiptables list-nat6
 echo; echo; echo "### LIST SECURITY IP4 TABLE ###"
 $fwiptables list-security4
 echo; echo; echo "### LIST SECURITY IP6 TABLE ###"
 $fwiptables list-security6
 echo; echo; echo "### LIST RAW IP4 TABLE ###"
 $fwiptables list-raw4
 echo; echo; echo "### LIST RAW IP6 TABLE ###"
 $fwiptables list-raw6
 echo; echo; echo "### LIST MANGLE IP4 TABLE ###"
 $fwiptables list-mangle4
 echo; echo; echo "### LIST MANGLE IP6 TABLE ###"
 $fwiptables list-mangle6
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-alltables:
#############################  english: list4-ip: system script, the list option
#############################  spanish: list4-ip: script de sistema, la opcion lista
#### :rutina-inicial-list:
####
####
 if [ "$first_option" = "list4-ip" ]; then $give_cover 
 legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
 "$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
 nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
 "$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
#### echo $header_ender
 echo "$tab [ list ] [ List iptables filter ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 case $legacycuatro in
 "$NULL") echo "$tab [ Without rules xtables ] [ iptables-legacy ]" ;;
 *)
 echo "$tab [ With rules xtables ] [ iptables-legacy ]"
 $command_iptables_legacy -t filter -v -L
 ;;
 esac
 echo "$tab"
 case $nftcuatro in
 "$NULL") echo "$tab [ Without rules nftables ] [ iptables-nft ]" ;;
 *)
 echo "$tab [ With rules nftables ] [ iptables-nft ]" 
 $command_iptables_nft -t filter -v -L
 ;;
 esac
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list:
############################ english: list6-ip: list ipv6 rules filter
############################ spanish: list6-ip: lista reglas de filtros de ipv6
#### :rutina-inicial-list6:
####
####
 if [ "$first_option" = "list6-ip" ]; then  $give_cover
 legacyseis=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
 "$command_ip6tables_legacy" -t filter -L OUTPUT 1 )
 nftseis=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 )
#### echo $header_ender
 echo "$tab [ list6 ] [ List iptables filter ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 case $legacyseis in
 "$NULL") echo "$tab [ Without rules xtables ] [ iptables-legacy ]" ;;
 *)
 echo "$tab [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_legacy -v -L
 ;;
 esac
 echo $tab
 case $nftseis in
 "$NULL") echo "$tab [ Without rules nftables ] [ iptables-nft ]" ;;
 *)
 echo "$tab [ With rules nftables ] [ iptables-nft ]" 
 $command_ip6tables_nft -v -L
 ;;
 esac
####
####
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list6:
#############################  english: status: system script, the list option
#############################  spanish: status: script de sistema, la opcion lista
#### :rutina-inicial-status:
####
####
 if [ "$first_option" = "status" ]; then $nada
####
####
 if [ "$($command_ip -4 route | grep -i default | head -1)" != "$NULL" ]; then
 echo "$tab When its ipv4 has default route $tab so it show filter rules ipv4 in status"
 $fwiptables list
 else echo "$tab When its ipv4 has no default route $tab hide filter rules ipv4 in status" ; fi
####
####
 if [ "$($command_ip -6 route | grep -i default | head -1)" != "$NULL" ]; then
 echo "$tab When its ipv6 has default route $tab show filter rules ipv6 in status"
 $fwiptables list6
 else echo "$tab When its ipv6 has no default route $tab so it hide filter rules ipv6 in status" ;  fi
####
####
 exit; fi
####
####
#### :rutina-final-satus:
#############################  english: list-filter4: system script, the list option
#############################  spanish: list-filter4: script de sistema, la opcion lista
#### :rutina-inicial-list-filter4:
####
####
 if [ "$first_option" = "list-filter4" ]; then $give_cover 
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ]"
 $command_iptables_legacy -t filter -v -L
 echo "$tab"
 echo "$tab [ With rules nftables ] [ iptables-nft ]" 
 $command_iptables_nft -t filter -v -L
####
####
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-filter4:
############################  english: list-forward: list iptables filter forward rules
############################  spanish: list-forward: lista reglas de iptables filter forward
#### :rutina-inicial-list-forward:
####
####
 if [ "$first_option" = "list-forward" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter forward ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ] [ FORWARD ]"
 $command_iptables_legacy -t filter -v -L FORWARD
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ] [ FORWARD ]"
 $command_iptables_nft -t filter -v -L FORWARD
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forward:
############################ english: list-filter6: list ipv6 rules filter
############################ spanish: list-filter6: lista reglas de filtros de ipv6
#### :rutina-inicial-list-filter6:
####
####
 if [ "$first_option" = "list-filter6" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_legacy -v -L
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ]" 
 $command_ip6tables_nft -v -L
####
####
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-filter6:
############################  english: list-forward6: list iptables filter forward rules ipv6
############################  spanish: list-forward6: lista reglas de iptables filter forward ipv6
#### :rutina-inicial-list-forward6:
####
####
 if [ "$first_option" = "list-forward6" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter forward ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ] [ FORWARD ]"
 $command_ip6tables_legacy -t filter -v -L FORWARD
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ] [ FORWARD ]"
 $command_ip6tables_nft -t filter -v -L FORWARD
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forward6:
############################ english: list-nat4: list NAT rules of ipv4
############################ spanish: list-nat4: lista reglas de NAT de ipv4
#### :rutina-inicial-list-nat-4:
####
####
 if [ "$first_option" = "list-nat4" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables nat ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ] $tab  "
 $command_iptables_legacy -t nat -v -L
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ]"
 $command_iptables_nft -t nat -v -L 
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-nat-4:
############################ english: list-nat6: list NAT rules of ipv6
############################ spanish: list-nat6: lista reglas de NAT de ipv6
#### :rutina-inicial-list-nat6:
####
####
 if [ "$first_option" = "list-nat6" ]; then $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables nat ipv6] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ]"
 $command_ip6tables_legacy -t nat -v -L 
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ]"
 $command_ip6tables_nft -t nat -v -L 
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-nat6:
############################# english: listnum: list option numerical filter ipv4
############################# spanish: listnum: lista numeral filter ipv4
#### :rutina-inicial-listnum:
####
####
 if [ "$first_option" = "listnum" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter ipv4 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab [With rules netfilter] [iptables-nft]"  
 $command_iptables_legacy -v -n -L 
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ]"  
 $command_iptables_nft -v -n -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-listnum:
############################  english: list-forwardnum: list iptables filter forward rules in numerical
############################  spanish: list-forwardnum: lista reglas de iptables filter forward in numeros
#### :rutina-inicial-list-forwardnum:
####
####
 if [ "$first_option" = "list-forwardnum" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter forward ipv4 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ] [ FORWARD ]"
 $command_iptables_legacy -t filter -v -n -L FORWARD
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ] [ FORWARD ]"
 $command_iptables_nft -t filter -v -n -L FORWARD
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forwardnum:
############################# english: listnum6: list option numerical filter ipv6
############################# spanish: listnum6: lista numeral filter ipv6
#### :rutina-inicial-listnum6:
####
####
 if [ "$first_option" = "listnum6" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter ipv6 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_legacy -v -n -L 
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_nft -v -n -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-listnum6:
############################  english: list-forwardnum6: list iptables filter forward rules in numerical ipv6
############################  spanish: list-forwardnum6: lista reglas de iptables filter forward in numeros ipv6
#### :rutina-inicial-list-forwardnum6:
####
####
 if [ "$first_option" = "list-forwardnum6" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables filter forward ipv6 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ With rules xtables ] [ iptables-legacy ] [ FORWARD ]"
 $command_ip6tables_legacy -t filter -v -n -L FORWARD
 echo $tab
 echo "$tab [ With rules nftables ] [ iptables-nft ] [ FORWARD ]"
 $command_ip6tables_nft -t filter -v -n -L FORWARD
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forwardnum6:
############################       english: list-mangle4: list mangle rules from ipv4
############################       spanish: list-mangle4: lista reglas de mangle de ipv4
#### :rutina-inicial-list-mangle4:
####
####
 if [ "$first_option" = "list-mangle4" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables mangle ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ The xtables ] [ iptables-legacy ] [ MANGLE ]"
 $command_iptables_legacy -t mangle -v -L
 echo $tab
 echo "$tab [ The nftables ] [ iptables-nft ] [ MANGLE ]"
 $command_iptables_nft -t mangle -v -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-mangle4:
############################       english: list-mangle6: list mangle rules from ipv6
############################       spanish: list-mangle6: lista reglas de mangle de ipv6
#### :rutina-inicial-list-mangle6:
####
####
 if [ "$first_option" = "list-mangle6" ]; then $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables mangle ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab [ The xtables ] [ iptables-legacy ] [ MANGLE ]"
 $command_ip6tables_legacy -t mangle -v -L
 echo $tab
 echo "$tab [ The nftables ] [iptables-nft ] [ MANGLE ]"
 $command_ip6tables_nft -t mangle -v -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-mangle6:
############################       english: list-raw4: list raw rules from ipv4
############################       spanish: list-raw4: lista reglas raw de ipv4
#### :rutina-inicial-list-raw4:
####
####
 if [ "$first_option" = "list-raw4" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables raw ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo "$tab  [ The xtables ] [ iptables-legacy ] [ RAW ]"
 $command_iptables_legacy -t raw -v -L
 echo $tab
 echo "$tab [ The nftables ] [ iptables-nft ] [ RAW ]"
 $command_iptables_nft -t raw -v -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-raw4:
############################       english: list-raw6: list raw rules from ipv6
############################       spanish: list-raw6: lista reglas raw de ipv6
#### :rutina-inicial-list-raw6:
####
####
 if [ "$first_option" = "list-raw6" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables raw ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ The xtables ] [ iptables-legacy ] [ RAW ]"
 $command_ip6tables_legacy -t raw -v -L
 echo $tab
 echo "$tab [ The nftables ] [ iptables-nft ] [ RAW ]"
 $command_ip6tables_nft -t raw -v -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-raw6:
############################       english: list-security4: list security rules from ipv4
############################       spanish: list-security4: lista reglas de security de ipv4
#### :rutina-inicial-list-security4:
####
####
 if [ "$first_option" = "list-security4" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables security ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ The xtables ] [ iptables-legacy ] [ SECURITY ]"
 $command_iptables_legacy -t security -v -L
 echo $tab
 echo "$tab [ The nftables ] [ iptables-nft ] [ SECURITY ]"
 $command_iptables_nft -t security -v -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-security4:
############################       english: list-security6: list security rules from ipv6
############################       spanish: list-security6: lista reglas de security de ipv6
#### :rutina-inicial-list-security6:
####
####
 if [ "$first_option" = "list-security6" ]; then  $give_cover
 echo $header_ender
 echo "$tab [ $first_option ] [ List iptables security ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ The xtables ] [ iptables-legacy ] [ SECURITY ]"
 $command_ip6tables_legacy -t security -v -L
 echo $tab
 echo "$tab [ The nftables ] [ iptables-nft ] [ SECURITY ]"
 $command_ip6tables_nft -t security -v -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-security6:
############################       english: list-ebtables: list ebtables rules with mac
############################       spanish: list-ebtables: lista reglas de ebtables with mac
#### :rutina-inicial-list-ebtables:
####
####
 if [ "$first_option" = "list-ebtables" ]; then  $give_cover
 echo "$tab [ $first_option ] [ List ebtables ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ ebtables: filter ethernet ] [ EBTABLES ]"
 $command_ebtables -L -t filter
 echo $tab
 echo "$tab [ ebtables: nat ethernet ] [ EBTABLES ]"
 $command_ebtables -L -t nat
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-ebtables:
############################       english: list-arptables: list rules arptables with arp
############################       spanish: list-arptables: lista reglas de arptables with arp
#### :rutina-inicial-list-arptables:
####
####
 if [ "$first_option" = "list-arptables" ]; then  $give_cover
 echo "$tab [ $first_option ] [ List arptables ipv4 ]"
 echo $header_lineal
 echo $tab
 echo $tab
 echo "$tab [ arptables: filter arptables ] [ ARPTABLES ]"
 echo $rala
 $command_arptables -L
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-arptables:
############################       english: new-full-config: new-full-config option to create new configs
############################       spanish: new-full-config: new-full-config para cear nuevas config
#### :rutina-inicial-new-full-config:
####
####
if [ "$first_option" = "new-full-config" ] && [ "$second_option" = "$NULL" ]  ; then $give_cover
echo "$tab [ info ] [ usage: ] [ $fwiptables new-full-config config-new ]"
exit; fi
####
####
if [ "$first_option" = "new-full-config" ] && [ "$second_option" != "$NULL" ] ; then $give_cover
archivo="$second_option"
cp "$defaultfullcfg_eng" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modify $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Canceled. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-new-full-config:
############################       english: nueva-completa-config: create new configs
############################       spanish: nueva-completa-config: nueva-completa-config para cear nuevas config
#### :rutina-inicial-nueva-completa-config:
####
####
if [ "$first_option" = "nueva-completa-config" ] && [ "$second_option" = "$NULL" ]  ; then $give_cover
echo "$tab [ info ] [ usage: ] [ $fwiptables nueva-completa-config config-nueva ]"
exit; fi
####
####
if [ "$first_option" = "nueva-completa-config" ] && [ "$second_option" != "$NULL" ] ; then $give_cover
archivo="$second_option"
cp "$defaultfullcfg_spa" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modificado. $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Cancelado. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-nueva-completa-config:
############################       english: new-mini-config: create new configs
############################       spanish: new--mini config: cea nuevas config
#### :rutina-inicial-new-mini-config:
####
####
if [ "$first_option" = "new-mini-config" ] && [ "$second_option" = "$NULL" ]  ; then $give_cover
echo "$tab [ info ] [ usage: ] [ $fwiptables new-mini-config config-new ]"
exit; fi
####
####
if [ "$first_option" = "new-mini-config" ] && [ "$second_option" != "$NULL" ] ; then $give_cover
archivo="$second_option"
cp "$defaultminicfg_eng" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modify $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Canceled. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-new-mini-config:
############################       english: nueva-mini-config: create new configs
############################       spanish: nueva-mini-config: crea nuevas config
#### :rutina-inicial-nueva-mini-config:
####
####
if [ "$first_option" = "nueva-mini-config" ] && [ "$second_option" = "$NULL" ]  ; then  $give_cover
echo "$tab [ info ] [ usage: ] [ $fwiptables nueva-mini-config config-nueva ]"
exit; fi
####
####
if [ "$first_option" = "nueva-mini-config" ] && [ "$second_option" != "$NULL" ] ; then  $give_cover
archivo="$second_option"
cp "$defaultminicfg_spa" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modificado $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Cancelado. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-nueva-mini-config:
############################       english: modify-config: modify a one config.cfg
############################       spanish: modify-config: modify una configuracion.cfg
#### :rutina-inicial-modify-config:
####
####
if [ "$first_option" = "modify-config" ]; then  $give_cover
cp "$directory_config/$second_option" "/tmp/fiptables-$second_option" &> /dev/null
####
###
if [ ! -f "$directory_config"/"$second_option" ] ; then $nada
echo "$tab [ info ] [ usage: ] [ $fwiptables modify-config config-existent ]" ; exit; fi
####
####
if [ -f "$directory_config"/"$second_option" ] ; then $nada
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$second_option" 0 0 2> "$directory_config/$second_option"
clear; fi
####
####
if [  -s "$directory_config/$second_option" ] ; then
dialog --msgbox "[OK file modify config file: $second_option]" 0 0 
clear ; exit ; fi
####
####
if [ ! -s "$directory_config/$second_option" ] ; then $nada
cp "/tmp/fiptables-$second_option" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[Canceled file modify config file: $second_option]" 0 0 
clear ; exit ; fi
####
####
clear ; exit ; fi
####
####
#### :rutina-final-modify-config:
############################       english: show-config: show a one config
############################       spanish: show-config: muestra una configuracion
#### :rutina-inicial-show-config:
####
####
if [ "$first_option" = "show-config" ] ; then $give_cover
####
####
if [ ! -f "$directory_config"/"$second_option" ] ; then 
echo "$tab [ status ] [ Usage: $fwiptables show-config config-old ]" ; exit; fi
####
####
if [ -f "$directory_config"/"$second_option" ] ; then 
cat $directory_config/$second_option ;
echo $footer_lineal ; exit ; fi
####
####
exit; fi
####
####
#### :rutina-final-show-config:
############################       english: del-config: delete a old config
############################       spanish: del-config: elimina una vieja configuracion
#### :rutina-inicial-del-config:
####
####
if [ "$first_option" = "del-config" ]; then $give_cover
####
####
if [ ! -f $directory_config/$second_option ] ; then
echo "$tab [ info ] [ usage: ] [ $fwiptables del-config config-old ]" ; exit ; fi
####
####
if [ -f $directory_config/$second_option ] ; then
rm $directory_config/$second_option
echo "$directory_config/$second_option Deleted"
echo $footer_lineal ; exit ; fi
####
####
exit ; fi
####
####
#### :rutina-final-del-config:
############################       english: sudo-adduser: the sudo-adduser option en english
############################       spanish: sudo-adduser: la opcion de sudo-adduser en ingles
#### :rutina-inicial-sudo-adduser:
####
####
if [ "$first_option" = "sudo-adduser" ]; then $give_cover
case $second_option in
"$NULL") echo $head_principal ; echo $header_lineal ; echo "$tab [ info ] [ usage: ] [ $fwiptables sudo-adduser user ]" ; exit ;;
*) autorizados="$second_option" ;; esac
echo "$autorizados ALL=(root) NOPASSWD: $directory_fiptables/$fwiptables " &> /etc/sudoers.d/$fwiptables
echo "alias $fwiptables='sudo $fwiptables'" &>  /etc/bash_completion.d/$fwiptables
echo $tab
echo "$tab [ ok ] [ $autorizados will use:     $fwiptables ]"
echo "$tab [ Ok ] [ $fwiptables will use alias with sudo ]"
echo $tab
echo "$tab [ sudoer file:   /etc/sudoers.d/$fwiptables ]"
cat /etc/sudoers.d/$fwiptables
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-sudo-adduser:
############################       english: sudo-deluser: the sudo-deluser option en english
############################       spanish: sudo-deluser: la opcion de sudo-deluser en ingles
#### :rutina-inicial-sudo-deluser:
####
####
if [ "$first_option" = "sudo-deluser" ]; then $give_cover
rm /etc/sudoers.d/$fwiptables
echo "$tab [ ok ] [ deleted auth sudo ]"
echo "$tab [ ok ] [ deleted /etc/sudoers.d/$fwiptables ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-sudo-deluser:
############################       english: sudo-list: the sudo-adduser option en english
############################       spanish: sudo-list: la opcion de sudo-adduser en ingles
#### :rutina-inicial-sudo-list:
####
####
if [ "$first_option" = "sudo-list" ] && [ -f /etc/sudoers.d/$fwiptables ] ; then $give_cover
echo "$tab [ $first_option ] [ list users with root auth for launch $fwiptables ]"
echo "$tab [ With root sudo for $fwiptables from some user ]"
echo "$tab [ sudoer file:   /etc/sudoers.d/$fwiptables ]"
cat /etc/sudoers.d/$fwiptables
echo $footer_lineal
exit; fi
####
####
if [ "$first_option" = "sudo-list" ] && [ ! -f /etc/sudoers.d/$fwiptables ] ; then $give_cover
echo "$tab [ status ] [ list users with root auth for launch $fwiptables ]"
echo $header_lineal
echo "$tab [ status ] [ Without root sudo from users ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-sudo-list:
############################       english: alias-list: the sudo-adduser option en english
############################       spanish: alias-list: la opcion de sudo-adduser en ingles
#### :rutina-inicial-alias-list:
####
####
if [ "$first_option" = "alias-list" ]; then $give_cover
echo "$tab [ $first_option ] [ list alias and autocomplete for $fwiptables ]"
echo $header_lineal
echo "$tab [ alias file ] [  /etc/profile.d/$fwiptables ]"
cat /etc/bash_completion.d/$fwiptables
echo "$tab [ alias file ] [  /etc/bash_completion.d/$fwiptables ]"
cat /etc/bash_completion.d/$fwiptables
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-alias-list:
############################       english: ipforward-list: the ipforwading option en english
############################       spanish: ipforward-list: la opcion de reenvios  en ingles
#### :rutina-inicial-ipforward-list:
####
####
 if [ "$first_option" = "ipforward-list" ]; then $give_cover
 echo "$tab [ $first_option ] [ Show ip forwading in kernel ]"
 echo $header_lineal
 echo "$tab [ Active 1 or deactive 0 for ipforwading with sysctl ]"
 $command_sysctl -a | grep -i forwarding
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ipforward-list:
############################       english: tcpdump: listen at dump from conexiones
############################       spanish: tcpdump: escucha al volcado de conexiones
#### :rutina-inicial-tcpdump:
####
####
 if [ "$first_option" = "tcpdump" ]; then $give_cover
 case $command_tcpdump in "$NULL") echo "$tab [ fail ] [ Install tcpdump command ]" ; exit ;; esac
 echo "$tab [ info ] [ launch several seconds tcpdump ]"
 echo $header_lineal
####
####
 echo $head_waiting_gui
 echo "$tab" "$tab" "$tab"
 timeout -s SIGINT -v $server_waiting tcpdump -v
 echo "$tab" "$tab" "$tab"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-tcpdump:
############################       english: info-nodes: listen at dump from conexiones arp
############################       spanish: info-nodes: escucha al volcado de conexiones arp
#### :rutina-inicial-info-nodes:
####
####
 if [ "$first_option" = "info-nodes" ]; then  $give_cover
 case $command_arp_scan in "$NULL") echo "$tab [ fail ] [ install arp-scan command ]" ;;
 *)
 echo "$tab [ $first_option ] [ Show the list arp-scan in the lan ]"
 echo $header_lineal
 echo $tab
 echo local net: ip lan
 $command_ip -4 route | grep -iv default
 echo $tab
 echo local scan: arp lan
 echo $head_waiting_gui
 $command_arp_scan -l -x & sleep $server_waiting && kill -9 $command_arp_scan &> /dev/null
 ;;
 esac
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-nodes:
############################       english: show-default: show /etc/default/fwiptables
############################       spanish: show-default: show /etc/default/fwiptables
#### :rutina-inicial-show-default:
####
####
 if [ "$first_option" = "show-default" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the /etc/default/fwiptables ]"
 echo $header_lineal
 cat /etc/default/fwiptables
 echo $footer_lineal
 echo "$tab [ status ] [ edit file /etc/default/fwiptables to change variables with: $fwiptables modify-default ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-show-default:
############################       english: modify-default: modify /etc/default/fwiptables
############################       spanish: modify-default: modify /etc/default/fwiptables
#### :rutina-inicial-modify-default:
####
####
 if [ "$first_option" = "modify-default" ]; then  $give_cover
 echo "$tab [ $first_option ] [ modify the /etc/default/fwiptables ]"
 echo $header_lineal
 echo $footer_lineal
 echo "$tab [ status ] [ edit file /etc/default/fwiptables to change variables ]"
####
####
#### english: make security copy file
#### spanish: hace copia de seguridad
####
####
 cp /etc/default/fwiptables /tmp/fiptables-modify-default
####
####
#### english: edit file
#### spanish: edita el archivo
####
####
 dialog --no-cancel --title "MODIFY FILE /etc/default/fwiptables" \
 --editbox /tmp/fiptables-modify-default 0 0 2> /etc/default/fwiptables
 clear
####
####
#### english: probe all that is correct or recover
#### spanish: prueba que todo es correcto o lo recupera
####
####
 if [ ! -s "/etc/default/fwiptables" ] ; then $nada
 cp /tmp/fiptables-modify-default /etc/default/fwiptables; fi
####
####
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-modify-default:
############################       english: names: file list whith rules in iptables format
############################       spanish: names: lista de archivos con reglas en formato iptables
#### :rutina-inicial-names:
####
####
 if [ "$first_option" = "names" ]; then  $give_cover
 echo "$tab [ $first_option ] [ List names from firewall saved ]"
 echo $header_lineal
 echo "$tab $tab [English:] [File list with iptables format in folder:] [$directory_fwrecover]"
 echo "$tab $tab [Spanish:] [Lista de archivos con iptables formato en carpeta:] [$directory_fwrecover]"
 echo "$tab"
 echo "$tab $tab [ Firewall saved ]"
 echo "$tab"
 ls -1 $directory_fwrecover | sed s/\-legacy\-ipv6//g | sed s/\-nft\-ipv6//g | \
 sed s/\-legacy\-ipv4//g | sed s/\-nft\-ipv4//g | \
 sed s/\-arptables//g | sed s/\-ebtables//g | sort -u 
 echo "$tab"
 echo "$tab $tab [ ok ] [ firewall names ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-names:
##############################       english: reset: reset counter rules
##############################       spanish: reset: resetea contadores de reglas
#### :rutina-inicial-reset:
####
####
if [ "$first_option" = "reset" ]; then $give_cover
echo "$tab [ $first_option ] [ Reset the firewall ]"
echo "$tab [ status ] [ Reseting the firewall ]"
$fwiptables stop &> /dev/null
$fwiptables continue &> /dev/null
echo "$tab [ ok ] [ firewall reseted ]"
exit; fi
####
####
#### :rutina-final-reset:
##############################       english: wizard-mini: wizard-mini
##############################       spanish: wizard-mini: mini-asistente 
#### :rutina-inicial-wizard-mini:
####
####
if [ "$first_option" = "wizard-mini" ]; then echo 
archivo="$first_option"
cp "$defaultminicfg_eng" "/tmp/fiptables-$archivo"
dialog --clear --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" \
0 0 2> "$directory_config/$archivo"
clear
if [  -s "$directory_config/$archivo" ]; then $nada ; 
dialog --msgbox "wizard full ready" 0 0 ; clear ; $fwiptables custom "$archivo" ; $fwiptables listnum ;
else rm "$directory_config/$archivo" ; dialog --msgbox "Wizard full canceled" 0 0 ; clear ; fi
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-wizard-mini:
##############################       english: wizard-full: wizard-full
##############################       spanish: wizard-full: asistente 
#### :rutina-inicial-wizard-full:
####
####
if [ "$first_option" = "wizard-full" ]; then echo
archivo="$first_option"
cp "$defaultfullcfg_eng" "/tmp/fiptables-$archivo"
dialog --clear --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" \
0 0 2> "$directory_config/$archivo"
clear
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$dialog --msgbox "Wizard full ready" 0 0 ; clear ; $fwiptables custom "$archivo" ; $fwiptables listnum ;
else rm "$directory_config/$archivo" ; dialog --msgbox "Wizard full canceled" 0 0 ; clear ; fi
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-wizard-full:
############################       english: load: load the rules in iptables format
############################       spanish: load: carga las reglas en formato iptables
#### :rutina-inicial-load:
####
####
 if [ "$first_option" = "load" ]; then $give_cover ; $give_autosave
####
####
#### English: Void in second option
####
####
 if [ "second_option" = "$NULL" ]; then
 $fwiptables names; echo "$tab [ status ] [ usage: $fwiptables load fw-to-load ] [ See: $fwiptables names ]" ; exit ; fi
####
####
#### English if do exist second option in load
####
####
 if [ -f $directory_fwrecover/$second_option-nft-ipv4 ] || [ -f $directory_fwrecover/$second_option-legacy-ipv4 ] ; then 
####
####
#### English: show message
####
####
 echo "$tab [ running ] [ Loading rules ]"
####
####
#### English: Remove all rules
####
####
 $fwiptables eraserules &> /dev/null
####
####
#### English: Load all rules 
####
####
 if [ -f "$directory_fwrecover/$second_option-ebtables" ]; then
 cat $directory_fwrecover/$second_option-ebtables | $command_ebtables-restore &> /dev/null; fi
####
####
 if [ -f "$directory_fwrecover/$second_option-arptables" ]; then
 cat $directory_fwrecover/$second_option-arptables | $command_arptables-restore &> /dev/null; fi
####
#### 
 cat $directory_fwrecover/$second_option-nft-ipv4 |  $command_iptables_nft-restore       
 cat $directory_fwrecover/$second_option-legacy-ipv4 | $command_iptables_legacy-restore  
 cat $directory_fwrecover/$second_option-nft-ipv6 | $command_ip6tables_nft-restore       
 cat $directory_fwrecover/$second_option-legacy-ipv6 | $command_ip6tables_legacy-restore 
 echo "$tab [ ok ] [ FIREWALL LOADED ] [ $second_option ]"
####
####
#### english: if no found #### spanish: si no encuentra
####
####
 else
 $fwiptables names
 echo "$tab [ info ] [ usage: $fwiptables load fw-to-load ] [ See: $fwiptables names ]"
 fi 
####
####
#### echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-load:
############################       english: save: save the rules in iptables format
############################       spanish: save: guarda las reglas en formato iptables
#### :rutina-inicial-save:
####
####
 if [ "$first_option" = "save" ]; then $give_cover
 case "$second_option" in
 "$NULL") echo "$tab [ info ] [ Usage: $fwiptables save fw-to-save ]" ; exit ;;
 *) archivofin="$second_option" ;; 
 esac
####
####
  if [ "$command_arptables" = "$NULL"  ]; then $nada ; else
  $command_arptables-save          &> $directory_fwrecover/$archivofin-arptables; fi
  if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
 $command_ebtables-save           &> $directory_fwrecover/$archivofin-ebtables; fi
####
####
 $command_iptables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv4     
 $command_iptables_legacy-save    &> $directory_fwrecover/$archivofin-legacy-ipv4  
 $command_ip6tables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv6     
 $command_ip6tables_legacy-save   &> $directory_fwrecover/$archivofin-legacy-ipv6  
####
####
 echo "$tab [ ok ] [ FIREWALL SAVED ] [ $archivofin ]"
 if [ "$command_arptables" = "$NULL"  ]; then $nada ; else
 ls -l $directory_fwrecover/$archivofin-arptables; fi
 if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
 ls -l $directory_fwrecover/$archivofin-ebtables; fi
 ls -l $directory_fwrecover/$archivofin-nft-ipv4
 ls -l $directory_fwrecover/$archivofin-nft-ipv6
 ls -l $directory_fwrecover/$archivofin-legacy-ipv4
 ls -l $directory_fwrecover/$archivofin-legacy-ipv6
 echo "$tab [ ok ] [ firewall listed ] [ $archivofin ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-save:
############################       english: show: show the rules from one firewall in iptables format
############################       spanish: show: muestra las reglas de un firewall en formato iptables
#### :rutina-inicial-show:
####
####
 if [ "$first_option" = "show" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show one firewall saved ]"
 echo $header_lineal
 case "$second_option" in
 "$NULL") $fwiptables names; echo "$tab [ info ] [ Use: $fwiptables show file-to-show ]" ; exit ;;
 *) archivofin=$(sed 's/\///g' <<< "$second_option") ;;
 esac
 ls -l $directory_fwrecover/$archivofin-arptables
 ls -l $directory_fwrecover/$archivofin-ebtables
 ls -l $directory_fwrecover/$archivofin-nft-ipv4
 ls -l $directory_fwrecover/$archivofin-nft-ipv6
 ls -l $directory_fwrecover/$archivofin-legacy-ipv4
 ls -l $directory_fwrecover/$archivofin-legacy-ipv6
 echo "$tab [ ok ] [ FIREWALL LISTED ] [ $archivofin ]"
 echo "$cincuenta $archivofin-arptables"
 cat $directory_fwrecover/$archivofin-arptables
 echo "$cincuenta $archivofin-ebtables"
 cat $directory_fwrecover/$archivofin-ebtables
 echo "$cincuenta $archivofin-nft-ipv4"
 cat $directory_fwrecover/$archivofin-nft-ipv4
 echo "$cincuenta $archivofin-legacy-ipv4"
 cat $directory_fwrecover/$archivofin-legacy-ipv4
 echo "$cincuenta $archivofin-nft-ipv6"
 cat $directory_fwrecover/$archivofin-nft-ipv6
 echo "$cincuenta archivofin-legacy-ipv6"
 cat $directory_fwrecover/$archivofin-legacy-ipv6
 echo "$tab [ ok ] [ firewall readed ] [ $archivofin ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-show:
############################       english: actual: show actuall firewall
############################       spanish: actual: muestra las reglas actuales
#### :rutina-inicial-actual:
####
####
 if [ "$first_option" = "actual" ]; then $give_cover
 echo "$tab [ $first_option ] [ show the last firewall saved ]"
 echo $header_lineal
 $command_arptables-save          &> $directory_fwrecover/fiptables-actual-arptables
 $command_ebtables-save           &> $directory_fwrecover/fiptables-actual-ebtables   
 $command_iptables_nft-save       &> $directory_fwrecover/fiptables-actual-nft-ipv4   
 $command_iptables_legacy-save    &> $directory_fwrecover/fiptables-actual-legacy-ipv4
 $command_ip6tables_nft-save      &> $directory_fwrecover/fiptables-actual-nft-ipv6   
 $command_ip6tables_legacy-save   &> $directory_fwrecover/fiptables-actual-legacy-ipv6
 echo "$cincuenta arptables $cinco"
 cat $directory_fwrecover/fiptables-actual-arptables
 echo "$cincuenta ebtables $cinco"
 cat $directory_fwrecover/fiptables-actual-ebtables
 echo "$cincuenta nft with ipv4 $cinco"
 cat $directory_fwrecover/fiptables-actual-nft-ipv4
 echo "$cincuenta legacy with ipv4 $cinco"
 cat $directory_fwrecover/fiptables-actual-legacy-ipv4
 echo "$cincuenta nft with ipv6 $cinco"
 cat $directory_fwrecover/fiptables-actual-nft-ipv6
 echo "$cincuenta legacy with ipv6 $cinco"
 cat $directory_fwrecover/fiptables-actual-legacy-ipv6
 echo "$tab  [ ok ] [ readed firewall actual ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-actual:
##############################       english: stop: stop firewall
##############################       spanish: stop: para el firewall
#### :rutina-inicial-stop:
####
####
if [ "$first_option" = "stop" ]; then $nada
echo $head_principal
echo "$tab [ $first_option ] [ Stop the firewall ]"
echo $header_lineal
####
####
#### english: save actual fw #### spanish: guarda actual fw
####
####
$command_arptables-save &> $directory_fwrecover/fiptables-stoped-arptables
$command_ebtables-save &> $directory_fwrecover/fiptables-stoped-ebtables             
$command_iptables_nft-save &> $directory_fwrecover/fiptables-stoped-nft-ipv4         
$command_iptables_legacy-save &> $directory_fwrecover/fiptables-stoped-legacy-ipv4   
$command_ip6tables_nft-save &> $directory_fwrecover/fiptables-stoped-nft-ipv6        
$command_ip6tables_legacy-save &> $directory_fwrecover/fiptables-stoped-legacy-ipv6  
####
####
#### english: erase the rules #### spanish: borra las reglas
####
####
$fwiptables eraserules &> /dev/null
echo "$tab [ ok ] [ firewall stopped ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-stop:
##############################       english: continue: continue the firewall
##############################       spanish: continue: continua el firewall
#### :rutina-inicial-continue:
####
####
 if [ "$first_option" = "continue" ]; then $nada
 echo $head_principal
 echo "$tab [ $first_option ] [ Continue the stoped firewall ]"
 echo $header_lineal
####
####
#### english: restore last fw #### spanish: restaura el ultimo fw
####
####
 cat $directory_fwrecover/fiptables-stoped-arptables | $command_arptables-restore
 cat $directory_fwrecover/fiptables-stoped-ebtables | $command_ebtables-restore
 cat $directory_fwrecover/fiptables-stoped-nft-ipv4 | $command_iptables_nft-restore  
 cat $directory_fwrecover/fiptables-stoped-legacy-ipv4 | $command_iptables_legacy-restore  
 cat $directory_fwrecover/fiptables-stoped-nft-ipv6 | $command_ip6tables_nft-restore  
 cat $directory_fwrecover/fiptables-stoped-legacy-ipv6 | $command_ip6tables_legacy-restore  
 echo "$tab [ ok ] [ firewall continued ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-continue:
############################       english: ping-ip4: ping icmp with ipv4
############################       spanish: ping-ip4: ping icmp with ipv6
#### :rutina-inicial-ping-ip4:
####
####
 if [ "$first_option" = "ping-ip4" ]; then $give_cover
 echo "$tab [ $first_option ]  [ ping ip or host with ipv4 ]"
 echo $header_lineal
 case $command_ping in "$NULL") echo "$tab [ fail ] [ Install ping command ]" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fwiptables stop
 echo $head_waiting_gui
 echo "$tab [ ok ] [  ping -4 -c 5 -A $server_ping_ipv4 ]"
 timeout -s SIGINT -v $server_waiting $command_ping -4 -c 5 -A $server_ping_ipv4
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ping-ip4:
############################       english: ping-ip6: ping icmp with ipv6
############################       spanish: ping-ip6: ping icmp con ipv6
#### :rutina-inicial-ping-ip6:
####
####
 if [ "$first_option" = "ping-ip6" ]; then $give_cover
 echo "$tab [ $first_option ] [ ping one ip or host with ipv6 ]"
 echo $header_lineal
 case $command_ping in "$NULL") echo "$tab [ fail ] [ Install ping command ]" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fwiptables stop
 echo $head_waiting_gui
 echo "$tab [ ok ] [ ping -6 -c 5 -A $server_ping_ipv6 ]"
 timeout -s SIGINT -v $server_waiting $command_ping -6 -c 5 -A $server_ping_ipv6
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ping-ip6:
############################       english: tracetcp-ip4: traceroute with tcp and ipv4
############################       spanish: tracetcp-ip4: traceroute con tcp y ipv4
#### :rutina-inicial-tracetcp-ip4:
####
####
 if [ "$first_option" = "tracetcp-ip4" ]; then $give_cover
 echo "$tab [ $first_option ] [ trace ip or host with ipv4 ]"
 echo $header_lineal
 case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;;  esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fwiptables stop
 echo $head_waiting_gui
 echo "$tab [ ok ] [ traceroute -4 -T $server_traceroute_ipv4 ] "
 timeout -s SIGINT -v $server_waiting $command_traceroute -4 -T $server_traceroute_ipv4
 echo $head_waiting_gui
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-tracetcp-ip4:
############################       english: tracetcp-ip6: traceroute with tcp and ipv6
############################       spanish: tracetcp-ip6: traceroute con tcp e ipv6
#### :rutina-inicial-tracetcp-ip6:
####
####
 if [ "$first_option" = "tracetcp-ip6" ]; then $give_cover
 echo "$tab [ $first_option ] [ trace one ip or host with ipv6 ]"
 echo $header_lineal
 case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fwiptables stop
 echo $head_waiting_gui
 echo "$tab [ ok ] [ traceroute -6 -T $server_traceroute_ipv6 ]"
 timeout -s SIGINT -v $server_waiting $command_traceroute -6 -T $server_traceroute_ipv6
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-tracetcp-ip6:
############################       english: traceicmp-ip4: traceroute with tcp and ipv4
############################       spanish: traceicmp-ip4: traceroute con tcp y ipv4
#### :rutina-inicial-traceicmp-ip4:
####
####
 if [ "$first_option" = "traceicmp-ip4" ]; then $give_cover
 echo "$tab [ $first_option ] [ trace ip or host with ipv4 ]"
 echo $header_lineal
 case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;;  esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fwiptables stop
 echo $head_waiting_gui
 echo "$tab [ ok ] [ traceroute -4 -I $server_traceroute_ipv4 ]"
 timeout -s SIGINT -v $server_waiting $command_traceroute -4 -I $server_traceroute_ipv4
 echo $head_waiting_gui
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-traceicmp-ip4:
############################       english: traceicmp-ip6: traceroute with tcp and ipv6
############################       spanish: traceicmp-ip6: traceroute con tcp y ipv6
#### :rutina-inicial-traceicmp-ip6:
####
####
 if [ "$first_option" = "traceicmp-ip6" ]; then $give_cover
 echo "$tab [ $first_option ] [ trace ip or host with ipv4 ]"
 echo $header_lineal
 case $command_traceroute in "$NULL") echo "$tab [ fail ] [ Install traceroute command ]" ; exit ;;  esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fwiptables stop
 echo $head_waiting_gui
 echo "$tab [ ok ] [ traceroute -6 -I $server_traceroute_ipv6 ]"
 timeout -s SIGINT -v $server_waiting $command_traceroute -6 -I $server_traceroute_ipv4
 echo $head_waiting_gui
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-traceicmp-ip6:
############################       english: host: host to resolve ip
############################       spanish: host: host to resolve ip
#### :rutina-inicial-host:
####
####
 if [ "$first_option" = "host" ]; then $give_cover
 echo "$tab [ $first_option ] [ resolve one ip or host ]"
 echo $header_lineal
 case $command_host in "$NULL") echo "$tab [ fail ] [ Install host command ]" ; exit ;; esac
 case "$second_option" in
 "$NULL") echo "$$tab [ info ] [ Please select a one host to launch host ]"
 echo "$tab Selecting host to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$tab [ ok ] [ host $trazador ]"
 $command_host $trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-host:
############################       english: dig: host to resolve ip
############################       spanish: dig: host to resolve ip
#### :rutina-inicial-dig:
####
####
 if [ "$first_option" = "dig" ]; then $give_cover
 echo "$tab [ $first_option ] [ resolve one ip or host ]"
 echo $header_lineal
 case $command_dig in "$NULL") echo "$tab [ fail ] [ Install dig command ]" ; exit ;; esac
 case "$second_option" in
 "$NULL") echo "$tab [ info ] [ Use: Please select a one host to launch dig ]"
 echo "$tab Selecting host to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$tab [ ok ] [ dig $trazador ]"
 $command_dig $trazador | grep ^$trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-dig:
############################       english: resolveip: host to resolve ip and viceversa
############################       spanish: resolveip: host to resolve ip and viceversa
#### :rutina-inicial-resolveip:
####
####
 if [ "$first_option" = "resolveip" ]; then $give_cover
 echo "$tab [ $first_option ] [ resolve one ip or host ]"
 echo $header_lineal
 case $command_resolveip in "$NULL") echo "$tab [ fail ] [ Install resolveip command ]" ; exit ;; esac
 case "$second_option" in
 "$NULL") echo "$cinco Please select a one host to launch resolveip"
 echo "$tab Selecting host to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$tab [ ok ] [ resolveip $trazador ]"
 $command_resolveip $trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-resolveip:
############################       english: geoip: host to resolve and locate
############################       spanish: geoip: host to resolve and locate
#### :rutina-inicial-geoip:
####
####
 if [ "$first_option" = "geoip" ]; then $give_cover
 echo "$tab [ $first_option ] [ resolve the location to one ip or host ]"
 echo $header_lineal
 case $command_geoiplookup in "$NULL") echo "$tab [ fail ] [ Install geoiplookup command ]" ; exit  ;; esac
 case "$second_option" in
 "$NULL") echo "$cinco Selecting host geoip to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$tab [ ok ] [ geoiplookup -i $trazador ]"
 $command_geoiplookup -i $trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-geoip:
############################       english: ntpdate: update the date and time
############################       spanish: ntpdate: actualiza la fecha y hora
#### :rutina-inicial-ntpdate:
####
####
if [ "$first_option" = "ntpdate" ]; then $nada
echo "$tab [ $first_option ] [ update the computer time and date from internet ]"
echo $header_lineal
if [ "$favorite_date_command" = "$NULL" ]; then echo "$tab [ fail ] [ Install one ntp client ]" ; fi
echo "$tab Old date: $($command_date)"
echo "$tab [ Updating the time and the date .. ]"
pool0="0.debian.pool.ntp.org"
pool1="1.debian.pool.ntp.org"
pool2="2.debian.pool.ntp.org"
pool3="3.debian.pool.ntp.org"
$favorite_date_command $pool0
echo "$tab New date: $($command_date)"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-ntpdate:
############################       english: scan-tcp: scan one net per tcp
############################       spanish: scan-tcp: rastrea una red por tcp
#### :rutina-inicial-scan-tcp:
####
####
if [ "$first_option" = "scan-tcp" ]; then $give_cover
 echo "$tab [ $first_option ] [ scan with nmap tcp ]"
 echo $header_lineal
 case $command_nmap in $NULL) echo install nmap ; exit ;; esac
 echo "$tab [ status ] [ nmap $first_option ip/mask ]"
 echo "$tab [ ok ] [ Stoped firewall while launching nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fwiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$tab [ ok ] [ Doing nmap ]"
 $command_nmap -sT $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fwiptables continue
####
####
 echo "$tab [ ok ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-tcp:
############################       english: scan-syn: scan one net per syn
############################       spanish: scan-syn: rastrea una por peticiones
#### :rutina-inicial-scan-syn:
####
####
 if [ "$first_option" = "scan-syn" ]; then $give_cover
 echo "$tab [ $first_option ] [ scan with nmap syn ]"
 echo $header_lineal
 case $command_nmap in "$NULL") echo "$tab [ info ] [ Install nmap command ]" ; exit ;; esac
 echo "$tab [ status ] [ nmap $first_option ip/mask ]"
 echo "$tab [ ok ] [ Stoped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fwiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$tab [ ok ] [ Doing nmap ]"
 $command_nmap -sF $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fwiptables continue
 echo "$tab [ ok ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-syn:
############################       english: scan-fin: scan one net per conexiones
############################       spanish: scan-fin: rastrea una red por conexiones
#### :rutina-inicial-scan-fin:
####
####
 if [ "$first_option" = "scan-fin" ]; then $give_cover
 echo "$tab [ $first_option ] [ scan with nmap fin ]"
 echo $header_lineal
 case $command_nmap in "$NULL") echo "$tab [ info ] [ Install nmap command ]" ; exit ;; esac
 echo "$tab [ status ] [ nmap $first_option ip/mask ]"
 echo "$tab [ ok ] [ Stoped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fwiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$tab [ ok ] [ Doing nmap ]"
 $command_nmap -sF $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fwiptables continue
####
####
 echo "$tab [ ok ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-fin:
############################       english: scan-udp: scan one net per udp
############################       spanish: scan-udp: rastrea una red por udp
#### :rutina-inicial-scan-udp:
####
####
 if [ "$first_option" = "scan-udp" ]; then $give_cover
 echo "$tab [ $first_option ] [ scan with nmap udp ]"
 echo $header_lineal
 case $command_nmap in "$NULL") echo "$tab [ fail ] [ Install nmap command ]" ; exit ;; esac
 echo "$cinco [ status ] [ nmap $first_option ip/mask ]"
 echo "$cinco [ ok ] [ Stoped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fwiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$tab [ ok ] [ Doing nmap ]"
 $command_nmap -sU $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fwiptables continue
####
####
 echo "$tab [ ok ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-udp:
############################       english: scan-ping: scan one net per ping
############################       spanish: scan-ping: rastrea una red por ping
#### :rutina-inicial-scan-ping:
####
####
 if [ "$first_option" = "scan-ping" ]; then $give_cover
 echo "$tab [ $first_option ] [ scan with nmap ping ]"
 echo $header_lineal
 case $command_nmap in "$NULL") echo "$tab [ fail ] [ Install nmap command ]" ; exit ;; esac
 echo "$tab [ status ] [ nmap $first_option ip/mask ]"
 echo "$tab [ ok ] [ Stopped firewall while launch nmap ]"
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
$fwiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$tab [ ok ] [ Doing nmap ]"
 $command_nmap -sn $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fwiptables continue
 echo "$tab [ ok ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-ping:
############################       english: free-ram: give one freedom to ram innecesary
############################       spanish: free-ram: limpia la memoria ram
#### :rutina-inicial-free-ram:
####
####
 if [ "$first_option" = "free-ram" ]; then $give_cover
 echo "$tab [ $first_option ] [ freedom from innecesary ram ]"
 echo $header_lineal
 case $command_tee in "$NULL") echo "$tab [ fail ] [ Install tee command ]"; exit ;; esac
 echo " Actual Memory"
 free -hw && sync
 echo 3 | $command_tee /proc/sys/vm/drop_caches &> /dev/null
 echo " Memory ram freedom .. Actual memory now"
 free -hw
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-free-ram:
############################       english: speed-disk: Show the speed of disc
############################       spanish: speed-disk: Muestra la velocidad de el disco
#### :rutina-inicial-speed-disk:
####
####
 if [ "$first_option" = "speed-disk" ]; then  $give_cover
 echo "$tab [ $first_option ] [ test the disc speed ]"
 echo $header_lineal
 case $command_dd in "$NULL") echo "$tab [ fail ] [ Install dd command ]"; exit ;; esac
 echo "$tab Testing speed with the temporal file /root/borrame.img.img about 100Mb"
####
####
 $command_dd if=/dev/zero of=/root/borrame.img.img status=progress bs=1M count=100
 rm /root/borrame.img.img &> /dev/null
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-speed-disk:
############################       english: speed-ram: Show the speed of ram
############################       spanish: speed-ram: Muestra la velocidad de la ram
#### :rutina-inicial-speed-ram:
####
####
 if [ "$first_option" = "speed-ram" ]; then  $give_cover
 echo "$tab [ $first_option ] [ test the ram speed ]"
 echo $header_lineal
 case $command_dd in "$NULL") echo "$tab [ fail ] [ Install dd command ]"; exit ;; esac
 case "$(mount | grep -i "/tmp type tmpfs" | wc -l)" 
 in "1")  ;; *) echo "$cinco Mount /tmp with tmpfs so: mount -t tmpfs tmpfs /tmp"; exit ;; esac
 echo "$tab Test speed with the temporal file /tmp/borrame.img.img about 100Mb"
####
####
 $command_dd if=/dev/zero of=/tmp/borrame.img.img status=progress bs=1M count=100
 rm /tmp/borrame.img.img &> /dev/null
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-speed-ram:
############################       english: speed-glx: show frammes por seconds with mesa graphicall 
############################       spanish: speed-glx: muestra los fotogramas por segundo con graphicos mesa
#### :rutina-inicial-speed-glx:
####
####
 if [ "$first_option" = "speed-glx" ]; then  $give_cover
 echo "$tab [ $first_option ] [ test gl mesa3D speed ] [ for default max $server_waiting seconds ]"
 echo $header_lineal
 case $command_glxgears in "$NULL") echo "$tab [ fail ] [ Install mesa utils ]"; exit ;; esac
 vblank_mode=0  timeout -s SIGINT -v $server_waiting $command_glxgears
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-speed-glx:
############################       english: radio-mp3: url from one radio mp3
############################       spanish: radio-mp3: url de una radio en mp3
#### :rutina-inicial-radio-mp3:
####
####
if [ "$first_option" = "radio-mp3" ]; then  $give_cover
echo "$tab [ $first_option ] [ Listen radio online ]"
echo "$tab [ status ] [ for choose default radio see: $fwiptables show-default ] [ only protocol http ]"
echo "$tab [ status ] [ Usually it do not working like root, probe as user ]"
####
####
case $favorite_radio_command in "$NULL") echo "$tab [ fail ] [ Install a console mp3 player ]"; exit ;; esac
####
####
if [ "$second_option" = "$NULL" ]; then $nada
#### emisora="$radio_mp3"
echo "[ info ] [ launch $fwiptables radio-cadena100 ] [ for cadena 100 ]"
echo "[ info ] [ launch $fwiptables radio-cadenadial ] [ for cadena dial ]"
echo "[ info ] [ launch $fwiptables radio-mp3 link-mp3 ] [ for one link from internet ]"
exit
else emisora="$second_option"; fi
####
####
echo "$tab [ ok ] [ $favorite_radio_command $emisora ]"
echo $header_lineal
echo $footer_lineal
sudo -u $(logname) $favorite_radio_command $emisora
exit; fi
####
####
#### :rutina-final-radio-mp3:
############################       english: radio-cadena100: url from one radio mp3
############################       spanish: radio-cadena100: url de una radio en mp3
#### :rutina-inicial-radio-cadena100:
####
####
if [ "$first_option" = "radio-cadena100" ]; then  $give_cover
echo "$tab [ $first_option ] [ Listen radio online ]"
echo "$tab [ status ] [ for choose default radio see: $fwiptables show-default ] [ only protocol http ]"
echo "$tab [ status ] [ Usually it do not working like root, probe as user ]"
####
####
case $favorite_radio_command in "$NULL") echo "$tab [ fail ] [ Install a console mp3 player ]"; exit ;; esac
####
####
if [ "$second_option" = "$NULL" ]; then $nada
emisora="$radio_cadena100"
else emisora="$second_option"; fi
####
####
echo "$tab [ ok ] [ $favorite_radio_command $emisora ]"
echo $header_lineal
echo $footer_lineal
sudo -u $(logname) $favorite_radio_command $emisora
exit; fi
####
####
#### :rutina-final-radio-cadena100:
############################       english: radio-cadenadial: url from one radio mp3
############################       spanish: radio-cadenadial: url de una radio en mp3
#### :rutina-inicial-radio-cadenadial:
####
####
if [ "$first_option" = "radio-cadenadial" ]; then  $give_cover
echo "$tab [ $first_option ] [ Listen radio online ]"
echo "$tab [ status ] [ for choose default radio see: $fwiptables show-default ] [ only protocol http ]"
echo "$tab [ status ] [ Usually it do not working like root, probe as user ]"
####
####
case $favorite_radio_command in "$NULL") echo "$tab [ fail ] [ Install a console mp3 player ]"; exit ;; esac
####
####
if [ "$second_option" = "$NULL" ]; then $nada
emisora="$radio_cadenadial"
else emisora="$second_option"; fi
####
####
echo "$tab [ ok ] [ $favorite_radio_command $emisora ]"
echo $header_lineal
echo $footer_lineal
sudo -u $(logname) $favorite_radio_command $emisora
exit; fi
####
####
#### :rutina-final-radio-cadenadial:
############################       english: colour-rgb: convert colour rgb to hex
############################       spanish: colour-rgb: convert colour rgb to hex
#### :rutina-inicial-colour-rgb:
####
####
if [ "$first_option" = "colour-rgb" ]; then  $nada
if [ "$second_option" = "$NULL" ]; then
echo " $cinco [ TYPE one colour in RGB with 9 digits ] [ Example: fwiptables colour-rgb 255000255 ]"
else
rgb="$(echo "$second_option" | cut -c -9)"
##
number_a="$(echo $rgb | cut -c 1-3)"
number_b="$(echo $rgb | cut -c 4-6)"
number_c="$(echo $rgb | cut -c 7-9)"
##
hexa_red="$(echo   " ibase=A   ; obase=16 ; $number_a" | bc)"
hexa_green="$(echo " ibase=A   ; obase=16 ; $number_b" | bc)"
hexa_blue="$(echo  " ibase=A   ; obase=16 ; $number_c" | bc)"
##
binary_red="$(echo   " ibase=A   ; obase=2  ; $number_a" | bc)"
binary_green="$(echo " ibase=A   ; obase=2  ; $number_b" | bc)"
binary_blue="$(echo  " ibase=A   ; obase=2  ; $number_c" | bc)"
##
echo " [ Colour RGB ________:  $number_a $number_b $number_c ]"
echo " [ Getting colours ] [ binary and hexadecimal ]"
echo " Number binary________:  $binary_red $binary_green $binary_blue"
echo " Colour HEXADECIMAL___:  $hexa_red $hexa_green $hexa_blue"
echo " [ ok ] [ Colour converted ]"
fi; exit ; fi
####
####
#### :rutina-final-colour-rgb:
############################       english: colour-hex: convert colour hex to rgb
############################       spanish: colour-hex: convert colour hex to rgb
#### :rutina-inicial-colour-hex:
####
####
if [ "$first_option" = "colour-hex" ]; then  $nada
if [ "$second_option" = "$NULL" ]; then
echo " $cinco [ TYPE one colour in HEXADECIMAL with 6 digits ] [ example: fwiptables colour-hex FF00FF ]"
else
hexadecimal="$(echo $second_option | tr '[:lower:]' '[:upper:]'| cut -c 1-6)"
##
hexa_a="$(echo $hexadecimal | cut -c 1-2)"
hexa_b="$(echo $hexadecimal | cut -c 3-4)"
hexa_c="$(echo $hexadecimal | cut -c 5-6)"
##
binary_red="$(echo   " ibase=16; obase=2 ; $hexa_a" | bc)"
binary_green="$(echo " ibase=16; obase=2 ; $hexa_b" | bc)"
binary_blue="$(echo  " ibase=16; obase=2 ; $hexa_c" | bc)"
##
rgb_red="$(echo   " ibase=16; obase=A ; $hexa_a" | bc)"
rgb_green="$(echo " ibase=16; obase=A ; $hexa_b" | bc)"
rgb_blue="$(echo  " ibase=16; obase=A ; $hexa_c" | bc)"
##
echo " [ Colour HEXADECIMAL_:  $hexa_a  $hexa_b  $hexa_c ]"
echo " [ Getting colours ] [ binary and RGB ]"
echo " Number binary________:  $binary_red  $binary_green  $binary_blue "
echo " Colour RGB __________:  $rgb_red  $rgb_green  $rgb_blue "
echo " [ ok ] [ Colour converted ]"
fi ; exit; fi
####
####
#### :rutina-final-colour-hex:
############################       english: ole-domain: discover one domain with ole-domain
############################       spanish: ole-domain: descubre un dominio con ole-domain
#### :rutina-inicial-ole-domain:
####
####
if [ "$first_option" = "ole-domain" ] ; then
file_domain="/etc/default/fwiptables-domain"
if [ -s $file_domain ]; then $nada 
else echo " [ status ] [ Downloading txt file to play with $favorite_text_browser ]"
$favorite_text_browser -source $fweb_domain &> $file_domain ; fi
numero_maximo="$(cat $file_domain | wc -l)"
numero_aleatorio_one="$(($RANDOM%"$numero_maximo"))"
domain_one="$(head -"$numero_aleatorio_one" $file_domain | tail -1 | cut -d " " -f 2)"
type_domain_one="$(head -"$numero_aleatorio_one" $file_domain | tail -1 | cut -d " " -f 1)"
###########
if [ "$second_option" = "-cli" ] || [ "$second_option" = "cli" ] ; then
case "$command_dialog" in "$NULL") echo " [ fail ] [ Install dialog to work ]"; exit ;; esac
dialog --stdout --title "Play game domain ole" \
--msgbox " Is this a country domain or a generic domain ? :  $domain_one"  0 0
dialog --stdout --title "Play game domain ole" \
--msgbox " Really $domain_one is a $type_domain_one domain."  0 0
clear ; exit ; fi
###########
if [ "$second_option" = "-gui" ] || [ "$second_option" = "gui" ] ; then
case "$command_zenity" in "$NULL") echo " [ fail ] [ Install zenity to work ]"; exit ;; esac
$(zenity $graphic_dimension --info --title="gui ole-domain" \
--text=" Is this a country domain or a generic domain ? :  $domain_one")
$(zenity $graphic_dimension --info --title="gui ole-domain" \
--text=" Really $domain_one is a $type_domain_one domain.")
exit; fi
###########
echo
echo " # Is this a country domain  or a generic domain ? :  $domain_one"
echo " # type any key to continue"
read
echo " Really $domain_one is a $type_domain_one domain."
exit
###########
exit; fi
####
####
#### :rutina-final-ole-domain:
############################       english: ole-word: play game ole-word
############################       spanish: ole-word: juega al juego ole-word
#### :rutina-inicial-ole-word:
####
####
if [ "$first_option" = "ole-word" ]; then  $nada
####
####
#### variables shared
####
####
language_english="/etc/default/fwiptables-english"
language_spanish="/etc/default/fwiptables-spanish"
language_number="0"
caracteres="" ; cinco_caracteres="" ; intento="0" ; intento_maximo="12"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
texten_1=" ##### [ ok ] Awasome, the random word is : "
texten_2=" ##### Clon of wordle: discover a radom word of five letters "
texten_3=" Letters in its site  " 
texten_4=" Letters in the word  "
texten_5=" ##### Type a word with five letters_  #  "
texten_5=" ##### Type actual Word         :  "
texten_6=" ##### Actual tried numbers     :  "
texten_7=" ##### The last answered      is:  "
texten_8=" ##### The correct answerd    is:  "
textes_1=" ##### [ ok ] Lo has conseguido, la palabra aleatoria es "
textes_2=" ##### Clon de wordle: Acierta con una palabra aleatoria de cinco caracteres. "
textes_3=" Letras en su sitio   " 
textes_4=" Letras en la palabra "
textes_5=" ##### Escribe una palabra de cinco caracteres_  #  "
textes_5=" ##### Introduce palabra actual        :  "
textes_6=" ##### Numero de intentos actuales     :  "
textes_7=" ##### La ultima respuesta           es:  "
textes_8=" ##### La respuesta correcta         es:  "
####
####
#############################################
############################################# ole-word in cli
####
####
if [ "$second_option" = "-cli" ] || [ "$second_option" = "cli" ]; then $nada
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
menuprincipal="$(dialog --stdout --clear --title "  Play game word ole" --menu "Select:" 0 0 0\
  01 "    Play word ole in english" \
  02 "    Play word ole in spanish" \
  03 "    quit word ole" \
)"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
case "$menuprincipal" in
  01) clear ; language_number="1" ; clear ;;
  02) clear ; language_number="2" ; clear ;;
  03) clear ; language_number="q" ; clear ;;
esac
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
#### Dicctionary english if download
if [ "$language_number" == "1" ]; then dictionary="$language_english"
if [ -s "$language_english" ]; then echo; else echo " [ Wait ] [ Waiting to downloading the english dictionary for first time ] "
#### links -source https://github.com/dolph/dictionary/blob/master/popular.txt > /tmp/fwiptables-word-eng
$favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > /tmp/fwiptables-word-eng
grep ^[a-z][a-z][a-z][a-z][a-z]$ /tmp/fwiptables-word-eng | sed  'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > /etc/default/fwiptables-english
echo " [ ok ] [ english dictionary downloaded ]" ; fi ; fi
#### Dicctionary spanish if dowload
if [ "$language_number" == "2" ]; then dictionary="$language_spanish"
if [ -s "$language_spanish" ]; then echo; else echo " [ Espera ] [ Esperando para descargar el diccionario español por primera vez ] "
$ favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > /tmp/fwiptables-word-spa
grep ^[a-z][a-z][a-z][a-z][a-z]$ /tmp/fwiptables-word-spa | sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > /etc/default/fwiptables-spanish
echo " [ ok ] [ diccionario español descargado ]" ; fi ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### word of game
caracteres="" ; cinco_caracteres="" ; intento="0" ; intento_maximo="12"
numero_palabra="$(wc -l $dictionary | cut -d " "  -f 1)"
numero_aleatorio="$(($RANDOM%$numero_palabra))"
palabra_aleatoria="$(tail -$numero_aleatorio $dictionary | head -1)"
aleatoria_1="$(echo $palabra_aleatoria | cut -c 1)"
aleatoria_2="$(echo $palabra_aleatoria | cut -c 2)"
aleatoria_3="$(echo $palabra_aleatoria | cut -c 3)"
aleatoria_4="$(echo $palabra_aleatoria | cut -c 4)"
aleatoria_5="$(echo $palabra_aleatoria | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_caracteres" = "$palabra_aleatoria" ]; then clear ; 
acierto="$(dialog --stdout --title "  Play game word ole" --msgbox "$text_1 $palabra_aleatoria"  0 0)" ; clear ; exit ; fi
if [ "$intento" -gt "$intento_maximo" ]; then clear
echo "$text_1" "  " " || $palabra_aleatoria ||" ; clear ; exit ; fi
bucle="$(dialog --stdout --title "Play game word ole" --inputbox " $text_6 $intento /// $intento_maximo \n \
$text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||"  0 0)"
intento="$(($intento+1))"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
caracteres="$bucle"
cinco_caracteres="$(echo $caracteres | cut -c 1-5)"
caracter_1="$(echo $caracteres | cut -c 1)"
caracter_2="$(echo $caracteres | cut -c 2)"
caracter_3="$(echo $caracteres | cut -c 3)"
caracter_4="$(echo $caracteres | cut -c 4)"
caracter_5="$(echo $caracteres | cut -c 5)"
echo "$Text_5" "$cinco_caracteres"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_1" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_1" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_1" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_1" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_2" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_2" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_2" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_2" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_2" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_3" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_3" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_3" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_3" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_3" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_4" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_4" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_4" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_4" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_4" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_5" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_5" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_5" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_5" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_5" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_1" = "$caracter_1" ]; then seat_1="$caracter_1"; fi
if [ "$aleatoria_2" = "$caracter_2" ]; then seat_2="$caracter_2"; fi
if [ "$aleatoria_3" = "$caracter_3" ]; then seat_3="$caracter_3"; fi
if [ "$aleatoria_4" = "$caracter_4" ]; then seat_4="$caracter_4"; fi
if [ "$aleatoria_5" = "$caracter_5" ]; then seat_5="$caracter_5"; fi
done
#### when fail the answer
clear
acierto="$(dialog --stdout --title "Play game word ole" --msgbox "$text_8 $palabra_aleatoria"  0 0)"
clear; exit; fi
####
####
#############################################
############################################# ole-word in gui
####
####
if [ "$second_option" = "-gui" ] || [ "$second_option" = "gui" ]; then $nada
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
case "$command_zenity" in "$NULL") echo " Install zenity to work"; exit ;; esac
selection=$(zenity $graphic_dimension --list "01 english" "02 spanish" "03 quit" --column="Option list" --text="Select one option" \
--title="Play word ole game")
case $selection in
"01 english") language_number="1" ;;
"02 spanish") language_number="2" ;;
"03 quit")    language_number="q" ;;
esac
if [ "$?" -eq "1" ]; then exit; fi 
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
#### Dicctionary english if download
if [ "$language_number" == "1" ]; then dictionary="$language_english"
if [ -s "$language_english" ]; then echo; else echo " [ Wait ] [ Waiting to downloading the english dictionary for first time ] "
#### links -source https://github.com/dolph/dictionary/blob/master/popular.txt > /tmp/fwiptables-word-eng
$favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > /tmp/fwiptables-word-eng
grep ^[a-z][a-z][a-z][a-z][a-z]$ /tmp/fwiptables-word-eng | sed  'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > /etc/default/fwiptables-english
echo " [ ok ] [ english dictionary downloaded ]" ; fi ; fi
#### Dicctionary spanish if dowload
if [ "$language_number" == "2" ]; then dictionary="$language_spanish"
if [ -s "$language_spanish" ]; then echo; else echo " [ Espera ] [ Esperando para descargar el diccionario español por primera vez ] "
$favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > /tmp/fwiptables-word-spa
grep ^[a-z][a-z][a-z][a-z][a-z]$ /tmp/fwiptables-word-spa | sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > /etc/default/fwiptables-spanish
echo " [ ok ] [ diccionario español descargado ]" ; fi ; fi
#####
if [ "$language_number" == "1" ] || [ "$language_number" == "2" ]; then echo -n ; else exit ; fi
##### language of interface english
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### word of game
caracteres="" ; cinco_caracteres="" ; intento="0" ; intento_maximo="12"
numero_palabra="$(wc -l $dictionary | cut -d " "  -f 1)"
numero_aleatorio="$(($RANDOM%$numero_palabra))"
palabra_aleatoria="$(tail -$numero_aleatorio $dictionary | head -1)"
aleatoria_1="$(echo $palabra_aleatoria | cut -c 1)"
aleatoria_2="$(echo $palabra_aleatoria | cut -c 2)"
aleatoria_3="$(echo $palabra_aleatoria | cut -c 3)"
aleatoria_4="$(echo $palabra_aleatoria | cut -c 4)"
aleatoria_5="$(echo $palabra_aleatoria | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
####
if [ "$cinco_caracteres" = "$palabra_aleatoria" ]; then clear 
acierto="$(zenity $graphic_dimension --info --title="gui ole-word" --text="$text_1 $palabra_aleatoria")"
clear; exit; fi
####
if [ "$intento" = "$intento_maximo" ]; then clear
fallo="$(zenity $graphic_dimension --info --title="gui ole-word" --text="$text_8 $palabra_aleatoria")"
clear ; exit ; fi
####
bucle="$(zenity $graphic_dimension --entry --title "Play game word ole" \
--text " $text_6 $intento /// $intento_maximo \n  $text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||")"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
####
intento="$(($intento+1))"
caracteres="$bucle"
cinco_caracteres="$(echo $caracteres | cut -c 1-5)"
caracter_1="$(echo $caracteres | cut -c 1)"
caracter_2="$(echo $caracteres | cut -c 2)"
caracter_3="$(echo $caracteres | cut -c 3)"
caracter_4="$(echo $caracteres | cut -c 4)"
caracter_5="$(echo $caracteres | cut -c 5)"
if [ "$aleatoria_1" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_1" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_1" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_1" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_1" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_2" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_2" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_2" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_2" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_2" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_3" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_3" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_3" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_3" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_3" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_4" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_4" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_4" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_4" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_4" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_5" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_5" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_5" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_5" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_5" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_1" = "$caracter_1" ]; then seat_1="$caracter_1"; fi
if [ "$aleatoria_2" = "$caracter_2" ]; then seat_2="$caracter_2"; fi
if [ "$aleatoria_3" = "$caracter_3" ]; then seat_3="$caracter_3"; fi
if [ "$aleatoria_4" = "$caracter_4" ]; then seat_4="$caracter_4"; fi
if [ "$aleatoria_5" = "$caracter_5" ]; then seat_5="$caracter_5"; fi
done ; clear ; exit ; fi
####
####
#############################################
############################################# ole-word in txt
####
####
if [ "$second_option" = "-txt" ] || [ "$second_option" = "txt" ] || [ "$second_option" = "$NULL" ]; then $nada
echo 
echo "$tab [ $first_option ] [ play game clone ole-word ]"
echo "$header_lineal"
##### INICIO ####
#### Choose language english or spanish
until [ "$language_number" == "1" ] || [ "$language_number" == "2" ] || [ "$language_number" == "q" ] ; do echo
echo "$tab $tab ##### Play in your language: Choose 1 for english or 2 for spanish or q for quit"
read -p "$tab $tab ##### Choose one number: # 1 or 2 or q #  " language_number
if [ ! -n "$language_number" ]; then language_number="5"; fi
echo; done
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
#### Dicctionary english if download
if [ "$language_number" == "1" ]; then dictionary="$language_english"
if [ -s "$language_english" ]; then echo; else echo " [ Wait ] [ Waiting to downloading the english dictionary for first time ] "
#### links -source https://github.com/dolph/dictionary/blob/master/popular.txt > /tmp/fwiptables-word-eng
$favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > /tmp/fwiptables-word-eng
grep ^[a-z][a-z][a-z][a-z][a-z]$ /tmp/fwiptables-word-eng | sed  'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > /etc/default/fwiptables-english
echo " [ ok ] [ english dictionary downloaded ]" ; fi ; fi
#### Dicctionary spanish if dowload
if [ "$language_number" == "2" ]; then dictionary="$language_spanish" 
if [ -s "$language_spanish" ]; then echo; else echo " [ Espera ] [ Esperando para descargar el diccionario español por primera vez ] "
$favorite_text_browser -source https://raw.githubusercontent.com/JorgeDuenasLerin/diccionario-espanol-txt/master/length/05.txt > /tmp/fwiptables-word-spa
grep ^[a-z][a-z][a-z][a-z][a-z]$ /tmp/fwiptables-word-spa | sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/' > /etc/default/fwiptables-spanish
echo " [ ok ] [ diccionario español descargado ]" ; fi ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### word of game
numero_palabra="$(wc -l $dictionary | cut -d " "  -f 1)"
numero_aleatorio="$(($RANDOM%$numero_palabra))"
palabra_aleatoria="$(tail -$numero_aleatorio $dictionary | head -1)"
aleatoria_1="$(echo $palabra_aleatoria | cut -c 1)"
aleatoria_2="$(echo $palabra_aleatoria | cut -c 2)"
aleatoria_3="$(echo $palabra_aleatoria | cut -c 3)"
aleatoria_4="$(echo $palabra_aleatoria | cut -c 4)"
aleatoria_5="$(echo $palabra_aleatoria | cut -c 5)"
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_caracteres" = "$palabra_aleatoria" ]; then  echo "$text_1 $palabra_aleatoria" ; exit; fi
if [ "$intento" -gt "$intento_maximo" ]; then
echo "$text_1" "  " " || $palabra_aleatoria ||" ; exit ; fi
echo "$text_2"
echo "$text_3" " || $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 ||"
echo "$text_4" " || $contenido ||"
read -p "$text_5  #  " caracteres
intento="$(($intento+1))"
cinco_caracteres="$(echo $caracteres | cut -c 1-5)"
caracter_1="$(echo $caracteres | cut -c 1)"
caracter_2="$(echo $caracteres | cut -c 2)"
caracter_3="$(echo $caracteres | cut -c 3)"
caracter_4="$(echo $caracteres | cut -c 4)"
caracter_5="$(echo $caracteres | cut -c 5)"
echo "$Text_5" "$cinco_caracteres"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_1" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_1" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_1" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_1" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_2" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_2" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_2" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_2" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_2" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_3" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_3" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_3" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_3" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_3" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_4" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_4" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_4" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_4" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_4" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_5" = "$caracter_1" ]; then contenido="$contenido:$caracter_1" ; fi
if [ "$aleatoria_5" = "$caracter_2" ]; then contenido="$contenido:$caracter_2" ; fi
if [ "$aleatoria_5" = "$caracter_3" ]; then contenido="$contenido:$caracter_3" ; fi
if [ "$aleatoria_5" = "$caracter_4" ]; then contenido="$contenido:$caracter_4" ; fi
if [ "$aleatoria_5" = "$caracter_5" ]; then contenido="$contenido:$caracter_5" ; fi
if [ "$aleatoria_1" = "$caracter_1" ]; then seat_1="$caracter_1"; fi
if [ "$aleatoria_2" = "$caracter_2" ]; then seat_2="$caracter_2"; fi
if [ "$aleatoria_3" = "$caracter_3" ]; then seat_3="$caracter_3"; fi
if [ "$aleatoria_4" = "$caracter_4" ]; then seat_4="$caracter_4"; fi
if [ "$aleatoria_5" = "$caracter_5" ]; then seat_5="$caracter_5"; fi
done
#### when fail the answer
echo
echo "$text_7" "$cinco_caracteres"
echo "$text_8" "$palabra_aleatoria"
####
echo "$footer_lineal"
exit; fi
####
####
fi
####
####
#### :rutina-final-ole-word:
############################       english: ole-number: play game ole-number
############################       spanish: ole-number: juega al juego ole-number
#### :rutina-inicial-ole-number:
####
####
if [ "$first_option" = "ole-number" ]; then  $nada
####
####
#### variables shared
####
####
language_number="0"
digitos="" ; cinco_digitos="" ; caracteres="" ; cinco_caracteres=""
intento="0" ; intento_maximo="12"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
texten_1=" ##### [ ok ] Awasome, the random number is : "
texten_2=" ##### Clon of numberle: discover a radom number of five digits "
texten_3=" Digits in its site     " 
texten_4=" Digits in the number   "
texten_5=" ##### Type a number with five digits_  #  "
texten_5=" ##### Type actual number          :  "
texten_6=" ##### Actual tried numbers        :  "
texten_7=" ##### The last answered         is:  "
texten_8=" ##### The correct answerd       is:  "
textes_1=" ##### [ ok ] Lo has conseguido, el numero aleatorio es "
textes_2=" ##### Clon de numberle: Acierta con un numero aleatorio de cinco digitos. "
textes_3=" Digitos en su sitio   " 
textes_4=" Digitos en el numero  "
textes_5=" ##### Escribe un numero de cinco digitos_  #  "
textes_5=" ##### Introduce el numero actual        :  "
textes_6=" ##### Numero de intentos actuales       :  "
textes_7=" ##### La ultima respuesta             es:  "
textes_8=" ##### La respuesta correcta           es:  "
####
####
#############################################
############################################# ole-number in cli
####
####
if [ "$second_option" = "-cli" ] || [ "$second_option" = "cli" ]; then $nada
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
menuprincipal="$(dialog --stdout --clear --title "  Play game number ole" --menu "Select:" 0 0 0\
  01 "    Play number ole in english" \
  02 "    Play number ole in spanish" \
  03 "    quit number ole" \
)"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
case "$menuprincipal" in
  01) clear ; language_number="1" ; clear ;;
  02) clear ; language_number="2" ; clear ;;
  03) clear ; language_number="q" ; clear ;;
esac
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### number of game
numero_aleatorio="$(($(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))))"
aleatoria_1="$(echo $numero_aleatorio | cut -c 1)"
aleatoria_2="$(echo $numero_aleatorio | cut -c 2)"
aleatoria_3="$(echo $numero_aleatorio | cut -c 3)"
aleatoria_4="$(echo $numero_aleatorio | cut -c 4)"
aleatoria_5="$(echo $numero_aleatorio | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_digitos" = "$numero_aleatorio" ]; then clear ; 
acierto="$(dialog --stdout --title "  Play game number ole" --msgbox "$text_1 $numero_aleatorio"  0 0)" ; clear ; exit ; fi
if [ "$intento" -gt "$intento_maximo" ]; then clear
echo "$text_1" "  " " || $numero_aleatorio ||" ; clear ; exit ; fi
bucle="$(dialog --stdout --title "Play game number ole" --inputbox " $text_6 $intento /// $intento_maximo \n \
$text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||"  0 0)"
intento="$(($intento+1))"
if [ "$?" != 0 ]; then clear; echo "$cinco [ ok ] [ Exit game ]" ; exit; fi
digitos="$bucle"
cinco_digitos="$(echo $digitos | cut -c 1-5)"
digito_1="$(echo $digitos | cut -c 1)"
digito_2="$(echo $digitos | cut -c 2)"
digito_3="$(echo $digitos | cut -c 3)"
digito_4="$(echo $digitos | cut -c 4)"
digito_5="$(echo $digitos | cut -c 5)"
echo "$Text_5" "$cinco_digitos"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_1" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_1" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_1" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_1" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_2" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_2" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_2" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_2" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_2" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_3" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_3" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_3" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_3" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_3" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_4" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_4" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_4" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_4" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_4" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_5" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_5" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_5" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_5" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_5" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_1" = "$digito_1" ]; then seat_1="$digito_1"; fi
if [ "$aleatoria_2" = "$digito_2" ]; then seat_2="$digito_2"; fi
if [ "$aleatoria_3" = "$digito_3" ]; then seat_3="$digito_3"; fi
if [ "$aleatoria_4" = "$digito_4" ]; then seat_4="$digito_4"; fi
if [ "$aleatoria_5" = "$digito_5" ]; then seat_5="$digito_5"; fi
done
#### when fail the answer
dialog --stdout --title "Play game number ole" --msgbox "$text_8 $numero_aleatorio"  0 0
clear ; exit ; fi
####
####
#############################################
############################################# ole-number in gui
####
####
if [ "$second_option" = "-gui" ] || [ "$second_option" = "gui" ]; then $nada
####
####
##### INICIO ####
#### Choose language english or spanish
####
####
case "$command_zenity" in "$NULL") echo " Install zenity to work"; exit ;; esac
selection=$(zenity $graphic_dimension --list "01 english" "02 spanish" "03 quit" --column="Option list" --text="Select one option" \
--title="Play number ole game")
case $selection in
"01 english") language_number="1" ;;
"02 spanish") language_number="2" ;;
"03 quit")    language_number="q" ;;
esac
if [ "$?" -eq "1" ]; then exit; fi 
####
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
if [ "$language_number" == "1" ] || [ "$language_number" == "2" ]; then $nada 
else "$cinco [ ok ] [ Exit game ]" ; exit ; fi
##### language of interface english
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### number of game
numero_aleatorio="$(($(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))))"
aleatoria_1="$(echo $numero_aleatorio | cut -c 1)"
aleatoria_2="$(echo $numero_aleatorio | cut -c 2)"
aleatoria_3="$(echo $numero_aleatorio | cut -c 3)"
aleatoria_4="$(echo $numero_aleatorio | cut -c 4)"
aleatoria_5="$(echo $numero_aleatorio | cut -c 5)"
seat_1="" ; seat_2=""; seat_3=""; seat_4=""; seat_5=""
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
#### 
if [ "$cinco_digitos" = "$numero_aleatorio" ]; then clear 
acierto="$(zenity $graphic_dimension --info --title="gui ole-number" --text="$text_1 $numero_aleatorio")"
clear; exit; fi
####
if [ "$intento" = "$intento_maximo" ]; then clear
fallo="$(zenity $graphic_dimension --info --title="gui ole-number" --text="$text_8 $numero_aleatorio")"
clear ; exit ; fi
####
bucle="$(zenity $graphic_dimension --entry --title "Play game number ole" \
--text " $text_6 $intento /// $intento_maximo \n  $text_2 \n # $text_3 # \n \
|| $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 || \n # $text_4 # \n || $contenido ||")"
if [ "$?" -eq "0" ]; then echo -n ; else exit; fi
####
intento="$(($intento+1))"
digitos="$bucle"
cinco_digitos="$(echo $digitos | cut -c 1-5)"
digito_1="$(echo $digitos | cut -c 1)"
digito_2="$(echo $digitos | cut -c 2)"
digito_3="$(echo $digitos | cut -c 3)"
digito_4="$(echo $digitos | cut -c 4)"
digito_5="$(echo $digitos | cut -c 5)"
if [ "$aleatoria_1" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_1" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_1" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_1" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_1" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_2" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_2" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_2" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_2" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_2" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_3" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_3" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_3" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_3" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_3" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_4" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_4" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_4" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_4" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_4" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_5" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_5" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_5" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_5" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_5" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_1" = "$digito_1" ]; then seat_1="$digito_1"; fi
if [ "$aleatoria_2" = "$digito_2" ]; then seat_2="$digito_2"; fi
if [ "$aleatoria_3" = "$digito_3" ]; then seat_3="$digito_3"; fi
if [ "$aleatoria_4" = "$digito_4" ]; then seat_4="$digito_4"; fi
if [ "$aleatoria_5" = "$digito_5" ]; then seat_5="$digito_5"; fi
done ; clear ; exit ; fi
####
####
#############################################
############################################# ole-number in txt
####
####
if [ "$second_option" = "-txt" ] || [ "$second_option" = "txt" ] || [ "$second_option" = "$NULL" ]; then $nada
echo
echo "$tab [ $first_option ] [ play game clone ole-number ]"
echo "$header_lineal"
##### INICIO ####
#### Choose language english or spanish
until [ "$language_number" == "1" ] || [ "$language_number" == "2" ] || [ "$language_number" == "q" ] ; do echo
echo "$tab $tab ##### Play in your language: Choose 1 for english or 2 for spanish or q for quit"
read -p "$tab $tab ##### Choose one number: # 1 or 2 or q #  " language_number
if [ ! -n "$language_number" ]; then language_number="5"; fi
echo; done
#### Quit game
if [ "$language_number" == "q" ]; then echo "$cinco [ ok ] [ Exit game ]" ; exit ; fi
##### language of interface english
if [ "$language_number" -eq "1" ]; then
text_1="$texten_1"
text_2="$texten_2"
text_3="$texten_3"
text_4="$texten_4"
text_5="$texten_5"
text_6="$texten_6"
text_7="$texten_7"
text_8="$texten_8"
fi
##### language of interface spanish
if [ "$language_number" -eq "2" ]; then
text_1="$textes_1"
text_2="$textes_2"
text_3="$textes_3"
text_4="$textes_4"
text_5="$textes_5"
text_6="$textes_6"
text_7="$textes_7"
text_8="$textes_8"
fi
##### number of game
numero_aleatorio="$(($(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))+$(($RANDOM%25000))))"
aleatoria_1="$(echo $numero_aleatorio | cut -c 1)"
aleatoria_2="$(echo $numero_aleatorio | cut -c 2)"
aleatoria_3="$(echo $numero_aleatorio | cut -c 3)"
aleatoria_4="$(echo $numero_aleatorio | cut -c 4)"
aleatoria_5="$(echo $numero_aleatorio | cut -c 5)"
#### loop of game
until [ "$intento" -eq "$intento_maximo" ]; do $nada
if [ "$cinco_digitos" = "$numero_aleatorio" ]; then  echo "$text_1 $numero_aleatorio" ; exit; fi
if [ "$intento" -gt "$intento_maximo" ]; then $nada
echo "$text_1" "  " " || $numero_aleatorio ||" ; exit ; fi
echo "$text_2"
echo "$text_3" " || $seat_1 - $seat_2 - $seat_3 - $seat_4 - $seat_5 ||"
echo "$text_4" " || $contenido ||"
read -p "$text_5  #  " digitos
intento="$(($intento+1))"
cinco_digitos="$(echo $digitos | cut -c 1-5)"
digito_1="$(echo $digitos | cut -c 1)"
digito_2="$(echo $digitos | cut -c 2)"
digito_3="$(echo $digitos | cut -c 3)"
digito_4="$(echo $digitos | cut -c 4)"
digito_5="$(echo $digitos | cut -c 5)"
echo "$Text_5" "$cinco_digitos"
echo "$text_6" "$intento /// $intento_maximo"
if [ "$aleatoria_1" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_1" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_1" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_1" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_1" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_2" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_2" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_2" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_2" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_2" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_3" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_3" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_3" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_3" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_3" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_4" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_4" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_4" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_4" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_4" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_5" = "$digito_1" ]; then contenido="$contenido:$digito_1" ; fi
if [ "$aleatoria_5" = "$digito_2" ]; then contenido="$contenido:$digito_2" ; fi
if [ "$aleatoria_5" = "$digito_3" ]; then contenido="$contenido:$digito_3" ; fi
if [ "$aleatoria_5" = "$digito_4" ]; then contenido="$contenido:$digito_4" ; fi
if [ "$aleatoria_5" = "$digito_5" ]; then contenido="$contenido:$digito_5" ; fi
if [ "$aleatoria_1" = "$digito_1" ]; then seat_1="$digito_1"; fi
if [ "$aleatoria_2" = "$digito_2" ]; then seat_2="$digito_2"; fi
if [ "$aleatoria_3" = "$digito_3" ]; then seat_3="$digito_3"; fi
if [ "$aleatoria_4" = "$digito_4" ]; then seat_4="$digito_4"; fi
if [ "$aleatoria_5" = "$digito_5" ]; then seat_5="$digito_5"; fi
done
#### when fail the answer
echo
echo "$text_7" "$cinco_digitos"
echo "$text_8" "$numero_aleatorio"
####
echo $footer_lineal
clear; exit; fi
####
####
fi
####
####
#### :rutina-final-ole-number:
############################## english: sentlog: Read log /var/log/fwiptables-filelog  ##############################
############################## spanish: sentlog: Lee log  /var/log/fwiptables-filelog  ##############################
#### :rutina-inicial-sentlog:
####
####
 if [ "$first_option" = "sentlog" ] ; then  $give_cover
 echo "$tab [ $first_option ] [ show $file_output_filelog ]"
 cat  "$file_output_filelog"
 echo "$tab [ this file is $file_output_filelog ]"
 echo "$footer_lineal"
 exit; fi
####
####
#### :rutina-final-fw-sentlog:
############################## english: autolog: Read log /var/log/fwiptables-autolog   ##############################
############################## spanish: autolog: Lee log  /var/log/fwiptables-autolog   ##############################
#### :rutina-inicial-autolog:
####
####
 if [ "$first_option" = "autolog" ] ; then  $give_cover
 echo "$tab [ $first_option ] [  show "$file_output_autolog" ]"
 cat  "$file_output_autolog"
 echo "$tab [ last end of file showed "$file_output_autolog" ]"
 echo "$footer_lineal"
 exit; fi
####
####
#### :rutina-final-autolog:
############################       english: log-ssh: log from ssh server
############################       spanish: log-ssh: log desde el servidor de ssh
#### :rutina-inicial-log-ssh:
####
####
 if [ "$first_option" = "log-ssh" ]; then  $give_cover
 echo "$tab [ $first_option ] [ search sshd in logs ]"
 echo $header_lineal
 find /var/log -maxdepth 5 -type f | xargs zgrep -a -i "ssh"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-log-ssh:
############################       english: log-search: log from a one search
############################       spanish: log-search: log desde una busqueda
#### :rutina-inicial-log-search:
####
####
 if [ "$first_option" = "log-search" ]; then $give_cover
 echo "$cinco [ $first_option $second_option ]  [ search a one pattern in logs ]"
 echo $header_lineal
 case "$second_option" in
 $NULL) echo "$tab [ fail ] [ use: $fwiptables $first_option pattern ]" ;;
 *) find /var/log -maxdepth 5 -type f | xargs zgrep -a -i "$second_option" ;;
 esac
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-log-search:
############################       english: dev-version: about of program
############################       spanish: dev-version: acerca del programa
#### :rutina-inicial-dev-version:
####
####
 if [ "$first_option" = "dev-version" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the link to dev version from git repository ]"
 echo $header_lineal
 echo $fweb_development
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-dev-version:
############################       english: dev-changes: changes in the program
############################       spanish: dev-changes: cambios en el programa
#### :rutina-inicial-dev-changes:
####
#### 
 if [ "$first_option" = "dev-changes" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the link to dev-changes from git repository ]"
 echo $header_lineal
 $favorite_text_browser -source $fweb_changes
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-dev-changes:
############################       english: new-versions: about of program
############################       spanish: new-versions: acerca del programa
#### :rutina-inicial-new-versions:
####
####
 if [ "$first_option" = "new-versions" ]; then $give_cover
 echo "$tab [ $first_option ] [ show the new versions in $fweb_main ]"
 echo $header_lineal
 case $favorite_text_browser in 
 "$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
 echo "$tab list new-versions and downloaded in the last seven days with a browser $favorite_text_browser"
 echo $tab
 $favorite_text_browser -dump $fweb_newfiles | egrep "[0123456789]-[0123456789][0123456789]-[0123456789]" | sed s/\<//g |sed s/\>//g 
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-new-versions:
############################       english: lpinfo: list printers
############################       spanish: lpinfo: lista impresoras
#### :rutina-inicial-lpinfo:
####
####
 if [ "$first_option" = "lpinfo" ]; then  $give_cover
 echo "$tab [ $first_option ] [ list printers with lpinfo and lpstat ]"
 echo $header_lineal
 echo"lpinfo -v -l"
 echo $tab
 lpinfo -v -l
 echo $tab
 echo $header_lineal
 echo"lpstat -v"
 echo $tab
 lpstat -v
 echo $header_lineal
 echo $tab
 echo " Use lp or lpr to print with those printers, or lpadmin to admin."
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lpinfo:
############################       english: lsblk: list disks
############################       spanish: lsblk: lista discos
#### :rutina-inicial-lsblk:
####
####
 if [ "$first_option" = "lsblk" ]; then  $give_cover
 echo "$tab [ $first_option ] [ list disks ]"
 echo $header_lineal
 lsblk -o name,size,fsuse%,label,mountpoints
 echo $tab
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsblk:
############################       english: lsusb: list disks
############################       spanish: lsusb: lista discos
#### :rutina-inicial-lsusb:
####
####
 if [ "$first_option" = "lsusb" ]; then  $give_cover
 echo "$tab [ $first_option ] [ list usb ]"
 echo $header_lineal
 lsusb
 echo $tab
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsusb:
############################       english: lscpu: list cpu
############################       spanish: lscpu: lista cpu
#### :rutina-inicial-lscpu:
####
####
 if [ "$first_option" = "lscpu" ]; then  $give_cover
 echo "$tab [ $first_option ] [ list cpu ]"
 echo $header_lineal
 lscpu
 echo $tab
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lscpu:
############################       english: lspci: list disks
############################       spanish: lspci: lista discos
#### :rutina-inicial-lspci:
####
####
 if [ "$first_option" = "lspci" ]; then  $give_cover
 echo "$tab [ $first_option ] [ list cpi hardware sockets ]"
 echo $header_lineal
 lspci
 echo $tab
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lspci:
############################       english: lsgpu: list gpu
############################       spanish: lsgpu: lista gpu
#### :rutina-inicial-lsgpu:
####
####
 if [ "$first_option" = "lsgpu" ]; then  $give_cover
 echo "$tab [ $first_option ] [ list gpu ]"
 echo $header_lineal
 lsgpu
 echo $tab
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsgpu:
############################       english: lsusb: list hardware
############################       spanish: lsusb: lista hardware
#### :rutina-inicial-lshw:
####
####
 if [ "$first_option" = "lshw" ]; then  $give_cover
 echo "$tab [ $first_option ] [ list hardware ]"
 echo $header_lineal
 lshw
 echo $tab
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lshw:
############################       english: hosts: show /etc/hosts
############################       spanish: hosts: muestra /etc/hosts
#### :rutina-inicial-hosts:
####
####
 if [ "$first_option" = "hosts" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the file /etc/hosts ]"
 echo $header_lineal
 cat /etc/hosts
 echo $tab
 echo "$tab This file is /etc/hosts"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-hosts:
############################       english: protocols: show /etc/protocols
############################       spanish: protocols: muestra /etc/protocols
#### :rutina-inicial-protocols:
####
####
 if [ "$first_option" = "protocols" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the file /etc/protocols ]"
 echo $header_lineal
 cat /etc/protocols  | sed s/\&//g 
 echo $tab
 echo "$tab This file is /etc/protocols"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-protocols:
############################       english: services: show /etc/services
############################       spanish: services: muestra /etc/services
#### :rutina-inicial-services:
####
####
 if [ "$first_option" = "services" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the file /etc/services ]"
 echo $header_lineal
 cat /etc/services | sed s/\&//g 
 echo $tab
 echo "$tab This file is /etc/services"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-services:
############################       english: host.allow: show /etc/host.allow
############################       spanish: host.allow: muestra /etc/host.allow
#### :rutina-inicial-host.allow:
####
####
 if [ "$first_option" = "hosts.allow" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the file /etc/allow ]"
 echo $header_lineal
 cat /etc/hosts.allow
 echo $tab
 echo "$tab This file is /etc/hosts.allow"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-host.allow:
############################       english: hosts.deny: show /etc/host.deny
############################       spanish: hosts.deny: muestra /etc/host.deny
#### :rutina-inicial-hosts.deny:
####
####
 if [ "$first_option" = "hosts.deny" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show the file /etc/deny ]"
 echo $header_lineal
 cat /etc/hosts.deny
 echo $tab
 echo "$tab This file is /etc/hosts.deny"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-hosts.deny:
############################       english: resolv.conf: show /etc/resolv.conf
############################       spanish: resolv.conf: muestra /etc/resolv.conf
#### :rutina-inicial-resolv.conf:
####
####
if [ "$first_option" = "resolv.conf" ]; then  $give_cover
echo "$tab [ $first_option ] [ show resolv.conf ]"
echo $header_lineal
if [ -f /etc/resolv.conf.head ]; then
echo "$tab  [ with resolv.conf.head ]"
cat /etc/resolv.conf.head ; 
else echo "$tab  [ without resolv.conf.head ]"; fi
if [ -f /etc/resolv.conf ]; then
echo "$tab  [ with resolv.conf ]"
cat /etc/resolv.conf ; 
else echo "$tab  [ without resolv.conf ]"; fi
if [ -f /etc/resolv.conf.tail ]; then
echo "$tab  [ with resolv.conf.tail ]"
cat /etc/resolv.conf.tail ; 
else echo "$tab  [ without resolv.conf.tail ]"; fi
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-resolv.conf:
############################       english: about: about of program
############################       spanish: about: acerca del programa
#### :rutina-inicial-about:
####
####
if [ "$first_option" = "about" ]; then  $give_cover
echo "$tab [ $first_option ] [ about $fwiptables ]"
echo $header_lineal
echo
echo "$tab [Fran FireWall iptables Generator]"
echo 
echo ""
echo "$tab [Exec name]"
echo "  $fwiptables"
echo ""
echo "$tab [Program Name]"
echo "  $fprogram"
echo ""
echo "$tab [Program Description]"
echo "  $fdescription"
echo ""
echo "$tab [Program Install]"
echo "  chmod ugo+x $fwiptables"
echo "  ./$fwiptables install"
echo "  And then fwiptables is in $directory_fiptables/$fwiptables"
echo
echo "$tab [Devevelopments version program]"
echo "  The fran iptables ver in development in git code at sourceforge:"
echo "  $fweb_development"
echo ""
echo "$tab [New versions program]"
echo "  The last versions in files repository at sourceforge:"
echo ""
echo "  $fweb_newfiles"
echo ""
echo "$tab [Access web with all versions program]"
echo "  The fran iptables all versions in code repository at sourceforge:"
echo ""
echo "  $fweb_tree"
echo ""
echo "$tab [Git clone with all versions program]"
echo "  The fran iptables all versions in code repository at sourceforge:"
echo ""
echo "  git clone $fweb_git"
echo
echo "$tab [Program License]"
echo "  $flicense"
echo ""
echo "$cincuenta"
echo ""
echo ""
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-about:
############################       english: info-system: get info system
############################       spanish: info-system: da informacion del sistema
#### :rutina-inicial-info-system:
####
####
 if [ "$first_option" = "info-system" ]; then  $give_cover
 echo "$tab [ $first_option ] [ show info about system ]"
 echo $header_lineal
 echo "$tab [ System info ] [ Distro ] "
 cat /etc/*-release | grep -i pretty_name | cut -d "=" -f 2 | sed 's/\"//g'
 echo $tab
 echo "$tab [ System info ][ Kernel Linux ]"
 $command_uname -srom
 echo $tab
 echo "$tab [ Boot system ] [ it works with pid number 1 ]"
 ps -p1 
 echo "$tab Behind /proc/1/com $(cat /proc/1/comm)"
 echo $tab
 echo "$tab [ System info ] [ Processor ]"
 lscpu | egrep -i "socket|Model name|cpu max"
 echo $tab
 echo "$tab [ System info ] [ Memory RAM ]"
 free -h
 echo $tab
 echo "$tab [ System info ] [ Disks ]"
 lsblk -o name,size,fsuse%,label,mountpoints
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-system:
############################       english: info-net: get net info
############################       spanish: info-net: da informacion de la red
#### :rutina-inicial-info-net:
####
####
 if [ "$first_option" = "info-net" ]; then $give_cover
 echo "$tab [ $first_option ] [ show info about net ]"
 echo $header_lineal
 echo $tab
 echo "$tab [ Network Route ] [ Route ipv4 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ status ] [ install ip command ]"
 else $command_ip -4 route ; fi
 echo $tab
 echo "$tab [ Network Route ] [ Route ipv6 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ status ] [ install ip command ]"
 else $command_ip -6 route ; fi
 echo $tab
 echo "$tab [ Network Listen ] [ Listen ipv4 ]"
 if [ "$command_ss" = "$NULL" ] ; then echo "$tab [ status ] [ install ss command ]"
 else $command_ss -l4 | sed 's/   / /g' ; fi
 echo $tab
 echo "$tab [ Network Listen ] [ Listen ipv6 ]"
 if [ "$command_ss" = "$NULL" ] ; then echo "$tab [ status ] [ install ss command ]"
 else $command_ss -l6 | sed 's/   / /g' ; fi
 echo $tab
 echo "$tab [ private ip ] [ address ipv4 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ status ] [ install ip command ]"
 else  $command_ip -4 address | grep -i inet | grep -iv 127.0.0.1 | cut -d "/" -f 1 ; fi
 echo $tab
 echo "$tab [ private ip ] [ address ipv6 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab [ status ] [ install ip command ]"
 else $command_ip -6 address | grep -i inet | grep -iv ::1/128 | cut -d "/" -f 1 ; fi
 echo $tab
 echo "$tab [ public ip ] [ address ipv4 ]"
 if [ "$command_curl" = "$NULL" ] ; then echo "$tab [ status ] [ install curl command ]" ; else
 public_ip4="$(timeout -s SIGINT -v $server_waiting $command_curl -s -4 http://ifconfig.co/ip -w "\n"| head -1)"
 echo "$tab $public_ip4"; fi
 echo $tab
 echo "$tab [ public ip ] [ address ipv6 ]"
 if [ "$command_curl" = "$NULL" ] ; then echo "$tab [ status ] [ install curl command ]" ; else
 public_ip6="$(timeout -s SIGINT -v $server_waiting $command_curl -s -6 http://ifconfig.co/ip -w "\n"| head -1)"
 echo "$tab $public_ip6"; fi
 echo $tab
 echo "$tab [ proxy ip ] [ address proxy ]"
 echo "$tab Proxy http:    $http_proxy"
 echo "$tab Proxy https:   $https_proxy"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-net:
############################       english: speed-ip4: speed from internet
############################       spanish: speed-ip4: velocidad desde internet
#### :rutina-inicial-speed-ip4:
####
####
 if [ "$first_option" = "speed-ip4" ]; then $give_cover
 echo "$tab [ $first_option ] [ test speed ipv4 with internet ]"
 echo $header_lineal
 case "$command_iperf"  in  $NULL) echo " [ fail ] [ Install Iperf command ]"; exit ;; esac
####
####
 $fwiptables stop
 echo "$tab [ Doing bandwidth in ipv4 to $serverip_iperf_ipv4 ] [ with max $server_waiting seconds ]"
 echo $tab
 echo
 $command_iperf -c $serverip_iperf_ipv4 -t 4 -P 1 -p $serverport_iperf_ipv4 |tail -3
 echo
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-speed-ip4:
############################       english: speed-ip6: speed from internet
############################       spanish: speed-ip6: velocidad desde internet
#### :rutina-inicial-speed-ip6:
####
####
 if [ "$first_option" = "speed-ip6" ]; then $give_cover
 echo "$tab [ $first_option ] [ test speed ipv6 with internet ]"
 echo $header_lineal
 case "$command_iperf"  in  $NULL) echo "$tab [ fail ] [ install iperf command ]"; exit ;; esac
####
####
 $fwiptables stop
 echo "$tab [ Doing bandwidth in ipv6 to $serverip_iperf_ipv6 ] [ with max $server_waiting seconds ]"
 echo $tab
 echo
 $command_iperf -c $serverip_iperf_ipv6 -V -t 4 -P 1 -p $serverport_iperf_ipv6 | tail -3
 echo
 $fwiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-speed-ip6:
############################       english: web-cert: speed from internet
############################       spanish: web-cert: velocidad desde internet
#### :rutina-inicial-web-cert:
####
####
 if [ "$first_option" = "web-cert" ] ; then $give_cover
 echo "$tab [ $first_option ] [ get one web certifcate from one server with port 443]"
 echo $header_lineal
 case "$command_openssl"  in  $NULL) echo "$tab [ fail ] [ install openssl ]"; exit ;; esac
####
####
 if [ "$second_option" = "$NULL" ]; then echo $tab $tab $tab
 echo "[ get one web certifcate ] [ Example: $fwiptables web-cert www.fast.com ]"; exit; fi
 echo $tab
 echo | timeout -s SIGINT -v $server_waiting $command_openssl s_client -connect $second_option:443
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-web-cert:
############################       english: config-eng: several options to config in english
############################       spanish: config-eng: varias opciones para configurar en ingles
#### :rutina-inicial-config-eng:
####
####
if [ "$first_option" = "config-eng" ]; then $give_cover
 echo "$tab [ $first_option ] [ show variables cfg from english configuration ]"
 echo $header_lineal
 cat  $defaultfullcfg_eng
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-config-eng:
############################       english: config-spa: several options to config in spanish
############################       spanish: config-spa: varias opciones para configurar en spanish
#### :rutina-inicial-config-spa:
####
####
 if [ "$first_option" = "config-spa" ]; then $give_cover
 echo "$tab [ $first_option ] [ show variables cfg from spanish configuration ]"
 echo $header_lineal
 cat $defaultfullcfg_spa
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-config-spa:
############################       english: info: information of one utility group
############################       spanish: info: informacion de un grupo de utilidades
#### :rutina-inicial-info:
####
####
 if [ "$first_option" = "info" ]; then $nada
 if [ "$second_option" = "control-guide" ]; then $fwiptables control-guide ; exit ; fi
 if [ "$second_option" = "firewall-rules" ]; then $fwiptables firewall-rules ; exit ; fi
 if [ "$second_option" = "firewall-list" ]; then $fwiptables firewall-list ; exit ; fi
 if [ "$second_option" = "output-interface" ]; then $fwiptables output-interface ; exit ; fi
 if [ "$second_option" = "firewall-launch" ]; then $fwiptables firewall-launch ; exit ; fi
 if [ "$second_option" = "firewall-custom" ]; then $fwiptables firewall-custom ; exit ; fi
 if [ "$second_option" = "tool-sockets" ]; then $fwiptables tool-sockets ; exit ; fi
 if [ "$second_option" = "tool-forward" ]; then $fwiptables tool-forward ; exit ; fi
 if [ "$second_option" = "tool-tcp" ]; then $fwiptables tool-tcp ; exit ; fi
 if [ "$second_option" = "tool-udp" ]; then $fwiptables tool-udp ; exit ; fi
 if [ "$second_option" = "tool-icmp" ]; then $fwiptables tool-icmp ; exit ; fi
 if [ "$second_option" = "tool-nmap" ]; then $fwiptables tool-nmap ; exit ; fi
 if [ "$second_option" = "tool-sudo" ]; then $fwiptables tool-sudo ; exit ; fi
 if [ "$second_option" = "tool-install" ]; then $fwiptables tool-install ; exit ; fi
 if [ "$second_option" = "tool-blacklist" ]; then $fwiptables tool-blacklist ; exit ; fi
 if [ "$second_option" = "tool-dev" ]; then $fwiptables tool-dev ; exit ; fi
 if [ "$second_option" = "tool-system" ]; then $fwiptables tool-system ; exit ; fi
 if [ "$second_option" = "show-hardware" ]; then $fwiptables show-hardware ; exit ; fi
 if [ "$second_option" = "show-etc" ]; then $fwiptables show-etc ; exit ; fi
 if [ "$second_option" = "show-log" ]; then $fwiptables show-log ; exit ; fi
 if [ "$second_option" = "show-about" ]; then $fwiptables show-about ; exit ; fi
 if [ "$second_option" = "show-help" ]; then $fwiptables show-help ; exit ; fi
####
####
$give_cover
echo $header_ender
echo "$tab [ $first_option ] [ info group ]"
echo $header_lineal
echo $tab
echo
echo "$tab [ launch: ] [ $fwiptables info group ]"
echo
echo "$tab [ group list: ]"
echo "$tab" "$tab"  "$tab $tab"
echo "$tab" "$tab"  "                                   | Group Options |                              "
echo "$tab" "$tab"  
echo "$tab" "$tab"  " firewall-options   |  firewall-rules  firewall-list  firewall-launch  firewall-custom "
echo "$tab" "$tab"  "     tool-options   |  tool-sockets    tool-forward   tool-tcp         tool-udp        "
echo "$tab" "$tab"  "                       tool-icmp       tool-nmap      tool-sudo        tool-game       "
echo "$tab" "$tab"  "                       tool-system     tool-install   tool-blacklist   tool-dev        "
echo "$tab" "$tab"  "     show-options   |  show-hardware   show-etc       show-log         show-about      "
echo "$tab" "$tab"  "                       show-help       show-example                                    " 
echo
echo "$tab" "$tab"  "$tab $tab"
echo "$tab [ Example: ] [ $fwiptables output-interface ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-info:
############################       english: help: the help option en english
############################       spanish: help: la opcion de ayuda en ingles
#### :rutina-inicial-help:
####
####
if [ "$first_option" = "help" ]; then 
echo "$title_md [ $first_option ] [ help in english ] [ help.md ]"
echo "$text_md  [ Choose only help in english ] [  Type:     $fwiptables help   ]"
echo "$text_md  [ Elige solo ayuda en español ] [ Teclea:   $fwiptables ayuda   ]"
$fwiptables intro
$fwiptables options
echo "$title_md         [ Launch interface ]"
echo  $text_md
echo "$text_md       txt OR -txt : Output at text line | whith bash backend."
echo "$text_md       cli OR -cli : Output at text menu | whith dialog backend."
echo "$text_md       gui OR -gui : Output at graphicall window || whith zenity backend."
echo "$text_md       log OR -log : Output in logfile | whith bash backend."
echo "$text_md       web OR -web : Output to text web browser."
echo "$text_md       rst OR -rst : Output to text in rst format."
echo "$text_md       tor OR -tor : Run in tor, necesary daemon tor and torify command | whith tor backend."
echo "$text_md          cli-menu : Command line interface with menus | whith dialog backend."
echo "$text_md          gui-menu : Graphicall interface with menus | whith zenity backend."
echo "$text_md         gui-shell : Graphicall interface with shell | whith zenity backend."
echo  $text_md
echo "$title_md        [ Control the iptables rules ]"
echo  $text_md
echo "$text_md          stop : Save and stop firewall iptables."
echo "$text_md      continue : Restore the firewall iptables stopped."
echo "$text_md         reset : Reset the firewall iptables."
echo "$text_md       list-fw : Alias to names."
echo "$text_md         names : List the firewall iptables saved."
echo "$text_md          show : Show one firewall standard."
echo "$text_md          save : Save one firewall iptables."
echo "$text_md          load : Restore a one firewall iptables."
echo "$text_md        actual : Show the firewall standard actual."
echo  $text_md
echo "$title_md         [ List iptables rules]"
echo  $text_md
echo "$text_md             list : Like list-filter4 but hiding rules no used."
echo "$text_md            list6 : Like list-filter6 but hiding rules not used."
echo "$text_md           status : Like list and list6 when there are default route."
echo "$text_md          listnum : List iptables filter rules from ipv4 in numbers."
echo "$text_md  list-forwardnum : List iptables filter rules foward in numbers."
echo "$text_md         listnum6 : List iptables filter rules from ipv6 in numbers."
echo "$text_md list-forwardnum6 : List iptables filter rules forward ipv6 in numbers."
echo "$text_md     list-forward : List iptables filter rules forward ipv4."
echo "$text_md    list-forward6 : List iptables filter rules forward ipv6."
echo  $text_md
$brake_md
echo "$text_md     list-filter4 : List iptables filter rules from ipv4."
echo "$text_md     list-filter6 : List iptables filter rules from ipv6."
echo "$text_md        list-nat4 : List iptables nat rules from ipv4."
echo "$text_md        list-nat6 : List iptables nat rules from ipv6."
echo "$text_md     list-mangle4 : List iptables mangle rules from ipv4."
echo "$text_md     list-mangle6 : List iptables mangle rules from ipv6."
echo "$text_md        list-raw4 : List iptables raw rules from ipv4."
echo "$text_md        list-raw6 : List iptables raw rules from ipv4."
echo "$text_md   list-security4 : List iptables security rules from ipv4."
echo "$text_md   list-security6 : List iptables security rules from ipv6"
echo "$text_md    list-ebtables : List rules ebtables mac of ethernet."
echo "$text_md    ist-arptables : List rules arptables arp."
echo  $text_md
$break_md
echo "$title_md        [ Launch iptables rules ]"
echo  $text_md
echo "$text_md         eraserules : Remove the iptables rules in ipv4 and ipv6."
echo "$text_md        wizard-full : Asistant y launch complete firewall."
echo "$text_md        wizard-mini : Asistant y Launch simple firewall."
echo "$text_md             custom : Configure one custom firewall, made for you with file.cfg."
echo "$text_md            offline : Launch disconected firewall for all servers and clients except localhost."
echo "$text_md      all-permisive : Launch a firewall very permisive."
echo "$text_md      games-shooter : Launch a firewall like games udp non-root games."
echo "$text_md      game-westnoth : Launch a firewall like game of the battle for wesnoth."
echo "$text_md     game-minetest : Launch a firewall like game minecraft or minetest."
echo "$text_md         client-tor : Launch a firewall with brwoser with tor."
echo "$text_md            lan-tor : Launch a firewall only to browser with tor."
echo "$text_md            lan-vpn : Launch a firewall only to browser with vpn."
echo "$text_md         client-web : Launch a firewall like web client and ssh client."
echo "$text_md     client-torrent : Launch a firewall like web client and ssh client and torrent."
echo "$text_md         client-vpn : Launch a firewall like web client and ssh client and vpn client."
echo "$text_md         server-web : Launch a firewall like web server and ssh server."
echo "$text_md       server-samba : Launch a firewall like server and client for samba and ssh."
echo "$text_md       server-print : Launch a firewall like server ipp, printer and ssh."
echo "$text_md         server-ssh : Launch a firewall like server ssh."
echo "$text_md        server-lamp : Launch a firewall like server LAMP."
echo  $text_md
echo "$title_md         [ tool config ]"
echo  $text_md
echo "$text_md       new-full-config : Create a new configfile.cfg in english."
echo "$text_md nueva-completa-config : Create a new configfile.cfg in spanish."
echo "$text_md       new-mini-config : Create a new basic configfile.cfg in english."
echo "$text_md     nueva-mini-config : Create a new basic configfile.cfg in spanish."
echo "$text_md          regen-config : regen wizard files and templates cfg."
echo "$text_md           names-config : List config files cfg."
echo "$text_md         modify-config : Edit one config.cfg."
echo "$text_md           show-config : Show one config.cfg."
echo "$text_md            del-config : Delete one configuration file."
echo  $text_md
echo "$title_md         [ List sockets ]"
echo  $text_md
echo "$text_md      info-nodes : List the conentions arp in lan."
echo "$text_md      info-proxy : List system proxy."
echo "$text_md     info-listen : List system listen socket list."
echo "$text_md      info-route : Show net devices and ip route tables."
echo "$text_md     info-system : Show info system."
echo "$text_md        info-net : Show net info."
echo "$text_md              ss : Show net sockets with command ss."
echo "$text_md            lsof : Show net sockets with command lsof."
echo "$text_md         netstat : Show net sockets with command netstat."
echo "$text_md     netstat-nat : Show net sockets with command netstat-nat."
echo "$text_md        web-cert : Download one ssl certificated to one web with port https(443)."
echo "$text_md         tcpdump : Listen the connections."
echo  $text_md
echo "$title_md         [ Tool forward ]"
echo  $text_md
echo "$text_md  ipforward-list : Show kernel config about forward."
echo "$text_md    ipforward-on : Active kernel config about forward."
echo "$text_md   ipforward-off : Deactive kernel config about forward."
echo  $text_md
echo "$title_md         [ Tool tcp ]"
echo  $text_md
echo "$text_md    tracetcp-ip4 : Trace route a one host with ipv4 tcp."
echo "$text_md    tracetcp-ip6 : Trace route a one host with ipv6 tcp."
echo "$text_md       speed-ip4 : Test the bandwidth with ipv4."
echo "$text_md       speed-ip6 : Test the bandwidth with ipv6."
echo  $text_md
echo "$title_md         [ Tool udp ]"
echo  $text_md
echo "$text_md           host : Resolve one host."
echo "$text_md            dig : Resolve one host."
echo "$text_md      resolveip : Resolve one host and viceversa."
echo "$text_md          geoip : Locate a one host or ip."
echo "$text_md        ntpdate : Update the date from ntp server."
echo  $text_md
echo "$title_md         [ Tool icmp ]"
echo  $text_md
echo "$text_md  traceicmp-ip4 : Trace route a one host with ipv4 icmp."
echo "$text_md  traceicmp-ip6 : Trace route a one host with ipv6 icmp."
echo "$text_md       ping-ip4 : Do a one ping with to one host with ipv4 icmp."
echo "$text_md       ping-ip6 : Do a one ping with to one host with ipv6 icmp."
echo  $text_md
echo "$title_md         [ Tool nmap ]"
echo $text_md
echo "$text_md       scan-tcp : Scan a host/mask per tcp protocol."
echo "$text_md       scan-syn : Scan a host/mask per syn socket."
echo "$text_md       scan-fin : Scan a host/mask per fin socket."
echo "$text_md       scan-udp : Scan a host/mask per udp protocol."
echo "$text_md      scan-ping : Scan a host/mask per ping udp."
echo  $text_md
echo "$title_md         [ Tool sudo ]"
echo  $text_md
echo "$text_md    sudo-adduser : Allow sudo to other choosed users."
echo "$text_md    sudo-deluser : Remove sudo to other choosed users."
echo "$text_md       sudo-list : List sudo to other choosed users."
echo "$text_md      alias-list : List alias $fwiptables and its autocomplete."
echo  $text_md
echo "$title_md         [ Tool game ]"
echo  $text_md
echo "$text_md         ole-word : Play game to discover a random word with five digits."
echo "$text_md       ole-number : Play game to discover a random number with five digits."
echo "$text_md       ole-domain : Discover one domain if generic or if country."
echo "$text_md       colour-hex : convert one number hexadecimal in rgb."
echo "$text_md       colour-rgb : convert one number rgb in hexadecimal."
echo  $text_md
echo "$title_md         [ Tool system ]"
echo $text_md
echo "$text_md         free-ram : Clean for innecesary ram memory."
echo "$text_md        speed-ram : Show the speed of ram memory."
echo "$text_md       speed-disk : Show the speed of root hard disc."
echo "$text_md        speed-glx : Show frammes for seconds with mesa graphicall."
echo "$text_md        radio-mp3 : connect to one server mp3, see show-default modify-default."
echo  $text_md
echo "$title_md         [ Tool Install ]"
echo  $text_md
echo "$text_md         install : Install this program actual."
echo "$text_md   howto-upgrade : Howto install the latest version."
echo "$text_md         upgrade : Upgrade at the latest version."
echo  $text_md
echo "$title_md         [ Tool blacklist ]"
echo  $text_md
echo "$text_md  blacklist-list : List options to block dangerous hosts."
echo "$text_md    blacklist-on : Write one /etc/hosts with block a dangerous sites."
echo "$text_md   blacklist-off : Return to /etc/hosts for default."
echo  $text_md
echo "$title_md         [ Tool dev ]"
echo  $text_md
echo "$text_md    new-versions : Show the last versions."
echo "$text_md     dev-version : Show the link at the developer version."
echo "$text_md     dev-changes : Show the last changes."
echo "$text_md            code : Show the source code for one option."
echo  $text_md
echo "$title_md         [ Show hardware ]"
echo  $text_md
echo "$text_md          lpinfo : Show the device printers."
echo "$text_md           lsblk : Show the device disks."
echo "$text_md           lsusb : Show the devices usb."
echo "$text_md           lscpu : Show the devices cpu."
echo "$text_md           lsgpu : Show the devices gpu."
echo "$text_md           lspci : Show the devices pci."
echo "$text_md            lshw : Show the hardware devices."
echo  $text_md
echo "$title_md         [ Show etc ]"
echo  $text_md
echo "$text_md           hosts : Show /etc/hosts, hosts local and statics host."
echo "$text_md      protocolos : Show /etc/protocols, protocols names."
echo "$text_md        services : Show /etc/services, ports names."
echo "$text_md     hosts.allow : Show /etc/hosts.allow, hosts allowed in some own server."
echo "$text_md      hosts.deny : Show /etc/hosts.deny, hosts drops in some own server."
echo "$text_md     resolv.conf : Show /etc/resolv.conf, it are the dns configured."
echo "$text_md    show-default : Show show variables for fwiptables."
echo "$text_md  modify-default : Modify variables for fwiptables."
echo  $text_md
echo "$title_md         [ Show log ]"
echo  $text_md
echo "$text_md        log-ssh : Search the logs from sshd for /var/log."
echo "$text_md     log-search : Search the logs from a input pattern for /var/log."
echo "$text_md        sentlog : Show saved with -log."
echo "$text_md        filelog : Alias to sentlog."
echo "$text_md        autolog : Show autolog headers."
echo  $text_md
echo "$title_md         [ Show about ]"
echo  $text_md
echo "$text_md           about : About info."
echo "$text_md         version : Info version program actual."
echo "$text_md         depends : Show depends."
echo "$text_md      config-eng : config example with comments in english."
echo "$text_md      config-spa : config example with comments in spanish."
echo "$text_md examples-config : Show configs examples."
echo  $text_md
echo "$title_md         [ Show help ]"
echo $text_md
echo "$text_md        all-help : Show help in spanish and in english."
echo "$text_md            info : Show group options."
echo "$text_md   group-options : show group options."
echo "$text_md    mini-options : Show necesary options for firewall."
echo "$text_md    full-options : Show the full options."
echo "$text_md         options : Show the full options."
echo "$text_md            help : Show help in english."
echo "$text_md           ayuda : Show help in spanish."
echo "$text_md           notes : Show firewall notes."
echo "$text_md   some-examples : Show examples to launch."
echo  $text_md
echo "$title_md [ firewall notes ]"
echo  $text_md
echo "$text_md     Notes in $fwiptables"
echo  $text_md
echo "$title_md  [vpn]"
echo  $text_md
echo "$text_md     Host [vpn] excepcionals hosts has conection allowed in firewall."
echo  $text_md
echo "$title_md  [blacklist]"
echo  $text_md
echo "$text_md     Host [blacklist] excepcionals hosts has conection dropped in firewall."
echo  $text_md
echo "$title_md  [uid and/or gid excepcional]"
echo  $text_md
echo "$text_md     User and/or group excepcional have output conection allowed in firewall."
echo  $text_md
echo "$title_md  [iptables netftilter]"
echo  $text_md
echo "$text_md     iptables-legacy   is    support for xtables."
echo "$text_md     iptables-nft      is    support for nftables."
echo  $text_md
echo "$title_md  [client firewall needs in udp ports]"
echo  $text_md
echo "$text_md     This port is necesary to update the date  : ntp"
echo "$text_md     This port is necesary to dhcp and get ip  : bootpc"
echo "$text_md     This port is necesary to domain resolver  : domain"
echo  $text_md
echo "$title_md  [Ipv6 needs protocols]"
echo  $text_md
echo "$text_md     Necesary protocol: ipv6-icmp."
echo "$text_md     Ipv6 works too with: ipv4 procotols."
echo  $text_md
echo "$title_md  [License]"
echo  $text_md
echo "$text_md  Download the latest version $fprogram from sourceforge"
echo "$text_md  $fweb_latest"
echo "$text_md  $flicense"
echo $text_md
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-help:
############################       english: ayuda: the help option in spanish
############################       spanish: ayuda: la opcion de ayuda en español
#### :rutina-inicial-ayuda:
####
####
if [ "$first_option" = "ayuda" ]; then 
echo "$title_md $tab [ $first_option ] [ ayuda en español ] [ ayuda.md ]$tab"
echo  $text_md
echo "$text_md  ||  Choose only help in english   ||   Type:     $fwiptables help     "
echo "$text_md  ||  Elige solo ayuda en español   ||   Teclea:   $fwiptables ayuda    "
$fwiptables intro
echo $text_md
$fwiptables options
echo  $text_md
echo "$title_md $tab [ $first_option ] [ Opciones principales ]."
echo  $text_md
echo "$title_md [ Lanza interfaz ]."
echo  $text_md
echo "$text_md       txt OR -txt : Salida a linea de texto."
echo "$text_md       cli OR -cli : Salida a menu de texto."
echo "$text_md       gui OR -gui : Salida a ventana grafica."
echo "$text_md       log OR -log : Salida a archivo log."
echo "$text_md       web OR -web : Salida a navegador web de texto"
echo "$text_md       rst OR -rst : Salida a formato rst en texto."
echo "$text_md       tor OR -tor : Ejecuta en tor, necesario daemon tor y comando torify."
echo "$text_md          cli-menu : modo texto with menus."
echo "$text_md          gui-menu : Graficos con menus."
echo "$text_md         gui-shell : Graficos con entorno de comandos."
echo  $text_md
echo "$title_md [ Controla las reglas de iptables ]."
echo  $text_md
echo "$text_md            stop : Para las reglas del firewall."
echo "$text_md        continue : Continua las reglas del firewall."
echo "$text_md           reset : Resetea las reglas del firewall."
echo "$text_md         list-fw : Apodo a names."
echo "$text_md           names : Lista los archivos de firewall estandard."
echo "$text_md            show : Muestra las reglas del firewall estandard especificado." 
echo "$text_md            save : Guarda las reglas de firewall estandard especificado."
echo "$text_md            load : Reculpera firewall estandard especificado."
echo "$text_md          actual : Muestra el contenido del firewall estandard actual."
echo  $text_md
echo "$title_md [ Lista las reglas de tablas de iptables ]."
echo  $text_md
echo "$text_md            status : similar a list y list6 cuando hay ruta por defecto."
echo "$text_md              list : similar a list-filter4 pero esconde reglas no usadas." 
echo "$text_md             list6 : similar a list-filter6 pero esconde reglas no usadas."
echo "$text_md           listnum : Lista las reglas de ipv4 de filtros en numeros."
echo "$text_md   list-forwardnum : Lista las reglas de ipv4 de filtros de reenvio en numeros."
echo "$text_md          list6num : Lista las reglas de ipv6 de filtros en numeros."
echo "$text_md  list-forward6num : Lista las reglas de ipv6 de filtros de reenvio en numeros."
echo "$text_md      list-forward : Lista las reglas de ipv4 de filtros de reenvio."
echo "$text_md     list-forward6 : Lista las reglas de ipv6 de filtros de reenvio."
echo "$text_md      list-filter4 : Lista las reglas de ipv4 de filtros iptables."
echo "$text_md      list-filter6 : Lista las reglas de ipv6 de filtros iptables."
echo "$text_md         list-nat4 : Lista las reglas de ipv4 de nat iptables."
echo "$text_md         list-nat6 : Lista las reglas de ipv6 de nat iptables."
echo "$text_md      list-mangle4 : Lista las reglas de ipv4 de mangle iptables."
echo "$text_md      list-mangle6 : Lista las reglas de ipv6 de mangle iptables."
echo "$text_md         list-raw4 : Lista las reglas de ipv4 de raw iptables."
echo "$text_md         list-raw6 : Lista las reglas de ipv6 de raw iptables."
echo "$text_md    list-security4 : lista las reglas de ip4 de security iptables."
echo "$text_md    list-security6 : Lista las reglas de ip6 de security iptables."
echo "$text_md     list-ebtables : Lista las reglas mac de ethernet."
echo "$text_md    list-arptables : Lista las reglas de arp arptables."
echo  $text_md
echo "$title_md [ Reglas modificables de iptables ]."
echo  $text_md
echo "$text_md        new-full-config : Crea una nueva configuracion.cfg en ingles."
echo "$text_md  nueva-completa-config : Crea una nueva configuracion.cfg en español."
echo "$text_md        new-mini-config : Crea una nueva basica configuracion.cfg en ingles."
echo "$text_md      nueva-mini-config : Crea una nueva basica configuracion.cfg en español."
echo "$text_md           regen-config : regenera wizard files y plantillas cfg ."
echo "$text_md            names-config : Lista los archivos de configuracion cfg ." 
echo "$text_md          modify-config : Edita una existente configuracion.cfg ."
echo "$text_md            show-config : Muestra una existente configuracion.cfg ."
echo "$text_md             del-config : Borra unaa existente configuracion.cfg ."
echo  $text_md
echo "$title_md [ Lanza reglas de iptables ]."
echo  $text_md
echo "$text_md           eraserules : Borra las reglas de iptables de ipv4 y de ipv6."
echo "$text_md          wizard-full : Asistente y lanza completo cortafuegos."
echo "$text_md          wizard-mini : Asistente y lanza simple cortafuegos."
echo "$text_md               custom : lanza el cortafuegos especificando un archivo.cfg."
echo "$text_md              offline : Lanza un desconectado cortafuegos de todo excepto localhost."
echo "$text_md        all-permisive : Lanza el cortafuegos muy permisivo."
echo "$text_md        games-shooter : Lanza el cortafuegos como cliente de juegos udp non-root."
echo "$text_md        game-westnoth : Lanza el cortafuegos como cliente de juego de la batalla por wesnoth."
echo "$text_md       game-minetest : Lanza el cortafuegos como cliente de juego minecraft o minetest."
echo "$text_md           client-web : Lanza el cortafuegos como cliente web y ssh."
echo "$text_md       client-torrent : Lanza el cortafuegos como cliente web y ssh y torrent."
echo "$text_md           client-tor : Lanza el cortafuegos con navegacion con tor."
echo "$text_md           client-vpn : Lanza el cortafuegos como cliente web y ssh y vpn."
echo "$text_md              lan-tor : Lanza el cortafuegos solo para navegar con tor."
echo "$text_md              lan-vpn : Lanza el cortafuegos solo para navegar con vpn."
echo "$text_md           server-web : Lanza el cortafuegos como servidor web y ssh."
echo "$text_md         server-samba : Lanza un cortafuegos como servidor y cliente samba y ssh."
echo "$text_md         server-print : Lanza un firewall como servidor ipp, printer y ssh."
echo "$text_md           server-ssh : Lanza un firewall como servidor ssh."
echo "$text_md          server-lamp : Lanza un firewall como servidor LAMP."
echo  $text_md
echo "$title_md [ Lista las conexiones abiertas ]."
echo  $text_md
echo "$text_md      info-nodes : Lista las conexiones arp in lan."
echo "$text_md      info-proxy : Lista proxy del sistema."
echo "$text_md     info-listen : Lista sockets a la escucha del sistema."
echo "$text_md      info-route : Muestra los dispositivos de red y la tabla de rutas."
echo "$text_md     info-system : Muestra la informacion del sistema."
echo "$text_md        info-net : Muestra informacion de la red."
echo "$text_md              ss : Muestra las conexiones con comando ss."
echo "$text_md            lsof : Muestra las conexiones con command lsof."
echo "$text_md         netstat : Muestra las conexiones con comando netstat."
echo "$text_md     netstat-nat : Muestra las conexiones con comando netstat-nat."
echo "$text_md        web-cert : Obtiene un certificado ssl a una web con puerto https(443)."
echo "$text_md         tcpdump : Escuchar las conexiones ip."
echo  $text_md
echo "$title_md [ Herramienta de ip forwading ]."
echo  $text_md
echo "$text_md  ipforward-list : Muestra la configuracion del kernel sobre reenvios ip."
echo "$text_md    ipforward-on : Activa la configuracion del kernel sobre reenvios ip."
echo "$text_md   ipforward-off : Desactiva la configuracion del kernel sobre reenvios ip."
echo  $text_md
echo "$title_md [ Herramienta tcp ]."
echo  $text_md
echo "$text_md  tracetcp-ip4 : Traza ruta a una host con ipv4 tcp."
echo "$text_md  tracetcp-ip6 : Traza ruta a una host con ipv6 tcp."
echo "$text_md     speed-ip4 : Testea el ancho de banda con ipv4."
echo "$text_md     speed-ip6 : Testea el ancho de banda con ipv6."
echo  $text_md
echo "$title_md [ Herramienta udp ]."
echo  $text_md
echo "$text_md          host : Resuelve la ip de un host ."
echo "$text_md           dig : Resuelve la ip de un host ."
echo "$text_md     resolveip : Resuelve la ip de un host y viceversa."
echo "$text_md         geoip : Localiza una ip o host ."
echo "$text_md       ntpdate : Actualiza la fecha desde un ntp server."
echo  $text_md
echo "$title_md [ Herramienta icmp ]."
echo  $text_md
echo "$text_md traceicmp-ip4 : Traza ruta a una host con ipv4 icmp."
echo "$text_md traceicmp-ip6 : Traza ruta a una host con ipv6 icmp."
echo "$text_md      ping-ip4 : Hace un ping a una host con ipv4 icmp."
echo "$text_md      ping-ip6 : Hace un ping a una host con ipv6 icmp."
echo  $text_md
echo "$title_md [ Herramienta nmap ]."
echo  $text_md 
echo "$text_md      scan-tcp : Rastrea una host/mask por tcp protocolo."
echo "$text_md      scan-syn : Rastrea una host/mask por syn socket."
echo "$text_md      scan-fin : Rastrea una host/mask por fin socket."
echo "$text_md      scan-udp : Rastrea una host/mask por udp protocolo."
echo "$text_md     scan-ping : Rastrea una host/mask por ping udp."
echo  $text_md
echo "$title_md [ Herramienta de autorizacion ]."
echo  $text_md
echo "$text_md  sudo-adduser : Permite autorizacion de usuarios elegidos."
echo "$text_md  sudo-deluser : Borra la autorizacion otorgada."
echo "$text_md     sudo-list : Lista autorizacion de usuarios elegidos."
echo  $text_md
echo "$title_md [ Herramienta de juego ]."
echo  $text_md
echo "$text_md   ole-word    : Juega a descubrir una palabra aleatoria de cinco caracteres."
echo "$text_md   ole-number  : Juega a descubrir un numero aleatorio de cinco digitos."
echo "$text_md   ole-domain  : Descubre un dominio si es generico o si es de un pais."
echo "$text_md   colour-hex  : convierte un numero hexadecimal en rgb ."
echo "$text_md   colour-rgb  : convierte un numero rgb en hexadecimal ."
echo  $text_md
echo "$title_md [ Herramienta de sistema ]."
echo  $text_md
echo "$text_md      free-ram : Libera la memoria ram innecesaria."
echo "$text_md     speed-ram : Muestra la velocidad de la memoria ram."
echo "$text_md    speed-disk : Muestra la velocidad de el disco duro raiz."
echo "$text_md     speed-glx : Muestra fotogramas por segundo con graficos mesa."
echo "$text_md     radio-mp3 : connecta a un servidor mp3, mira show-default o modify-default."
echo  $text_md
echo "$title_md [ Herramienta de instalacion ]."
echo  $text_md
echo "$text_md        install : Instala este programa actual."
echo "$text_md        upgrade : Actualiza a la ultima version."
echo "$text_md  howto-upgrade : Indicacion para actualizar."
echo  $text_md
echo "$title_md [ Herramienta de lista de bloqueo ]."
echo  $text_md
echo "$text_md  blacklist-list : Lista de opciones para bloquear hosts peligrosas."
echo "$text_md    blacklist-on : Escribe un /etc/hosts con bloqueo a hosts peligrosas."
echo "$text_md   blacklist-off : Vuelve a /etc/hosts por defecto."
echo  $text_md
echo "$title_md [ Herramienta de desarrollador ]."
echo  $text_md
echo "$text_md    new-versions : Muestra las ultimas versiones."
echo "$text_md     dev-version : Muestra en enlace a la version de desarrollo."
echo "$text_md     dev-changes : Muestra los ultimos cambios."
echo "$text_md            code : Muestra el codigo fuente para una opcion."
echo  $text_md
echo "$title_md [ Herramienta de informacion del hardware ]."
echo  $text_md
echo "$text_md          lpinfo : Muestra los dispositivos de impresora."
echo "$text_md           lsblk : Muestra los dispositivos de disco."
echo "$text_md           lsusb : Muestra los dispositivos de usb."
echo "$text_md           lscpu : Muestra los dispositivos cpu."
echo "$text_md           lsgpu : Muestra los dispositivos gpu."
echo "$text_md           lspci : Muestra los dispositivos pci."
echo "$text_md            lshw : Muestra los dispositivos de hardware."
echo  $text_md
echo "$title_md [ Mostrar etc ]."
echo  $text_md
echo "$text_md           hosts : Muestra /etc/hosts, hosts locales y hosts estaticos."
echo "$text_md      protocolos : Muestra /etc/protocols, nombres de protocolos."
echo "$text_md        services : Muestra /etc/services, nombres de puertos y servicios."
echo "$text_md     hosts.allow : Muestra /etc/hosts.allow, hosts permitidas en algunos propios servidores."
echo "$text_md      hosts.deny : Muestra /etc/hosts.deny, hosts denegadas en algunos propios servidores."
echo "$text_md     resolv.conf : Muestra /etc/resolv.conf, este es el dns configurado."
echo "$text_md    show-default : Muestra /etc/default/fwiptables, muestra variables en fwiptables."
echo "$text_md  modify-default : Modifica /etc/default/fwiptables, modifica variables en fwiptables."
echo  $text_md
echo "$title_md [ Mostrar log ]."
echo  $text_md
echo "$text_md        sentlog : Muestra los volcados con -log ."
echo "$text_md        filelog : alias a sentlog ."
echo "$text_md        autolog : Muestra las cabeceras de fwiptables lanzados."
echo "$text_md        log-ssh : Busca los logs de sshd en /var/log ."
echo "$text_md     log-search : Busca los logs dando un patron para /var/log ."
echo  $text_md
echo "$title_md [ Mostrar acerca ]."
echo  $text_md
echo "$text_md           About : Acerca de."
echo "$text_md         version : Informacion de la actual version."
echo "$text_md         Depends : Muestra las dependencias." 
echo "$text_md    new-versions : Muestra las ultimas versiones."
echo "$text_md      config-eng : Ejemplo de custom config con comentarios en ingles."
echo "$text_md      config-spa : Ejemplo de custom config con comentarios en castellano."
echo "$text_md examples-config : Muestra ejemplos de configuraciones"
echo  $text_md
echo "$title_md [ Mostrar ayuda ]."
echo  $text_md
echo "$text_md        all-help : Muestra la ayuda en español y en ingles."
echo "$text_md            info : Muestra las opciones de grupo."
echo "$text_md   group-options : Muestra las opciones de grupo."
echo "$text_md    mini-options : Muestra las opciones necesarias."
echo "$text_md    full-options : Muestra las opciones."
echo "$text_md         options : Muestra las opciones."
echo "$text_md            help : Muestra la ayuda en ingles."
echo "$text_md           ayuda : Muestra la ayuda en español."
echo "$text_md           notes : Muestra notas de Fran firewall."
echo "$text_md   some-examples : Muestra ejemplos para lanzar."
echo $text_md
echo "$title_md $tab Notas de firewall"
echo  $text_md
echo  $text_md
echo "$title_md [vpn]."
echo  $text_md
echo "$text_md     Host [vpn] excepcionales tienen conexion permitida en el firewall."
echo  $text_md
echo "$title_md [blacklist]."
echo  $text_md
echo "$text_md     Host [blacklist] excepcionales tienen conexion denegada en el firewall."
echo  $text_md
echo "$title_md [uid y/o gid excepcional]."
echo  $text_md
echo "$text_md     Usuario y/o grupo excepcional tienen conexion de salida permitida en el firewall."
echo  $text_md
echo "$title_md [iptables netftilter]."
echo  $text_md
echo "$text_md     iptables-legacy   es    soporte para xtables."
echo "$text_md     iptables-nft      es    soporte para nftables."
echo  $text_md
echo "$title_md [Puertos cliente udp necesarios]."
echo  $text_md
echo "$text_md     necesario para actualizar la fecha :   ntp ."
echo "$text_md     necesario para dhcp y conseguir ip :   bootpc . "
echo "$text_md     necesario para resolver dominios   :   domain ."
echo  $text_md
echo "$title_md [Protocolos necesarios para ipv6]."
echo  $text_md
echo "$text_md     Necesario protocolo: ipv6-icmp."
echo "$text_md     Ipv6 funciona tambien con: ipv4 procolos."
echo  $text_md
echo "$title_md [Licencia]."
echo  $text_md
echo "$text_md  Descarga la ultima version de $fprogram desde la web de sourceforge."
echo "$text_md  $fweb_latest"
echo "$text_md  $flicense"
echo  $text_md
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-ayuda:
############################       english: default: without other valid options
############################	   spanish: default: sin otra valida opcion
####
####
if [ "$launch_iptables" = "" ] || [ "$launch_iptables" = "default" ] ; then $nada ; else 
echo "$tab Choose a one valid option .. "; $fwiptables $default_security ; exit ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####           Knowed now sure that:         launch_iptables=""                                 ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules ..                                                          ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
#### english: autosave #### spanish: autoguarda
$give_autosave &> /dev/null
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall with designed previous             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema con diseño previo             ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
########################################     english: ipv4 iptables allpermisisive:
########################################     spanish: ipv4 iptables todo permisivo
####
####
#### legacy ip4
####
####
if [ "$first_option" = "all-permisive" ]; then $fwiptables eraserules &> /dev/null ;
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
$input_state  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A FORWARD \
-j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
$input_state -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT \
-j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A FORWARD \
-j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables allpermisisive
########################################     spanish: ipv6 iptables todo permisivo
####
####
#### legacy ip6
####
####
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A INPUT  \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A INPUT \
$input_state -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A FORWARD \
-j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
$input_state -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A OUTPUT  \
-j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A FORWARD \
-j ACCEPT &> /dev/null
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$tab [ ok ] [ launched rules ] [ launched firewall ] [ all-permisive ]"
exit; fi
####
####
########################################     english: ipv4 iptables offline:
########################################     spanish: ipv4 iptables desconectado
####
####
#### legacy ip4
####
####
if [ "$first_option" = "offline" ];  then $fwiptables eraserules &> /dev/null ;
####
####
$allow_legacy $allow_ipv4  $command_iptables_legacy -A INPUT  \
-s 127.0.0.1 -d 127.0.0.1   -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT   \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT  \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables offline
########################################     spanish: ipv6 iptables desconectado
####
####
#### legacy ip6
####
####
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A INPUT  \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT  \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
########################################     english: close in offline
########################################     spanish: cierra en offline
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A FORWARD -j DROP  &> /dev/null
####
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A FORWARD -j DROP        &> /dev/null
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A FORWARD -j DROP &> /dev/null
####
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A FORWARD -j DROP       &> /dev/null
####
echo "$tab [ ok ] [ launched rules ] [ launched firewall ] [ offline ]"
exit; fi
########################################     english: ipv4 iptables default:
########################################     spanish: ipv4 iptables por defecto
####
####
if [ "$launch_iptables" = "default" ];  then $fwiptables eraserules &> /dev/null ;
####
####
####
####
#### legacy ip4
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A FORWARD \
-j DROP &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A FORWARD \
-j DROP &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables default:
########################################     spanish: ipv6 iptables por defecto 
####
####
#### legacy ip6
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A FORWARD \
-j DROP &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $server_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $server_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A FORWARD \
-j DROP &> /dev/null
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6      $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$tab [ ok ] [ launched rules ] [ launched firewall ] [ $first_option ]"
exit; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules CUSTOM                                                      ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall custom                             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema custom                        ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
##############################       english: overwrite system varibles with the config cfg
##############################       spanish: sobreescribe las variables con la config cfg
####
####
if [ "$first_option" = "custom" ]; then if [ -f $directory_config/$second_option ]; 
then source $directory_config/$second_option &> /dev/null ; else echo "$tab [ fail ] [ File not found ]"; exit ; fi ; fi
####
####
##############################      english: compatibility with old variables, backward compatibility      #####################
##############################      spanish: compatibilidad con viejas ariables, retrocompatibilidad       #####################
####
####
####      #### english: probe version config_variable_version
####      #### spanish: prueba version config_variable_version
####
####
if [ "$first_option" = "custom" ]; then $nada
 config_variable_two="$(cat $directory_config/$second_option | grep -i config_variable_version=2 | wc -l)"
if [ "$config_variable_two" = "1" ]; then config_variable_version="2" ; fi ; fi
####
####
####      #### english: config variable version
####      #### spanish: configura variable version
####
####
if [ $config_variable_version = "1" ]; then $nada
 config_input_state="$input_state" ;
 config_output_state="$output_state" ;
 config_input_bandwidth="$bandwidth_input" ;
 config_output_bandwidth="$bandwidth_output" ;
 config_input_maxconnect="$maxconnect_input" ; 
 config_output_maxconnect="$maxconect_output" ;
 config_net_vpn="$vpn" ;
 config_net_blacklist="$blacklist" ;
 config_output_uid="$output_uid" ;
 config_output_gid="$output_gid" ;
 config_others_protocols="$others_protocols" ;
 separate_port_rules="no" ;
 echo "$tab [ status ] [ Runing rules with old variables version $config_variable_version ]"
fi
####
####
if [ $config_variable_version = "2" ]; then $nada; fi 
####
####
##############################      english: selective state of intput/oputut          #####################
##############################      spanish: estado selectivo de entrada/salida        #####################
####
####
if [ "$allow_input_state" = "$NULL" ]  ; then config_input_state="-m state --state $config_input_state"   ;
else config_input_state="$NULL"  ; fi
if [ "$allow_output_state" = "$NULL" ] ; then config_output_state="-m state --state $config_output_state" ;
else config_output_state="$NULL" ; fi
####
####
##############################      english: output_uid or output_gid for input established status        #####################
##############################      spanish: usuario o grupo para establecidos de entrada de estado        #####################
####
####
config_uid_gid=no
if [ "$allow_output_uid" = "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
if [ "$allow_output_gid" = "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          launching rules ..                                                                ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
############################       english: iptables rules ipv4  iptables-legacy
############################       spanish: reglas de iptables ipv4   iptables-legacy
####
####
#### english: erase all rules
#### spanish: borra todas las reglas
####
####
$fwiptables eraserules &> /dev/null
####
####
#######################################        english: ebtables mac rules
#######################################        spanish: ebtables mac rules
####
####
$allow_mac_whitelist $command_ebtables -A INPUT  -s $config_mac_whitelist  -j ACCEPT &> /dev/null
$allow_mac_whitelist $command_ebtables -A OUTPUT -d $config_mac_whitelist  -j ACCEPT &> /dev/null
####
####
$allow_mac_blacklist $command_ebtables -A INPUT  -s $config_mac_blacklist  -j DROP   &> /dev/null
$allow_mac_blacklist $command_ebtables -A OUTPUT -d $config_mac_blacklist  -j DROP   &> /dev/null
####
####
#######################################        english: Accept  localhost rules
#######################################        spanish: aceptar reglas localhost
####
####
$allow_legacy   $command_iptables_legacy -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy   $command_iptables_legacy -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
####
####
$allow_legacy   $command_ip6tables_legacy -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy   $command_ip6tables_legacy -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
$allow_nft  $command_iptables_nft -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $command_iptables_nft -A OUTPUT -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $command_ip6tables_nft -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $command_ip6tables_nft -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#######################################        english: limit bandwidth in kb/s
#######################################        spanish: limitar ancho de banda en kb/s
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
####
####
$allow_ipv4 $allow_legacy $allow_input_bandwidth $command_iptables_legacy     -A  INPUT \
-m hashlimit --hashlimit-above   "$config_input_bandwidth"kb/sec \
--hashlimit-name maxinputlegacy  -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_bandwidth $command_iptables_legacy    -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip --hashlimit-name maxoutputlegacy -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_bandwidth $command_iptables_nft           -A INPUT \
-m hashlimit    --hashlimit-above "$config_input_bandwidth"kb/sec  \
--hashlimit-name maxinputnft  -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_bandwidth $command_iptables_nft          -A OUTPUT \
-m hashlimit  --hashlimit-above "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip  --hashlimit-name maxoutputnft -j DROP &> /dev/null
####
####
#### english: ipv6 bandwidth
#### spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_bandwidth $command_ip6tables_legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_bandwidth $command_ip6tables_legacy -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_bandwidth $command_ip6tables_nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_bandwidth $command_ip6tables_nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j DROP &> /dev/null
####
####
#######################################        english: limit number of all connections
#######################################        spanish: limitar numero de conexiones totales
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
$allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect   -j DROP  &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_maxconnect $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j DROP &> /dev/null
####
####
#### english: ipv6 bandwidth
#### spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect  -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_maxconnect $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j DROP &> /dev/null
####
####
####################################### english: Drop rules for blacklist
####################################### spanish: reglas de denegar para lista negra
####
####
for one_blacklist in $(echo $config_net_blacklist | sed 's/,/ /g')
####
####
#### ipv4
####
####
do
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
done
#### 
####
####################################### english: Accept rules for vpn
####################################### spanish: reglas de aceptar para vpn
####
####
for one_vpn in $(echo $config_net_vpn | sed 's/,/ /g') 
#### ipv4
####
do
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
done
####
####
####################################### english: rules to allow client ports with without separate rules
####################################### spanish: reglas para permitir puertos cliente without separate rules
####
####
if [ "$separate_port_rules" = "no" ]; then 
####
####
####    CLIENT  UDP
####
#### ipv4 legacy udp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft udp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $command_iptables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy udp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
#### ipv6 nft udp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
####    CLIENT  TCP
####
#### ipv4 legacy tcp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft tcp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $command_iptables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy tcp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
#### ipv6 nft tcp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
####################################### english: rules to allow client ports with with separate rules
####################################### spanish: reglas para permitir puertos cliente with separate rules
####
####
fi
if [ "$separate_port_rules" = "" ]; then 
for one_udp in $(echo $client_udp | sed 's/,/ /g') ;
do
####
####
####    CLIENT  UDP
####
#### ipv4 legacy udp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft udp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $command_iptables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy udp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $one_udp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $one_udp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
#### ipv6 nft udp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_udp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_udp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
done; fi
if [ "$separate_port_rules" = "" ]; then 
for one_tcp in $(echo $client_tcp | sed 's/,/ /g') ;
do
####
####
####    CLIENT TCP
####
#### ipv4 legacy tcp
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft tcp
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $command_iptables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy tcp
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
#### ipv6 nft tcp
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $one_tcp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $one_tcp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
done ; fi
####################################### english: rules to log servers
####################################### spanish: reglas para logear servers
####
####
#### ipv4
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
#### ipv6
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
####################################### english: rules for max tries for ssh
####################################### spanish: reglas for max ties for ssh
####
####
if [ "$allow_maxtries_ssh" = "" ]; then $nada
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
$allow_nft  $allow_ipv4  $command_iptables_nft -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
$allow_nft     $allow_ipv6  $command_ip6tables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
fi
####
####
####################################### english: rules allow server ports
####################################### spanish: reglas para permitir puertos servidor 
####
####
#### ipv4 legacy
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT &> /dev/null
####
####
#### ipv6 nft
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT &> /dev/null
####
####
####################################### english: rules from input of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de entrada de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy -A INPUT  \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $config_uid_gid $command_iptables_legacy -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols $command_iptables_legacy -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
####################################### english: rules from output of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de salida de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping  $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_uid $command_iptables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_gid $command_iptables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols      $command_iptables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
####################################### english: ipv6 filter legacy rules input and output for ping, uid, gid and protocols
####################################### spanish: ipv6 filtros legacy reglas de entrada y salida para ping, uid, gid y protocolos
####
#### 
#### english: ipv6 filter legacy rules input 
#### spanish: ipv6 filtros de legacy reglas de entrada
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping      $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping    $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $config_uid_gid $command_ip6tables_legacy -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv6 filter legacy rules output
#### spanish: ipv6 filtros legacy reglas de salida
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping  $command_ip6tables_legacy   -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping  $command_ip6tables_legacy -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_uid $command_ip6tables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_gid $command_ip6tables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_legacy6  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
############################       english: iptables rules ipv4  iptables-nft for ping, uid, gid and protocols
############################       spanish: reglas de iptables ipv4 iptables-nft para ping, uid, gid y protocolos
####
####
#### english: ipv4 filter nft rules input
#### spanish: ipv4 filter nft reglas de entrada
####
####
$allow_nft $allow_ipv4 $allow_output_ping     $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $config_uid_gid $command_iptables_nft -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols       $command_iptables_nft -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv4 filter nft rules output
#### spanish: ipv4 filter nft reglas de salida
####
####
$allow_nft $allow_ipv4 $allow_output_ping    $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping  $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_uid $command_iptables_nft   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_gid $command_iptables_nft   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols      $command_iptables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
########## english: ipv6 filter nft rules input and output for ping, uid, gid and protocols
########## spanish: ipv6 filtros nft relgas de entrada y salida para ping, uid, gid y protocolos
####
####
#### ipv6 filter nft rules input
#### ipv6 filtros nft reglas d entrada
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $config_uid_gid $command_ip6tables_nft -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv6 filter nft rules output
#### spanish: ipv6 filtros nft reglas de salida
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_uid     $command_ip6tables_nft -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_gid     $command_ip6tables_nft -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
########################################## english: nat for ipv4 and ipv6
########################################## spanish: nat para ipv4 y ipv6
####
####
#### english: nat DELETED
#### spanish: borrado nat
####
####
#### $command_iptables_nft -t nat -F
#### $command_iptables_legacy -t nat -F
#### $command_ip6tables_nft -t nat -F
#### $command_ip6tables_legacy -t nat -F
####
####
#### english: do masquerade nat ip4 and ip6 ALLOW GATEWAY
#### spanish: hace nat masquerade ip4 y ip6 PERMITIR GATEWAY
####
####
 $allow_nft    $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
 -A POSTROUTING -j MASQUERADE &>/dev/null
 $allow_legacy $allow_ipv4 $allow_gateway_ip4 $command_iptables_legacy -t nat \
 -A POSTROUTING -j MASQUERADE &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A POSTROUTING -j MASQUERADE     &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A POSTROUTING -j MASQUERADE     &>/dev/null
####
####
 $allow_nft $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
 -A PREROUTING -j ACCEPT      &>/dev/null
 $allow_legacy $allow_ipv4     $allow_gateway_ip4 $command_iptables_legacy -t nat \
 -A PREROUTING -j ACCEPT   &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j ACCEPT     &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A PREROUTING -j ACCEPT  &>/dev/null
####
####
####
####
#### english: do DMZ nat ip4 and ip6 ALLOW GATEWAY SERVER IN LAN
#### spanish: hace nat DMZ ip4 y ip6 PERMITIR GATEWAY SERVER IN LAN
####
####
$allow_nft    $allow_ipv4    $allow_dmz_ip4 $command_iptables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4   &>/dev/null
$allow_legacy $allow_ipv4    $allow_dmz_ip4 $command_iptables_legacy -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4   &>/dev/null
####
####
$allow_nft $allow_ipv6    $allow_dmz_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip6      &>/dev/null
$allow_legacy $allow_ipv6 $allow_dmz_ip6 $command_ip6tables_legacy -t nat \
-A PERROUTING -j DNAT --to-destination $config_dmz_ip6   &>/dev/null
####
####
######################################## english: iptables ipv4 and ipv6 with forward rules ALLOW FORWARD
######################################## spanish: iptables ipv4 y ipv6 con reglas de reenvio PERMITIR FORWARD
####
####
#### english: deactive for default with forward or without forward
#### spanish: desactiva por defecto con reenvio o sin reenvio
####
####
$command_sysctl -w net.ipv4.conf.all.forwarding=0 &> /dev/null
$command_sysctl -w net.ipv6.conf.all.forwarding=0 &> /dev/null
####
####
####   Active when there is forward
$ipv4 $allow_forward $command_sysctl -w net.ipv4.conf.all.forwarding=1 &> /dev/null
$ipv6 $allow_forward $command_sysctl -w net.ipv6.conf.all.forwarding=1 &> /dev/null
####
####
####   ipv4 filter legacy rules forward
$allow_legacy $allow_forward_ip4 $command_iptables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter legacy rules forward
$allow_legacy $allow_forward_ip6 $command_ip6tables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv4 filter nft rules forward
$allow_nft $allow_forward_ip4 $command_iptables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter nft rules forward
$allow_nft $allow_forward_ip6 $command_ip6tables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
#######################################       iptables ipv4 and ipv6 closed with drop input, and drop forward, and drop output rules
#######################################       iptables ipv4 y ipv6 cierran la entrada, reemvio y salida con reglas de dropeo
####
####
#### ipv4 drop rules iptables-legacy
$allow_legacy $command_iptables_legacy -A INPUT -j DROP &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j DROP &> /dev/null
####
####
#### ipv6 drop rules iptables-legacy
$allow_legacy $command_ip6tables_legacy -A INPUT -j DROP &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j DROP &> /dev/null
####
####
#### ipv4 drop rules iptables-nft
$allow_nft $command_iptables_nft -A INPUT -j DROP &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j DROP &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j DROP &> /dev/null
####
#### ipv6 drop rules iptables-nft
$allow_nft $command_ip6tables_nft -A INPUT -j DROP &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j DROP &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j DROP &> /dev/null
####
####
########################################       english: iptables ipv4 and ipv6 with variable input_all
########################################       english: iptables ipv4 y ipv6 con variable input_all
####
####
#### english: nft INPUT deleted
#### spanish: nft INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F INPUT  &> /dev/null
####
####
#### english: legacy INPUT deleted
#### spanish: legacy INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F INPUT  &> /dev/null
####
####
#### english: nft INPUT 127.0.0.1 accept
#### spanish: nft INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT 127.0.0.1 accept
#### spanish: legacy INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy4 INPUT  limit bandwidth
#### spanish: legacy6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_bandwidth iptables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_bandwidth ip6tables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
#### english: nft4 INPUT limit bandwidth
#### spanish: nft6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_bandwidth iptables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_bandwidth ip6tables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j DROP  &> /dev/null
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
#### english: nft INPUT ACCEPT all or input_state
#### spanish: nft INPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_ipv4 $command_iptables_nft -t filter -A INPUT \
-j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-j DROP &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-j DROP &> /dev/null
####
####
####
####
########################################       english: iptables ipv4 and ipv6 with variable output_all
########################################       english: iptables ipv4 y ipv6 con variable output_all
####
####
#### english: nft OUTPUT deleted
#### spanish: nft OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F OUTPUT  &> /dev/null
####
####
#### english: legacy OUTPUT deleted
#### spanish: legacy OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F OUTPUT  &> /dev/null
####
####
#### english: nft OUTPUT 127.0.0.1 accept
#### spanish: nft OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy OUTPUT 127.0.0.1 accept
#### spanish: legacy OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy4 OUTPUT  limit bandwidth
#### spanish: legacy6 OUTPUT limita ancho de banda
####
#### 
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_bandwidth iptables-legacy -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_bandwidth ip6tables-legacy -A  OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
####
####
#### english: nft4 OUTPUT limit bandwidth
#### spanish: nft6 OUTPUT limita ancho de banda
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_bandwidth iptables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_bandwidth ip6tables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_maxconnect  $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP  &> /dev/null
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_maxconnect  $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
####
####
#### english: nft OUTPUT ACCEPT all or input_state
#### spanish: nft OUTPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter  -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT  -j DROP &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy  -t filter -A OUTPUT  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT  -j DROP &> /dev/null
####
####
########################################       english: show text when active custom rules
########################################       spanish: muestra texto cuando activas las custom reglas
####
####  
#### echo $head_principal
if [ -f "$directory_config/$second_option" ]; then $nada
echo "$tab [ ok ] [ launched rules ] [ launched firewall ] [ custom ] [$second_option]"
exit ; else $nada ; fi
####
####
#######################
####     left script
#######################
####
####
#######################         english: End of script
#######################         spanish: Fin del script
####    
####
####    Git mini tutorial:
####
####
####    Download repository: Repository git.code.sf.net/p/f-iptables/code
####
####    Download f-iptables repository to folder user       :     git clone https://git.code.sf.net/p/f-iptables/code
####    Recover f-iptables repository to folder user        :     git fetch
####
####    upload repository: Repository git.code.sf.net/p/f-iptables/code
####    Upload f-iptables repository from local repository  :     git commit -a ; git push ;
####
####    Create repository local: /var/git/repository.localhost
####
####    mkdir /var/git/repository.localhost
####    cd /var/git/repository.localhost
####    git init --bare
####    chmod user /var/git/repository.localhost -R
####    service ssh start or systemctl restart ssh
####
####
#######################
#######################
####
####
exit
