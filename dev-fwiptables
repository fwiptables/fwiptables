#!/bin/bash
####
####
####   english: necesary to find several PATH
####   spanish: necesario para encontrar varios PATH
source /etc/profile
####
####
################################################   english: begin the script
################################################   spanish: empieza el script
####
####
####   license
####   english: This program has gpl license, this program is copyleft, it is free.
####   spanish: Este programa tiene licencia gpl, this program is copyleft, it is free.
####
####   comments
####   english: The comments are in english language and spanish language
####   spanish: Los comentarios estan en ingles y en español
####
####
##############################        example in english: basic system variables
##############################        ejemplo in spanish: las basicas variables del sistema
####
####  english: /usr/bin/fwiptables is in vars $directory_fiptables folder and $fiptables exec
####  spanish: /usr/bin/fwiptables esta en variables $directory_fiptables carpeta y $fiptables exec
####
################################################   english: basic system variables
################################################   spanish: las basicas variables del sistema
####
####
####        #### english: [the variables names and the path] #spanish: [nombres de variables y rutas]
favorite_option="list-help" ;                                          #english: list or help-list
zero_dir="$(pwd)" ; zero_option="$0" ;                            #english: variables to launch  #spanish: variables a lanzar
first_option="$1" ; second_option="$2" ;                          #english: variables to launch  #spanish: variables a lanzar
launch_thefirst="no" ; launch_thesecond="no" ;                    #english: variables to launch  #spanish: variables a lanzar
config_option="no" ; launch_iptables="no" ;                       #english: auto variables to no #spanish: auto variables a no
launch_offline="no" ;launch_permisive="no" ; launch_custom="no";  #english: auto variables to no #spanish: auto variables a no
directory_fiptables="/usr/bin" ; fiptables="fwiptables" ;         #english: whereis path  #spanish: donde esta el path
fdescription="One Script in bash for iptables firewall"           #english: program description  #spanish: descripcion del programa
fprogram="Fran FireWall fwiptables Generator" ; fversion="222";   #english: Name and Version  #spanish: Nombre y Version
directory_config="/etc/fwiptables" ;                              #english: path to config files  #spanish: archivos de configuracion
defaultcfg="$directory_config/default-full-english.cfg"           #english: path to config files  #spanish: archivos de configuracion
defaultfullcfg_eng="$directory_config/default-full-english.cfg"   #english: path to config files  #spanish: archivos de configuracion
defaultfullcfg_spa="$directory_config/default-full-spanish.cfg"   #english: path to config files  #spanish: archivos de configuracion
defaultminicfg_eng="$directory_config/default-mini-english.cfg"   #english: path to config files  #spanish: archivos de configuracion
defaultminicfg_spa="$directory_config/default-mini-spanish.cfg"   #english: path to config files  #spanish: archivos de configuracion
directory_fwrecover="/etc/fwrecover" ;                            #english: path to save firewall #spanish: ruta de firewall guardado
autosave_fwrecover="" ;                                           #english: void to autosave fwrecover or no #spanish: autoguardar fwrecover
cinco="#####" ; tab="    " ;  tabz="# _ _ _ _ _ _ _ "  ;          #english: [characters to show] #spanish: [caracteres a mostrar]
cincuenta="##################################################" ;  #english: [characters to show] #spanish: [caracteres a mostrar]
head_option="$cinco [$fprogram] [Version $fversion]" ;                   #english: [characters to show] #spanish: [caracteres a mostrar]
subhead_option="$cincuenta [ $first_option ]" ;                   #english: [characters to show] #spanish: [caracteres a mostrar]
log_prefix="logserver:"                                           #english: log prefix in iptables #spanish: prefijo del log en iptables
flistado="-70" ;                                                  #english: wide of list config files #spanish: Ancho al listar cfg
####       #### english: [download web link]  #spanish: [descarga del enlace web]
fweb_latest="https://sourceforge.net/projects/f-iptables/files/latest/download" ;
fweb_development="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-fwiptables?format=raw" ;
fweb_newfiles="https://sourceforge.net/projects/f-iptables/files" ;
fweb_tree="https://sourceforge.net/p/f-iptables/code/ci/master/tree/" ;
fweb_git="https://git.code.sf.net/p/f-iptables/code f-iptables-code" ;
####       #### english: [Program license] #spanish: [Licencia del programa]
flicense="Copyleft, without warranty, free to copy, free to modify, gnu license gpl."
####
####
################################################        english: variables:    variables to declare
################################################        spanish: variables:    variables para declarar
####
####
allow_legacy= ; allow_nft= ; allow_ipv4= ; allow_ipv6=no ;
client_tcp=ssh,http,https ; client_udp=domain,bootpc,ntp,https ;
server_tcp=ssh ; server_udp= ; logserver_tcp=ssh ; logserver_udp= ;
input_state="-m state --state new,related,established" ;
only_output= ; allow_bandwidth_input=no ;
allow_bandwidth_output=no ; allow_ping_send=no ; allow_ping_recive=no
allow_forwading=no ; allow_nat=no ;allow_vpn=no ; allow_blacklist=no 
allow_output_uid=no ; allow_output_gid=no ; allow_others_protocols=no
bandwidth_input=12512 ; bandwidth_output=512 ; vpn=wesnoth.org ; blacklist=
output_uid=root ; output_gid=root ; others_protocols=icmp,igmp
net_ipv4_client=0/0 ; net_ipv4_server=0/0 ; net_ipv6_client=::/0 ; net_ipv6_server=::/0
####
####
################################################        english: fvariables:    variables to prepare to gen files
################################################        spanish: fvariables:    variables para preparar para generar archivos
####
####
#### english: basic options in configuration file cfg
#### spanish: opciones basicas en configuracion de archivo cfg
####
####
var1=""
eng1=$(echo "#  .......... BEGIN Necesary options .......... .......... #")
spa1=$(echo "# INICIO .......... Opciones Necesarias .......... .......... #")
var2="# #"
eng2=$(echo "# the iptables firewall netfilter, choose one or two")
spa2=$(echo "# el iptables firewall netfilter, elige uno o dos")
var3=$(echo "allow_legacy=" )
eng3=$(echo "# launch xtables, void to yes or type no")
spa3=$(echo "# lanza xtables, vacio para si, o escribe no")
var4=$(echo "allow_nft=no" ) 
eng4=$(echo "# launch neftables, void to yes or type no")
spa4=$(echo "# lanza neftables, vacio para si, o escribe no")
var5="# #"
eng5=$(echo "# ip protocol, modify with void or no")
spa5=$(echo "# procolo ip, modificar con vacio o no")
var6=$(echo "allow_ipv4=" )
eng6=$(echo "# void to config firewall with ipv4 or no to dont configure ipv4")
spa6=$(echo "# varcio para ejecutar el firewall con ipv4 o no para no")
var7=$(echo "allow_ipv6=no" )
eng7=$(echo "# void to config firewall with ipv6 or no to dont configure ipv6")
spa7=$(echo "# varcio para ejecutar el firewall con ipv6 o no para no")
var8="# #"
eng8=$(echo "# Client ports, add with ',' and join ranges with ':'")
spa8=$(echo "# puertos Cliente, añadir con ',' y poner rangos con ':' ")
var9=$(echo "client_tcp=http,https,ssh") 
eng9=$(echo "# tcp ports for client")
spa9=$(echo "# puertos tcp para ser cliente")
var10=$(echo "client_udp=domain,bootpc,ntp,https")
eng10=$(echo "# udp ports for client")
spa10=$(echo "# puertos udp para ser cliente")
var11="# #"
eng11=$(echo "# Server ports, add with ',' and join ranges with ':'")
spa11=$(echo "# Puertos Servidor, añadir con ',' y poner rangos con ':'")
var12=$(echo "server_tcp=ssh" )
eng12=$(echo "# tcp ports for server")
spa12=$(echo "# puertos tcp para servidor")
var13=$(echo "server_udp= ")
eng13=$(echo "# udp ports for server")
spa13=$(echo "# puertos udp para servidor")
var14=$(echo "logserver_tcp=ssh ")
eng14=$(echo "# the tcp ports to log server")
spa14=$(echo "# puertos tcp para logear servidor")
var15=$(echo "logserver_udp= ")
eng15=$(echo "# the udp ports to log server")
spa15=$(echo "# puertos udp para logear servidor")
var16="# #"
eng16=$(echo "# Selective Input state")
spa16=$(echo "# Estado de entrada selectivo")
var17=$(echo "input_state=''")
eng17=$(echo "# void for all or -m state --state new,related,established,untracked,invalid")
spa17=$(echo "# modificar con vacio o -m state --state new,related,established,untracked,invalid")
var18="# #"
eng18=$(echo "# void to works with only output rules or no")
spa18=$(echo "# vacio para funcionar con reglas de salida solamente or no")
var19=$(echo "only_output=no" )
eng19=$(echo "# void when the rules are only to output in filter or no")
spa19=$(echo "# vacio, reglas solo para salida o no")
var20="# #"
eng20=$(echo "# .......... END Necesary options .......... .......... #")
spa20=$(echo "# FINAL .......... Opciones Necesarias .......... .......... #")
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var21="# #"
eng21=$(echo "# .......... BEGIN Optional options .......... .......... #")
spa21=$(echo "# INICIO .......... Opciones opcionales .......... .......... #")
var22="# #"
eng22=$(echo "# Allow Other Options,  modify with void, or no")
spa22=$(echo "# Permitir Otras Opciones, modificar con vacio o no")
var23=$(echo "allow_bandwidth_input=no ")
eng23=$(echo "# void to limit bandwidth input in kbits/sec for all sources or no")
spa23=$(echo "# vacio para limitar ancho de banda de entrada para todas las fuentes en kbits/sec o no")
var24=$(echo "allow_bandwidth_output=no" )
eng24=$(echo "# void to limit bandwidth output in kbits/sec for each destination or no")
spa24=$(echo "# vacio limitar ancho de banda de salida en kbits/sec por cada destino o no")
var25=$(echo "allow_ping_send=no" )
eng25=$(echo "# void to allow send pings or no" )
spa25=$(echo "# vacio para permitir enviar ping o no" )
var26=$(echo "allow_ping_recive=no" )
eng26=$(echo "# void to allow recive pings or no" )
spa26=$(echo "# vacio para permitir recivir ping o no")
var27=$(echo "allow_forwading=no" )
eng27=$(echo "# void to allow ip forward or no")
spa27=$(echo "# vacio para permitir reenvio, y no para denegar reenvios")
var28=$(echo "allow_nat=no" )
eng28=$(echo "# void to do NAT masquerade to default route or no")
spa28=$(echo "# vacio para hacer masquerade a otras redes o no")
var29=$(echo "allow_vpn=no" )
eng29=$(echo "# void to allow some exceptional host or no")
spa29=$(echo "# vacio para permitir hosts excepcionales o no")
var30=$(echo "allow_blacklist=no")
eng30=$(echo "# void to drop some excepcional host or no")
spa30=$(echo "# vacio para denegar hosts excepcionales o no")
var31=$(echo "allow_output_uid=no" )
eng31=$(echo "# void to allow excepcional user or no" )
spa31=$(echo "# vacio permite salida de paquetes de un usuario excepcional o no" )
var32=$(echo "allow_output_gid=no" )
eng32=$(echo "# void to allow excepcional group or no" )
spa32=$(echo "# vacio permite salida de paquetes de un grupo excepcional o no" )
var33=$(echo "allow_others_protocols=no" )
eng33=$(echo "# void to allow other protocol ip excepcional or no" )
spa33=$(echo "# vacio para permitir otro protocolo ip excepcional o no" )
var34="# #"
eng34=$(echo "# Other Options, add with , and join ranges with :" )
spa34=$(echo "# Otras Opciones, añadir con , y poner rangos con :" )
var35=$(echo "bandwidth_input=12512" )
eng35=$(echo "# max input bandwidth in kbits/sec for all" )
spa35=$(echo "# maximo entrada de ancho de banda en kbit/sec para todos" )
var36=$(echo "bandwidth_output=512" )
eng36=$(echo "# max output bandwidth in kbits/sec for each ip" )
spa36=$(echo "# maximo salida de ancho de banda en kbits/sec para cada ip" )
var37=$(echo "vpn=wesnoth.org,sf.net" )
eng37=$(echo "# allow this excepcitonal host" )
spa37=$(echo "# permitir estos host excepcionales" )
var38=$(echo "blacklist=facebook.com,google.com" )
eng38=$(echo "# drop this excepcional host" )
spa38=$(echo "# deniega estos host excepcionales" )
var39=$(echo "output_uid=root" )
eng39=$(echo "# allow out packages excepcional from this user excepcional" )
spa39=$(echo "# permite salida de paquetes de este usuario excepcional" )
var40=$(echo "output_gid=root" )
eng40=$(echo "# allow out packages excepcional from this group excepcional" )
spa40=$(echo "# permite salida de paquetes de este grupo excepcional" )
var41=$(echo "others_protocols=icmp,igmp" )
eng41=$(echo "# allow others protocols from /etc/protocolos" )
spa41=$(echo "# permitir otros protocolos desde /etc/protocols" )
var42="# #"
eng42=$(echo "# Net to connect like client or server" )
spa42=$(echo "# Red para conectar como cliente o server" )
var43=$(echo "net_ipv4_client=0/0" )
eng43=$(echo "# the net to client ipv4, all is 0/0" )
spa43=$(echo "# la red cual cliente ipv4, todos es 0/0" )
var44=$(echo "net_ipv4_server=0/0" )
eng44=$(echo "# the net to server ipv4, all is 0/0" )
spa44=$(echo "# la red cual servidor ipv4, todos es 0/0" )
var45=$(echo "net_ipv6_client=::/0" )
eng45=$(echo "# the net to client ipv6, all is ::/0" )
spa45=$(echo "# la red cual cliente ipv6, todos es ::/0" )
var46=$(echo "net_ipv6_server=::/0" )
eng46=$(echo "# the net to server ipv6, all is ::/0" )
spa46=$(echo "# la red cual servidor ipv6, todos es ::/0" )
var47="# #"
eng47=$(echo "# .......... END Optional options .......... .......... #")
spa47=$(echo "# FINAL .......... Opciones opcionales .......... .......... #")
####
####
##############################       english: are you root: uid 0 ?
##############################       spanish: eres admnistrador: identificador 0 ?;
####
####
if [ "$(id -u)" = "0" ]; then echo  -n ;
else echo "$cincuenta need to be root to work"
echo "$head_option"
echo "$cincuenta  Be root to work $fiptables"
exit ; fi
####
####
##############################       english: favorite initial option            ########################
##############################       spanish: favorita opcion inicial            ########################
####
####
####    #english: favorite_option: init one option #spanish: sin opcion: una opcion inicial 
####
if  [ "$first_option" = "$NULL" ] ; then first_option="$favorite_option" ; fi
####
####
####    #english: necesary advice the list-help #spanish: necesario el aviso de ayuda list-help
####
if  [ "$first_option" != "list-help" ] ; then echo -n ;
echo "$cinco [Show command list-help / TYPE:] $fiptables list-help" ; fi 
####
####
####    #english: rewrite variable [characters to show] #spanish: reescribe variable [caracteres a mostrar]
####
subhead_option="$cincuenta [ $first_option ]"
####
####
####    #english: bash_completion autocomplete #spanish: bash_completion autocomplete
####
source /etc/bash_completion.d/$fiptables
####
####
##############################       english: Notice Installer            ###########################################
##############################       spanish: Instalador noticia          ###########################################
####
####
case "$zero_option" in
"$directory_fiptables/$fiptables")
;;
"./$fiptables")
;;
"$fiptables")
;;
*)
echo "$cinco [to install / TYPE:] $zero_option install"
;;
esac
####
####
##############################       english: if sane config dir                       #############################
##############################       spanish: comprobar sanos directorios              #############################
####
####
if [ -d "$directory_config" ]; then echo -n ; else rm "$directory_config" &> /dev/null ; mkdir "$directory_config" &> /dev/null ; fi
if [ -d "$directory_fwrecover" ]; then echo -n ; else rm "$directory_fwrecover" &> /dev/null ; mkdir "$directory_fwrecover" &> /dev/null ; fi
####
####
##############################       english: Install:    $fiptables           ###########################################
##############################       spanish: Instalador: $fiptables           ###########################################
####
####
if [ "$first_option" = "install" ] ; then echo -n ;
echo "$head_option"
echo "$subhead_option"
cp $zero_option $directory_fiptables/$fiptables &> /dev/null ;
echo "$cinco [$fiptables $fversion / SCRIPT INSTALLED IN:] $directory_fiptables/$fiptables" ;
echo "alias $fiptables='sudo $fiptables'"       >  /etc/bash_completion.d/$fiptables ;
echo "complete -W 'list list-help' $fiptables" >>  /etc/bash_completion.d/$fiptables ;
echo "$cinco [Launch $fiptables to run / TYPE:] $fiptables" ; exit; fi
####
####
##############################       english: Install-bin:    $fiptables           ###########################################
##############################       spanish: Instalador-bin: $fiptables           ###########################################
####
####
if [ "$first_option" = "install-bin" ] ; then echo -n ;
case $(which shc) in
"$NULL")
echo "$cinco install shc to compile"
;;
*)
echo "$head_option"
echo "$subhead_option"
cp $zero_option /tmp/$fiptables-source &> /dev/null ;
cat /tmp/$fiptables-source | grep -v ^## - > /tmp/$fiptables-uncommented
shc -f /tmp/$fiptables-uncommented -o /tmp/$fiptables-bin
chmod ugo+rx /tmp/$fiptables-bin
cp /tmp/$fiptables-bin $directory_fiptables/$fiptables
echo "$cinco [$fiptables $fversion / BINARY INSTALLED IN:] $directory_fiptables/$fiptables" ;
echo "alias $fiptables='sudo $fiptables'"       >  /etc/bash_completion.d/$fiptables ;
echo "complete -W 'list list-help' $fiptables" >>  /etc/bash_completion.d/$fiptables ;
echo "$cinco [Launch $fiptables to run / TYPE:] $fiptables"
;;
esac
exit; fi
####
####
##############################   english: autogen defaults configs cfg              ###########################################
##############################   spanish: auto genera configs cfg por defecto       ###########################################
####
####
#### where save default files
me="$defaultminicfg_eng"
ms="$defaultminicfg_spa"
fe="$defaultfullcfg_eng"
fs="$defaultfullcfg_spa"
####
####
#### mini-english
echo "# $fprogram from $fiptables config file" > $me
echo $var1  $tabz $eng1  >> $me
echo $var2  $tabz $eng2  >> $me
echo $var3  $tabz $eng3  >> $me
echo $var4  $tabz $eng4  >> $me
echo $var5  $tabz $eng5  >> $me
echo $var6  $tabz $eng6  >> $me
echo $var7  $tabz $eng7  >> $me
echo $var8  $tabz $eng8  >> $me
echo $var9  $tabz $eng9  >> $me
echo $var10 $tabz $eng10 >> $me
echo $var11 $tabz $eng11 >> $me
echo $var12 $tabz $eng12 >> $me
echo $var13 $tabz $eng13 >> $me
echo $var14 $tabz $eng14 >> $me
echo $var15 $tabz $eng15 >> $me
echo $var16 $tabz $eng16 >> $me
echo $var17 $tabz $eng17 >> $me
echo $var18 $tabz $eng18 >> $me
echo $var19 $tabz $eng19 >> $me
echo $var20 $tabz $eng20 >> $me
#### mini-spanish
echo "# $fprogram from $fiptables config file" > $ms
echo $var1  $tabz $spa1  >> $ms
echo $var2  $tabz $spa2  >> $ms
echo $var3  $tabz $spa3  >> $ms
echo $var4  $tabz $spa4  >> $ms
echo $var5  $tabz $spa5  >> $ms
echo $var6  $tabz $spa6  >> $ms
echo $var7  $tabz $spa7  >> $ms
echo $var8  $tabz $spa8  >> $ms
echo $var9  $tabz $spa9  >> $ms
echo $var10 $tabz $spa10 >> $ms
echo $var11 $tabz $spa11 >> $ms
echo $var12 $tabz $spa12 >> $ms
echo $var13 $tabz $spa13 >> $ms
echo $var14 $tabz $spa14 >> $ms
echo $var15 $tabz $spa15 >> $ms
echo $var16 $tabz $spa16 >> $ms
echo $var17 $tabz $spa17 >> $ms
echo $var18 $tabz $spa18 >> $ms
echo $var19 $tabz $spa19 >> $ms
echo $var20 $tabz $spa20 >> $ms
#### full-english
echo "# $fprogram from $fiptables config file" > $fe
echo $var1  $tabz $eng1  >> $fe
echo $var2  $tabz $eng2  >> $fe
echo $var3  $tabz $eng3  >> $fe
echo $var4  $tabz $eng4  >> $fe
echo $var5  $tabz $eng5  >> $fe
echo $var6  $tabz $eng6  >> $fe
echo $var7  $tabz $eng7  >> $fe
echo $var8  $tabz $eng8  >> $fe
echo $var9  $tabz $eng9  >> $fe
echo $var10 $tabz $eng10 >> $fe
echo $var11 $tabz $eng11 >> $fe
echo $var12 $tabz $eng12 >> $fe
echo $var13 $tabz $eng13 >> $fe
echo $var14 $tabz $eng14 >> $fe
echo $var15 $tabz $eng15 >> $fe
echo $var16 $tabz $eng16 >> $fe
echo $var17 $tabz $eng17 >> $fe
echo $var18 $tabz $eng18 >> $fe
echo $var19 $tabz $eng19 >> $fe
echo $var20 $tabz $eng20 >> $fe
echo $var21 $tabz $eng21 >> $fe
echo $var22 $tabz $eng22 >> $fe
echo $var23 $tabz $eng23 >> $fe
echo $var24 $tabz $eng24 >> $fe
echo $var25 $tabz $eng25 >> $fe
echo $var26 $tabz $eng26 >> $fe
echo $var27 $tabz $eng27 >> $fe
echo $var28 $tabz $eng28 >> $fe
echo $var29 $tabz $eng29 >> $fe
echo $var30 $tabz $eng30 >> $fe
echo $var31 $tabz $eng31 >> $fe
echo $var32 $tabz $eng32 >> $fe
echo $var33 $tabz $eng33 >> $fe
echo $var34 $tabz $eng34 >> $fe
echo $var35 $tabz $eng35 >> $fe
echo $var36 $tabz $eng36 >> $fe
echo $var37 $tabz $eng37 >> $fe
echo $var38 $tabz $eng38 >> $fe
echo $var39 $tabz $eng39 >> $fe
echo $var40 $tabz $eng40 >> $fe
echo $var41 $tabz $eng41 >> $fe
echo $var42 $tabz $eng42 >> $fe
echo $var43 $tabz $eng43 >> $fe
echo $var44 $tabz $eng44 >> $fe
echo $var45 $tabz $eng45 >> $fe
echo $var46 $tabz $eng46 >> $fe
echo $var47 $tabz $eng47 >> $fe
#### full-spanish 
echo "# $fprogram from $fiptables config file" > $fs
echo $var1  $tabz $spa1 >> $fs
echo $var2  $tabz $spa2 >> $fs
echo $var3  $tabz $spa3 >> $fs
echo $var4  $tabz $spa4 >> $fs
echo $var5  $tabz $spa5 >> $fs
echo $var6  $tabz $spa6 >> $fs
echo $var7  $tabz $spa7 >> $fs
echo $var8  $tabz $spa8 >> $fs
echo $var9  $tabz $spa9 >> $fs
echo $var10 $tabz $spa10 >> $fs
echo $var11 $tabz $spa11 >> $fs
echo $var12 $tabz $spa12 >> $fs
echo $var13 $tabz $spa13 >> $fs
echo $var14 $tabz $spa14 >> $fs
echo $var15 $tabz $spa15 >> $fs
echo $var16 $tabz $spa16 >> $fs
echo $var17 $tabz $spa17 >> $fs
echo $var18 $tabz $spa18 >> $fs
echo $var19 $tabz $spa19 >> $fs
echo $var20 $tabz $spa20 >> $fs
echo $var21 $tabz $spa21 >> $fs
echo $var22 $tabz $spa22 >> $fs
echo $var23 $tabz $spa23 >> $fs
echo $var24 $tabz $spa24 >> $fs
echo $var25 $tabz $spa25 >> $fs
echo $var26 $tabz $spa26 >> $fs
echo $var27 $tabz $spa27 >> $fs
echo $var28 $tabz $spa28 >> $fs
echo $var29 $tabz $spa29 >> $fs
echo $var30 $tabz $spa30 >> $fs
echo $var31 $tabz $spa31 >> $fs
echo $var32 $tabz $spa32 >> $fs
echo $var33 $tabz $spa33 >> $fs
echo $var34 $tabz $spa34 >> $fs
echo $var35 $tabz $spa35 >> $fs
echo $var36 $tabz $spa36 >> $fs
echo $var37 $tabz $spa37 >> $fs
echo $var38 $tabz $spa38 >> $fs
echo $var39 $tabz $spa39 >> $fs
echo $var40 $tabz $spa40 >> $fs
echo $var41 $tabz $spa41 >> $fs
echo $var42 $tabz $spa42 >> $fs
echo $var43 $tabz $spa43 >> $fs
echo $var44 $tabz $spa44 >> $fs
echo $var45 $tabz $spa45 >> $fs
echo $var46 $tabz $spa46 >> $fs
echo $var47 $tabz $spa47 >> $fs
####
####
##############################       english: if second_option is a valid config.cfg               #############################
##############################       spanish: si segunda opcion es un valido config.cfg            #############################
####
####
if [ -f "$directory_config/$second_option" ]; then config_option="si"; else config_option="no"; fi
####
####
##############################      english: launch-rules: The first options: offline, custom or allpermisive     #####################
##############################      spanish: launch-rules: Primeras opciones: offline, custom or allpermisive     #####################
####
####
####   the first: [config.cfg]
####
####
if [ -f "$directory_config"/"$first_option" ]; then echo -n ;
launch_iptables="si"; launch_thefirst="si"; launch_thesecond="no" ; 
launch_permisive="no" ; launch_offline="no" ; launch_custom="" ; 
else echo -n; fi
####
####
####   the first: offline, allpermisive or custom
####
####
if [ "$first_option" = "offline" ]; then      echo "  FIREWALL OFFLINE" ; echo "$cincuenta"
launch_iptables="si"; launch_thesecond="si"; launch_permisive="no"; launch_offline=""   ;  launch_custom="no" ; only_output="no"  ; fi
if [ "$first_option" = "allpermisive" ]; then echo "  FIREWALL ALLPERMISIVE" ; echo "$cincuenta"
launch_iptables="si"; launch_thesecond="si"; launch_permisive=""  ; launch_offline="no" ;  launch_custom="no" ; only_output="no"  ; fi
if [ "$first_option" = "custom" ]; then       echo "  FIREWALL CUSTOM" ; echo "$cincuenta"
launch_iptables="si"; launch_thesecond="si";   launch_permisive="no" ; launch_offline="no" ; launch_custom="" ; fi
####
####
##############################       english: list-help: wellcome with semi help 
##############################       spanish: list-help: bienvenida con semi ayuda
####
####
if [ "$first_option" = "list-help" ]; then echo  -n ;
echo "$head_option"
echo "$subhead_option"
echo "$tab [Options]"
echo " [launch-guide]      system-info net-info full-wizard mini-wizard cli gui   "
echo " [launch-rules]      eraserules offline allpermisive custom [config.cfg]    "
echo " [list-sockets]      route ss netstat lsof ipforwading tcpdump arp          "
echo " [list-rules]        list forward list6 forward6 nat-ip4 nat-ip6            "
echo "                     listnum forwardnum listnum6 forwardnum6                "
echo " [tool-configs]      new-full-config nueva-completa-config                  "
echo "                     new-mini-config nueva-mini-config                      "
echo "                     show-config modify-config del-config                   "
echo " [tool-fw]           fw-list fw-save fw-restore fw-show-actual              "
echo " [tool-icmp]         ping-ip4 ping-ip6                                      "
echo " [tool-tcp]          trace-ip4 trace-ip6 host resolveip geoip ntpdate       "
echo " [tool-sudo]         auth-sudo remove-sudo list-sudo                        "
echo " [tool-version]      install install-bin version upgrade all-versions       "
echo " [show-etc]          hosts protocols services hosts.allow hosts.deny        "
echo " [show-log]          log-sudo log-sshd log-logserver log-search             "
echo " [show-about]        about depends examples                                 "
echo " [show-help]         configurations configuraciones list-help help ayuda    "
echo "$tab [Configs]"
echo $(ls $directory_config | egrep -iv "default|wizard|example1.cfg")
echo "$tab [Examples]"
echo " [Create a new config myown.cfg]    $fiptables new-mini-config myown.cfg    "
echo " [Launch the config myown.cfg]      $fiptables custom myown.cfg             "
echo " [List iptables rules]              $fiptables list                         "
exit ; fi
####
####
##############################      english: search programs: programs path           #####################
##############################      spanish: busca los programas: ruta de programas   #####################
####
####
which_iptables_legacy="$(which iptables-legacy | cut -d " " -f 1)"
which_iptables_nft="$(which iptables-nft | cut -d " " -f 1)"
which_ip6tables_legacy="$(which ip6tables-legacy | cut -d " " -f 1)"
which_ip6tables_nft="$(which ip6tables-nft | cut -d " " -f 1)"
which_iptables_legacy_save="$(which iptables-legacy-save | cut -d " " -f 1)"
which_iptables_nft_save="$(which iptables-nft-save | cut -d " " -f 1)"
which_ip6tables_legacy_save="$(which ip6tables-legacy-save | cut -d " " -f 1)"
which_ip6tables_nft_save="$(which ip6tables-nft-save | cut -d " " -f 1)"
which_arptables="$(which arptables|cut -d " " -f 1)"
which_ebtables="$(which ebtables| cut -d " " -f 1)"
which_editor="$(which editor| cut -d " " -f 1)"
which_fmt="$(which fmt | cut -d " " -f 1)"
which_uname="$(which uname | cut -d " " -f 1)"
which_ip="$(which ip | cut -d " " -f 1)"
which_host="$(which host | cut -d " " -f 1)"
which_resolveip="$(which resolveip | cut -d " " -f 1)"
which_geoiplookup="$(which geoiplookup | cut -d " " -f 1)"
which_route="$(which route | cut -d " " -f 1)"
which_ss="$(which ss| cut -d " " -f 1)"
which_netstat="$(which netstat | cut -d " " -f 1)"
which_lsof="$(which lsof | cut -d " " -f 1)"
which_sysctl="$(which sysctl | cut -d " " -f 1)"
which_tcpdump="$(which tcpdump | cut -d " " -f 1)"
which_arp="$(which arp | cut -d " " -f 1)"
which_ping="$(which ping | cut -d " " -f 1)"
which_traceroute="$(which traceroute | cut -d " " -f 1)"
which_dialog="$(which dialog | cut -d " " -f 1)"
which_zenity="$(which zenity | cut -d " " -f 1)"
which_nano="$(which nano| cut -d " " -f 1)"
which_vim="$(which vim | cut -d " " -f 1)"
which_vi="$(which vi | cut -d " " -f 1)"
which_tilde="$(which tilde | cut -d " " -f 1)"
which_gedit="$(which gedit | cut -d " " -f 1)"
which_yudit="$(which yudit | cut -d " " -f 1)"
which_tea="$(which tea | cut -d " " -f 1)"
which_pluma="$(which pluma | cut -d " " -f 1)"
which_mousepad="$(which mousepad | cut -d " " -f 1)"
which_gedit="$(which gedit | cut -d " " -f 1)"
which_lynx="$(which lynx | cut -d " " -f 1)"
which_links="$(which links | cut -d " " -f 1)"
which_elinks="$(which elinks | cut -d " " -f 1)"
####
####
##############################      english: search favorite browser: favorite browser     #####################
##############################      spanish: busca preferido navegador: favorite browser   #####################
####
####
favorite_text_browser=""
if [ "$which_links" = "$NULL" ]    ; then echo -n ; else favorite_text_browser=$which_links     ; fi
if [ "$which_elinks" = "$NULL" ]   ; then echo -n ; else favorite_text_browser=$which_elinks    ; fi
####
####
##############################      english: search favorite text editor: favorite text editor            #####################
##############################      spanish: busca preferido editor de texto: preferido editor de texto   #####################
####
####
favorite_text_editor=""
if [ "$which_vi" = "$NULL" ]     ; then echo -n; else favorite_text_editor=$which_vi        ; fi
if [ "$which_vim" = "$NULL" ]    ; then echo -n; else favorite_text_editor=$which_vim       ; fi
if [ "$which_tilde" = "$NULL" ]  ; then echo -n; else favorite_text_editor=$which_tilde     ; fi
if [ "$which_editor" = "$NULL" ] ; then echo -n; else favorite_text_editor=$which_editor    ; fi
if [ "$which_nano" = "$NULL" ]   ; then echo -n; else favorite_text_editor=$which_nano      ; fi
####
####
##############################      english: search favorite graphicall editor: favorite graphicall editor     #####################
##############################      spanish: busca preferido editor grafico: preferido editor grafico         #####################
####
####
favorite_graphicall_editor=""
if [ "$which_yudit" = "$NULL" ]    ; then echo -n ; else favorite_graphicall_editor=$which_yudit      ; fi
if [ "$which_tea" = "$NULL" ]      ; then echo -n ; else favorite_graphicall_editor=$which_tea        ; fi
if [ "$which_pluma" = "$NULL" ]    ; then echo -n ; else favorite_graphicall_editor=$which_pluma      ; fi
if [ "$which_mousepad" = "$NULL" ] ; then echo -n ; else favorite_graphicall_editor=$which_mousepad   ; fi
if [ "$which_gedit" = "$NULL" ]    ; then echo -n ; else favorite_graphicall_editor=$which_gedit      ; fi
####
####
##############################       english: Script: general options         #########################################
##############################       spanish: Script: opciones generales      #########################################
####
####
##############################       english: launch-guide options
##############################       spanish: launch-guide opciones
####
####
if [ "$first_option" = "launch-guide" ]; then echo -n
echo "$head_option"
echo "$cincuenta [$first_option]"
echo "$cinco         [Launch guide]"
echo
echo "  system-info: Show info system"
echo "     net-info: Show net info"
echo "  full-wizard: Asistant y launch complete firewall"
echo "  mini-wizard: Asistant y Launch simple firewall"
echo "          cli: Comand line interface with menus"
echo "          gui: Graphicall user interface"
exit; fi
####
####
##############################       english: launch-rules options
##############################       spanish: launch-guide opciones
####
####
if [ "$first_option" = "launch-rules" ]; then echo -n
echo "$head_option"
echo "$cincuenta [$first_option]"
echo "$cinco         [Launch iptables rules]"
echo
echo "   eraserules: Remove the iptables rules in ipv4 and ipv6"
echo "      offline: Disconected for all servers and clients except localhost"
echo " allpermisive: Configure a firewall very permisive"
echo "       custom: Configure one custom firewall with file.cfg"
echo "   [file.cfg]: Configure the firewall with file.cfg and show info"
exit; fi
####
####
##############################       english: list-rules options
##############################       spanish: list-rules opciones
####
####
if [ "$first_option" = "list-rules" ]; then echo -n
echo "$head_option"
echo "$cincuenta [$first_option]"
echo "$cinco         [List iptables rules]"
echo
echo "               [The filter table with names]"
echo "         list: List iptables filter rules input and output ipv4"
echo "      forward: List iptables filter rules foward"
echo "        list6: List iptables filter rules input and output ipv6"
echo "     forward6: List iptables filter rules forward ipv6"
echo
echo "               [The filter table with numbers]"
echo "      listnum: List iptables filter rules input and output ipv4 in numbers"
echo "   forwardnum: List iptables filter rules foward in numbers"
echo "     listnum6: List iptables filter rules input and output ipv6 in numbers"
echo "  forwardnum6: List iptables filter rules forward ipv6 in numbers"
echo
echo "$cinco         [The others tables]"
echo
echo "      nat-ip4: List iptables nat rules from ipv4"
echo "      nat-ip6: List iptables nat rules from ipv6"
echo "   mangle-ip4: List iptables mangle rules from ipv4"
echo "   mangle-ip6: List iptables mangle rules from ipv6"
echo "      raw-ip4: List iptables raw rules from ipv4"
echo "      raw-ip6: List iptables raw rules from ipv4"
echo " security-ip4: List iptables security rules from ipv4"
echo " security-ip6: List iptables security rules from ipv6"
echo "     ebtables: List rules ebtables nft ethernet"
echo "    arptables: List rules arptables arp"
exit; fi
####
####
##############################       english: edit-config options
##############################       spanish: edit-config opciones
####
####
if [ "$first_option" = "tool-configs" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [tool config]"
echo
echo "       new-full-config: Create a new configfile.cfg in english"
echo " nueva-completa-config: Create a new configfile.cfg in spanish"
echo "       new-mini-config: Create a new basic configfile.cfg in english"
echo "     nueva-mini-config: Create a new basic configfile.cfg in spanish"
echo "         modify-config: Edit one config.cfg"
echo "           show-config: Show one config.cfg"
echo "            del-config: Delete one configuration file"
exit; fi
####
####
##############################       english: list-sockets options
##############################       spanish: list-sockets opciones
####
####
if [ "$first_option" = "list-sockets" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [List sockets]"
echo
echo "        route: Show net devices and ip route tables"
echo "           ss: Show net sockets with command ss"
echo "         lsof: Show net sockets with command lsof"
echo "      netstat: Show net sockets with command netstat"
echo "  ipforwading: Show kernel config about forward"
echo "      tcpdump: Listen the connections"
echo "          arp: List the last conentions arp"
exit; fi
####
####
##############################       english: recover-fw options
##############################       spanish: recover-fw opciones
####
####
if [ "$first_option" = "tool-fw" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [Recover fw]"
echo
echo "       fw-list: Show the files firewall standar"
echo "       fw-save: Save the files in firewall standar"
echo "    fw-restore: Show the recover files firewall standard"
echo "fw-show-actual: Show the actual iptables standard"
exit; fi
####
####
##############################       english: tool-icmp options
##############################       spanish: tool-cimp opciones
####
####
if [ "$first_option" = "tool-icmp" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [Tool icmp]"
echo
echo "     ping-ip4: Do a one ping with to one host with ipv4 icmp"
echo "     ping-ip6: Do a one ping with to one host with ipv6 icmp"
echo
exit; fi
####
####
##############################       english: tool-tcp options
##############################       spanish: tool-tcp opciones
####
####
if [ "$first_option" = "tool-tcp" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [Tool tcp]"
echo
echo "    trace-ip4: Trace route a one host with ipv4 tcp"
echo "    trace-ip6: Trace route a one host with ipv6 tcp"
echo "         host: Resolve one host"
echo "    resolveip: Resolve one host and viceversa"
echo "       geo-ip: Locate a one host or ip"
echo "      ntpdate: update the date from ntp server"
exit; fi
####
####
##############################       english: tool-sudo options
##############################       spanish: tool-sudo opciones
####
####
if [ "$first_option" = "tool-sudo" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [Tool sudo]"
echo
echo "    auth-sudo: Permit sudo $fiptables to other choosed users"
echo "  remove-sudo: Remove sudo $fiptables to other choosed users"
echo "    list-sudo: List sudo $fiptables to other choosed users"
exit; fi
####
####
##############################       english: show-version options
##############################       spanish: show-version opciones
####
####
if [ "$first_option" = "show-version" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [Version]"
echo
echo "      install: install this actual"
echo "  install-bin: install this actual in binary"
echo "      version: Info version program "
echo "      upgrade: Upgrade at the latest version"
echo " dev-versions: Version in development "
echo " all-versions: All versions"
exit; fi
####
####
##############################       english: show-etc options
##############################       spanish: show-ver opciones
####
####
if [ "$first_option" = "show-etc" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [Show etc]"
echo
echo "        hosts: show /etc/hosts"
echo "   protocolos: show /etc/protocols"
echo "     services: show /etc/services"
echo "  hosts.allow: show /etc/hosts.allow"
echo "   hosts.deny: show /etc/hosts.deny"
exit; fi
####
####
##############################       english: show-log options
##############################       spanish: show-log opciones
####
####
if [ "$first_option" = "show-log" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo
echo "$cinco         [Show log]"
echo
echo "     log-sudo: search logs for sudo in /var/log"
echo "     log-sshd: search logs for sshd in /var/log"
echo "log-logserver: search logs for this firewall in /var/log"
echo "   log-search: search logs for one prefix in  /var/log"
exit; fi
####
####
####
####
##############################       english: show-about: options
##############################       spanish: show-about: opciones
####
####
if [ "$first_option" = "show-about" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [show about]"
echo
echo "          about: About"
echo "        depends: Show depends"
echo "       examples: Show examples"
exit; fi
####
####
##############################       english: show-help: options
##############################       spanish: show-help: opciones
####
####
if [ "$first_option" = "show-help" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco         [show help]"
echo
echo " configurations: config example with comments in english"
echo " configurations: config example with comments in spanish"
echo "      list-help: Show list-help"
echo "           help: Show help in english"
echo "          ayuda: Show help in spanish"
exit; fi
####
####
##############################       english: depends: depends for $fiptables
##############################       spanish: dependencias: dependencias para $fiptables
####
####
if [ "$first_option" = "depends" ]; then echo -n
echo "Depends for $fiptables"
echo "$cincuenta $fiptables"
echo "$tab [$fiptables util]"
echo "fmt:       $which_fmt"
echo "$tab [$fiptables cli]"
echo "dialog:    $which_dialog"
echo "$tab [$fiptables gui]"
echo "zenity:    $which_zenity"
echo "$tab [$fiptables text browser]"
echo "one: links or elinks"
echo "auto text browser                $favorite_text_browser"
echo "$tab [$fiptables text editor]"
echo "one: vi, vim, tilde, editor, nano"
echo "auto favorite text exitor:       $favorite_text_editor"
echo "$tab [$fiptables graphicall editor]"
echo "one: yudit, tea, pluma, mousepad, gedit"
echo "auto favorite graphicall editor: $favorite_graphicall_editor"
echo "$tab [the iptables]"
echo "iptables legacy:   $which_iptables_legacy"
echo "iptables nft:      $which_iptables_nft"
echo "ip6tables legacy:  $which_ip6tables_legacy"
echo "ip6tables nft:     $which_ip6tables_nft"
echo "arptables:         $which_arptables"
echo "ebtables:          $which_ebtables"
echo "$tab [the iptables save]"
echo "iptables legacy save:  $which_iptables_legacy_save"
echo "iptables nft save:     $which_iptables_nft_save"
echo "ip6tables legacy save: $which_ip6tables_legacy_save"
echo "ip6tables nft save:    $which_ip6tables_nft_save"
echo "$tab [$fiptables tool]"
echo "uname:      $which_uname"
echo "ip:         $which_ip"
echo "route:      $which_route"
echo "ss:         $which_ss"
echo "netstat:    $which_netstat"
echo "lsof:       $which_lsof"
echo "sysctl:     $which_sysctl"
echo "tcpdump:    $which_tcpdump"
echo "arp:        $which_arp"
echo "ping:       $which_ping"
echo "traceroute: $which_traceroute"
echo "host:       $which_host"
echo "geoip:      $which_geoiplookup"
exit; fi
####
####
##############################       english: mini-wizard: mini-wizard to connect like simple client
##############################       spanish: mini-wizard: mini-asistente to connect like simple client
####
####
if [ "$first_option" = "mini-wizard" ]; then echo -n
cp $defaultminicfg_eng $directory_config/miniwizard.cfg
$favorite_text_editor $directory_config/miniwizard.cfg
$fiptables custom miniwizard.cfg
$fiptables list
exit; fi
####
####
##############################       english: full-wizard: full-wizard to connect like simple client
##############################       spanish: full-wizard: asistente to connect like simple client
if [ "$first_option" = "full-wizard" ]; then echo -n
cp $defaultfullcfg_eng $directory_config/fullwizard.cfg
$favorite_text_editor $directory_config/fullwizard.cfg
$fiptables custom fullwizard.cfg
$fiptables list
exit; fi
####
####
##############################       english: gui: Manage list rules with one menu graphicall
##############################       spanish: gui: Maneja lista de reglas con un menu graphicall
####
####
if [ "$first_option" = "gui" ]; then echo -n
case "$which_zenity" in
"$NULL")
echo " Install zenity to work"
exit
;;
else)
;;
esac
#### principal gui      ####
titulo="$fiptables gui"
untexto="$fiptables gui"
#### cd $directory_config
menugtk=$(zenity --forms --title="$titulo" --width=320 --height=240 --text="$($fiptables list-help)" --add-entry="$fiptables" )
case $? in
1)
zenity --info --ellipsize --text="fwiptables good bye"
exit
;;
esac
####
####
#### english: manage some configs    ####
#### spanish: maneja algunas configs ####
####
case $menugtk in
####
####
#### english: new-full-config and nueva-completa-config whithout parameters ####
#### spanish: new-full-config and nueva-completa-config sin parametros      ####
####
"new-full-config")
zenity --info --ellipsize --text="$cinco Use: $fiptables new-full-config config.cfg"
;;
"new-mini-config")
zenity --info --ellipsize --text="$cinco Use: $fiptables new-mini-config config.cfg"
;;
"nueva-completa-config")
zenity --info --ellipsize --text="$cinco Use: $fiptables nueva-completa-config config.cfg"
;;
"new-mini-config")
zenity --info --ellipsize --text="$cinco Use: $fiptables nueva-mini-config config.cfg"
;;
"modify-config")
zenity --info --ellipsize --text="$cinco Use: $fiptables modify-config config.cfg"
;;
####
####
#### english: new-full-config and nueva-completa-config whithout parameters and with one space  ####
#### spanish: new-full-config and nueva-completa-config sin parametros y con un espacio         ####
####
"new-full-config ")
zenity --info --ellipsize --text="$cinco Use: $fiptables new-full-config config.cfg"
;;
"new-mini-config ")
zenity --info --ellipsize --text="$cinco Use: $fiptables new-mini-config config.cfg"
;;
"nueva-completa-config ")
zenity --info --ellipsize --text="$cinco Use: $fiptables nueva-completa-config config.cfg"
;;
"new-mini-config ")
zenity --info --ellipsize --text="$cinco Use: $fiptables nueva-mini-config config.cfg"
;;
"modify-config ")
zenity --info --ellipsize --text="$cinco Use: $fiptables modify-config config.cfg"
;;
####
####
#### english: several options con parametros
#### spanish: varias opciones con parametros
####
new-full-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
cp $defaultfullcfg_eng $directory_config/$unarchivo
$favorite_graphicall_editor $directory_config/$unarchivo
;;
nueva-completa-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
cp $defaultfullcfg_esp $directory_config/$unarchivo
$favorite_graphicall_editor $directory_config/$unarchivo
;;
new-mini-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
cp $defaultminicfg_eng $directory_config/$unarchivo
$favorite_graphicall_editor $directory_config/$unarchivo
;;
nueva-mini-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
cp $defaultminicfg_esp $directory_config/$unarchivo
$favorite_graphicall_editor $directory_config/$unarchivo
;;
modify-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$favorite_graphicall_editor "$directory_config/$unarchivo"
;;
full-wizard*)
cp $defaultfullcfg_esp $directory_config/fullwizard.cfg
$favorite_graphicall_editor "$directory_config/fullwizard.cfg"
zenity --info --ellipsize --text="ok $(fwiptables custom fullwizard.cfg)"
;;
mini-wizard*)
cp $defaultminicfg_esp $directory_config/miniwizard.cfg
$favorite_graphicall_editor "$directory_config/miniwizard.cfg"
zenity --info --ellipsize --text="ok $(fwiptables custom miniwizard.cfg)"
;;
####
####
#### english: all other otpions    ####
#### spanish: las demas opciones   ####
####
*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
esac
zenity --info --ellipsize --text="press [ok] to continue with the $fiptables gui"
$fiptables gui
exit ; fi
####
####
##############################       english: cli: Manage list rules with one text menu
##############################       spanish: cli: Maneja lista de reglas con un menu de texto
####
####
if [ "$first_option" = "cli" ]; then echo -n
case "$which_dialog" in
"$NULL")
echo " Install dialog to work"
exit
;;
else)
;;
esac
#### cd "$directory_config"
menuprincipal="$(dialog --stdout --title "[$fprogram] [version $fversion]" --menu "Select:" 0 0 0\
  000 "$cinco $tab [$fiptables cli] $tab $cinco" \
  010 "$cinco [Guide to begin] $cinco" \
  11  "system-info" \
  12  "net-info" \
  13  "mini-wizard" \
  14  "full-wizard" \
  15  "cli" \
  16  "gui" \
  020 "$cinco [Launch rules iptables] $cinco" \
  21  "eraserules" \
  22  "offline" \
  23  "allpermisive" \
  24  "custom -> is silent" \
  25  "[config.cfg] -> is verbose" \
  030 "$cinco [List rules alphabetical] $cinco" \
  31  "list" \
  32  "forward" \
  33  "list6"  \
  34  "forward6" \
  35  "nat-ip4" \
  36  "nat-ip6" \
  040 "$cinco [List rules numerical] $cinco" \
  41  "listnum" \
  42  "forwardnum" \
  43  "listnum6" \
  44  "forwardnum6" \
  050 "$cinco [Modify config cfg] $cinco" \
  51  "new-full-config" \
  52  "nueva-completa-config" \
  53  "new-mini-config" \
  54  "nueva-mini-config" \
  55  "show-config" \
  56  "modify-config" \
  57  "del-config" \
  060 "$cinco [List net sockets] $cinco" \
  61  "route" \
  62  "ss" \
  63  "netstat" \
  64  "lsof" \
  65  "ipforwading" \
  66  "tcpdump" \
  67  "arp" \
  070 "$cinco [List other tables] $cinco"  \
  71  "raw-ip4" \
  72  "raw-ip6" \
  73  "mangle-ip4" \
  74  "mangle-ip6" \
  75  "security-ip4" \
  76  "security-ip6" \
  77  "ebtables" \
  78  "arptables" \
  080 "$cinco [Recover fw firewall] $cinco" \
  81  "fw-list"  \
  82  "fw-save"  \
  83  "fw-restore"  \
  84  "fw-show-actual" \
  090 "$cinco [Tool icmp test] $cinco" \
  91   "ping-ip4" \
  92   "ping-ip6" \
  0100 "$cinco [Tool tcp test] $cinco"  \
  101  "trace-ip4" \
  102  "trace-ip6" \
  103  "host" \
  104  "resolveip" \
  106  "ntpdate" \
  105  "geoip" \
  0110 "$cinco [Auth sudo operations] $cinco"  \
  111  "auth-sudo" \
  112  "remove-sudo" \
  113  "list-sudo" \
  0120 "$cinco [Show etc configurations]$cinco" \
  121  "hosts" \
  122  "protocols" \
  123  "services" \
  124  "hosts.allow" \
  125  "hosts.deny" \
  0130 "$cinco [Show log registry] $cinco" \
  131  "log-sudo" \
  132  "log-sshd" \
  133  "log-logserver" \
  134  "log-search" \
  0140 "$cinco [Versions from fwiptables] $cinco" \
  141  "install" \
  142  "version" \
  143  "upgrade" \
  144  "dev-versions" \
  145  "all-versions" \
  0150 "$cinco [About global options] $cinco" \
  151  "about" \
  152  "depends" \
  153  "examples" \
  0160 "$cinco [Help global options] $cinco" \
  161  "configurations" \
  162  "configuraciones" \
  163  "list-help" \
  164  "help" \
  165  "ayuda" \
 )"

case "$menuprincipal" in
0*)
 clear
 dialog --msgbox "Program Menu" 0 0
 clear
 $fiptables cli
 ;;
 11)
 clear
 $fiptables system-info
 ;;
 12)
 clear
 $fiptables net-info
 ;;
 13)
 clear
 $fiptables mini-wizard
 ;;
 14)
 clear
 $fiptables full-wizard
 ;;
 15)
 clear
 $fiptables cli
 ;;
 16)
 clear
 $fiptables gui
 ;;
 21)
 clear
 $fiptables eraserules
 ;;
 22)
 clear
 $fiptables offline
 ;;
 23)
 clear
 $fiptables allpermisive
 ;;
 24)
 clear
 archivo="$(dialog --title "custom" --stdout --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables custom $archivo
 ;;
 25)
 clear
 archivo="$(dialog --title "custom" --stdout --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables $archivo
 ;;
 31)
 clear
 $fiptables list
 ;;
 32)
 clear
 $fiptables forward
 ;;
 33)
 clear
 $fiptables list6
 ;;
 34)
 clear
 $fiptables forward6
 ;;
 35)
 clear
 $fiptables nat-ip4
 ;;
 36)
 clear
 $fiptables nat-ip6
 ;;
 41)
 clear
 $fiptables listnum
 ;;
 42)
 clear
 $fiptables forwardnum
 ;;
 43)
 clear
 $fiptables listnum6
 ;;
 44)
 clear
 $fiptables forwardnum6
 ;;
 51)
 clear
 archivo="$(dialog --stdout --title "new-full-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables new-full-config $archivo
 ;;
 52)
 clear
 archivo="$(dialog --stdout --title "nueva-completa-config example: archivo.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables nueva-completa-config $archivo
 ;;
 53)
 clear
 archivo="$(dialog --stdout --title "new-mini-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables new-mini-config $archivo
 ;;
 54)
 clear
 archivo="$(dialog --stdout --title "nueva-mini-config example: archivo.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables nueva-mini-config $archivo
 ;;
 55)
 clear
 archivo="$(dialog --stdout --title "show-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables show-config $archivo
 echo "$cinco Launch: $fiptables custom $archivo"
 ;;
 56)
 archivo="$(dialog --stdout --title "modify-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables modify-config $archivo
 ;;
 57)
 echo
 archivo="$(dialog --stdout --title "del-config" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables del-config $archivo
 echo "deleted $archivo"
 ;;
 61)
 clear
 $fiptables route
 ;;
 62)
 clear
 $fiptables ss
 ;;
 63)
 clear
 $fiptables netstat
 ;;
 64)
 clear
 $fiptables lsof
 ;;
 65)
 clear
 $fiptables ipforwading
 ;;
 66)
 clear
 $fiptables tcpdump
 echo; echo; echo;
 ;;
 67)
 clear
 $fiptables arp -a
 echo; echo; echo;
 ;;
 71)
 clear
 $fiptables raw-ip4
 echo; echo; echo;
 ;;
 72)
 clear
 $fiptables raw-ip6
 echo; echo; echo;
 ;;
 73)
 clear
 $fiptables mangle-ip4
 echo; echo; echo;
 ;;
 74)
 clear
 $fiptables mangle-ip6
 echo; echo; echo;
 ;;
 75)
 clear
 $fiptables security-ip4
 echo; echo; echo;
 ;;
 76)
 clear
 $fiptables security-ip6
 echo; echo; echo;
 ;;
 77)
 clear
 $fiptables ebtables
 echo; echo; echo;
 ;;
 78)
 clear
 $fiptables arptables
 echo; echo; echo;
 ;;
 81)
clear
 $fiptables fw-list
 ;;
 82)
 clear
 archivo="$(dialog --stdout --title "save the firewall format standar" --inputbox "New name" 0 0)"
 clear
 echo "$cincuenta saved $archivo"
 $fiptables fw-save $archivo
 ;;
 83)
 clear
 $fiptables fw-restore
 ;;
 84)
 clear
 $fiptables fw-show-actual
 ;;
 91)
 clear
 resolve="$(dialog --stdout --title "type host to ping" --inputbox "example: fast.com" 0 0)"
 clear
 $fiptables ping-ip4 $resolve
 ;;
 92)
 clear
 resolve="$(dialog --stdout --title "type host to ping ipv6" --inputbox "example: fast.com" 0 0)"
 clear
 $fiptables ping-ip6 $resolve
 ;;
 101)
 clear
 resolve="$(dialog --stdout --title "type host to traceroute" --inputbox "example: fast.com" 0 0)"
 clear
 $fiptables trace-ip4 $resolve
 ;;
 102)
 clear
 resolve="$(dialog --stdout --title "type host to traceroute ipv6" --inputbox "example: fast.com" 0 0)"
 clear
 $fiptables trace-ip6 $resolve
 ;;
 103)
 clear
 resolve="$(dialog --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
 clear
 $fiptables host $resolve
 ;;
 104)
 clear
 resolve="$(dialog --stdout --title "type host  or ip to resolve" --inputbox "example: fast.com" 0 0)"
 clear
 $fiptables resolveip $resolve
 ;;
 105)
 clear
 resolve="$(dialog --stdout --title "type host or ip to resolve" --inputbox "example: fast.com" 0 0)"
 clear
 $fiptables geoip $resolve
 ;;
 106)
 clear
 $fiptables ntpdate
 ;;
 111)
 clear
 resolve="$(dialog --stdout --title "type username to auth sudo" --inputbox "example: user1,user2,user3" 0 0)"
 clear
 $fiptables auth-sudo $resolve
 ;;
 112)
 clear
 $fiptables remove-sudo
 ;;
 113)
 clear
 $fiptables list-sudo
 ;;
 121)
 clear
 $fiptables "hosts" | less
 ;;
 122)
 clear
 $fiptables "protocols" | less
 ;;
 123)
 clear
 $fiptables "services" | less
 ;;
 124)
 clear
 $fiptables "hosts.allow" | less
 ;;
 125)
 clear
 $fiptables "hosts.deny" | less
 ;;
 131)
 clear
 $fiptables "log-sudo" | less
 ;;
 132)
 clear
 $fiptables "log-sshd" | less
 ;;
 133)
 clear
 $fiptables "log-server" | less
 ;;
 134)
 clear
 pattern="$(dialog --stdout --title "type the pattern to search" --inputbox "example: sshd" 0 0)"
 clear
 $fiptables "log-search" "$pattern" | less
 ;;
 141)
 clear
 $zero_option install
 ;;
 142)
 clear
 $fiptables version
 ;;
 143)
 clear
 $fiptables upgrade
 ;;
 144)
 clear
 $fiptables dev-versions
 ;;
 145)
 clear
 $fiptables "all-versions" | less
 ;;
 151)
 clear
 $fiptables about
 ;;
 152)
 clear
 $fiptables "depends" | less
 ;;
 153)
 clear
 $fiptables examples
 ;;
 161)
 clear
 $fiptables "configurations" | less
 ;;
 162)
 clear
 $fiptables "configuraciones" | less
 ;;
 163)
 clear
 $fiptables list-help
 ;;
 164)
 clear
 $fiptables "help" | less
 ;;
 165)
 clear
 $fiptables "ayuda" | less
 ;;
*)
 clear
 dialog --msgbox "fwiptables good bye" 0 0
 clear
 exit 
 ;;
 esac
 echo "press [enter] to continue with the $fiptables cli"
 read -s
 $fiptables cli
 exit; fi
####
####
##############################       english: version: system script, the version option
##############################       spanish: version: script de sistema, la opcion mostrar version
####
####
if [ "$first_option" = "version" ]; then echo -n
echo
echo "$tab [Name program]"
echo "$fprogram"
echo
echo "$tab [Description program]"
echo "$fdescription"
echo
echo "$tab [Exec program]"
echo "$directory_fiptables/$fiptables"
echo
echo "$tab [Config directory]"
echo "$directory_config"
echo
echo "$tab [Firewall export directory]"
echo "$directory_fwrecover"
echo
echo "$tab [Version program]"
echo "$fversion"
exit ; fi
####
####
##############################       english: examples: system script to show config files examples
##############################       spanish: examples: script de sistema para mostrar ejemplos de configuraciones
####
####
if [ "$first_option" = "examples" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
####
####
#### config: web example ####
####
####
echo
echo "# config web example #" 
echo "server_tcp=http,https ;"
echo "client_tcp=http,https ;"
echo "client_udp=domain,ntp,bootpc ;"
echo "allow_ping_send=no ;"
echo "allow_pring_recive=no ;"
echo "only_output= ; "
echo "input_state='-m state --state new,related,established' ; " 
####
####
#### config:  games example  ####
####
####
echo
echo "# config games example #"
echo "client_udp=domain,bootpc,ntp,https,1025:65499; "
echo "client_tcp=http,https" 
echo "allow_ping_send= ; allow_ping_recive= ; "
echo "only_output= ; "
echo "input_state='-m state --state new,related,established' ; "
####
####
#### config:  torrent-example1.cfg ####
####
####
echo
echo "# config torrent example #" 
echo "client_udp=domain,bootpc,ntp,https,1025:65499; "
echo "client_tcp=http,https"
echo "allow_ping_send=no ;  allow_ping_recive=no ; "
echo "only_output= ; "
echo "input_state='-m state --state new,related,established' ; "
####
####
#### config: samba-example1.cfg ####
####
####
echo
echo "# config samba example #" 
echo "client_udp=domain,bootpc,ntp,https,137:139 ; "
echo "client_tcp=http,https,ipp,microsoft-ds" 
echo "server_udp=137:139 ; "
echo "server_tcp=ssh,ipp,microsoft-ds" 
echo "allow_ping_send= ; allow_ping_recive= ; " 
echo "only_output= ; " 
echo "input_state='-m state --state new,related,established' ; "
####
####
#### config: vpn-sample1.cfg ##
####
####
echo
echo "# config vpn example #"
echo "allow_forwading= ; "
echo "allow_vpn= ; " 
echo "vpn=wesnoth.org,sourceforge.net" 
echo "allow_ping_send= ; allow_ping_recive= ; "  
echo "only_output= ; " 
echo "input_state='-m state --state new,related,established' ; "
####
####
#### config: email-example1.cfg ####
####
####
echo
echo "# config email example #" 
echo "client_tcp=http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps" 
echo "server_tcp=ssh,http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps" 
echo "allow_ping_send= ; " 
echo "allow_ping_recive= " 
echo "only_output= ; " 
echo "input_state='-m state --state new,related,established' ; " 
####
####
#### config: ssh-example1.cfg ####
####
####
echo
echo "# config ssh example #" 
echo "client_tcp=http,https,printer,ipp,ssh,rsync,git" 
echo "server_tcp=http,https,printer,ipp,ssh,rsync,git" 
echo "allow_ping_send= ; " 
echo "allow_ping_recive= ;" 
echo "only_output= ; " 
echo "input_state='-m state --state new,related,established' ; " 
####
####
#### config: vnc-example1.cfg ####
####
####
echo
echo "# config vnc example #" 
echo "client_tcp=http,https,ssh,5900:5910" 
echo "server_tcp=ssh,http,https,5900:5910" 
echo "allow_ping_send= ; allow_ping_recive= ; "  
echo "only_output= ; " 
echo "input_state='-m state --state new,related,established' ; "
####
####
#### config: ftp-example1.cfg ##
####
####
echo
echo "# config ftp example #" 
echo "client_tcp=http,https,ftp,ftp-data,ftps,gsiftp,zope-ftp" 
echo "server_tcp=ssh,http,https,ftp,ftp-data,ftps,gsiftp,zope-ftp" 
echo "client_udp=domain,bootpc,ntp,https,tftp"
echo "server_udp=tftp"
echo "allow_ping_send= ; allow_ping_recive= ;" 
echo "only_output= ; " 
echo "input_state='-m state --state new,related,established' ; " 
####
####
#### config: printer-example1.cfg ####
####
####
echo
echo "# config printer example #"
echo "client_tcp=http,https,ipp,printer" 
echo "server_tcp=ssh,http,https,ipp,printer" 
echo "allow_ping_send= ; allow_ping_recive= ; "  
echo "only_output= ; " 
echo "input_state='-m state --state new,related,established' ; "
####
####
#### config: irc-example1.cfg ####
####
####
echo
echo "# config irc example #" 
echo "client_tcp=http,https,ircd,ircs-u"
echo "server_tcp=ssh,http,https,ircd,ircs-u" 
echo "allow_ping_send=no ; allow_ping_recive=no ; " 
echo "only_output= ; "
echo "input_state='-m state --state new,related,established' ; "
####
####
#### config: sql-example1.cfg ####
####
####
echo
echo "# config sql example #" 
echo "client_tcp=http,https,mysql,postgresql,mysql-proxy,ms-sql-s" 
echo "server_tcp=ssh,http,https,mysql,postgresql,mysql-proxy,ms-sql-s" 
echo "allow_ping_send= ; allow_ping_recive= ; " 
echo "only_output= ; "
echo "input_state='-m state --state new,related,established' ; " 
####
####
exit ; fi
####
####
##############################       english: web-upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: web-upgrade: actualiza en el archivo /usr/bin/fwiptables
####
####
if [ "$first_option" = "web-upgrade" ]; then echo -n
echo "$head_option"
echo "$cincuenta [Web upgrade] $cinco"
echo "Upgrade The $fiptables in file $directory_fiptables/$fiptables with $favorite_text_browser command"
echo "Downloading $fiptables with the comand $favorite_text_browser browser"
echo "Waiting several seconds ..."
$favorite_text_browser -dump $fweb_newfiles  | grep -i fwiptables | grep -i download | head -1
$favorite_text_browser -source "$fweb_latest" > "/tmp/$fiptables" 
chmod ugo+rx /tmp/$fiptables
/tmp/$fiptables install
echo "$cinco [$fprogram] is upgraded: ok"
echo "$cinco   upgraded: $directory_fiptables/$fiptables"
exit ; fi
####
####
##############################       english: upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: upgrade: actualiza en el archivo /usr/bin/fwiptables
####
####
if [ "$first_option" = "upgrade" ]; then  echo -n
echo "$head_option"
echo "$subhead_option"
echo "The actually version is: $fiptables $fversion actually" 
echo "  The latest version is:"
$favorite_text_browser -dump $fweb_newfiles  | grep -i fwiptables | grep -i download | head -1
echo "$cinco"
echo "Upgrade The fwiptables in file $directory_fiptables/$fiptables with $favorite_text_browser"
echo "$cinco    download manually   || or launch ||   $fiptables web-upgrade"
echo "$favorite_text_browser -source $fweb_latest > $directory_fiptables/$fiptables"
echo "chmod ugo+x $directory_fiptables/$fiptables"
echo "$cinco ok and it will be upgrade with the name $directory_fiptables/$fiptables"
exit;  fi
####
####
#############################       english: eraserules: system script, the erase rules option
#############################       spanish: eraserules: script de sistema, la opcion borra reglas
####
####
if [ "$first_option" = "eraserules" ]; then echo -n ;
echo "[$fprogram] [version $ver]"
echo "$subhead_option"
$which_iptables_nft -t filter -F
$which_ip6tables_nft -t filter  -F
$which_iptables_legacy -t filter -F
$which_ip6tables_legacy -t filter -F ;
$which_iptables_nft -t nat -F
$which_ip6tables_nft -t nat  -F
$which_iptables_legacy -t nat -F
$which_ip6tables_legacy -t nat -F ;
echo "$cinco  OK ERASED all rules from [ipv4 and ipv6] for iptables [filter and nat] with [neftables and xtables]"
echo "$cinco  The iptables configured for delete rules to internet $cinco"
echo "$cinco  launch $fiptables list  # to list iptables rules"
exit; fi
####
####
#############################       english: route: system script, the route option
#############################       spanish: route: script de sistema, la opcion route
####
####
#### comments: sed is necesary to full work in graphicall
####
if [ "$first_option" = "route" ]; then   echo  -n
echo "$head_option"
echo "$subhead_option"
## $which_uname -srom
echo "$tab [ip address]"
case $which_ip in
$NULL)
echo "Without ip command"
;;
*)
echo "$($which_ip address | sed 's/,/_/g' | sed 's/</_/g' | sed 's/>/_/g'| grep -iv valid_lft )"
;;
esac
echo "$tab [ip route]"
case $($which_ip route) in
$NULL)
echo "$tab [Without route ip]"
;;
*)
echo "$($which_ip route | sed 's/,/_/g' | sed 's/</_/g' | sed 's/>/_/g' )"
;;
esac
echo "$tab [ip tunnel]"
case $($which_ip tunnel) in
$NULL)
echo "$tab [Without tunnel ip]"
;;
*)
echo "$($which_ip tunnel | sed 's/,/_/g' | sed 's/</_/g' | sed 's/>/_/g' )"
;;
esac
exit; fi
####
####
#############################       english: ss: system script, the sockets option
#############################       spanish: ss: script de sistema, la opcion sockets
####
####
if [ "$first_option" = "ss" ]; then echo -n ;
case $which_ss in
"$NULL")
echo "$tab [Install ss command]"
;;
*)
echo "$head_option";
echo "$subhead_option"
## $which_uname -srom
echo "$tab [The ipv6 sockets]"
$which_ss -a6
echo "$tab [The ipv4 sockets]"
$which ss -a4
;;
esac
exit; fi
####
####
#############################       english: lsof: system script, the lsof option
#############################       spanish: lsof: script de sistema, la lsof sockets
####
####
if [ "$first_option" = "lsof" ]; then echo -n ;
case $which_lsof in
"$NULL")
echo "$tab [Install lsof]"
;;
*)
echo "[$fprogram] version $fversion firewall linux ";
echo "$subhead_option"
## $which_uname -srom
echo "$tab [The sockets with lsof]"
$which_lsof -i
;;
esac
exit; fi
####
####
#############################      english: netstat: system script, the netstat sockets
#############################      spanish: netstat: script de sistema, el netstat  sockets
####
####
if [ "$first_option" = "netstat" ]; then echo -n ;
case $which_netstat in
"$NULL")
echo "$tab [Install netstat]"
;;
*)
echo "$head_option"
echo "$subhead_option"
## $which_uname -srom
echo "$tab [The devices list with netstat]"
$which_netstat -i
echo "$tab [The route table with  netstat]"
$which_netstat -r
echo "$tab [The sockets list with netstat]"
$which_netstat -a -4 -6
;;
esac
exit; fi
####
####
#############################       english: list: system script, the list option
#############################       spanish: list: script de sistema, la opcion lista
####
####
 if [ "$first_option" = "list" ]; then echo -n ;
 legacycuatro=$("$which_iptables_legacy" -t filter -L OUTPUT 1) &> /dev/null
 nftcuatro=$("$which_iptables_nft" -t filter -L OUTPUT 1) &> /dev/null
 echo "$head_option"
 echo "$subhead_option"
 case $legacycuatro in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules xtables ipv4][iptables-legacy]  "
 $which_iptables_legacy -v -L INPUT
 $which_iptables_legacy -v -L OUTPUT 
 ;;
 esac
 case $nftcuatro in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules neftables ipv4][iptables-nft]  "
 $which_iptables_nft -v -L INPUT
 $which_iptables_nft -v -L OUTPUT
 ;;
 esac
 exit; fi
####
####
############################       english: forward: system script, the forward option to list iptables filter forward rules
############################       spanish: forward: script de sistema, la opcion forward para listar reglas de iptables filter forward
####
####
 if [ "$first_option" = "forward" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv4]"
 $which_iptables_legacy -v -L FORWARD
 echo "$tab  [The netftables ipv4] "
 $which_iptables_nft -v -L FORWARD
 exit; fi
####
####
############################       english: list6: system script, the list6 option to list ipv6 rules
############################       spanish: list6: script de sistema, la opcion list6 para listar reglas de ipv6
####
####
 if [ "$first_option" = "list6" ]; then echo -n
legacyseis=$("$which_ip6tables_legacy" -t filter -L OUTPUT 1)
nftseis=$("$which_ip6tables_nft" -t filter -L OUTPUT 1)
 echo "$head_option"
echo "$subhead_option"
 case $legacyseis in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules xtables ipv6][iptables-legacy]  "
 $which_ip6tables_legacy -v -L INPUT
 $which_ip6tables_legacy -v -L OUTPUT
 ;;
 esac
 case $nftseis in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules neftables ipv6][iptables-nft]  "
 $which_ip6tables_nft -v -L INPUT
 $which_ip6tables_nft -v -L OUTPUT
 ;;
 esac
 exit; fi
####
####
############################       english: forward6: system script, the forward6 option to list iptables filter forward rules
############################       spanish: forward6: script de sistema, la opcion forward6 para listar reglas de iptables filter forward
####
####
 if [ "$first_option" = "forward6" ]; then echo -n
 echo "$head_option" ;
echo "$subhead_option"
 echo "$tab [The xtables ipv6][iptables-legacy]"
 $which_ip6tables_legacy -v -L FORWARD
 echo "$tab  [The netftables ipv6][iptables-nft] "
 $which_ip6tables_nft -v -L FORWARD
 exit; fi
####
####
############################       english: nat-ip4: system script, the nat-ip4 option to list NAT rules of ipv4
############################       spanish: nat-ip4: script de sistema, la opcion nat-ip4 para listar reglas de NAT de ipv4
####
####
 if [ "$first_option" = "nat-ip4" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv4][iptables-legacy]"
 $which_iptables_legacy -t nat -v -L
 echo "$tab  [The neftables ipv4][iptables-nft]"
 $which_iptables_nft -t nat -v -L
 exit; fi
####
####
############################       english: nat-ip6: system script, the nat-ip6 option to list NAT rules of ipv6
############################       spanish: nat-ip6: script de sistema, la opcion nat-ip6 para listar reglas de NAT de ipv6
####
####
 if [ "$first_option" = "nat-ip6" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv6][iptables-legacy]"
 $which_ip6tables_legacy -t nat -v -L
 echo "$tab  [The neftables ipv6][iptables-nft]"
 $which_ip6tables_nft -t nat -v -L
 exit; fi
####
####
#############################       english: listnum: system script, the list option numerical
#############################       spanish: listnum: script de sistema, la opcion lista numeral
####
####
if [ "$first_option" = "listnum" ]; then echo -n ;
legacycuatro=$("$which_iptables_legacy" -t filter -L OUTPUT 1)
nftcuatro=$("$which_iptables_nft" -t filter -L OUTPUT 1)
 echo "$head_option"
echo "$subhead_option"
 case $legacycuatro in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules xtables ipv4][iptables-legacy]"
 $which_iptables_legacy -v -n -L INPUT
 $which_iptables_legacy -v -n -L OUTPUT
 ;;
 esac
 case $nftcuatro in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules neftables ipv4][iptables-nft]"
 $which_iptables_nft -v -n -L INPUT
 $which_iptables_nft -v -n -L OUTPUT ;;
 esac
exit; fi
####
####
############################       english: forwardnum: system script, the forward option to list iptables filter forward rules
############################       spanish: forwardnum: script de sistema, la opcion forward para listar reglas de iptables filter forward
####
####
 if [ "$first_option" = "forwardnum" ]; then echo -n
 echo "$head_option" 
echo "$subhead_option"
 echo "$tab  [The xtables ipv4][iptables-legacy]"
 $which_iptables_legacy -v -n -L FORWARD
 echo "$tab  [The netftables ipv4][iptables-nft]"
 $which_iptables_nft -v -n -L FORWARD
 exit; fi
####
####
############################       english: listnum6: system script, the list6 option to list ipv6 rules numeral
############################       spanish: listnum6: script de sistema, la opcion list6 para listar reglas de ipv6 numeral
####
####
 if [ "$first_option" = "listnum6" ]; then echo -n
legacyseis=$("$which_ip6tables_legacy" -t filter -L OUTPUT 1)
nftseis=$("$which_ip6tables_nft" -t filter -L OUTPUT 1)
 echo "$head_option" ;
echo "$subhead_option"
 case $legacyseis in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules xtables ipv6][iptables-legacy]"
 $which_ip6tables_legacy -v -n -L INPUT
 $which_ip6tables_legacy -v -n -L OUTPUT
 echo -n;;
 esac
 case $nftseis in
 "$NULL")
 ;;
 *)
 echo "$tab  [With rules neftables ipv6][iptables-nft]"
 $which_ip6tables_nft -v -n -L INPUT
 $which_ip6tables_nft -v -n -L OUTPUT
 ;;
 esac
 exit; fi
####
####
############################       english: forwardnum6: system script, the forward6 option to list iptables filter forward rules
############################       spanish: forwardnum6: script de sistema, la opcion forward6 para listar reglas de iptables filter forward
####
####
 if [ "$first_option" = "forwardnum6" ]; then echo -n
 echo "$head_option" ;
echo "$subhead_option"
 echo "$tab  [The xtables ipv6][iptables-legacy]"
 $which_ip6tables_legacy -v -n -L FORWARD
 echo "$tab  [The netftables ipv6][iptables-nft]"
 $which_ip6tables_nft -v -n -L FORWARD
 exit; fi
####
####
############################       english: mangle-ip4: system script, the mangle-ip4 option to list mangle rules from ipv4
############################       spanish: mangle-ip4: script de sistema, la opcion mangle-ip4 para listar reglas de mangle de ipv4
####
####
if [ "$first_option" = "mangle-ip4" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv4][iptables-legacy]"
 $which_iptables_legacy -t mangle -v -L
 echo "$tab  [The neftables ipv4][iptables-nft]"
 $which_iptables_nft -t mangle -v -L
 exit; fi
####
####
############################       english: mangle-ip6: system script, the mangle-ip6 option to list mangle rules of ipv6
############################       spanish: mangle-ip6: script de sistema, la opcion mangle-ip6 para listar reglas de mangle de ipv6
####
####
if [ "$first_option" = "mangle-ip6" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv6][iptables-legacy]"
 $which_ip6tables_legacy -t mangle -v -L
 echo "$tab  [The neftables ipv6][iptables-nft]"
 $which_ip6tables_nft -t mangle -v -L
 exit; fi
####
####
############################       english: raw-ip4: system script, the raw-ip4 option to list raw rules from ipv4
############################       spanish: raw-ip4: script de sistema, la opcion raw-ip4 para listar reglas de raw de ipv4
####
####
 if [ "$first_option" = "raw-ip4" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv4][iptables-legacy]"
 $which_iptables_legacy -t raw -v -L
 echo "$tab  [The neftables ipv4][iptables-nft]"
 $which_iptables_nft -t raw -v -L
 exit; fi
####
####
############################       english: raw-ip6: system script, the raw-ip6 option to list raw rules of ipv6
############################       spanish: raw-ip6: script de sistema, la opcion raw-ip6 para listar reglas de raw de ipv6
####
####
 if [ "$first_option" = "raw-ip6" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv6][iptables-legacy]"
 $which_ip6tables_legacy -t raw -v -L
 echo "$tab  [The neftables ipv6][iptables-nft]"
 $which_ip6tables_nft -t raw -v -L
 exit; fi
####
####
############################       english: security-ip4: system script, the security-ip4 option to list security rules from ipv4
############################       spanish: security-ip4: script de sistema, la opcion security-ip4 para listar reglas de security de ipv4
####
####
 if [ "$first_option" = "security-ip4" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv4][iptables-legacy]"
 $which_iptables_legacy -t security -v -L
 echo "$tab  [The neftables ipv4][iptables-nft]"
 $which_iptables_nft -t security -v -L
 exit; fi
####
####
############################       english: security-ip6: system script, the security-ip6 option to list security rules of ipv6
############################       spanish: security-ip6: script de sistema, la opcion security-ip6 para listar reglas de security de ipv6
####
####
 if [ "$first_option" = "security-ip6" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab  [The xtables ipv6][iptables-legacy]"
 $which_ip6tables_legacy -t security -v -L
 echo "$tab  [The neftables ipv6][iptables-nft]"
 $which_ip6tables_nft -t security -v -L
 exit; fi
####
####
############################       english: ebtables: system script, the ebtables option to list ethernet
############################       spanish: ebtables: script de sistema, la opcion ebtables to list ethernet
####
####
 if [ "$first_option" = "ebtables" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 echo "$tab filter ethernet nft"
 $which_ebtables -L -t filter
 echo "$tab nat ethernet nft"
 $which_ebtables -L -t nat
 exit; fi
####
####
############################       english: arptables: system script, the ebtables option to list arp
############################       spanish: arptables: script de sistema, la opcion ebtables to list arp
####
####
 if [ "$first_option" = "arptables" ]; then echo -n
 echo "$head_option"
echo "$subhead_option"
 $which_arptables -L
 exit; fi
####
####
############################       english: new-full-config: system script, the new-full-config option to create new configs
############################       spanish: new-full-config: script de sistema, la opcion new-full-config para cear nuevas config
####
####
if [ "$first_option" = "new-full-config" ]; then echo -n
case $second_option in
"$NULL")
config_option="si"
;;
esac
case "$config_option" in
"si")
echo "$head_option"
echo "$subhead_option"
echo "$cinco Use: $fiptables new-full-config config-new"
exit
;;
"no")
frespuestaa="$second_option"
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
cp $defaultfullcfg_eng $directory_config/$frespuestab
$favorite_text_editor "$directory_config/$frespuestab"
echo $directory_config/$frespuestab Created
;;
esac
exit ; fi
####
####
############################       english: nueva-completa-config: system script, the nueva-completa-config option to create new configs
############################       spanish: nueva-completa-config: script de sistema, la opcion nueva-completa-config para cear nuevas config
####
####
if [ "$first_option" = "nueva-completa-config" ]; then echo -n
case $second_option in
"$NULL")
config_option="si"
;;
esac
case "$config_option" in
"si")
echo "$head_option"
echo "$subhead_option"
echo "$cinco Use: $fiptables nueva-completa-config config-nueva"
exit
;;
"no")
frespuestaa="$second_option"
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
cp $defaultfullcfg_spa $directory_config/$frespuestab
$favorite_text_editor "$directory_config/$frespuestab"
echo $directory_config/$frespuestab Created
;;
esac
exit ; fi
####
####
############################       english: new-mini-config: system script, the new-mini-config option to create new configs
############################       spanish: new--mini config: script de sistema, la opcion new-mini-config para cear nuevas config
####
####
if [ "$first_option" = "new-mini-config" ]; then echo -n
case $second_option in
"$NULL")
config_option="si"
;;
esac
case "$config_option" in
"si")
echo "$head_option"
echo "$subhead_option"
echo "$cinco Use: $fiptables new-mini-config config-new"
exit
;;
"no")
frespuestaa="$second_option"
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
cp $defaultminicfg_eng $directory_config/$frespuestab
$favorite_text_editor "$directory_config/$frespuestab"
echo $directory_config/$frespuestab Created
;;
esac
exit ; fi
####
####
############################       english: nueva-mini-config: system script, the nueva-mini-config option to create new configs
############################       spanish: nueva-mini-config: script de sistema, la opcion nueva-mini-config para cear nuevas config
####
####
if [ "$first_option" = "nueva-mini-config" ]; then echo -n
case $second_option in
"$NULL")
config_option="si"
;;
esac
case "$config_option" in
"si")
echo "$head_option"
echo "$subhead_option"
echo "$cinco Use: $fiptables nueva-mini-config config-nueva"
exit
;;
"no")
frespuestaa="$second_option"
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
cp $defaultminicfg_spa $directory_config/$frespuestab
$favorite_text_editor "$directory_config/$frespuestab"
echo $directory_config/$frespuestab Created
;;
esac
exit ; fi
####
####
############################       english: modify-config: modify a one config.cfg
############################       spanish: modify-config: modify una configuracion.cfg
####
####
if [ "$first_option" = "modify-config" ]; then echo -n
case "$config_option" in
"si")
$favorite_text_editor "$directory_config/$second_option"
;;
"no")
echo "$head_option"
echo "$subhead_option"
echo "$cinco Use: $fiptables modify-config config-old"
;;
esac
exit; fi
####
####
############################       english: show-config: show a one config
############################       spanish: show-config: muestra una configuracion
####
####
if [ "$first_option" = "show-config" ]; then echo -n
case "$config_option" in
"si")
cat "$directory_config/$second_option"
;;
"no")
echo "[$fprogram]  [Version $fversion]"
echo "$subhead_option"
echo "$cinco Use: $fiptables show-config config-old"
esac
exit; fi
####
####
############################       english: del-config: delete a old config
############################       spanish: del-config: elimina una vieja configuracion
####
####
if [ "$first_option" = "del-config" ]; then echo -n
case "$config_option" in
"si")
rm "$directory_config/$second_option"
echo "$head_option"
echo "$subhead_option"
echo "$directory_config/$second_option" deleted
;;
"no")
echo "$head_option"
echo "$subhead_option"
echo "$cinco Use: $fiptables del-config config-old"
;;
esac
exit; fi
####
####
############################       english: auth-sudo: the auth-sudo option en english
############################       spanish: auth-sudo: la opcion de auth-sudo en ingles
####
####
if [ "$first_option" = "auth-sudo" ]; then echo -n
case $second_option in
"$NULL")
echo "$head_option"
echo "$subhead_option"
echo "$cinco Use: $fiptables auth-sudo user"
exit
;;
*)
autorizados="$second_option"
;;
esac
echo "$autorizados ALL=(root) NOPASSWD: $directory_fiptables/$fiptables " > /etc/sudoers.d/$fiptables
echo "alias $fiptables='sudo $fiptables'" >  /etc/bash_completion.d/$fiptables
echo "$cinco $cinco"
echo "$cinco    Ok. $autorizados will use:     $fiptables"
echo "$cinco    Ok. $fiptables will use alias with sudo "
echo "$cinco $cinco"
echo "$cinco sudoer file:   /etc/sudoers.d/$fiptables"
cat /etc/sudoers.d/$fiptables
echo "$cinco alias file:   /etc/bash_completion.d/$fiptables"
cat /etc/bash_completion.d/$fiptables
exit; fi
####
####
############################       english: remove-sudo: the remove-sudo option en english
############################       spanish: remove-sudo: la opcion de remove-sudo en ingles
####
####
if [ "$first_option" = "remove-sudo" ]; then echo -n
rm /etc/sudoers.d/$fiptables
rm /etc/bash_completion.d/$fiptables
rm /etc/bash_completion.d/$fiptables-completion
echo "$cinco deleted auth sudo"
echo "deleted /etc/sudoers.d/$fiptables"
echo "deleted /etc/bash_completion.d/$fiptables"
exit; fi
####
####
############################       english: list-sudo: the auth-sudo option en english
############################       spanish: list-sudo: la opcion de auth-sudo en ingles
####
####
if [ "$first_option" = "list-sudo" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $(find /etc/sudoers.d/$fiptables) in
/etc/sudoers.d/$fiptables)
echo "$cinco sudoer file:   /etc/sudoers.d/$fiptables"
cat /etc/sudoers.d/$fiptables
echo "$cinco alias file:   /etc/bash_completion.d/$fiptables"
cat /etc/bash_completion.d/$fiptables
;;
*)
echo "There is not auth users for $fiptables"
echo -n 
;;
esac
exit; fi
####
####
############################       english: ipforwading: the ipforwading option en english
############################       spanish: ipforwading: la opcion de reenvios  en ingles
####
####
if [ "$first_option" = "ipforwading" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
$which_uname -srom
echo "$cinco  Active 1 or deactive 0 for ipforwading with sysctl:     $cinco"
$which_sysctl -a | grep -i forwarding
exit; fi
####
####
############################       english: tcpdump: listen at dump from conexiones
############################       spanish: tcpdump: escucha al volcado de conexiones
####
####
if [ "$first_option" = "tcpdump" ]; then echo -n
case $(which tcpdump) in
"$NULL")
echo " Install tcpdump"
;;
*)
echo "$head_option"
echo "$subhead_option"
echo "  Launch manually tcpdump"
;;
esac
exit; fi
####
####
############################       english: arp: listen at dump from conexiones
############################       spanish: arp: escucha al volcado de conexiones
####
####
if [ "$first_option" = "arp" ]; then echo -n
case $which_arp in
"$NULL")
echo "install arp"
;;
*)
echo "$head_option"
echo "$subhead_option"
$which_arp -a
;;
esac
exit; fi
####
####
############################       english: fw-list: file list whith rules in iptables format
############################       spanish: fw-list: lista de archivos con reglas en formato iptables
####
####
if [ "$first_option" = "fw-list" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "File list with rules in iptables format in folder $directory_fwrecover"
ls $directory_fwrecover
exit; fi
####
####
############################       english: fw-restore: load the rules in iptables format
############################       spanish: fw-restore: carga las reglas en formato iptables
####
####
if [ "$first_option" = "fw-restore" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$cinco first erase rules with:   fwiptables eraserules"
echo "the iptables recover files are in folder $directory_fwrecover"
echo "then iptables restore with one command from above:"
echo "with ipv4 neftables (nft)  :    iptables-nft-restore"
echo "with ipv4 xtables (legacy) :    iptables-legacy-restore"
echo "with ipv6 neftables (nft)  :    ip6tables-nft-restore"
echo "with ipv6 xtables (legacy) :    ip6tables-legacy-restore"
exit; fi
####
####
############################       english: fw-save: save the rules in iptables format
############################       spanish: fw-save: guarda las reglas en formato iptables
####
####
if [ "$first_option" = "fw-save" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case "$second_option" in
"$NULL")
echo "$cinco Use in the command line: $fiptables fw-save file-to-save"
exit
;;
*)
archivofin=$(sed 's/\///g' <<< "$second_option")
;;
esac
$which_iptables_nft-save > $directory_fwrecover/$archivofin-nft-ipv4
$which_iptables_legacy-save > $directory_fwrecover/$archivofin-legacy-ipv4
$which_ip6tables_nft-save > $directory_fwrecover/$archivofin-nft-ipv6
$which_ip6tables_legacy-save > $directory_fwrecover/$archivofin-legacy-ipv6
echo "$cinco saved $archivofin $cinco"
ls -l $directory_fwrecover/* | grep -i $archivofin-
exit; fi
####
####
############################       english: fw-show-actual: show actually firewall
############################       spanish: fw-show-actual: muestra las reglas actuales
####
####
if [ "$first_option" = "fw-show-actual" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
$which_iptables_nft-save > $directory_fwrecover/show-nft-ipv4
$which_iptables_legacy-save > $directory_fwrecover/show-legacy-ipv4
$which_ip6tables_nft-save > $directory_fwrecover/show-nft-ipv6
$which_ip6tables_legacy-save > $directory_fwrecover/show-legacy-ipv6
#### echo "$cinco saved $archivofin $cinco"
#### ls -l $directory_fwrecover/* | grep -i $archivofin-
echo "$cinco show-nft-ipv4"
cat $directory_fwrecover/show-nft-ipv4
echo "$cinco show-legacy-ipv4"
cat $directory_fwrecover/show-legacy-ipv4
echo "$cinco show-nft-ipv6"
cat $directory_fwrecover/show-nft-ipv6
echo "$cinco show-legacy-ipv6"
cat $directory_fwrecover/show-legacy-ipv6
exit; fi
####
####
############################       english: ping-ip4: ping icmp with ipv4
############################       spanish: ping-ip4: ping icmp with ipv6
####
####
if [ "$first_option" = "ping-ip4" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $which_ping in
"$NULL")
echo " Install ping"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
echo "$cinco ping -4 -c 5 -A $trazador"
$which_ping -4 -c 5 -A $trazador
exit; fi
####
####
############################       english: ping-ip6: ping icmp with ipv6
############################       spanish: ping-ip6: ping icmp con ipv6
if [ "$first_option" = "ping-ip6" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $which_ping in
"$NULL")
echo " Install ping"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
echo "$cinco ping -6 -c 5 -A $trazador"
$which_ping -6 -c 5 -A $trazador
exit; fi
####
####
############################       english: trace-ip4: traceroute with tcp and ipv6
############################       spanish: trace-ip4: traceroute con tcp y ipv4
####
####
if [ "$first_option" = "trace-ip4" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $which_traceroute in
"$NULL")
echo " Install traceroute"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
echo "$cinco traceroute -4 -T $trazador"
$which_traceroute -4 -T $trazador
exit; fi
####
####
############################       english: trace-ip6: traceroute with tcp and ipv6
############################       spanish: trace-ip6: traceroute con tcp e ipv6
####
####
if [ "$first_option" = "trace-ip6" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $which_traceroute in
"$NULL")
echo " Install traceroute"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
echo "$cinco traceroute -6 -T $trazador"
$which_traceroute -6 -T $trazador
exit; fi
####
####
############################       english: host: host to resolve ip
############################       spanish: host: host to resolve ip
####
####
if [ "$first_option" = "host" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $which_host in
"$NULL")
echo " Install host"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
echo "$cinco host $trazador"
$which_host $trazador
exit; fi
####
####
############################       english: resolveip: host to resolve ip and viceversa
############################       spanish: resolveip: host to resolve ip and viceversa
####
####
if [ "$first_option" = "resolveip" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $which_resolveip in
"$NULL")
echo " Install resolveip"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
echo "$cinco resolveip $trazador"
$which_resolveip $trazador
exit; fi
####
####
############################       english: geoip: host to resolve and locate
############################       spanish: geoip: host to resolve and locate
####
####
if [ "$first_option" = "geoip" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case $which_geoiplookup in
"$NULL")
echo " Install geoip-bin"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
echo "$cinco geoiplookup -i $trazador"
$which_geoiplookup -i $trazador
exit; fi
####
####
############################       english: update: update the date and time
############################       spanish: update: actualiza la fecha y hora
####
####
if [ "$first_option" = "ntpdate" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
pool0=0.debian.pool.ntp.org
pool1=1.debian.pool.ntp.org
pool2=2.debian.pool.ntp.org
pool3=3.debian.pool.ntp.org
ntpdate $pool0 $pool1 $pool2
date
exit; fi
####
####
############################       english: log-sudo: log from sudo
############################       spanish: log-sudo: log desde sudo
####
####
if [ "$first_option" = "log-sudo" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
find /var/log -maxdepth 5 -type f | xargs zgrep -i "sudo:"
exit; fi
####
####
############################       english: log-sshd: log from ssh server
############################       spanish: log-sshd: log desde el servidor de ssh
####
####
if [ "$first_option" = "log-sshd" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
find /var/log -maxdepth 5 -type f | xargs zgrep -i "sshd"
exit; fi
####
####
############################       english: log-logserver: log from ssh server
############################       spanish: log-logserver: log desde el servidor de ssh
####
####
if [ "$first_option" = "log-logserver" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
find /var/log -maxdepth 5 -type f | xargs zgrep -i "logserver:"
exit; fi
####
####
############################       english: log-search: log from a one search
############################       spanish: log-search: log desde una busqueda
####
####
if [ "$first_option" = "log-search" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
case "$second_option" in
$NULL)
echo "$cinco use: $fiptables $first_option pattern"
;;
*)
find /var/log -maxdepth 5 -type f | xargs zgrep -i "$second_option" 
;;
esac
exit; fi
####
####
############################       english: dev-versions: about of program
############################       spanish: dev-versions: acerca del programa
####
####
if [ "$first_option" = "dev-versions" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo $fweb_development
exit; fi
####
####
############################       english: new-versions: about of program
############################       spanish: new-versions: acerca del programa
####
####
if [ "$first_option" = "new-versions" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
$favorite_text_browser -dump "$fweb_newfiles" | egrep  fwiptables | head -8 
exit; fi
####
####
############################       english: all-versions: about of program
############################       spanish: all-versions: acerca del programa
####
####
if [ "$first_option" = "all-versions" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
$favorite_text_browser -dump $fweb_tree | egrep -i "about|readme|roadmap|iptables" | grep -i master | sort | uniq -u
exit; fi
####
####
############################       english: hosts: show /etc/hosts
############################       spanish: hosts: muestra /etc/hosts
####
####
if [ "$first_option" = "hosts" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
cat /etc/hosts
echo "$cinco This file is /etc/hosts"
exit; fi
####
####
############################       english: protocols: show /etc/protocols
############################       spanish: protocols: muestra /etc/protocols
####
####
if [ "$first_option" = "protocols" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
cat /etc/protocols
echo "$cinco This file is /etc/protocols"
exit; fi
####
####
############################       english: services: show /etc/services
############################       spanish: services: muestra /etc/services
####
####
if [ "$first_option" = "services" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
cat /etc/services
echo "$cinco This file is /etc/services"
exit; fi
####
####
############################       english: host.allow: show /etc/host.allow
############################       spanish: host.allow: muestra /etc/host.allow
####
####
if [ "$first_option" = "hosts.allow" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
cat /etc/hosts.allow
echo "$cinco This file is /etc/hosts.allow"
exit; fi
####
####
############################       english: host.allow: show /etc/host.deny
############################       spanish: host.allow: muestra /etc/host.deny
####
####
if [ "$first_option" = "hosts.deny" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
cat /etc/hosts.deny
echo "$cinco This file is /etc/hosts.deny"
exit; fi
####
####
############################       english: about: about of program
############################       spanish: about: acerca del programa
####
####
if [ "$first_option" = "about" ]; then echo -n
echo ""
echo ""
echo "$tab [Fran FireWall iptables Generator]"
echo "$cincuenta"
echo ""
echo "$tab [Exec name]"
echo "  $fiptables"
echo ""
echo "$tab [Program Name]"
echo "  $fprogram"
echo ""
echo "$tab [Program Description]"
echo "  $fdescription"
echo ""
echo "$tab [Program Install]"
echo "  chmod ugo+x $fiptables"
echo "  ./$fiptables install"
echo "  [and then fwiptables is in $directory_fiptables/$fiptables"]
echo
echo "$tab [Devevelopments version program]"
echo "  The fran iptables ver in development in git code at sourceforge:"
echo ""
echo "  $fweb_development"
echo ""
echo "$tab [New versions program]"
echo "  The fran iptables version 220 and new versions up in files repository at sourceforge:"
echo ""
echo "  $fweb_newfiles"
echo ""
echo "$tab [Access web with all versions program]"
echo "  The fran iptables all versions in code repository at sourceforge:"
echo ""
echo "  $fweb_tree"
echo ""
echo "$tab [Git clone with all versions program]"
echo "  The fran iptables all versions in code repository at sourceforge:"
echo ""
echo "  git clone $fweb_git"
echo
echo "$tab [Program License]"
echo "  $flicense"
echo ""
echo "$cincuenta"
echo ""
echo ""
exit; fi
####
####
############################       english: system-info: get info system
############################       spanish: system-info: da informacion del sistema
####
####
if [ "$first_option" = "system-info" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$tab [System info:  distro] "
cat /etc/*-release | grep -i pretty_name | cut -d "=" -f 2 | sed 's/\"//g'
echo "$tab [System info:  Kernel Linux] "
$which_uname -srom
echo "$tab [System info:  Processor] "
lscpu | egrep -i "socket|Model name|cpu max"
echo "$tab [System info:  Memory RAM] "
free -h
echo "$tab [System info:  Disks] "
df -h -x tmpfs
exit; fi
####
####
############################       english: net-info: get net info
############################       spanish: net-info: da informacion de la red
####
####
if [ "$first_option" = "net-info" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo "$tab [Net Info:  route ipv4] "
$which_ip route
echo "$tab [Net info:  listen ipv4] "
$which_ss -l4 | sed 's/   / /g'
echo "$tab [Net info:  listen ipv6] "
$which_ss -l6 | sed 's/   / /g'
exit; fi
####
####
############################       english: options: several options to config in english
############################       spanish: options: varias opciones para configurar en ingles
####
####
if [ "$first_option" = "configurations" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
cat  $defaultfullcfg_eng
exit; fi
####
####
############################       english: opciones: several options to config in spanish
############################       spanish: opciones: varias opciones para configurar en spanish
####
####
if [ "$first_option" = "configuraciones" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
cat $defaultfullcfg_spa
exit; fi
####
####
############################       english: help: the help option en english
############################       spanish: help: la opcion de ayuda en ingles
####
####
if [ "$first_option" = "help" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo
echo ""
echo "$cinco         [Launch guide]"
echo
echo "  system-info: Show info system"
echo "     net-info: Show net info"
echo "  full-wizard: Asistant y launch complete firewall"
echo "  mini-wizard: Asistant y Launch simple firewall"
echo "          cli: Comand line interface with menus"
echo "          gui: Graphicall user interface"
echo ""
echo "$cinco         [Launch iptables rules]"
echo
echo "   eraserules: Remove the iptables rules in ipv4 and ipv6"
echo "      offline: Disconected for all servers and clients except localhost"
echo " allpermisive: Configure a firewall very permisive"
echo "       custom: Configure one custom firewall, made for you with file.cfg"
echo "   [file.cfg]: Configure the firewall with file.cfg and show info"
echo
echo "$cinco         [List iptables rules]"
echo
echo "               [The filter table with names]"
echo "         list: List iptables filter rules input and output ipv4"
echo "      forward: List iptables filter rules foward"
echo "        list6: List iptables filter rules input and output ipv6"
echo "     forward6: List iptables filter rules forward ipv6"
echo
echo "               [The filter table with numbers]"
echo "      listnum: List iptables filter rules input and output ipv4 in numbers"
echo "   forwardnum: List iptables filter rules foward in numbers"
echo "     listnum6: List iptables filter rules input and output ipv6 in numbers"
echo "  forwardnum6: List iptables filter rules forward ipv6 in numbers"
echo
echo "$cinco         [List the others tables]"
echo
echo "      nat-ip4: List iptables nat rules from ipv4"
echo "      nat-ip6: List iptables nat rules from ipv6"
echo "   mangle-ip4: List iptables mangle rules from ipv4"
echo "   mangle-ip6: List iptables mangle rules from ipv6"
echo "      raw-ip4: List iptables raw rules from ipv4"
echo "      raw-ip6: List iptables raw rules from ipv4"
echo " security-ip4: List iptables security rules from ipv4"
echo " security-ip6: List iptables security rules from ipv6"
echo "     ebtables: List rules ebtables nft ethernet"
echo "    arptables: List rules arptables arp"
echo
echo "$cinco         [List sockets]"
echo
echo "        route: Show net devices and ip route tables"
echo "           ss: Show net sockets with command ss"
echo "         lsof: Show net sockets with command lsof"
echo "      netstat: Show net sockets with command netstat"
echo "  ipforwading: Show kernel config about forward"
echo "      tcpdump: Listen the connections"
echo "          arp: List the last conentions arp"
echo
echo "$cinco         [tool config]"
echo
echo "       new-full-config: Create a new configfile.cfg in english"
echo " nueva-completa-config: Create a new configfile.cfg in spanish"
echo "       new-mini-config: Create a new basic configfile.cfg in english"
echo "     nueva-mini-config: Create a new basic configfile.cfg in spanish"
echo "         modify-config: Edit one config.cfg"
echo "           show-config: Show one config.cfg"
echo "            del-config: Delete one configuration file"
echo
echo "$cinco         [Tool fw]"
echo
echo "       fw-list: Show the files firewall standar"
echo "       fw-save: Save the files in firewall standar"
echo "    fw-restore: Show info to recover the files firewall standard"
echo "fw-show-actual: Show the content of the firewall standard actual"
echo
echo "$cinco         [Tool icmp]"
echo
echo "     ping-ip4: Do a one ping with to one host with ipv4 icmp"
echo "     ping-ip6: Do a one ping with to one host with ipv6 icmp"
echo
echo "$cinco         [Tool tcp]"
echo
echo "    trace-ip4: Trace route a one host with ipv4 tcp"
echo "    trace-ip6: Trace route a one host with ipv6 tcp"
echo "         host: Resolve one host"
echo "    resolveip: Resolve one host and viceversa"
echo "       geo-ip: Locate a one host or ip"
echo "      ntpdate: update the date from ntp server"
echo
echo "$cinco         [Tool sudo]"
echo
echo "    auth-sudo: Permit sudo to other choosed users"
echo "  remove-sudo: Remove sudo to other choosed users"
echo "    list-sudo: List sudo to other choosed users"
echo
echo "$cinco         [Show Version]"
echo
echo "      install: install this program actual"
echo "  install-bin: install this program actual in binary"
echo "      version: Info version program "
echo "      upgrade: Upgrade at the latest version"
echo " dev-versions: Version in development"
echo " all-versions: All versions "
echo
echo "$cinco         [Show etc]"
echo
echo "        hosts: show /etc/hosts"
echo "   protocolos: show /etc/protocols"
echo "     services: show /etc/services"
echo "  hosts.allow: show /etc/hosts.allow"
echo "   hosts.deny: show /etc/hosts.deny"
echo 
echo "$cinco         [Show log]"
echo
echo "     log-sudo: search the logs from sudo for /var/log"
echo "     log-sshd: search the logs from sshd for /var/log"
echo "log-logserver: search the logs from net packages with this firewall"
echo "   log-search: search the logs from a input pattern for /var/log"
echo 
echo "$cinco         [Show about]"
echo
echo "          about: About"
echo "        depends: Show depends"
echo "       examples: Show examples "
echo 
echo "$cinco         [Show help]"
echo
echo " configurations: config example with comments in english"
echo " configurations: config example with comments in spanish"
echo "      list-help: Show list-help"
echo "           help: Show help in english"
echo "          ayuda: Show help in spanish"
echo ""
echo "$cincuenta The second option: (optional)"
echo ""
echo "    if launch without specific the config it takes $defaultcfg"
echo "    you can  modify and create the files in the folder $directory_config"
echo ""
echo "$cincuenta Examples"
echo ""
echo " $fiptables custom server-example1.cfg     [Configure firewall custom]"
echo " $fiptables eraserules                     [Remove iptables rules]"
echo " $fiptables list                           [List iptables rules]"
echo " $fiptables help                           [Show this help in english]"
echo ""
echo "$cincuenta Examples of variables to the configs files"
echo
cat $defaultfullcfg_eng
echo
echo " $fiptables notes:"
echo
echo "$cincuenta [only_output]"
echo
echo "     With [only_output] rules is more practical the firewall"
echo
echo "$cincuenta  [vpn]"
echo
echo "     Host [vpn] excepcionals hosts has conection allowed in firewall"
echo ""
echo "$cincuenta  [blacklist]"
echo
echo "     Host [blacklist] excepcionals hosts has conection dropped in firewall"
echo ""
echo "$cincuenta  [uid and/or gid excepcional]"
echo
echo "     User and/or group excepcional have output conection allowed in firewall"
echo
echo "$cincuenta  [Two iptables netftilter]"
echo
echo "     iptables-legacy   is    support for xtables "
echo "     iptables-nft      is    support for neftables "
echo
echo "$cincuenta  [client firewall needs in udp ports]"
echo
echo "     This port is necesary to update the date  : ntp"
echo "     This port is necesary to dhcp and get ip  : bootpc"
echo "     This port is necesary to domain resolver  : domain"
echo
echo "$cincuenta  [Ipv6 needs protocols]"
echo
echo "     Necesary protocol: ipv6-icmp"
echo "     Ipv6 works too with: ipv4 procotols"
echo
echo "$cincuenta  [License]"
echo ""
echo "  Download the latest version $fprogram from sourceforge"
echo "  $fweb_latest"
echo "  $flicense"
echo
exit; fi
####
####
############################       english: ayuda: the help option in spanish
############################       spanish: ayuda: la opcion de ayuda en español
####
####
if [ "$first_option" = "ayuda" ]; then echo -n
echo "$head_option"
echo "$subhead_option"
echo
echo ""
echo "$cinco         [Lanzar guia]"
echo
echo "  system-info: Muestra la informacion del sistema"
echo "     net-info: Muestra informacion de la red"
echo "  full-wizard: Asistente y lanza completo cortafuegos"
echo "  mini-wizard: Asistente y lanza simple cortafuegos"
echo "          cli: Interfaz de linea de comandos con menus"
echo "          gui: Interfaz grafico de usuario"
echo
echo "$cinco         [Lanza reglas de iptables]"
echo
echo "   eraserules: Borra las reglas de iptables de ipv4 y de ipv6"
echo "      offline: Desconecta el cortafuegos de todo excepto localhost"
echo " allpermisive: Configura el cortafuegos muy permisivo"
echo "       custom: Configura el cortafuegos especificando un archivo.cfg"
echo "[archivo.cfg]: Configura el cortafuegos con un archivo.cfg y muestra info"
echo
echo "$cinco         [Lista las reglas de tablas de iptables]"
echo
echo "               La tabla de filtros con nombres"
echo "         list: Lista las reglas de ipv4 de filtros de entrada y salida"
echo "      forward: Lista las reglas de ipv4 de filtros de reenvio"
echo "        list6: Lista las reglas de ipv6 de filtros de entrada y salida"
echo "     forward6: Lista las reglas de ipv6 de filtros de reenvio"
echo
echo "               La tabla de filtros con numeros"
echo "      listnum: Lista las reglas de ipv4 de filtros de entrada y salida en numeros"
echo "   forwardnum: Lista las reglas de ipv4 de filtros de reenvio en numeros"
echo "     list6num: Lista las reglas de ipv6 de filtros de entrada y salida en numeros"
echo "  forward6num: Lista las reglas de ipv6 de filtros de reenvio en numeros"
echo
echo "$cinco         [Lista Las otras tablas de iptables]"
echo
echo "      nat-ip4: Lista las reglas de ipv4 de nat iptables"
echo "      nat-ip6: Lista las reglas de ipv6 de nat iptables"
echo "   mangle-ip4: Lista las reglas de ipv4 de mangle iptables"
echo "   mangle-ip6: Lista las reglas de ipv6 de mangle iptables"
echo "      raw-ip4: Lista las reglas de ipv4 de raw iptables"
echo "      raw-ip6: Lista las reglas de ipv6 de raw iptables"
echo " security-ip4: lista las reglas de ip4 de security iptables"
echo " security-ip6: Lista las reglas de ip6 de security iptables"
echo "     ebtables: Lista las reglas de nft de ethernet"
echo "    arptables: Lista las reglas de arp arptables"
echo
echo "$cinco         [Lista las conexiones abiertas]"
echo
echo "        route: Muestra los dispositivos de red y la tabla de rutas"
echo "           ss: Muestra las conexiones con comando ss"
echo "      netstat: Muestra las conexiones con comando netstat"
echo "         lsof: Muestra las conexiones con command lsof"
echo "  ipforwading: Muestra la configuracion del kernel sobre reenvios ip"
echo "      tcpdump: Escuchar las conexiones ip"
echo "          arp: Lista las ultimas conexiones arp"
echo
echo "$cinco         [Herramienta de configuraciones]"
echo
echo "       new-full-config: Crea una nueva configuracion.cfg en ingles"
echo " nueva-completa-config: Crea una nueva configuracion.cfg en español"
echo "       new-mini-config: Crea una nueva basica configuracion.cfg en ingles"
echo "     nueva-mini-config: Crea una nueva basica configuracion.cfg en español"
echo "         modify-config: Edita una existente configuracion.cfg"
echo "           show-config: Muestra una existente configuracion.cfg"
echo "            del-config: Borra unaa existente configuracion.cfg"
echo
echo "$cinco         [Herramienta de firewall en formato standard]"
echo
echo "       fw-list: Lista los archivos de firewall"
echo "       fw-save: Guarda los archivos de firewall"
echo "    fw-restore: Indica como restaurar los archivos de firewall"
echo "fw-show-actual: Muestra el firewall standard actual"
echo
echo "$cinco         [Herramienta icmp]"
echo
echo "     ping-ip4: Hace un ping a una host con ipv4 icmp"
echo "     ping-ip6: Hace un ping a una host con ipv6 icmp"
echo
echo "$cinco         [Herramienta tcp]"
echo
echo "    trace-ip4: Traza ruta a una host con ipv4 tcp"
echo "    trace-ip6: Traza ruta a una host con ipv6 tcp"
echo "         host: Resuelve la ip de un host"
echo "    resolveip: Resuelve la ip de un host y viceversa"
echo "       geo-ip: Localiza una ip o host"
echo "      ntpdate: actualiza la fecha desde un ntp server"
echo
echo "$cinco         [Herramienta de autorizacion]"
echo
echo "    auth-sudo: Permite autorizacion de usuarios elegidos"
echo "  remove-sudo: Borra la autorizacion otorgada"
echo "    list-sudo: Lista autorizacion de usuarios elegidos"
echo
echo "$cinco         [Mostrar Version]"
echo
echo "      install: instala este programa actual"
echo "  install-bin: instala este programa actual en binario"
echo "      version: Informacion de la actual version"
echo "      upgrade: Actualiza a la ultima version"
echo " dev-versions: Version en desarrollo "
echo " all-versions: Todas las versiones "
echo
echo "$cinco         [Mostrar etc]"
echo
echo "        hosts: muestra /etc/hosts"
echo "   protocolos: muestra /etc/protocols"
echo "     services: muestra /etc/services"
echo "  hosts.allow: muestra /etc/hosts.allow"
echo "   hosts.deny: muestra /etc/hosts.deny"
echo
echo "$cinco         [Mostrar log]"
echo
echo "     log-sudo: busca los logs de sudo en /var/log"
echo "     log-sshd: busca los logs de sshd en /var/log"
echo "log-logserver: busca los logs de paquetes de este firewall"
echo "   log-search: busca los logs dando un patron para /var/log"
echo 
echo "$cinco         [Mostrar acerca]"
echo
echo "          About: Acerca de "
echo "        Depends: Muestra las dependencias "
echo "       examples: Muestra ejemplos "
echo
echo "$cinco         [Mostrar ayuda]"
echo
echo " configurations: ejemplo de config con comentarios en ingles"
echo "configuraciones: ejemplo de config con comentarios en castellano"
echo "      list-help: Muestra list-help"
echo "           help: Muestra la ayuda en ingles"
echo "          ayuda: Muestra la ayuda en español"
echo
echo "$cincuenta La segunda opcion (opcional)"
echo ""
echo "    si lanzas sin especificar una config tomara por defecto $defaultcfg"
echo "    Puedes modificar y crear archivos en la carpeta $directory_config"
echo
echo "$cincuenta Ejemplos"
echo
echo "   $fiptables custom games-example1.cfg    [lanza un firewall modificado]"
echo "   $fiptables eraserules                   [Borra las reglas de iptables] "
echo "   $fiptables list                         [Lista las reglas de iptables] "
echo "   $fiptables help                         [Muestra la ayuda en ingles] "
echo
echo "$cincuenta  Ejemplos de las variables de configuración"
echo
cat $defaultfullcfg_spa
echo
echo " Notas de $fiptables :"
echo
echo "$cincuenta [only_output]"
echo
echo "     Con [only_output] las reglas del firewall son mas utiles"
echo
echo "$cincuenta  [vpn]"
echo
echo "     Host [vpn] excepcionales tienen conexion permitida en el firewall"
echo
echo "$cincuenta  [blacklist]"
echo
echo "     Host [blacklist] excepcionales tienen conexion denegada en el firewall"
echo
echo "$cincuenta  [uid y/o gid excepcional]"
echo
echo "     Usuario y/o grupo excepcional tienen conexion de salida permitida en el firewall"
echo
echo "$cincuenta  [Dos iptables netftilter]"
echo
echo "     iptables-legacy   es    soporte para xtables "
echo "     iptables-nft      es    soporte para neftables "
echo
echo "$cincuenta  [Puertos cliente udp necesarios]"
echo
echo "     necesario para actualizar la fecha :   ntp"
echo "     necesario para dhcp y conseguir ip :   bootpc"
echo "     necesario para resolver dominios   :   domain"
echo
echo "$cincuenta  [Protocolos necesarios para ipv6]"
echo
echo "     Necesario protocolo: ipv6-icmp"
echo "     Ipv6 funciona tambien con: ipv4 procolos"
echo
echo "$cincuenta  [Licencia]"
echo
echo "  Descarga la ultima version de $fprogram desde la web de sourceforge "
echo "  $fweb_latest"
echo "  $flicense"
echo
exit; fi
####
####
############################       english: default: $fiptables without options
############################	   spanish: default: $fiptables sin parametros
####
####
if  [ "$first_option" = "mini-help" ] ; then echo -n 
echo "$head_option"
echo "$subhead_option"
echo "$tab [Group commands list]"
echo " launch-guide launch-rules list-rules edit-configs list-sockets recover-fw"
echo " tool-icmp tool-tcp tool-sudo show-etc show-log show-version show-about show-help"
echo "$tab [User configs]"
echo $(ls $directory_config | egrep -iv "default|wizard|example1.cfg")
echo "$tab [Util examples]"
echo " [Create a new config myown.cfg]    $fiptables new-mini-config myown.cfg    "
echo " [Launch the config myown.cfg]      $fiptables custom myown.cfg             "
echo " [List iptables rules]              $fiptables list                         "
exit; else echo -n ; fi
####
####
############################       english: default: without other valid options
############################	   spanish: default: sin otra valida opcion
####
####
if [ "$launch_iptables" != "si" ] ; then $fiptables ; exit ; else echo -n ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####           Knowed now sure that:         launch_iptables="si"                               ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english:                               only for:                                          ###############
####  spanish:                               solo para:                                         ###############
####  english: Options for launch rules:     offline or allpermisive or custom or [config.cfg ] ###############
####  spanish: Opciones para lanzar reglas:  offline o allpermisive o custom o [config.cfg ]    ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
####
####
##############################       english: overwrite system varibles for files variables configured or defaultcfg
##############################       spanish: sobreescribe las variables por la de los archivos de configuracion o defaultcfg
####
####
if [ $first_option = "custom" ]  &&  [ -f $directory_config/$second_option ]
then source $directory_config/$second_option &> /dev/null ; 
else source $defaultcfg &> /dev/null ;  fi
####
####
if [ -f $directory_config/$first_option ]
then source $directory_config/$first_option &> /dev/null ; fi
####
####
##############################      english: output_uid or output_gid for input established status        #####################
##############################      spanish: usuario o grupo para establecidos de entrada de estado        #####################
####
####
uid_gid=no
if [ "$allow_output_uid" = "$NULL" ]; then uid_gid= ; else echo -n ; fi
if [ "$allow_output_gid" = "$NULL" ]; then uid_gid= ; else echo -n ; fi
####
####
##############################      english: compatibility with old variables, backward compatibility      #####################
##############################      spanish: compatibilidad con viejas ariables, retrocompatibilidad       #####################
#### execnft="$which_iptables_nft"
#### execlegacy="$which_iptables_legacy"
#### iptables_nft="$allow_nft"
#### iptables_legacy="$allow_legacy"
#### log_tcp=$logserver_tcp
#### log_udp=$logserver_udp
############################       english: iptables rules ipv4  iptables-legacy
############################       spanish: reglas de iptables ipv4   iptables-legacy
####
####
#### english:  Ipv4 filter legacy rules erased
#### spanish:  Borrardo de filtros ipv4
####
####
#### english: Erase nft rules ipv4
#### spanish: Borra nft reglas ipv4
$which_iptables_legacy -t filter -F
####
####
#### english: Erase legacy rules ipv6
#### spanish: Borra legacy reglas ipv6
$which_ip6tables_legacy -t filter -F
####
####
######### english:  ipv4 filter nft rules erased
######### spanish:  borrardo de filtros nft ipv4
####
####
#### english: Erase nft rules ipv4
#### spanish: Borra nft reglas ipv4
$which_iptables_nft -t filter -F
####
####
#### english: Erase nft rules ipv4
#### spanish: Borra nft reglas ipv4
$which_ip6tables_nft -t filter -F
####
####
#######################################        english: Accept localhost rules
#######################################        spanish: aceptar reglas localhost 
####
####
$allow_legacy   $which_iptables_legacy -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy   $which_iptables_legacy -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
####
$allow_legacy   $which_ip6tables_legacy -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy   $which_ip6tables_legacy -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
$allow_nft  $which_iptables_nft -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $which_iptables_nft -A OUTPUT -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
$allow_nft  $which_ip6tables_nft -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $which_ip6tables_nft -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#######################################        english: limit bandwidth
#######################################        spanish: limitar ancho de banda
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
$allow_ipv4 $allow_legacy $allow_bandwidth_input $which_iptables_legacy     -A  INPUT -m hashlimit --hashlimit-above   "$bandwidth_input"kb/sec  --hashlimit-name maxinputlegacy  -j DROP &> /dev/null
$allow_ipv4 $allow_legacy $allow_bandwidth_output $which_iptables_legacy    -A OUTPUT -m hashlimit --hashlimit-above  "$bandwidth_output"kb/sec --hashlimit-mode dstip --hashlimit-name maxoutputlegacy -j DROP &> /dev/null
$allow_ipv4 $allow_nft $allow_bandwidth_input $which_iptables_nft           -A INPUT -m hashlimit    --hashlimit-above "$bandwidth_input"kb/sec  --hashlimit-name maxinputnft  -j DROP &> /dev/null
$allow_ipv4 $allow_nft $allow_bandwidth_output $which_iptables_nft          -A OUTPUT -m hashlimit  --hashlimit-above "$bandwidth_output"kb/sec --hashlimit-mode dstip  --hashlimit-name maxoutputnft -j DROP &> /dev/null
####
####
#### english: ipv6 bandwidth
#### spanish: ipv6 ancho de banda
$allow_ipv6 $allow_legacy $allow_bandwidth_input $which_ip6tables_legacy -A  INPUT -m hashlimit --hashlimit-above "$bandwidth_input"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$allow_ipv6 $allow_legacy $allow_bandwidth_output $which_ip6tables_legacy -A OUTPUT -m hashlimit --hashlimit-above  "$bandwidth_output"kb/sec --hashlimit-name maxoutput -j DROP &> /dev/null
$allow_ipv6 $allow_nft $allow_bandwidth_input $which_ip6tables_nft -A  INPUT -m hashlimit --hashlimit-above "$bandwidth_input"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$allow_ipv6 $allow_nft $allow_bandwidth_output $which_ip6tables_nft -A OUTPUT -m hashlimit --hashlimit-above "$bandwidth_output"kb/sec --hashlimit-name maxoutput -j DROP &> /dev/null
####
####
####################################### english: Drop rules for blacklist
####################################### spanish: reglas de denegar para lista negra
####
####
for one_blacklist in $(echo $blacklist | sed 's/,/ /g') 
#### ipv4
####
do
$allow_ipv4 $allow_legacy $allow_blacklist $which_iptables_legacy  -A INPUT  -s $one_blacklist -j DROP &> /dev/null
$allow_ipv4 $allow_legacy $allow_blacklist $which_iptables_legacy  -A OUTPUT -d $one_blacklist -j DROP &> /dev/null
$allow_ipv4 $allow_nft    $allow_blacklist $which_iptables_nft     -A INPUT  -s $one_blacklist -j DROP &> /dev/null
$allow_ipv4 $allow_nft    $allow_blacklist $which_iptables_nft     -A OUTPUT -d $one_blacklist -j DROP &> /dev/null
####
####
#### ipv6
####
$allow_ipv6 $allow_legacy $allow_blacklist $which_ip6tables_legacy -A INPUT  -s $one_blacklist -j DROP &> /dev/null
$allow_ipv6 $allow_legacy $allow_blacklist $which_ip6tables_legacy -A OUTPUT -d $one_blacklist -j DROP &> /dev/null
$allow_ipv6 $allow_nft    $allow_blacklist $which_ip6tables_nft    -A INPUT  -s $one_blacklist -j DROP &> /dev/null
$allow_ipv6 $allow_nft    $allow_blacklist $which_ip6tables_nft    -A OUTPUT -d $one_blacklist -j DROP &> /dev/null
done
#### 
####
####################################### english: Accept rules for vpn
####################################### spanish: reglas de aceptar para vpn
####
####
for one_vpn in $(echo $vpn | sed 's/,/ /g') 
#### ipv4
####
do
$allow_ipv4 $allow_legacy $allow_vpn $which_iptables_legacy  -A  INPUT  -s $one_vpn -j ACCEPT &> /dev/null
$allow_ipv4 $allow_legacy $allow_vpn $which_iptables_legacy  -A  OUTPUT -d $one_vpn -j ACCEPT &> /dev/null
$allow_ipv4 $allow_nft    $allow_vpn $which_iptables_nft     -A  INPUT  -s $one_vpn -j ACCEPT &> /dev/null
$allow_ipv4 $allow_nft    $allow_vpn $which_iptables_nft     -A  OUTPUT -d $one_vpn -j ACCEPT &> /dev/null
####
####
#### ipv6
####
$allow_ipv6 $allow_legacy $allow_vpn $which_ip6tables_legacy -A  INPUT  -s $one_vpn -j ACCEPT &> /dev/null
$allow_ipv6 $allow_legacy $allow_vpn $which_ip6tables_legacy -A  OUTPUT -d $one_vpn -j ACCEPT &> /dev/null
$allow_ipv6 $allow_nft    $allow_vpn $which_ip6tables_nft    -A  INPUT  -s $one_vpn -j ACCEPT &> /dev/null
$allow_ipv6 $allow_nft    $allow_vpn $which_ip6tables_nft    -A  OUTPUT -d $one_vpn -j ACCEPT &> /dev/null
done
####
####
####################################### english: rules to allow client ports
####################################### spanish: reglas para permitir puertos cliente
####
####
#### ipv4 legacy
####
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft
####
$allow_nft $allow_ipv4     $which_iptables_nft -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4     $which_iptables_nft -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $which_iptables_nft -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $which_iptables_nft -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy
####
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
#### ipv6 nft
####
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
####################################### english: rules to log servers
####################################### spanish: reglas para logear servers
####
####
#### ipv4
####
$allow_legacy  $allow_ipv4  $which_iptables_legacy -A INPUT -p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_legacy  $allow_ipv4  $which_iptables_legacy -A INPUT -p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_legacy  $allow_ipv4  $which_iptables_legacy -A OUTPUT -p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_legacy  $allow_ipv4  $which_iptables_legacy -A OUTPUT -p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv4  $which_iptables_nft    -A INPUT -p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv4  $which_iptables_nft    -A INPUT -p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv4  $which_iptables_nft    -A OUTPUT -p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv4  $which_iptables_nft    -A OUTPUT -p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
####
####
#### ipv6
####
$allow_legacy  $allow_ipv6   $which_ip6tables_legacy -A INPUT -p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_legacy  $allow_ipv6   $which_ip6tables_legacy -A INPUT -p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_legacy  $allow_ipv6   $which_ip6tables_legacy -A OUTPUT -p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_legacy  $allow_ipv6   $which_ip6tables_legacy -A OUTPUT -p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv6   $which_ip6tables_nft    -A INPUT -p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv6   $which_ip6tables_nft    -A INPUT -p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv6   $which_ip6tables_nft    -A OUTPUT -p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$log_prefix " &> /dev/null
$allow_nft     $allow_ipv6   $which_ip6tables_nft    -A OUTPUT -p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$log_prefix " &> /dev/null
####
####
####################################### english: rules allow server ports
####################################### spanish: reglas para permitir puertos servidor 
####
####
#### ipv4 legacy
####
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A INPUT -p udp -m multiport $input_state --dports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A INPUT -p tcp -m multiport $input_state --dports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $which_iptables_legacy -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft
####
$allow_nft $allow_ipv4     $which_iptables_nft -A INPUT -p udp -m multiport $input_state --dports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4     $which_iptables_nft -A INPUT -p tcp -m multiport $input_state --dports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $which_iptables_nft -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $which_iptables_nft -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy
####
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A INPUT -p udp -m multiport $input_state --dports $server_udp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A INPUT -p tcp -m multiport $input_state --dports $server_tcp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
####
####
#### ipv6 nft
####
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A INPUT -p udp -m multiport $input_state --dports $server_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A INPUT -p tcp -m multiport $input_state --dports $server_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $which_ip6tables_nft -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
####################################### english: rules from input of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de entrada de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_ping_send  $which_iptables_legacy -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $allow_ping_recive $which_iptables_legacy -A INPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $uid_gid $which_iptables_legacy -A INPUT -m state --state related,established -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols $which_iptables_legacy -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
####################################### english: rules from output of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de salida de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_ping_send  $which_iptables_legacy -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $allow_ping_recive  $which_iptables_legacy -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $allow_output_uid $which_iptables_legacy -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $allow_output_gid $which_iptables_legacy -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols      $which_iptables_legacy -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
####################################### english: ipv6 filter legacy rules input and output for ping, uid, gid and protocols
####################################### spanish: ipv6 filtros legacy reglas de entrada y salida para ping, uid, gid y protocolos
####
#### 
#### english: ipv6 filter legacy rules input 
#### spanish: ipv6 filtros de legacy reglas de entrada
####
####
$allow_legacy  $allow_ipv6 $allow_ping_send      $which_ip6tables_legacy -A INPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $allow_ping_recive  $which_ip6tables_legacy -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $uid_gid $which_ip6tables_legacy -A INPUT -m state --state related,established -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv6 $allow_others_protocols      $which_ip6tables_legacy -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv6 filter legacy rules output
#### spanish: ipv6 filtros legacy reglas de salida
####
####
$allow_legacy  $allow_ipv6 $allow_ping_send  $which_ip6tables_legacy -A OUTPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $allow_ping_recive  $which_ip6tables_legacy -A OUTPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $allow_output_uid $which_ip6tables_legacy -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $allow_output_gid $which_ip6tables_legacy -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $which_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_legacy6  $allow_ipv6 $allow_others_protocols      $which_ip6tables_legacy -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
############################       english: iptables rules ipv4  iptables-nft for ping, uid, gid and protocols
############################       spanish: reglas de iptables ipv4 iptables-nft para ping, uid, gid y protocolos
####
####
#### english: ipv4 filter nft rules input
#### spanish: ipv4 filter nft reglas de entrada
####
####
$allow_nft $allow_ipv4 $allow_ping_send     $which_iptables_nft -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $allow_ping_recive   $which_iptables_nft -A INPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $uid_gid $which_iptables_nft -A INPUT -m state --state related,established -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols       $which_iptables_nft -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv4 filter nft rules output
#### spanish: ipv4 filter nft reglas de salida
####
####
$allow_nft $allow_ipv4 $allow_ping_send    $which_iptables_nft -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $allow_ping_recive  $which_iptables_nft -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $allow_output_uid $which_iptables_nft -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $allow_output_gid $which_iptables_nft -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols      $which_iptables_nft -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
########## english: ipv6 filter nft rules input and output for ping, uid, gid and protocols
########## spanish: ipv6 filtros nft relgas de entrada y salida para ping, uid, gid y protocolos
####
####
#### ipv6 filter nft rules input
#### ipv6 filtros nft reglas d entrada
####
####
$allow_nft $allow_ipv6 $allow_ping_send      $which_ip6tables_nft -A INPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $allow_ping_recive  $which_ip6tables_nft -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $uid_gid $which_ip6tables_nft -A INPUT -m state --state related,established -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $which_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $which_ip6tables_nft -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv6 filter nft rules output
#### spanish: ipv6 filtros nft reglas de salida
####
####
$allow_nft $allow_ipv6 $allow_ping_send      $which_ip6tables_nft -A OUTPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $allow_ping_recive  $which_ip6tables_nft -A OUTPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $allow_output_uid $which_ip6tables_nft -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $allow_output_gid $which_ip6tables_nft -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $which_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $which_ip6tables_nft -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
####
####
########################################## english: nat for ipv4 and ipv6
########################################## spanish: nat para ipv4 y ipv6
####
####
#### english: nat DELETED
#### spanish: borrado nat
####
####
$which_iptables_nft -t nat -F
$which_iptables_legacy -t nat -F
$which_ip6tables_nft -t nat -F
$which_ip6tables_legacy -t nat -F
####
####
#### english: do masquerade nat ip4 and ip6 
#### spanish: hace nat masquerade ip4 y ip6
####
####
$allow_nft $allow_ipv4 $allow_nat $which_iptables_nft -t nat -A POSTROUTING -j MASQUERADE      &>/dev/null
$allow_legacy $allow_ipv4 $allow_nat $which_iptables_legacy -t nat -A POSTROUTING -j MASQUERADE   &>/dev/null
$allow_nft $allow_ipv6 $allow_nat $which_ip6tables_nft -t nat -A POSTROUTING -j MASQUERADE     &>/dev/null
$allow_legacy $allow_ipv6 $allow_nat $which_ip6tables_legacy -t nat -A POSTROUTING -j MASQUERADE  &>/dev/null
####
####
########################################     english: ipv4 iptables allpermisisive
########################################     spanish: ipv4 iptables todo permisivo
####
####
#### legacy ip4
####
####
$allow_legacy  $allow_ipv4 $launch_permisive  $which_iptables_legacy -F &> /dev/null
$allow_legacy  $allow_ipv4 $launch_permisive  $which_iptables_legacy -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $launch_permisive  $which_iptables_legacy -A INPUT $input_state  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $launch_permisive  $which_iptables_legacy -A OUTPUT -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $launch_permisive  $which_iptables_legacy -A FORWARD  -j ACCEPT &> /dev/null
####
####
#### nft ip4 
####
####
$allow_nft $allow_ipv4 $launch_permisive  $which_iptables_nft -F &> /dev/null
$allow_nft $allow_ipv4 $launch_permisive  $which_iptables_nft -A INPUT -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $launch_permisive  $which_iptables_nft -A INPUT $input_state -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $launch_permisive  $which_iptables_nft -A OUTPUT -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $launch_permisive  $which_iptables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables allpermisisive
########################################     spanish: ipv6 iptables todo permisivo
####
####
#### legacy ip6 
####
####
$allow_legacy $allow_ipv6 $launch_permisive  $which_ip6tables_legacy -F &> /dev/null
$allow_legacy $allow_ipv6 $launch_permisive  $which_ip6tables_legacy -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $launch_permisive  $which_ip6tables_legacy -A INPUT $input_state -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $launch_permisive  $which_ip6tables_legacy -A OUTPUT -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $launch_permisive  $which_ip6tables_legacy -A FORWARD  -j ACCEPT &> /dev/null
####
####
#### nft ip6 
####
####
$allow_nft $allow_ipv6 $launch_permisive  $which_ip6tables_nft -F &> /dev/null
$allow_nft $allow_ipv6 $launch_permisive  $which_ip6tables_nft -A INPUT -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $launch_permisive  $which_ip6tables_nft -A INPUT $input_state -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $launch_permisive  $which_ip6tables_nft -A OUTPUT -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $launch_permisive  $which_ip6tables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
########################################     english: ipv4 iptables offline
########################################     spanish: ipv4 iptables desconectado
####
####
#### legacy ip4
####
####
$allow_legacy $allow_ipv4 $launch_offline  $which_iptables_legacy -F &> /dev/null
$allow_legacy $allow_ipv4 $launch_offline  $which_iptables_legacy -A INPUT  -s 127.0.0.1 -d 127.0.0.1   -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv4 $launch_offline  $which_iptables_legacy -A OUTPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
#### nft ip4 
####
####
$allow_nft $allow_ipv4 $launch_offline  $which_iptables_nft -F &> /dev/null
$allow_nft $allow_ipv4 $launch_offline  $which_iptables_nft -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $launch_offline  $which_iptables_nft -A OUTPUT  -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables offline
########################################     spanish: ipv6 iptables desconectado
####
####
#### legacy ip6
####
####
$allow_legacy $allow_ipv6 $launch_offline  $which_ip6tables_legacy -F &> /dev/null
$allow_legacy $allow_ipv6 $launch_offline  $which_ip6tables_legacy -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $launch_offline  $which_ip6tables_legacy -A OUTPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
#### nft ip6 
####
####
$allow_nft $allow_ipv6 $launch_offline  $which_ip6tables_nft -F &> /dev/null
$allow_nft $allow_ipv6 $launch_offline  $which_ip6tables_nft -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $launch_offline  $which_ip6tables_nft -A OUTPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
######################################## english: iptables ipv4 and ipv6 with forward rules
######################################## spanish: iptables ipv4 y ipv6 con reglas de reenvio
####
####
#### english: deactive for default with forward or without forward
#### spanish: desactiva por defecto con reenvio o sin reenvio
####
####
$which_sysctl -w net.ipv4.conf.all.forwarding=0 &> /dev/null
$which_sysctl -w net.ipv6.conf.all.forwarding=0 &> /dev/null
####
####
####   Active when there is forward
$ipv4 $allow_forwading $which_sysctl -w net.ipv4.conf.all.forwarding=1 &> /dev/null
$ipv6 $allow_forwading $which_sysctl -w net.ipv6.conf.all.forwarding=1 &> /dev/null
####
####
####   ipv4 filter legacy rules forward
$allow_legacy $allow_forwading $which_iptables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter legacy rules forward
$allow_legacy $allow_forwading $which_ip6tables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv4 filter nft rules forward
$allow_nft $allow_forwading $which_iptables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter nft rules forward
$allow_nft $allow_forwading $which_ip6tables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
#######################################       iptables ipv4 and ipv6 closed with drop input, and drop forward, and drop output rules
#######################################       iptables ipv4 y ipv6 cierran la entrada, reemvio y salida con reglas de dropeo
####
####
#### ipv4 drop rules iptables-legacy
$allow_legacy $which_iptables_legacy -A INPUT -j DROP &> /dev/null
$allow_legacy $which_iptables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_legacy $which_iptables_legacy -A FORWARD -j DROP &> /dev/null
####
####
#### ipv6 drop rules iptables-legacy
$allow_legacy $which_ip6tables_legacy -A INPUT -j DROP &> /dev/null
$allow_legacy $which_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_legacy $which_ip6tables_legacy -A FORWARD -j DROP &> /dev/null
####
####
#### ipv4 drop rules iptables-nft
$allow_nft $which_iptables_nft -A INPUT -j DROP &> /dev/null
$allow_nft $which_iptables_nft -A OUTPUT -j DROP &> /dev/null
$allow_nft $which_iptables_nft -A FORWARD -j DROP &> /dev/null
####
#### ipv6 drop rules iptables-nft
$allow_nft $which_ip6tables_nft -A INPUT -j DROP &> /dev/null
$allow_nft $which_ip6tables_nft -A OUTPUT -j DROP &> /dev/null
$allow_nft $which_ip6tables_nft -A FORWARD -j DROP &> /dev/null
####
####
########################################       english: iptables ipv4 and ipv6 with variable only_output
########################################       english: iptables ipv4 y ipv6 con variable only_output
####
####
#### english: nft INPUT deleted 
#### spanish: nft INPUT borradas
####
####
$launch_custom $only_output $allow_ipv4 $allow_nft $which_iptables_nft -t filter -F INPUT  &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_nft $which_ip6tables_nft -t filter -F INPUT  &> /dev/null
####
####
#### english: legacy INPUT deleted
#### spanish: legacy INPUT borradas
####
####
$launch_custom $only_output $allow_ipv4 $allow_legacy $which_iptables_legacy -t filter -F INPUT  &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_legacy $which_ip6tables_legacy -t filter -F INPUT  &> /dev/null
####
####
#### english: nft INPUT 127.0.0.1 accept
#### spanish: nft INPUT 127.0.0.1 acepta
####
####
$launch_custom $only_output $allow_ipv4 $allow_nft $which_iptables_nft -t filter -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_nft $which_ip6tables_nft -t filter -A INPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT 127.0.0.1 accept
#### spanish: legacy input 127.0.0.1 acepta
####
####
$launch_custom $only_output $allow_ipv4 $allow_legacy $which_iptables_legacy -t filter -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_legacy $which_ip6tables_legacy -t filter -A INPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT bandwidth limit
#### spanish: legacay INPUT limita ancho de banda
####
####
$launch_custom $only_output $allow_ipv4 $allow_legacy $allow_bandwidth_input iptables-legacy -A  INPUT -m hashlimit --hashlimit-above "$bandwidth_input"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_legacy $allow_bandwidth_input ip6tables-legacy -A  INPUT -m hashlimit --hashlimit-above "$bandwidth_input"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
#### english: nft INPUT bandwidth limit
#### spanish: nft INPUT limita ancho de banda
####
####
$launch_custom $only_output $allow_ipv4 $allow_nft $allow_bandwidth_input iptables-nft -A  INPUT -m hashlimit --hashlimit-above "$bandwidth_input"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_nft $allow_bandwidth_input ip6tables-nft -A  INPUT -m hashlimit --hashlimit-above "$bandwidth_input"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
#### english: nft INPUT ACCEPT all or input_state
#### spanish: nft INPUT acepta todo o estado de entrada
####
####
$launch_custom $only_output $allow_ipv4 $allow_nft $which_iptables_nft -t filter -A INPUT $input_state -j ACCEPT &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_nft $which_ip6tables_nft -t filter -A INPUT $input_state -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state 
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $only_output $allow_ipv4 $allow_legacy $which_iptables_legacy -t filter -A INPUT $input_state -j ACCEPT &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_legacy $which_ip6tables_legacy -t filter -A INPUT $input_state -j ACCEPT &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $only_output $allow_ipv4 $allow_nft $allow_ipv4 $which_iptables_nft -t filter -A INPUT  -j DROP &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_nft $which_ip6tables_nft -t filter -A INPUT  -j DROP &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $only_output $allow_ipv4 $allow_legacy $which_iptables_legacy -t filter -A INPUT  -j DROP &> /dev/null
$launch_custom $only_output $allow_ipv6 $allow_legacy $which_ip6tables_legacy -t filter -A INPUT  -j DROP &> /dev/null
####
####
########################################       english: autosave of firewall to recover standard rules
########################################       english: autoguardado de firewall para recuperador de reglas estandar
####
####
#### english: iptables saved
#### spanish: iptables guardado
####
####
case $autosave_fwrecover in 
$NULL)
iptables-nft-save >> $directory_fwrecover/$first_option-$second_option-nft-ipv4
iptables-legacy-save >> $directory_fwrecover/$first_option-$second_option-legacy-ipv4
ip6tables-nft-save >> $directory_fwrecover/$first_option-$second_option-nft-ipv6
ip6tables-legacy-save >> $directory_fwrecover/$first_option-$second_option-legacy-ipv6
;;
esac
####
####
########################################       english: show text when active rules
########################################       spanish: muestra texto cuando activas las reglas
####
####
####  # show text head lines in all firewall #
echo "$head_option";
echo "$cincuenta lauching iptables rules $cinco"
echo "$cinco  OK LAUNCHED $fiptables $first_option $second_option"
####  # show text to firewall offline #
if [ "$first_option" = "offline" ]; then echo -n
echo "$cinco  launch $fiptables list  # to list iptables rules"
exit ; else echo -n ; fi
####  # show text to firewall allpermisive #
if [ "$first_option" = "allpermisive" ]; then echo -n
echo "$cinco  launch $fiptables list  # to list iptables rules"
exit ; else echo -n ; fi
####  # show text to firewall [config.cfg] (silent text) #
## if [ -f "$directory_config/$first_option" ]; then echo -n
## echo "$cinco  launch $fiptables list  # to list iptables rules"
## exit ; else echo -n ; fi
####  # show text to firewall custom [config.cfg] (silent text) #
if [ -f "$directory_config/$second_option" ]; then echo -n
echo "$cinco  launch $fiptables list  # to list iptables rules"
exit ; else echo -n ; fi
####  # show text to firewall [config.cfg] or custom [config.cfg] (show text) when fail #
if [ -f "$directory_config/$first_option" ] | [ -f "$directory_config/$second_option" ] ; then echo -n
echo "$cinco $program configured with the configuration: $second_option $cinco" ;
else echo "$cinco [Configured with the default configuration] $cinco"
echo "  $defaultcfg "; fi ;
echo "$cinco  [With the netfilter iptables firewall]  $cinco"  ;
echo "  xtables    is  $which_iptables_legacy configured firewall "
echo "  neftables  is  $which_iptables_nft configured firewall "
echo "  * Where at least one iptables is usually necesary"
echo "$cinco  [With the protocols IP]  $cinco" ;
echo "  ipv4 is $allow_ipv4 allowed "
echo "  ipv6 is $allow_ipv6 allowed "
echo "  * Where ipv4 is usually necesary"
echo "$cinco  [With the client ports IP]  $cinco" ;
echo "  client tcp: $client_tcp"  ;
echo "  client udp: $client_udp"  ;
echo "  * Where ports domain,ntp,bootpc are usually udp necesary"
echo "$cinco  [With the server ports IP]  $cinco" ;
echo "  server tcp: $server_tcp" ;
echo "  server udp: $server_udp" ;
echo "$cinco  [With the log server ports IP]  $cinco" ;
echo "  server tcp: $logserver_tcp" ;
echo "  server udp: $logserver_udp" ;
echo "$cinco  [With the networks configured]  $cinco" ;
echo "  ipv4 client: $net_ipv4_client And ipv4 server: $net_ipv4_server"
echo "  ipv6 client: $net_ipv6_client And ipv6 server: $net_ipv6_server"
echo "  * Where 0/0 and ::/0 are all the networks, usually necesary "
if [ "$only_output" = "$NULL" ]; then echo "$cinco  [Whith only the output rules] $cinco"
echo "  * where which only output rules is more fastly conection"
else echo "$cinco  [Whith the input rules and the output rules] $cinco"
echo "  * where which only output rules is more fastly conection"; fi
if [ "$input_state" = "$NULL" ]; then echo "$cinco  [Without specific input state IP] $cinco"
else echo "$cinco  [With input state IP]  $cinco"
echo "  Input satate: $input_state"; fi
echo "$cinco  [With Others configs]  $cinco"
if [ "$allow_bandwidth_input" = "no" ]; then echo "  Dont limit input bandwidth" ; 
else echo "  Limit input: above "$bandwidth_input"kb/sec"; fi
if [ "$allow_bandwidth_output" = "no" ]; then echo "  Dont limit output bandwidth" ;
else echo "  Limit output: above "$bandwidth_output"kb/sec"; fi
if [ "$allow_ping_send" = "no" ]; then echo "  Dont allow send ping"; else echo "  Allowed send pings" ; fi
if [ "$allow_ping_recive" = "no" ]; then echo "  Dont allow recive ping"; else echo "  Allowed recive pings" ; fi
if [ "$allow_forwading" = "no" ]; then  echo "  Dont allow ip forwading"; else echo "  Allowed ip forwading iptables" ; fi
if [ "$allow_nat" = "no" ]; then  echo "  Dont allow ip nat masquerade"; else echo "  Allowed nat masquerade" ; fi
if [ "$allow_vpn" = "no" ]; then echo "  Dont allow vpn excepcional"; else  echo "  Allowed vpn servers are $vpn" ; fi
if [ "$allow_blacklist" = "no" ]; then echo "  Dont allow blacklist excepcional"; else  echo "  Allowed blacklist servers are $blacklist" ; fi
if [ "$allow_output_uid" = "no" ]; then  echo "  Dont allow uid output excepcional"; else echo "  Allowed output uid output excepcional: $output_uid , and input established " ; fi
if [ "$allow_output_gid" = "no" ]; then  echo "  Dont allow gid output excepcional"; else echo "  Allowed output gid output excepcional: $output_uid , and input established "; fi
if [ "$allow_others_protocols" = "no" ]; then  echo "  Dont allow other protocolo excepcional"; else echo "  Allowed other protocol excepcional: $others_protocols" ; fi
echo "$cinco  List iptables rules with:   $fiptables list  $cinco"
####
####
####
####
#######################
####     left script
#######################
####
####
#######################         english: End of script
#######################         spanish: Fin del script
####
####
####
####    for upload push ssh with f-iptables and download clone with https, repository git.code.sf.net/p/f-iptables/code
####    Upload f-iptables repository from local repository  :     git commit -a ; git push ;
####    Download f-iptables repository in folder user       :     git clone https://git.code.sf.net/p/f-iptables/code ;
####
####
####
#######################
#######################
####
####
exit 0
