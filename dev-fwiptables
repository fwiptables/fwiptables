#!/bin/bash
##
################################################   english: begin the script
################################################   spanish: empieza el script
##
##   This program is wWith gpl license, the program is copyleft, it is free.
##
##   english: The comments are in english language and spanish language
##   spanish: Los comentarios estan en ingles y en espa単ol
##
##
##############################        example in english:   basic system variables
##############################        ejemplo in spanish:   las basicas variables del sistema
##
##  english: /usr/bin/fwiptables is in vars $directory_fiptables folder and $fiptables exec
##  spanish: /usr/bin/fwiptables esta en variables $directory_fiptables carpeta y $fiptables exec
##
################################################   english:   basic system variables
################################################   spanish:   las basicas variables del sistema
##
##
##
## #english: [the variables names and the path] #spanish: [nombres de variables y rutas]
first_option="$1" ; second_option="$2" ;                            #english: variables at launch  #spanish: variables al lanzar
third_option="$3" ; fourth_option="$4" ;                            #english: variables at launch  #spanish: variables al lanzar
config_option="no" ; launch_iptables="no" ;                         #english: auto variables to no #spanish: auto variables a no
launch_server="no" ; launch_client="no" ; launch_permisive="no" ;   #english: auto variables to no #spanish: auto variables a no
directory_fiptables="/usr/bin" ; fiptables="fwiptables" ;           #english: whereis path  #spanish: donde esta el path
fdescription="One Script in bash for iptables firewall"             #english: program description  #spanish: descripcion del programa
fprogram="Fran FireWall iptables: $fiptables" ; fversion="201" ;    #english: Name and Version  #spanish: Nombre y Version
directory_binary="/usr/sbin" ;                                      #english: iptables programs path  #spanish: ruta de iptables
directory_config="/etc/fwiptables" ; defaultcfg="default.cfg" ;     #english: path to config files  #spanish: archivos de configuracion
directory_fwrecover="/etc/fwrecover" ;                              #english: path to save firewall  #spanish: ruta de firewall guardado
#english: [download web link]  #spanish: [descarga del enlace web]
fweb_latest="https://sourceforge.net/projects/f-iptables/files/latest/download" ;
fweb_development="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-fwiptables?format=raw" ;
fweb_newfiles="https://sourceforge.net/projects/f-iptables/files" ;
fweb_tree="https://sourceforge.net/p/f-iptables/code/ci/master/tree/" ;
fweb_git="https://git.code.sf.net/p/f-iptables/code f-iptables-code" ;
#english: [Program license] #spanish: [Licencia del programa]
flicense="Copyleft, without warranty, free to copy, free to modify, gnu license gpl."
#english: [characters to show] #spanish: [caracteres a mostrar]
cinco="#####" ; cincuenta="##################################################"
flinea="-92" ;                                   #english: number line at custom variables #spanish:linea de variables modificables
fvariables="-37" ;                               #english: number of custom variables to show #spanish: numero de variables a modificar
flistado="-70" ;                                 #english: wide of list config files #spanish: Ancho al listar cfg
##
##
##
################################################        english: fvariables:    variables to modify
################################################        spanish: fvariables:    variables para modificar
##
##
echo -n #english: the iptables firewall netfilter, choose one or two #spanish: el iptables firewall netfilter, elige uno o dos
iptables_legacy=no ; #english: launch xtables, void to yes or type no #spanish: lanza xtables, vacio para si, o escribe no
iptables_nft= ; #english: launch neftables, void to yes or type no #spanish: lanza neftables, vacio para si, o escribe no
echo -n #english: ip protocol, modify with void or no #spanish: procolo ip, modificar con vacio o no
allow_ipv4= ; #english: void to config firewall with ipv4 or no to dont configure ipv4  #spanish: varcio para ejecutar el firewall con ipv4 o no para no
allow_ipv6=no ; #english: void to config firewall with ipv6 or no to dont configure ipv6  #spanish: varcio para ejecutar el firewall con ipv6 o no para no
echo -n #english: Client ports, add with "," and join ranges with ":" #spanish: Puertos Cliente, a単adir con "," y poner rangos con ":"
client_tcp=http,https,ipp,ssh ; #english: tcp ports for client #spanish: puertos tcp para ser cliente
client_udp=domain,ntp,bootpc ; #english: udp ports for client #spanish: puertos udp para ser cliente
echo -n #english: Server ports, add with "," and join ranges with ":" #spanish: Puertos Servidor, a単adir con "," y poner rangos con ":"
server_tcp=ssh,http,https ; #english: tcp ports for server #spanish:  puertos tcp para servir
server_udp=discard ; #english: udp ports for server #spanish: puertos udp para servir
echo -n #english: Selective Input state #spanish: Estado de entrada selectivo
input_state="" ; #english: modify with void for all or -m state --state established,related #spanish: modificar con vacio o -m state --state established,related
echo -n #english: Allow Other Options,  modify with void or no #spanish: Permitir Otras Opciones, modificar con vacio o no
allow_ping_send=no ; #english: void to allow send pings, and no to drop send pings #spanish: vacio para permitir enviar ping y no para evitar permitirlo
allow_ping_recive=no ; #english: void to allow recive pings, and no to drop recive pings #spanish: vacio para permitir recivir ping y no para evitar permitirlo
allow_log_tcp=no ; #english: void to tcp log, and no to do not log tcp #spanish: vacio para logear tcp y no para evitar logear tcp
allow_log_udp=no ; #english: void to udp log, and no to do not log udp #spanish: vacio para logear udp y no para evitar logear udp
allow_forwading=no ; #english: void to allow ip forward, and no to drop forward ip #spanish: vacio para permitir reenvio, y no para denegar reenvios
allow_nat=no ; #english: void to do NAT masquerade to default route, or no #spanish: vacio para hacer masquerade a otras redes o nada
allow_vpn=no ; #english: void to allow exceptional host, and no to drop exceptional host #spanish: vacio para permitir hosts excepcionales y no para evitar permitirlos
allow_others_protocols=no ; #english: void to allow other protocol or no #spanish: vacio para permitir otro protocolo o no
allow_output_uid=no ; #english: void to allow excepcional user or no #spanish: vacio permite salida de paquetes de un usuario excepcional o no
allow_output_gid=no ; #english: void to allow excepcional group or no #spanish: vacio permite salida de paquetes de un grupo excepcional o no
echo -n #english: Other Options, add with "," and join ranges with ":" #spanish: Otras Opciones, a単adir con "," y poner rangos con ":"
log_udp=discard ; #english: the udp ports to log #spanish: los puertos udp para logear
log_tcp=ssh ; #english: the tcp ports to log #spanish: los puertos tcp para logear
vpn=sourceforge.net,wesnoth.org ; #english: allow this excepcitonal host #spanish: permitir estos host excepcionales
others_protocols=icmp,igmp ; #english: allow others protocols from /etc/protocolos #spanish: permitir otros protocolos desde /etc/protocols
output_uid="root" ; #english: allow out packages excepcional from this user #spanish: permite salida de paquetes de este usuario excepcional o no
output_gid="root" ; #english: allow out packages excepcional from this group #spanish: permite salida de paquetes de este grupo excepcional o no
echo -n #english: Net to connect like client or server #spanish: Red para conectar como cliente o server
net_ipv4_client=0/0  ;  #english: the net to client ipv4, all is 0/0  #spanish: la red cual cliente ipv4, todos es 0/0
net_ipv4_server=0/0  ;  #english: the net to server ipv4, all is 0/0 #spanish: la red cual servidor ipv4, todos es 0/0
net_ipv6_client=::/0 ;  #english: the net to client ipv6, all is ::/0 #spanish: la red cual cliente ipv6, todos es ::/0
net_ipv6_server=::/0 ;  #english: the net to server ipv6, all is ::/0 #spanish: la red cual servidor ipv6, todos es ::/0
##
##
##############################	     english:      End from user variables file, overwriter initial values       |||||
##############################       spanish:      Fin de archivo de variables, sobre escribe valores iniciales  !!!!!
##
##
##
## if This is the line number 90 to then up .. flinea="-number" .
##
##
##
##
##############################       english: are you root: uid 0 ?
##############################       spanish: eres admnistrador (identificador 0) ?;
##
##
if [ "$(id -u)" = "0" ]; then echo  -n ;
else echo "$cincuenta need to be root to work" 
echo "$fprogram version $fversion , need to be root to work"
echo "  [Launch rules]        eraserules offline client server allpermisive wizard"
echo "  [List rules]          list forward list6 forward6 nat-ip4 nat-ip6"
echo "                        listnum forwardnum listnum6 forwardnum6"
echo "  [Other table]         raw-ip4 raw-ip6 mangle-ip4 mangle-ip6"
echo "                        security-ip4 security-ip6 etbtables arptables"
echo "  [Modify config]       reconfig show-config new-config nueva-config"
echo "                        modify-config clone-config rename-config del-config"
echo "  [List sockets]        route ss netstat lsof ipforwading tcpdump arp"
echo "  [Recover fw]          fw-list fw-save fw-restore"
echo "  [Auth sudo]           auth-sudo remove-sudo list-sudo"
echo "  [Tool icmp]           ping-ip4 ping-ip6"
echo "  [Tool tcp]            trace-ip4 trace-ip6 host resolveip geoip"
echo "  [Version]             version upgrade dev-versions all-versions"
echo "  [Help]                about system-info help ayuda mini-wizard cli gui"
echo "$cinco  Optional $directory_config/[config.cfg]"
echo "[Example:]  $(ls $directory_config| egrep -i "default|wizard|example1.cfg" | fmt $flistado)"
echo "[Own:]  $(ls $directory_config| egrep -iv "default|wizard|example1.cfg" | fmt $flistado)"
echo "$cinco  [The examples]"
echo "  [List iptables rules]                $fiptables list  "
echo "  [Launch iptables like client web]    $fiptables client web-example1.cfg"
echo "  [Launch iptables like server web]    $fiptables server web-example1.cfg"
echo "  [Remove iptables rules]              $fiptables eraserules "
echo "  [Show long help in english]          $fiptables help "
echo "  [Show long help in spanish]          $fiptables ayuda "
exit; fi
##
##
##############################       english: default configs                          ###########################################
##############################       spanish: default configurations              ###########################################
if [ -d "$directory_config" ]; then echo -n ; else rm "$directory_config" &> /dev/null ; mkdir "$directory_config" &> /dev/null ; fi
if [ -f "$directory_fiptables/$fiptables" ]; then echo -n; else cp "$0" "$directory_fiptables/$fiptables" &> /dev/null ; fi
if [ -f "$directory_config/$defaultcfg" ]; then echo -n
else head "$flinea" "$0" | grep -iv ^# | tail "$fvariables" | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/$defaultcfg"; fi
if [ -d "$directory_fwrecover" ]; then echo -n ; else rm "$directory_fwrecover" &> /dev/null ; mkdir "$directory_fwrecover" &> /dev/null ; fi
##############################       english: auto installer if necesary              ###########################################
##############################       spanish: auto instalador si es necesario     ###########################################
if [ $0 = $directory_fiptables/$fiptables ]; then echo -n ;
else cp $0 $directory_fiptables/$fiptables &> /dev/null ; 
echo "$fiptables $fversion installed in /usr/bin/$fiptables"
echo "Launch $fiptables to run $fiptables" ; fi
##############################       english: if third_option is a valid config.cfg                  ###########################################
##############################       spanish: si tercera opcion es un validoconfig.cfg               ###########################################
if [ -f "$directory_config/$second_option" ]; then config_option="si"; else config_option="no"; fi
##############################      english: launch-rules: The first options: offline, client, server and allpermisive     #####################
##############################      spanish: launch-rules: Primeras opciones: offline, client, server and allpermisive     #####################
if [ "$first_option" = "offline" ]; then echo "  FIREWALL OFFLINE" ; echo "$cincuenta"
launch_iptables="si"; launch_server="no"; launch_client="no"; launch_permisive="no"; fi
if [ "$first_option" = "client" ];then echo "  FIREWALL CLIENT" ; echo "$cincuenta"
launch_iptables="si"; launch_server="no"; launch_client=""; launch_permisive="no"; fi
if [ "$first_option" = "server" ]; then echo "  FIREWALL SERVER" ; echo "$cincuenta"
launch_iptables="si"; launch_server="";  launch_client=""; launch_permisive="no"; fi
if [ "$first_option" = "allpermisive" ]; then echo "  FIREWALL ALLPERMISIVE" ; echo "$cincuenta"
launch_iptables="si"; launch_server="no"; launch_client="no"; launch_permisive=""; fi
##############################      english: search programs: programs path           #####################
##############################      spanish: busca los programas: ruta de programas   #####################
####
####
which_iptables_legacy=$(which iptables-legacy | cut -d " " -f 1)
which_iptables_nft=$(which iptables-nft| cut -d " " -f 1)
which_ip6tables_legacy=$(which ip6tables-legacy | cut -d " " -f 1)
which_ip6tables_nft=$(which ip6tables-nft| cut -d " " -f 1)
which_iptables_legacy_save=$(which iptables-legacy-save | cut -d " " -f 1)
which_iptables_nft_save=$(which iptables-nft-save| cut -d " " -f 1)
which_ip6tables_legacy_save=$(which ip6tables-legacy-save | cut -d " " -f 1)
which_ip6tables_nft_save=$(which ip6tables-nft-save | cut -d " " -f 1)
which_arptables=$(which arptables|cut -d " " -f 1)
which_ebtables=$(which ebtables| cut -d " " -f 1)
which_editor=$(which editor| cut -d " " -f 1)
which_fmt=$(which fmt | cut -d " " -f 1)
which_ip=$(which ip | cut -d " " -f 1)
which_route=$(which route | cut -d " " -f 1)
which_ss=$(which ss| cut -d " " -f 1)
which_netstat=$(which netstat | cut -d " " -f 1)
which_lsof=$(which lsof | cut -d " " -f 1)
which_sysctl=$(which sysctl | cut -d " " -f 1)
which_tcpdump=$(which tcpdump | cut -d " " -f 1)
which_arp=$(which arp | cut -d " " -f 1)
which_ping=$(which ping | cut -d " " -f 1)
which_traceroute=$(which traceroute | cut -d " " -f 1)
which_dialog=$(which dialog | cut -d " " -f 1)
which_zenity=$(which zenity | cut -d " " -f 1)
which_nano=$(which nano| cut -d " " -f 1)
which_vim=$(which vim | cut -d " " -f 1)
which_vi=$(which vi | cut -d " " -f 1)
which_tilde=$(which tilde | cut -d " " -f 1)
which_gedit=$(which gedit | cut -d " " -f 1)
which_yudit=$(which yudit | cut -d " " -f 1)
which_tea=$(which tea | cut -d " " -f 1)
which_pluma=$(which pluma | cut -d " " -f 1)
which_mousepad=$(which mousepad | cut -d " " -f 1)
which_gedit=$(which gedit | cut -d " " -f 1)
which_lynx=$(which lynx | cut -d " " -f 1)
which_links=$(which links | cut -d " " -f 1)
####
####
##############################      english: search favorite browser: favorite browser     #####################
##############################      spanish: busca preferido navegador: favorite browser   #####################
####
favorite_text_browser=""
if [ "$which_links" = "$NULL" ]  ; then echo -n ; else favorite_text_browser=$which_links   ; fi
if [ "$which_lynx" = "$NULL" ]  ; then echo -n ; else favorite_text_browser=$which_lynx    ; fi
####
##############################      english: search favorite text editor: favorite text editor            #####################
##############################      spanish: busca preferido editor de texto: preferido editor de texto   #####################
####
####
favorite_text_editor=""
if [ $which_vi = "$NULL" ]     ; then echo -n; else favorite_text_editor=$which_vi        ; fi
if [ $which_vim = "$NULL" ]    ; then echo -n; else favorite_text_editor=$which_vim       ; fi
if [ $which_tilde = "$NULL" ]  ; then echo -n; else favorite_text_editor=$which_tilde     ; fi
if [ $which_editor = "$NULL" ] ; then echo -n; else favorite_text_editor=$which_editor    ; fi
if [ $which_nano = "$NULL" ]   ; then echo -n; else favorite_text_editor=$which_nano      ; fi
####
####
##############################      english: search favorite graphicall editor: favorite graphicall editor     #####################
##############################      spanish: busca preferido editor grafico: preferido editor grafico         #####################
####
####
favorite_graphicall_editor=""
if [ $which_yudit = "$NULL" ]    ; then echo -n ; else favorite_graphicall_editor=$which_yudit      ; fi
if [ $which_tea = "$NULL" ]      ; then echo -n ; else favorite_graphicall_editor=$which_tea        ; fi
if [ "$which_pluma" = "$NULL" ]  ; then echo -n ; else favorite_graphicall_editor=$which_pluma      ; fi
if [ $which_mousepad = "$NULL" ] ; then echo -n ; else favorite_graphicall_editor=$which_mousepad   ; fi
if [ $which_gedit = "$NULL" ]    ; then echo -n ; else favorite_graphicall_editor=$which_gedit      ; fi
####
####
##############################       english: Script: general options         #########################################
##############################       spanish: Script: opciones generales      #########################################
####
####
####
####
####
##############################       english: depends: depends for $fiptables
##############################       spanish: dependencias: dependencias para $fiptables
if [ "$first_option" = "depends" ]; then echo -n
echo "Depends for $fiptables"
echo "$cincuenta $fiptables"
echo "$cinco $fiptables util"
echo "fmt:       $which_fmt"
echo "$cinco $fiptables cli"
echo "dialog:    $which_dialog"
echo "$cinco $fiptables gui"
echo "zenity:    $which_zenity"
echo "$cinco $fiptables text browser"
echo "auto text browser                $favorite_text_browser"
echo "$cinco $fiptables editor"
echo "auto favorite text exitor:       $favorite_text_editor"
echo "auto favorite graphicall editor: $favorite_graphicall_editor"
echo "$cinco the iptables"
echo "iptables legacy:   $which_iptables_legacy"
echo "iptables nft:      $which_iptables_nft"
echo "ip6tables legacy:  $which_ip6tables_legacy"
echo "ip6tables nft:     $which_ip6tables_nft"
echo "arptables:         $which_arptables"
echo "ebtables:          $which_ebtables"
echo "$cinco the iptables save"
echo "iptables legacy save:  $which_iptables_legacy_save"
echo "iptables nft save:     $which_iptables_nft_save"
echo "ip6tables legacy save: $which_ip6tables_legacy_save"
echo "ip6tables nft save:    $which_ip6tables_nft_save"
echo "$cinco $fiptables tool"
echo "ip:         $which_ip"
echo "route:      $which_route"
echo "ss:         $which_ss"
echo "netstat:    $which_netstat"
echo "lsof:       $which_lsof"
echo "sysctl:     $which_sysctl"
echo "tcpdump:    $which_tcpdump"
echo "arp:        $which_arp"
echo "ping:       $which_ping"
echo "traceroute: $which_traceroute"
exit; fi
##############################       english: mini-wizard: mini-wizard to connect like simple client
##############################       spanish: mini-wizard: mini-asistente to connect like simple client
if [ "$first_option" = "mini-wizard" ]; then echo -n
head "$flinea" "$0" | grep -iv ^# | tail "$fvariables" | head -9 | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/mini-wizard.cfg"
$favorite_text_editor "$directory_config/mini-wizard.cfg"
$fiptables client mini-wizard.cfg
$fiptables list
exit; fi
##############################       english: wizard: wizard to connect like simple client
##############################       spanish: wizard: asistente to connect like simple client
if [ "$first_option" = "wizard" ]; then echo -n
head "$flinea" "$0" | grep -iv ^# | tail "$fvariables" | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/wizard.cfg"
$favorite_text_editor "$directory_config/wizard.cfg"
$fiptables server wizard.cfg
$fiptables list
exit; fi
##############################       english: cli: Manage list rules with one text menu
##############################       spanish: cli: Maneja lista de reglas con un menu de texto
if [ "$first_option" = "cli" ]; then echo -n
case "$which_dialog" in
"$NULL")
echo " Install dialog to work"
exit
;;
else)
;;
esac
cd $directory_config
menuprincipal="$(dialog --stdout --title "$fprogram version $fversion" --menu "Select:" 0 0 0 \
  00100 "launch rules" \
  101 eraserules \
  102 offline \
  103 client \
  104 server  \
  105 allpermisive \
  106 wizard \
  00200 "list rules" \
  201 list \
  202 forward \
  203 list6  \
  204 forward6 \
  205 nat-ip4 \
  206 nat-ip6 \
  00300 "list sockets" \
  301 route \
  302 ss \
  303 netstat \
  304 lsof \
  305 ipforwading \
  306 tcpdump \
  307 arp \
  00400 "Modify config" \
  401 reconfig \
  402 show-config \
  403 new-config \
  404 nueva-config \
  405 modify-config \
  406 clone-config \
  407 rename-config \
  408 del-config \
  00500 "Other tables"  \
  501 raw-ip4 \
  502 raw-ip6 \
  503 mangle-ip4 \
  504 mangle-ip6 \
  505 security-ip4 \
  506 security-ip6 \
  00600 "Recover fw" \
  601 fw-list  \
  602 fw-save  \
  603 fw-restore  \
  00700 "tool icmp" \
  701 ping-ip4 \
  702 ping-ip6 \
  00800 "tool tcp"  \
  801 trace-ip4 \
  802 trace-ip6 \
  803 host \
  804 resolveip \
  00900 "update"  \
  901 auth-sudo \
  902 remove-sudo \
  903 list-sudo \
  01000 "Versions" \
  1001 version \
  1002 upgrade \
  1003 dev-versions \
  01100 "Help" \
  1101 about \
  1102 help \
  1103 ayuda \
  1104 system-info \
  1105 mini-wizard \
  1106 cli \
  1107 gui \
  )"
case $menuprincipal in
 0*)
 clear
 dialog --msgbox "Program Menu" 0 0
 clear
 $fiptables cli
 ;;
 101)
 clear
 $fiptables eraserules
 ;;
 102)
 clear
 $fiptables offline
 ;;
 103)
 clear
 archivo="$(dialog --title "client" --stdout --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables client $archivo
 ;;
 104)
 clear
 archivo="$(dialog --title "server" --stdout --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables server $archivo
 ;;
 105)
 clear
 $fiptables allpermisive
 ;;
 106)
 clear
 $fiptables wizard
 ;;
 201)
 clear
 $fiptables list
 ;;
 202)
 clear
 $fiptables forward
 ;;
 203)
 clear
 $fiptables list6
 ;;
 204)
 clear
 $fiptables forward6
 ;;
 205)
 clear
 $fiptables nat-ip4
 ;;
 206)
 clear
 $fiptables nat-ip6
 ;;
 301)
 clear
 $fiptables route
 ;;
 302)
 clear
 $fiptables ss
 ;;
 303)
 clear
 $fiptables netstat
 ;;
 304)
 clear
 $fiptables lsof
 ;;
 305)
 clear
 $fiptables ipforwading
 ;;
 306)
 clear
 $fiptables tcpdump
 ;;
 307)
 clear
 $fiptables arp -a
 ;;
 401)
 clear
 $fiptables reconfig
 ;;
 402)
 clear
 archivo="$(dialog --stdout --title "show-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables show-config $archivo
 echo "$cinco Launch: $fiptables client $archivo"
 ;;
 403)
 clear
 archivo="$(dialog --stdout --title "new-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables new-config $archivo
 ;;
 404)
 clear
 archivo="$(dialog --stdout --title "nueva-config example: archivo.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables nueva-config $archivo
 ;;
 405)
  archivo="$(dialog --stdout --title "modify-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables modify-config $archivo
 ;;
 406)
 archivos="$(dialog --stdout --title "clone-config with: file1.cfg file2.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 # echo "$(cp $archivo)"
 $fiptables clone-config $archivos
 ;;
 407)
 archivos="$(dialog --stdout --title "rename-config with: file1.cfg file2.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 # echo "$(mv $archivo)"
 $fiptables rename-config $archivos
 ;;
 408)
 echo
 archivo="$(dialog --stdout --title "del-config" --inputbox "$(ls $directory_config)" 0 0)"
 clear
 $fiptables del-config $archivo
 echo
 echo "deleted $archivo"
 ;;
 501)
 clear
 $fiptables raw-ip4
 ;;
 502)
 clear
 $fiptables raw-ip6
 ;;
 503)
 clear
 $fiptables mangle-ip4
 ;;
 504)
 clear
 $fiptables mangle-ip6
 ;;
 505)
 clear
 $fiptables security-ip4
 ;;
 506)
 clear
 $fiptables security-ip6
 ;;
 601)
clear
 $fiptables fw-list
 ;;
 602)
 clear
 archivo="$(dialog --stdout --title "save the firewall format standar" --inputbox "New name" 0 0)"
 clear
 echo "$cincuenta saved $archivo"
 $fiptables fw-save $archivo
 ;;
 603)
 clear
 $fiptables fw-restore
 ;;
 701)
 clear
 resolve="$(dialog --stdout --title "type host to ping" --inputbox "example: fast.com" 0 0)"
 clear
 ping -4 -c 5 -A $resolve
 ;;
 702)
 clear
 resolve="$(dialog --stdout --title "type host to ping ipv6" --inputbox "example: fast.com" 0 0)"
 clear
 ping -6 -c 5 -A $resolve
 ;;
 801)
 clear
 resolve="$(dialog --stdout --title "type host to traceroute" --inputbox "example: fast.com" 0 0)"
 clear
 traceroute -4 -T $resolve
 ;;
 802)
 clear
 resolve="$(dialog --stdout --title "type host to traceroute ipv6" --inputbox "example: fast.com" 0 0)"
 clear
 traceroute -6 -T $resolve
 ;;
 803)
 clear
 resolve="$(dialog --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
 clear
 host $resolve
 ;;
 804)
 clear
 resolve="$(dialog --stdout --title "type host  or ip to resolve" --inputbox "example: fast.com" 0 0)"
 clear
 resolveip $resolve
 ;;
 901)
 clear
 resolve="$(dialog --stdout --title "type username to auth sudo" --inputbox "example: user1,user2,user3" 0 0)"
 clear
 $fiptables auth-sudo $resolve
 ;;
 902)
 clear
 $fiptables remove-sudo
 ;;
 903)
 clear
 $fiptables list-sudo
 ;;
 1001)
 clear
 $fiptables version
 ;;
 1002)
 clear
 $fiptables upgrade
 ;;
 1003)
 clear
 $fiptables dev-versions
 ;;
 1101)
 clear
 $fiptables about
 ;;
 1102)
 clear
 $fiptables help | less
 ;;
 1103)
 clear
 $fiptables ayuda | less
 ;;
 1104)
 clear
 $fiptables system-info
 ;;
 1105)
 clear
 $fiptables mini-wizard
 ;;
 1106)
 clear
 $fiptables cli
 ;;
 1107)
 clear
 $fiptables gui
 ;;
 *)
 clear
 dialog --msgbox "fwiptables good bye" 0 0
 clear
 exit
 esac
 echo "press [enter] to continue with the $fiptables cli"
 read -s
 $fiptables cli
 exit; fi
####
####
##############################       english: gui: Manage list rules with one menu graphicall
##############################       spanish: gui: Maneja lista de reglas con un menu graphicall
if [ "$first_option" = "gui" ]; then echo -n
case "$which_zenity" in
"$NULL")
echo " Install zenity to work"
exit
;;
else)
;;
esac
#### principal gui      ####
titulo="$fiptables gui"
untexto="$fiptables gui"
cd $directory_config
menugtk=$(zenity --forms --title="$titulo" --width=320 --height=240 --text="$($fiptables)" --add-entry="$fiptables" )
case $? in 
1)
zenity --info --ellipsize --text="fwiptables good bye"
exit
;;
esac
#### manage some configs ####
case $menugtk in
#### launch rules        ####
eraserules*)
zenity --info --ellipsize --text="$($fiptables eraserules)"
zenity --info --ellipsize --text="ok $($fiptables list)"
;;
offline*)
zenity --info --ellipsize --text="$($fiptables offline)"
zenity --info --ellipsize --text="ok $($fiptables list)"
;;
client)
untexto="Type the config file, example: default.cfg"
unaconfig="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="$($fiptables client $unaconfig)"
zenity --info --ellipsize --text="ok $($fiptables list)"
;;
client*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
zenity --info --ellipsize --text="ok $($fiptables list)"
;;
server)
untexto="Type the config file, example: default.cfg"
unaconfig="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="$($fiptables server $unaconfig)"
zenity --info --ellipsize --text="ok $($fiptables list)"
;;
server*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
zenity --info --ellipsize --text="ok $($fiptables list)"
;;
allpermisive*)
zenity --info --ellipsize --text="$($fiptables allpermisive)"
zenity --info --ellipsize --text="ok $($fiptables list)"
;;
wizard*)
head "$flinea" "$0" | grep -iv ^# | tail "$fvariables" | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/wizard.cfg"
zenity --info --ellipsize --text="ok $($favorite_graphicall_editor $directory_config/wizard.cfg)"
zenity --info --ellipsize --text="ok $(fwiptables server wizard.cfg)"
;;
#### modify configs      ####
reconfig*)
untexto="$($fiptables reconfig)"
zenity --info --ellipsize --text="ok $untexto"
;;
show-config*)
untexto="Type the config file to show"
unarchivo="$(zenity --entry --text="$untexto")"
zenity --info --ellipsize --text="$(cat "$(echo $unarchivo| sed 's/\///g')")"
;;
rename-config*)
untexto="Type the config to rename with: oldname.cfg newname.cfg"
unarchivo="$(zenity --entry --text="mv $untexto")"
zenity --info --ellipsize --text="Renamed config: $(echo $unarchivo| sed 's/\///g') $(mv $(echo $unarchivo | sed 's/\///g'))"
;;
clone-config*)
untexto="Type the config to clone with: oldname.cfg newname.cfg"
unarchivo="$(zenity --entry --text="mv $untexto")"
zenity --info --ellipsize --text="Cloned config: $(echo $unarchivo| sed 's/\///g') $(cp $(echo $unarchivo | sed 's/\///g'))"
;;
del-config*)
untexto="Type the config to delete"
unarchivo="$(zenity --entry --text="$untexto")"
zenity --info --ellipsize --text="Deleted config: $(echo $unarchivo| sed 's/\///g') $(rm $(echo $unarchivo | sed 's/\///g'))"
;;
new-config*)
untexto="Type the name of file to write a new config"
unarchivo="$(zenity --entry --text="$untexto")"
zenity --info --ellipsize --text="New config: $(echo $unarchivo | sed 's/\///g')  $(cp english-example1.cfg $(echo $unarchivo | sed 's/\///g'))"
;;
nueva-config*)
untexto="Escribe el nombre de archivo de la nueva configuracion"
unarchivo="$(zenity --entry --text="$untexto")"
zenity --info --ellipsize --text="New config: $(echo $unarchivo | sed 's/\///g')  $(cp spanish-example1.cfg $(echo $unarchivo | sed 's/\///g'))"
;;
modify-config*)
#untexto="Type the config file, example: config.cfg"
unarchivo="$(zenity --entry --title="modify-config" --text="$(ls $directory_config)")"
zenity --info --ellipsize --text="$($favorite_graphicall_editor $unarchivo)"
;;
#### options recover fw ####
fw-list*)
listado="$($fiptables fw-list)"
zenity --info --ellipsize --text="ok $listado"
;;
fw-save*)
untexto="type the filename to save firewall"
archivoini="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
archivofin="$(echo "$archivoini" | sed 's/\///g')"
$which_iptables_nft_save > $directory_fwrecover/$archivofin-nft-ipv4
$which_iptables_legacy_save > $directory_fwrecover/$archivofin-legacy-ipv4
$which_ip6tables_nft_save > $directory_fwrecover/$archivofin-nft-ipv6
$which_ip6tables_legacy_save > $directory_fwrecover/$archivofin-legacy-ipv6
zenity --info --ellipsize --text="ok $(echo saved $archivofin)"
;;
fw-restore*)
listado="$($fiptables fw-restore)"
zenity --info --ellipsize --text="ok $listado"
;;
#### options sudo  #####
auth-sudo*)
untexto="type the users to auth sudo, example: user1,user2 "
usuario="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
echo "$usuario ALL=(root) NOPASSWD:$directory_fiptables/$fiptables " > /etc/sudoers.d/$fiptables
echo "alias $fiptables='sudo $fiptables'" >  /etc/bash_completion.d/$fiptables
zenity --info --ellipsize --text="ok $( $fiptables list-sudo)"
;;
remove-sudo*)
zenity --info --ellipsize --text="ok $($fiptables remove-sudo)"
;;
list-sudo*)
untexto="$($fiptables list-sudo)"
zenity --info --ellipsize --text="$untexto"
;;
#### tool icmp ####
ping-ip4)
untexto="Type the host, example: fast.com"
unahost="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="ok $($fiptables ping-ip4 $unahost)"
;;
ping-ip4*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
ping-ip6)
untexto="Type the host, example: fast.com"
unahost="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="ok $($fiptables ping-ip6 $unahost)"
;;
ping-ip6*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
#### tool udp ####
trace-ip4)
untexto="Type the host, example: fast.com"
unahost="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="ok $($fiptables trace-ip4 $unahost)"
;;
trace-ip4*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
trace-ip6)
untexto="Type the host, example: fast.com"
unahost="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="ok $($fiptables trace-ip6 $unahost)"
;;
ping-ip6*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
host)
untexto="Type the host, example: fast.com"
unahost="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="ok $($fiptables host $unahost)"
;;
host*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
resolveip)
untexto="Type the host or ip, example: fast.com"
unahost="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="ok $( $fiptables resolveip $unahost)"
;;
resolveip*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
geoip)
untexto="Type the host, example: fast.com"
unahost="$(zenity --forms --title="$titulo" --text="$untexto" --add-entry="$untexto")"
zenity --info --ellipsize --text="ok $( $fiptables geoip $unahost)"
;;
geoip*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
#### options help ####
ayuda*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
help*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
mini-wizard*)
head "$flinea" "$0" | grep -iv ^# | tail "$fvariables" | head -9 | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/mini-wizard.cfg"
zenity --info --ellipsize --text="ok $($which_graphicall_editor $directory_config/mini-wizard.cfg)"
zenity --info --ellipsize --text="ok $(fwiptables client mini-wizard.cfg)"
;;
#### options several ####
*)
zenity --info --ellipsize --text="$($fiptables $menugtk)"
;;
esac
zenity --info --ellipsize --text="press [ok] to continue with the $fiptables gui"
$fiptables gui
exit ; fi
##############################       english: version: system script, the version option
##############################       spanish: version: script de sistema, la opcion mostrar version
if [ "$first_option" = "version" ]; then echo -n
echo
echo "Name program:"
echo "$fprogram"
echo
echo "Description program:"
echo "$fdescription"
echo
echo "Exec program:"
echo "$directory_fiptables/$fiptables"
echo
echo "Config directory:"
echo "$directory_config"
echo
echo "Firewall export directory"
echo "$directory_fwrecover"
echo
echo "Version program:"
echo "$fversion"
exit ; fi
##############################       english: reconfig: system script, the reconfig option, delete and create files1.cfg
##############################       spanish: reconfig: script de sistema, la opcion reconfigurar, borra y crea files1.cfg
if [ "$first_option" = "reconfig" ]; then echo -n
rm $directory_config/*ample1.cfg &> /dev/null
echo
echo "$cincuenta $fprogram version $fversion $cinco"
echo "$cinco    Updating default configurations of examples:  $directory_config/*ample1.cfg "
echo
echo
head $flinea $0 | grep -iv ^# | tail $fvariables | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/$defaultcfg"
head $flinea $0 | grep -iv ^# | tail $fvariables | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/english-example1.cfg"
head $flinea $0 | grep -iv ^# | tail $fvariables | cut -d "#" -f 1,3 | sed "s/#spanish:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"  > "$directory_config/spanish-example1.cfg"
## config: web-example1.cfg #
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/web-example1.cfg
echo "# config  #" >> $directory_config/web-example1.cfg
echo "server_tcp=http,https ;"  >> $directory_config/web-example1.cfg
echo "client_tcp=http,https ;"  >>  $directory_config/web-example1.cfg
echo "client_udp=domain,ntp,bootpc ;"  >>  $directory_config/web-example1.cfg
echo "allow_ping_send=no ;" >> $directory_config/web-example1.cfg
echo "allow_pring_recive=no ;" >> $directory_config/web-example1.cfg
## config:  games-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/games-example1.cfg
echo "# config  #" >> $directory_config/games-example1.cfg
echo "client_udp=domain,ntp,bootpc,1025:60000; " >> $directory_config/games-example1.cfg
echo "client_tcp=http,https" >> $directory_config/games-example1.cfg
echo "allow_ping_send= ; allow_ping_recive= ; "  >> $directory_config/games-example1.cfg
## config:  torrent-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/torrent-example1.cfg
echo "# config  #" >> $directory_config/torrent-example1.cfg
echo "client_udp=domain,ntp,bootpc,1025:60000; " >> $directory_config/torrent-example1.cfg
echo "client_tcp=http,https" >> $directory_config/torrent-example1.cfg
echo "allow_ping_send=no ;  allow_ping_recive=no ; "  >> $directory_config/torrent-example1.cfg
## config: samba-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/samba-example1.cfg
echo "# config  #" >> $directory_config/samba-example1.cfg
echo "client_udp=domain,ntp,bootpc,137:139 ; " >> $directory_config/samba-example1.cfg
echo "client_tcp=http,https,ipp,microsoft-ds" >> $directory_config/samba-example1.cfg
echo "server_udp=137:139 ; " >> $directory_config/samba-example1.cfg
echo "server_tcp=ssh,ipp,microsoft-ds" >> $directory_config/samba-example1.cfg
echo "allow_ping_send= ; allow_ping_recive= ; "  >> $directory_config/samba-example1.cfg
## config: vpn-sample1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/vpn-example1.cfg
echo "# config  #" >> $directory_config/vpn-example1.cfg
echo "allow_forwading= ; " >> $directory_config/vpn-example1.cfg
echo "allow_vpn= ; " >> $directory_config/vpn-example1.cfg
echo "vpn=wesnoth.org,sourceforge.net" >> $directory_config/vpn-example1.cfg
echo "allow_ping_send= ; allow_ping_recive= ; "  >> $directory_config/vpn-example1.cfg
## config: email-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/email-example1.cfg
echo "# config  #" >> $directory_config/email-example1.cfg
echo "client_tcp=http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps" >> $directory_config/email-example1.cfg
echo "server_tcp=ssh,http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps" >> $directory_config/email-example1.cfg
echo "allow_ping_send= ; " >> $directory_config/email-example1.cfg
echo "allow_ping_recive= " >> $directory_config/email-example1.cfg
## config: ssh-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/ssh-example1.cfg
echo "# config  #" >> $directory_config/ssh-example1.cfg
echo "client_tcp=http,https,printer,ipp,ssh,rsync,git" >> $directory_config/ssh-example1.cfg
echo "server_tcp=http,https,printer,ipp,ssh,rsync,git" >> $directory_config/ssh-example1.cfg
echo "allow_ping_send= ; " >> $directory_config/ssh-example1.cfg
echo "allow_ping_recive= ;" >> $directory_config/ssh-example1.cfg
## config: vnc-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/vnc-example1.cfg
echo "# config  #" >> $directory_config/vnc-example1.cfg
echo "client_tcp=http,https,ssh,5900:5910" >> $directory_config/vnc-example1.cfg
echo "server_tcp=ssh,http,https,5900:5910" >> $directory_config/vnc-example1.cfg
echo "allow_ping_send= ; allow_ping_recive= ; "  >> $directory_config/vnc-example1.cfg
## config: ftp-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/ftp-example1.cfg
echo "# config  #" >> $directory_config/ftp-example1.cfg
echo "client_tcp=http,https,ftp,ftp-data,ftps,gsiftp,zope-ftp" >> $directory_config/ftp-example1.cfg
echo "server_tcp=ssh,http,https,ftp,ftp-data,ftps,gsiftp,zope-ftp" >> $directory_config/ftp-example1.cfg
echo "client_udp=domain,ntp,bootpc,tftp">> $directory_config/ftp-example1.cfg
echo "server_udp=tftp">> $directory_config/ftp-example1.cfg
echo "allow_ping_send= ; allow_ping_recive= ;" >> $directory_config/ftp-example1.cfg
## config: printer-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/printer-example1.cfg
echo "# config  #" >> $directory_config/printer-example1.cfg
echo "client_tcp=http,https,ipp,printer" >> $directory_config/printer-example1.cfg
echo "server_tcp=ssh,http,https,ipp,printer" >> $directory_config/printer-example1.cfg
echo "allow_ping_send= ; allow_ping_recive= ; "  >> $directory_config/printer-example1.cfg
## config: irc-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/irc-example1.cfg
echo "# config  #" >> $directory_config/irc-example1.cfg
echo "client_tcp=http,https,ircd,ircs-u" >> $directory_config/irc-example1.cfg
echo "server_tcp=ssh,http,https,ircd,ircs-u" >> $directory_config/irc-example1.cfg
echo "allow_ping_send=no ; allow_ping_recive=no ; "  >> $directory_config/irc-example1.cfg
## config: sql-example1.cfg ##
sed 's/^/# for default # /g' $directory_config/default.cfg > $directory_config/sql-example1.cfg
echo "# config  #" >> $directory_config/sql-example1.cfg
echo "client_tcp=http,https,mysql,postgresql,mysql-proxy,ms-sql-s" >> $directory_config/sql-example1.cfg
echo "server_tcp=ssh,http,https,mysql,postgresql,mysql-proxy,ms-sql-s" >> $directory_config/sql-example1.cfg
echo "allow_ping_send= ; allow_ping_recive= ; "  >> $directory_config/sql-example1.cfg
case $0 in
"$directory_fiptables/$fiptables")
echo -n
;;
*)
cp $0 $directory_fiptables/$fiptables &> /dev/null
;;
esac
echo "     Updated the configs for $fiptables in $directory_config"
echo
echo "$cincuenta   The configs are in folder $directory_config,  $cinco"
ls $directory_config | fmt $flistado  ;
exit ; fi
##############################       english: web-upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: web-upgrade: actualiza en el archivo /usr/bin/fwiptables
if [ "$first_option" = "web-upgrade" ]; then echo -n
echo "$fprogram version $fversion"
echo "$cincuenta Web upgrade $fprogram"
echo "Upgrade The $fiptables in file $directory_fiptables/$fiptables with $favorite_text_browser command"
flinks=$(which links)
echo "Downloading $fiptables with the comand $favorite_text_browser browser"
echo "Waiting several seconds ..."
$favorite_text_browser -dump "$fweb_newfiles" | grep -i "download latest version"  &&
$favorite_text_browser -source "$fweb_latest" > "/tmp/$fiptables" &&
chmod ugo+x /tmp/$fiptables
/tmp/$fiptables
echo "$fprogram is upgraded: ok"
echo "$cincuenta      upgraded $fiptables"
echo "$cinco     upgraded:     $directory_fiptables/$fiptables"
$directory_fiptables/$fiptables reconfig
exit ; fi
##############################       english: upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: upgrade: actualiza en el archivo /usr/bin/fwiptables
if [ "$first_option" = "upgrade" ]; then  echo -n
echo "$fprogram version $fversion"
echo "$cincuenta  Upgrade"
echo "  The actually version is" 
echo "       $fprogram has the version $fiptables $fversion actually" 
echo "  The latest version is" 
$favorite_text_browser -dump $fweb_newfiles  | grep -i "download latest version"  
echo "$cinco"
echo "    Upgrade The fwiptables in file $directory_fiptables/$fiptables with $favorite_text_browser" ; echo ;
echo " $cinco    download manually   || or launch ||   $0 web-upgrade"
echo "     $favorite_text_browser -source $fweb_latest > $directory_fiptables/$fiptables"
echo "     chmod ugo+x $directory_fiptables/$fiptables"
echo "     /usr/bin/$fiptables reconfig"
echo " $cinco    ok and it will be upgrade with the name $directory_fiptables/$fiptables" ;
exit;  fi
#############################       english: eraserules: system script, the erase rules option
#############################       spanish: eraserules: script de sistema, la opcion borra reglas
if [ "$first_option" = "eraserules" ]; then echo -n ;
echo "$fprogram version $ver"
echo "$cincuenta Deleting rules iptables"
$directory_binary/iptables-nft -t filter -F
$directory_binary/ip6tables-nft -t filter  -F
$directory_binary/iptables-legacy -t filter -F
$directory_binary/ip6tables-legacy -t filter -F ;
$directory_binary/iptables-nft -t nat -F
$directory_binary/ip6tables-nft -t nat  -F
$directory_binary/iptables-legacy -t nat -F
$directory_binary/ip6tables-legacy -t nat -F ;
echo " Erased all rules from [ipv4 and ipv6] for iptables [filter and nat] with [neftables and xtables]";
exit; fi
#############################       english: route: system script, the iproute option
#############################       spanish: route: script de sistema, la opcion iproute
## comments: sed is necesary to full work in graphicall
##
if [ "$first_option" = "route" ]; then   echo  -n
echo "$fprogram version $fversion"
echo "$cincuenta  Show ip address and ip route"
echo "$(uname -a)"
echo "$cinco  ip address  $cinco "
case $"($which_ip address)" in
$NULL)
echo "Without ip command"
;;
*)
echo "$($which_ip address | sed 's/,/_/g' | sed 's/</_/g' | sed 's/>/_/g' )"
;;
esac
echo "$cinco  ip route  $cinco"
case $($which_ip route) in
$NULL)
echo "Without route ip"
;;
*)
echo "$($which ip route | sed 's/,/_/g' | sed 's/</_/g' | sed 's/>/_/g' )"
;;
esac
echo "$cinco  ip tunnel  $cinco"
case $($which ip tunnel) in
$NULL)
echo "Without tunnel ip"
;;
*)
echo "$($which_ip tunnel | sed 's/,/_/g' | sed 's/</_/g' | sed 's/>/_/g' )"
;;
esac
exit; fi
#############################       english: ss: system script, the sockets option
#############################       spanish: ss: script de sistema, la opcion sockets
if [ "$first_option" = "ss" ]; then echo -n ;
case $(which ss) in
"$NULL")
echo " Install ss"
;;
*)
echo "$fprogram version $fversion";
echo "$cincuenta    The sockets list with ss   $cinco" ;
uname -a
echo "$cinco      The ipv6 sockets       $cinco"
$which_ss -a6
echo "$cinco      The ipv4 sockets      $cinco"
$which ss -a4
;;
esac
exit; fi
#############################       english: lsof: system script, the lsof option
#############################       spanish: lsof: script de sistema, la lsof sockets
if [ "$first_option" = "lsof" ]; then echo -n ;
case $(which lsof) in
"$NULL")
echo " Install lsof"
echo ;;
*)
echo "$fprogram version $fversion firewall linux ";
echo "$cincuenta The sockets list with lsof   $cinco"
uname -a
echo "$cinco      The sockets with lsof      $cinco"
$which lsof -i
;;
esac
exit; fi
#############################      english: netstat: system script, the netstat sockets
#############################      spanish: netstat: script de sistema, el netstat  sockets
if [ "$first_option" = "netstat" ]; then echo -n ;
case $(which netstat) in
"$NULL")
echo " Install netstat"
;;
*)
echo "$fprogram version $fversion"
echo "$cincuenta  The sockets list with netstat"
uname -a
echo "$cincuenta      The devices list with netstat      $cinco" ;
$which_netstat -i
echo "$cincuenta      The route table with  netstat      $cinco" ;
$which_netstat -r
echo "$cincuenta      The sockets list with netstat      $cinco" ;
$which_netstat -a -4 -6
;;
esac
exit; fi
#############################       english: list: system script, the list option
#############################       spanish: list: script de sistema, la opcion lista
if [ "$first_option" = "list" ]; then echo -n ;
legacycuatro=$("$directory_binary/iptables-legacy" -t filter -L INPUT 1) &> /dev/null
nftcuatro=$("$directory_binary/iptables-nft" -t filter -L INPUT 1) &> /dev/null
 echo "$fprogram version $fversion"
 echo "$cincuenta   List filter ipv4"
 case $legacycuatro in
 "$NULL")
 echo "$cinco  [Without rules xtables ipv4]";
 ;;
 *)
 echo "$cinco  [With rules xtables ipv4]"
 $directory_binary/iptables-legacy -v -L INPUT
 $directory_binary/iptables-legacy -v -L OUTPUT ;;
 esac
 case $nftcuatro in
 "$NULL")
 echo "$cinco  [Without rules neftables ipv4]";
 ;;
 *)
 echo "$cinco  [With rules neftables ipv4]"
 $directory_binary/iptables-nft -v -L INPUT
 $directory_binary/iptables-nft -v -L OUTPUT
 ;;
 esac
exit; fi
############################       english: forward: system script, the forward option to list iptables filter forward rules
############################       spanish: forward: script de sistema, la opcion forward para listar reglas de iptables filter forward
 if [ "$first_option" = "forward" ]; then echo -n
 echo "  $fprogram version $fversion" ;
 echo "$cincuenta  List filter forward ipv4"
 echo $cinco " [The xtables ipv4]"
 $directory_binary/iptables-legacy -v -L FORWARD
 echo "$cinco  [The netftables ipv4] "
 $directory_binary/iptables-nft -v -L FORWARD
 exit; fi
############################       english: list6: system script, the list6 option to list ipv6 rules
############################       spanish: list6: script de sistema, la opcion list6 para listar reglas de ipv6
 if [ "$first_option" = "list6" ]; then echo -n
legacyseis=$("$directory_binary/ip6tables-legacy" -t filter -L INPUT 1)
nftseis=$("$directory_binary/ip6tables-nft" -t filter -L INPUT 1)
 echo "  $fprogram version $fversion"
 echo "$cincuenta   List filter ipv6"
 case $legacyseis in
 "$NULL")
 echo "$cinco  [Without rules xtables ipv6]"
 echo -n ;;
 *)
 echo "$cinco  [With rules xtables ipv6]"
 $directory_binary/ip6tables-legacy -v -L INPUT
 $directory_binary/ip6tables-legacy -v -L OUTPUT
 ;;
 esac
 case $nftseis in
 "$NULL")
 echo "$cinco  [Without rules neftables ipv6]";
 ;;
 *)
 echo "$cinco  [With rules neftables ipv6]"
 $directory_binary/ip6tables-nft -v -L INPUT
 $directory_binary/ip6tables-nft -v -L OUTPUT
 echo -n
 esac
 exit; fi
############################       english: forward6: system script, the forward6 option to list iptables filter forward rules
############################       spanish: forward6: script de sistema, la opcion forward6 para listar reglas de iptables filter forward
 if [ "$first_option" = "forward6" ]; then echo -n
 echo "  $fprogram version $fversion" ;
 echo "$cincuenta   List filter forward ipv6"
 echo $cinco " [The xtables ipv6]"
 $directory_binary/ip6tables-legacy -v -L FORWARD
 echo "$cinco  [The netftables ipv6] "
 $directory_binary/ip6tables-nft -v -L FORWARD
 exit; fi
############################       english: nat-ip4: system script, the nat-ip4 option to list NAT rules of ipv4
############################       spanish: nat-ip4: script de sistema, la opcion nat-ip4 para listar reglas de NAT de ipv4
if [ "$first_option" = "nat-ip4" ]; then echo -n
 echo "$fprogram version $fversion "
 echo "$cincuenta   NAT ipv4"
 echo "$cinco  [The xtables ipv4]"
 $directory_binary/iptables-legacy -t nat -v -L
 echo "$cinco  [The neftables ipv4]"
 $directory_binary/iptables-nft -t nat -v -L
 exit; fi
############################       english: nat-ip6: system script, the nat-ip6 option to list NAT rules of ipv6
############################       spanish: nat-ip6: script de sistema, la opcion nat-ip6 para listar reglas de NAT de ipv6
if [ "$first_option" = "nat-ip6" ]; then echo -n
 echo "$fprogram version $fversion"
 echo "$cincuenta   NAT ipv6"
 echo "$cinco  [The xtables ipv6]"
 $directory_binary/ip6tables-legacy -t nat -v -L
 echo "$cinco  [The neftables ipv6]"
 $directory_binary/ip6tables-nft -t nat -v -L
 exit; fi
#############################       english: listnum: system script, the list option numerical
#############################       spanish: listnum: script de sistema, la opcion lista numeral
if [ "$first_option" = "listnum" ]; then echo -n ;
legacycuatro=$("$directory_binary/iptables-legacy" -t filter -L INPUT 1)
nftcuatro=$("$directory_binary/iptables-nft" -t filter -L INPUT 1)
 echo "  $fprogram version $fversion"
 echo "$cincuenta   List filter ipv4 numerical"
 case $legacycuatro in
 "$NULL")
 echo "$cinco  [Without rules xtables ipv4]";
 ;;
 *)
 echo "$cinco  [With rules xtables ipv4]"
 $directory_binary/iptables-legacy -v -n -L INPUT
 $directory_binary/iptables-legacy -v -n -L OUTPUT
 ;;
 esac
 case $nftcuatro in
 "$NULL")
 echo "$cinco  [Without rules neftables ipv4]";
 ;;
 *)
 echo "$cinco  [With rules neftables ipv4]"
 $directory_binary/iptables-nft -v -n -L INPUT
 $directory_binary/iptables-nft -v -n -L OUTPUT ;;
 esac
exit; fi
############################       english: forwardnum: system script, the forward option to list iptables filter forward rules
############################       spanish: forwardnum: script de sistema, la opcion forward para listar reglas de iptables filter forward
 if [ "$first_option" = "forwardnum" ]; then echo -n
 echo "  $fprogram version $fversion" ;
 echo "$cincuenta  List filter forward ipv4 numerical"
 echo $cinco " [The xtables ipv4]"
 $directory_binary/iptables-legacy -v -n -L FORWARD
 echo "$cinco  [The netftables ipv4] "
 $directory_binary/iptables-nft -v -n -L FORWARD
 exit; fi
############################       english: listnum6: system script, the list6 option to list ipv6 rules numeral
############################       spanish: listnum6: script de sistema, la opcion list6 para listar reglas de ipv6 numeral
 if [ "$first_option" = "listnum6" ]; then echo -n
legacyseis=$("$directory_binary/ip6tables-legacy" -t filter -L INPUT 1)
nftseis=$("$directory_binary/ip6tables-nft" -t filter -L INPUT 1)
 echo "  $fprogram version $fversion" ;
 echo "$cincuenta   List filter ipv6 numerical"
 case $legacyseis in
 "$NULL")
 echo "$cinco  [Without rules xtables ipv6]"
 ;;
 *)
 echo "$cinco  [With rules xtables ipv6]"
 $directory_binary/ip6tables-legacy -v -n -L INPUT
 $directory_binary/ip6tables-legacy -v -n -L OUTPUT
 echo -n;;
 esac
 case $nftseis in
 "$NULL")
 echo "$cinco  [Without rules neftables ipv6]"
 ;;
 *)
 echo "$cinco  [With rules neftables ipv6]"
 $directory_binary/ip6tables-nft -v -n -L INPUT
 $directory_binary/ip6tables-nft -v -n -L OUTPUT
 ;;
 esac
 exit; fi
############################       english: forwardnum6: system script, the forward6 option to list iptables filter forward rules
############################       spanish: forwardnum6: script de sistema, la opcion forward6 para listar reglas de iptables filter forward
 if [ "$first_option" = "forwardnum6" ]; then echo -n
 echo "  $fprogram version $fversion" ;
 echo "$cincuenta   List filter forward ipv6 numerical"
 echo $cinco " [The xtables ipv6]"
 $directory_binary/ip6tables-legacy -v -n -L FORWARD
 echo "$cinco  [The netftables ipv6] "
 $directory_binary/ip6tables-nft -v -n -L FORWARD
 exit; fi
############################       english: mangle-ip4: system script, the mangle-ip4 option to list mangle rules from ipv4
############################       spanish: mangle-ip4: script de sistema, la opcion mangle-ip4 para listar reglas de mangle de ipv4
if [ "$first_option" = "mangle-ip4" ]; then echo -n
 echo "$fprogram version $fversion"
 echo  "$cincuenta  mangle ipv4"
 echo "$cinco  [The xtables ipv4]"
 $directory_binary/iptables-legacy -t mangle -v -L
 echo "$cinco  [The neftables ipv4]"
 $directory_binary/iptables-nft -t mangle -v -L
 exit; fi
############################       english: mangle-ip6: system script, the mangle-ip6 option to list mangle rules of ipv6
############################       spanish: mangle-ip6: script de sistema, la opcion mangle-ip6 para listar reglas de mangle de ipv6
if [ "$first_option" = "mangle-ip6" ]; then echo -n
 echo "$fprogram version $fversion"
 echo "$cincuenta  mangle ipv6"
 echo "$cinco  [The xtables ipv6]"
 $directory_binary/ip6tables-legacy -t mangle -v -L
 echo "$cinco  [The neftables ipv6]"
 $directory_binary/ip6tables-nft -t mangle -v -L
 exit; fi
############################       english: raw-ip4: system script, the raw-ip4 option to list raw rules from ipv4
############################       spanish: raw-ip4: script de sistema, la opcion raw-ip4 para listar reglas de raw de ipv4
if [ "$first_option" = "raw-ip4" ]; then echo -n
 echo "$fprogram version $fversion"
 echo  "$cincuenta  raw ipv4"
 echo "$cinco  [The xtables ipv4]"
 $directory_binary/iptables-legacy -t raw -v -L
 echo "$cinco  [The neftables ipv4]"
 $directory_binary/iptables-nft -t raw -v -L
 exit; fi
############################       english: raw-ip6: system script, the raw-ip6 option to list raw rules of ipv6
############################       spanish: raw-ip6: script de sistema, la opcion raw-ip6 para listar reglas de raw de ipv6
 if [ "$first_option" = "raw-ip6" ]; then echo -n
 echo "$fprogram version $fversion"
 echo  "$cincuenta  raw ipv6"
 echo "$cinco  [The xtables ipv6]"
 $directory_binary/ip6tables-legacy -t raw -v -L
 echo "$cinco  [The neftables ipv6]"
 $directory_binary/ip6tables-nft -t raw -v -L
 exit; fi
############################       english: security-ip4: system script, the security-ip4 option to list security rules from ipv4
############################       spanish: security-ip4: script de sistema, la opcion security-ip4 para listar reglas de security de ipv4
 if [ "$first_option" = "security-ip4" ]; then echo -n
 echo "$fprogram version $fversion"
 echo  "$cincuenta  security ipv4"
 echo "$cinco  [The xtables ipv4]"
 $directory_binary/iptables-legacy -t security -v -L
 echo "$cinco  [The neftables ipv4]"
 $directory_binary/iptables-nft -t security -v -L
 exit; fi
############################       english: security-ip6: system script, the security-ip6 option to list security rules of ipv6
############################       spanish: security-ip6: script de sistema, la opcion security-ip6 para listar reglas de security de ipv6
if [ "$first_option" = "security-ip6" ]; then echo -n
 echo "$fprogram version $fversion"
 echo  "$cincuenta  security ipv6"
 echo "$cinco  [The xtables ipv6]"
 $directory_binary/ip6tables-legacy -t security -v -L
 echo "$cinco  [The neftables ipv6]"
 $directory_binary/ip6tables-nft -t security -v -L
 exit; fi
############################       english: ebtables: system script, the ebtables option to list ethernet
############################       spanish: ebtables: script de sistema, la opcion ebtables to list ethernet
 if [ "$first_option" = "ebtables" ]; then echo -n
 echo "$fprogram version $fversion"
 echo  "$cincuenta ebtables ethernet nft"
 echo "$cinco filter ethernet nft"
 $which_ebtables -L -t filter
 echo "$cinco nat ethernet nft"
 $which_ebtables -L -t nat
 exit; fi
############################       english: arptables: system script, the ebtables option to list arp
############################       spanish: arptables: script de sistema, la opcion ebtables to list arp
 if [ "$first_option" = "arptables" ]; then echo -n
 echo "$fprogram version $fversion"
 echo "$cincuenta arptables arp"
 $which_arptables -L
 exit; fi
############################       english: new-config: system script, the new-config option to create new configs
############################       spanish: new-config: script de sistema, la opcion new-config para cear nuevas config
if [ "$first_option" = "new-config" ]; then echo -n
case $second_option in
"$NULL")
config_option="si"
;;
esac
case "$config_option" in
"si")
echo
echo "$fprogram version $fversion"
echo "$cincuenta New config $cinco"
echo
echo "     Type the filename for a one new configuration it will be in path $directory_config";
echo "     Or control+c to stop"
echo "$cinco"
read -r -p "          Type one new filename without path [ New-Config.cfg ]:  " frespuestaa
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
;;
"no")
frespuestaa="$second_option"
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
;;
esac
echo "  The new file will be $directory_config/$frespuestab"
echo "  Edit the file $frespuestab"
head $flinea $0 | grep -iv ^# | tail $fvariables | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g" > $directory_config/$frespuestab
$favorite_text_editor "$directory_config/$frespuestab"

echo "  $cinco        launch the firewall for client:           $fiptables client $frespuestab   "
echo "  $cinco        launch the firewall for server:           $fiptables server $frespuestab   "
exit; fi
############################       english: nueva-config: system script, the nueva-config option to create new configs
############################       spanish: nueva-config: script de sistema, la opcion nueva-config para cear nuevas config
if [ "$first_option" = "nueva-config" ]; then echo -n
case $second_option in
"$NULL")
config_option="si"
;;
esac
case "$config_option" in
"si")
echo
echo "$fprogram version $fversion"
echo "$cincuenta Nueva config $cinco"
echo
echo "     Escribe un nuevo nombre de archivo sin ruta"
echo "     O control+c to parar"
echo "$cinco"
read -r -p "          Escribe un nuevo nombre de archivo sin ruta [ Nueva-Configuracion.cfg ]:  " frespuestaa
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
;;
"no")
frespuestaa="$second_option"
frespuestab="$(echo $frespuestaa | sed 's/\///g' )"
;;
esac
echo "  El nuevo archivo estara en $directory_config/$frespuestab" ;
echo "  Edita el archivo $frespuestab "
head $flinea $0 | grep -iv ^# | tail $fvariables | cut -d "#" -f 1,3 | sed "s/#spanish:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g" > $directory_config/$frespuestab
$favorite_text_editor "$directory_config/$frespuestab"
echo "  $cinco        lanza el cortafuegos para cliente:              $fiptables client $frespuestab   "
echo "  $cinco        O lanza el cortafuegos para servidor:           $fiptables server $frespuestab   "
exit; fi
############################       english: clone-config, clone a one existent config.cfg
############################       spanish: clone-config, clona una configuracion.cfg
if [ "$first_option" = "clone-config" ]; then echo -n
case $config_option in
"no")
echo
echo "$fprogram version $fversion"
echo "$cincuenta  Clone config $cinco"
echo
echo "$cinco   The configs are in folder $directory_config : "
echo
ls $directory_config | fmt $flistado
echo
echo "     Type the filename for a old configuration wich will be in path $directory_config"
echo "     Or Control+c to stop"
echo "$cinco"
read -r -p  "     RENAME: Type the name of one old config to clone, whitout path: [ Config-Old-To-Clone.cfg ] " fvieja ; fviejab=$(sed 's/\///g' <<< "$fvieja")
echo        "     the old name is : $fviejab"
echo "$cinco"
read -r -p  "     RENAME: Type the name of one new config, whitout path: [ Config-New.cfg ] " fnueva ; fnuevab=$(sed 's/\///g' <<< "$fnueva")
echo        "     the new name is : $nuevab"
cp $directory_config/$fviejab $directory_config/$fnuevab
;;
"si")
fviejab="$(echo $second_option | sed 's/\///g' )"
fnuevab="$(echo $third_option | sed 's/\///g' )"
cp $directory_config/$fviejab $directory_config/$fnuevab
;;
esac
echo  cloned $fviejab in $fnuevab
echo "  $cinco        Launch the firewall for client:            $fiptables client $fnuevab   " ;
echo "  $cinco        launch the firewall for server:            $fiptables server $fnuevab   " ;
exit; fi
############################       english: rename-config, rename a one existent config.cfg
############################       spanish: rename-config, renombra una existente configuracion.cfg
if [ "$first_option" = "rename-config" ]; then echo -n
case $config_option in
"no")
echo "$fprogram version $fversion"
echo "$cincuenta  Clone config $cinco"
echo
echo "$cinco   The configs are in folder $directory_config : "
echo
ls $directory_config | fmt $flistado
echo
echo "     Type the filename for a old configuration wich will be in path $directory_config"
echo "     Or Control+c to stop"
echo "$cinco"
read -r -p  "     RENAME: Type the name of one old config to rename, whitout path: [ Config-Old-To-Rename.cfg ] " fvieja ; fviejab=$(sed 's/\///g' <<< "$fvieja")
echo        "     the old name is : $fviejab"
echo "$cinco"
read -r -p  "     RENAME: Type the name of one new name of config, whitout path: [ Config-New.cfg ] " fnueva ; fnuevab=$(sed 's/\///g' <<< "$fnueva")
echo        "     the new name is : $nuevab"
mv $directory_config/$fviejab $directory_config/$fnuevab
;;
"si")
fviejab="$(echo $second_option | sed 's/\///g' )"
fnuevab="$(echo $third_option | sed 's/\///g' )"
cp $directory_config/$fviejab $directory_config/$fnuevab
;;
esac
echo  renamed $fviejab in $fnuevab
echo "  $cinco        Launch the firewall for client:            $fiptables client $fnuevab   " ;
echo "  $cinco        launch the firewall for server:            $fiptables server $fnuevab   " ;
exit; fi
############################       english: modify-config: modify a one config.cfg
############################       spanish: modify-config: modify una configuracion.cfg
if [ "$first_option" = "modify-config" ]; then echo -n
echo
case "$config_option" in
"si")
$favorite_text_editor "$directory_config/$second_option"
;;
"no")
echo "$fprogram version $fversion"
echo "$cincuenta Modify config $cinco"
echo
echo "$cinco   The configs are in folder $directory_config : "
echo
ls $directory_config | fmt $flistado
echo
echo "     Type the filename for a old configuration wich will be in path $directory_config"
echo "     Or Control+c to stop"
echo "$cinco"
read -r -p  "     Type the name of one config file to modify, whitout path: [ Config-To-Modify.cfg ] " frespuestaa
frespuestab=$(sed 's/\///g' <<< "$frespuestaa")
$favorite_text_editor $directory_config/$frespuestab 
echo "  $cinco        Launch the firewall for client:           $fiptables client $frespuestab   " ;
echo "  $cinco        launch the firewall for server:           $fiptables server $frespuestab   " ;
;;
esac
exit; fi
############################       english: show-config: show a one config
############################       spanish: show-config: muestra una configuracion
if [ "$first_option" = "show-config" ]; then echo -n
echo
case "$config_option" in
"si")
cat "$directory_config/$second_option"
;;
"no")
echo "$fprogram  version $fversion"
echo "$cincuenta Show config $cinco"
echo
echo "$cinco   The configs are in folder $directory_config : "
echo
ls $directory_config | fmt $flistado
echo
echo "     Type the filename to show configuration wich will be in path $directory_config"
echo "     Or Control+c to stop"
echo "$cinco"
read -r -p  "     Type the name of one config file to show, whitout path: [ Config-To-Show.cfg ] " frespuestaa
frespuestab=$(sed 's/\///g' <<< "$frespuestaa")
echo "     $cinco     file: $directory_config/$frespuestab" ;
cat $directory_config/$frespuestab ;
echo
echo "  $cinco        Launch the firewall for client:            $fiptables client $frespuestab   " ;
echo "  $cinco        launch the firewall for server:            $fiptables server $frespuestab   " ;
esac
exit; fi
############################       english: del-config: delete a old config
############################       spanish: del-config: elimina una vieja configuracion
if [ "$first_option" = "del-config" ]; then echo -n
echo
case "$config_option" in
"si")
rm "$directory_config/$second_option"
echo "$directory_config/$second_option" deleted
;;
"no")
echo "$fprogram version $fversion"
echo "$cincuenta  Delete config $cinco"
echo
echo $cinco "  The configs are in folder $directory_config : "
echo
ls $directory_config | fmt $flistado
echo
echo        "     The files are in path $directory_config"
echo        "     Or Control+c to stop"
echo
echo "$cinco"
read -r -p  "     Type the name of one old config to delete, whitout path: [ Config-To-Delete.cfg ] " fborrada
fborradaa=$(sed 's/\///g' <<< "$fborrada")
echo
rm $directory_config/$fborradaa
echo        "     Config deleted: $fborrada"
echo ;;
esac
exit; fi
############################       english: auth-sudo: the auth-sudo option en english
############################       spanish: auth-sudo: la opcion de auth-sudo en ingles
if [ "$first_option" = "auth-sudo" ]; then echo
case $second_option in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta Auth-sudo $cinco"
echo
echo "$cinco    Auth for sudo to users: "
echo "$cinco    Auth for sudo at the users choosed "
echo "$cinco                                              Example:      user1,user2 "
echo "$cinco    The users authorizated will launch without passwd:      sudo $fiptables "
echo "     Control+c to stop"
read -r -p "#####    [Type the user/uesrs to auth in $fiptables :    ] " autorizados
;;
*)
autorizados="$second_option"
;;
esac
echo "$autorizados ALL=(root) NOPASSWD:$directory_fiptables/$fiptables " > /etc/sudoers.d/$fiptables
echo "alias $fiptables='sudo $fiptables'" >  /etc/bash_completion.d/$fiptables
echo "$cinco $cinco"
echo "$cinco    Ok. $autorizados will use:     $fiptables"
echo "$cinco    Ok. $fiptables will use alias with sudo "
echo "$cinco sudoer file:   /etc/sudoers.d/$fiptables"
cat /etc/sudoers.d/$fiptables
echo "$cinco alias file:   /etc/bash_completion.d/$fiptables"
cat /etc/bash_completion.d/$fiptables
exit; fi
############################       english: remove-sudo: the remove-sudo option en english
############################       spanish: remove-sudo: la opcion de remove-sudo en ingles
if [ "$first_option" = "remove-sudo" ]; then echo
rm /etc/sudoers.d/$fiptables
rm /etc/bash_completion.d/$fiptables
echo "$cinco deleted auth sudo"
echo "deleted /etc/sudoers.d/$fiptables"
echo "deleted /etc/bash_completion.d/$fiptables"
exit; fi
############################       english: list-sudo: the auth-sudo option en english
############################       spanish: list-sudo: la opcion de auth-sudo en ingles
if [ "$first_option" = "list-sudo" ]; then echo
echo
echo "$fprogram version $fversion"
echo "$cincuenta Auth-sudo $cinco"
echo
case $(find /etc/sudoers.d/$fiptables) in
/etc/sudoers.d/$fiptables)
echo "$cinco sudoer file:   /etc/sudoers.d/$fiptables"
cat /etc/sudoers.d/$fiptables
echo
echo "$cinco alias file:   /etc/bash_completion.d/$fiptables"
cat /etc/bash_completion.d/$fiptables
;;
*)
echo "There is not auth users for $fiptables"
echo -n ;;
esac
exit; fi
############################       english: ipforwading: the ipforwading option en english
############################       spanish: ipforwading: la opcion de reenvios  en ingles
if [ "$first_option" = "ipforwading" ]; then echo -n
echo "$fprogram version $fversion"
echo "$cincuenta Show ipforwading $cinco"
uname -a
echo "$cinco    Active 1 or deactive 0 for ipforwading with sysctl:     $cinco"
$directory_binary/sysctl -a | grep -i forwarding
exit; fi
############################       english: tcpdump: listen at dump from conexiones
############################       spanish: tcpdump: escucha al volcado de conexiones
if [ "$first_option" = "tcpdump" ]; then echo -n
case $(which tcpdump) in
"$NULL")
echo " Install tcpdump"
;;
*)
echo "$fprogram version $fversion"
echo "$cincuenta  Listening tcpdump"
echo "  Launch manually tcpdump"
;;
esac
exit; fi
############################       english: arp: listen at dump from conexiones
############################       spanish: arp: escucha al volcado de conexiones
if [ "$first_option" = "arp" ]; then echo -n
echo "$fprogram version $fversion"
echo "$cincuenta  the last arp conections"
$which_arp -a
exit; fi
############################       english: fw-list: file list whith rules in iptables format
############################       spanish: fw-list: lista de archivos con reglas en formato iptables
if [ "$first_option" = "fw-list" ]; then echo -n
echo "$cincuenta iptables list $cinco"
echo "File list with rules in iptables format in folder $directory_fwrecover"
ls $directory_fwrecover
exit; fi
############################       english: fw-restore: load the rules in iptables format
############################       spanish: fw-restore: carga las reglas en formato iptables
if [ "$first_option" = "fw-restore" ]; then echo -n
echo "$cincuenta iptables restore $cinco"
echo "Load the rules in iptables format in folder $directory_fwrecover"
echo "$cinco first erase rules with:   fwiptables eraserules"
echo "$cinco the iptables recover files are in folder $directory_fwrecover"
echo "$cinco then iptables restore with one command from above:"
echo "with ipv4 neftables (nft)  :    iptables-nft-restore"
echo "with ipv4 xtables (legacy) :    iptables-legacy-restore"
echo "with ipv6 neftables (nft)  :    ip6tables-nft-restore"
echo "with ipv6 xtables (legacy) :    ip6tables-legacy-restore"
exit; fi
############################       english: fw-save: save the rules in iptables format
############################       spanish: fw-save: guarda las reglas en formato iptables
if [ "$first_option" = "fw-save" ]; then echo -n
echo "$cincuenta iptables save $cinco"
case "$second_option" in
"$NULL")
echo "Save the rules in iptables format in folder $directory_fwrecover"
ls $directory_fwrecover
echo        "     Control+c to stop"
read -r -p  "     Type the name of file to save firewall: [ file ] " archivoini
archivofin=$(sed 's/\///g' <<< "$archivoini")
;;
*)
archivofin=$(sed 's/\///g' <<< "$second_option")
;;
esac
echo "saved $archivofin"
$directory_binary/iptables-nft-save > $directory_fwrecover/$archivofin-nft-ipv4
$directory_binary/iptables-legacy-save > $directory_fwrecover/$archivofin-legacy-ipv4
$directory_binary/ip6tables-nft-save > $directory_fwrecover/$archivofin-nft-ipv6
$directory_binary/ip6tables-legacy-save > $directory_fwrecover/$archivofin-legacy-ipv6
echo "$cinco saved $archivofin $cinco"
ls -l $directory_fwrecover/* | grep -i $archivofin-
exit; fi
############################       english: ping-ip4: ping icmp with ipv4
############################       spanish: ping-ip4: ping icmp with ipv6
if [ "$first_option" = "ping-ip4" ]; then echo -n
case $(which ping) in
"$NULL")
echo " Install ping"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta  ping icmp ipv4 $cinco"
#read -r -p "#####    Type the host to do ping ip4: [ fast.com   ] " trazador
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
ping -4 -c 5 -A $trazador
exit; fi
############################       english: ping-ip6: ping icmp with ipv6
############################       spanish: ping-ip6: ping icmp con ipv6
if [ "$first_option" = "ping-ip6" ]; then echo -n
case $(which ping) in
"$NULL")
echo " Install ping"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta  ping icmp ipv6 $cinco"
# read -r -p "#####    Type the host to do ping ip6: [ fast.com   ] " trazador
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
ping -6 -c 5 -A $trazador
exit; fi
############################       english: trace-ip4: traceroute with tcp and ipv6
############################       spanish: trace-ip4: traceroute con tcp y ipv4
if [ "$first_option" = "trace-ip4" ]; then echo -n
case $(which traceroute) in
"$NULL")
echo " Install traceroute"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta  traceroute tcp ipv4 $cinco"
#read -r -p "#####    Type the host to do traceroute: [ fast.com   ] " trazador
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
traceroute -4 -T $trazador
exit; fi
############################       english: trace-ip6: traceroute with tcp and ipv6
############################       spanish: trace-ip6: traceroute con tcp e ipv6
if [ "$first_option" = "trace-ip6" ]; then echo -n
case $(which traceroute) in
"$NULL")
echo " Install traceroute"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta  traceroute tcp ipv6 $cinco"
# read -r -p "#####    Type the host to do traceroute: [ fast.com   ] " trazador
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
traceroute -6 -T $trazador
exit; fi
############################       english: host: host to resolve ip
############################       spanish: host: host to resolve ip
if [ "$first_option" = "host" ]; then echo -n
case $(which host) in
"$NULL")
echo " Install host"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta resolve host $cinco"
# read -r -p "#####    Type the host to do resolve host: [ fast.com   ] " trazador
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
host $trazador
exit; fi
############################       english: resolveip: host to resolve ip and viceversa
############################       spanish: resolveip: host to resolve ip and viceversa
if [ "$first_option" = "resolveip" ]; then echo -n
case $(which resolveip) in
"$NULL")
echo " Install resolveip"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta resolve ip or host $cinco"
# read -r -p "#####    Type the host to do resolve ip or host: [ fast.com   ] " trazador
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
resolveip $trazador
exit; fi
############################       english: geoip: host to resolve and locate
############################       spanish: geoip: host to resolve and locate
if [ "$first_option" = "geoip" ]; then echo -n
case $(which geoiplookup) in
"$NULL")
echo " Install geoip-bin"
;;
*)
;;
esac
case "$second_option" in
"$NULL")
echo "$fprogram version $fversion"
echo "$cincuenta search geoip $cinco"
# read -r -p "#####    Type the host to do search geoip: [ fast.com   ] " trazador
trazador="fast.com"
;;
*)
trazador="$second_option"
;;
esac
geoiplookup -i $trazador
exit; fi
############################       english: dev-versions: about of program
############################       spanish: dev-versions: acerca del programa
if [ "$first_option" = "dev-versions" ]; then echo -n
echo ""
echo "  $fprogram"
echo "$cincuenta Dev versions $cinco"
echo ""
echo $fweb_development
echo ""
exit; fi
############################       english: new-versions: about of program
############################       spanish: new-versions: acerca del programa
if [ "$first_option" = "new-versions" ]; then echo -n
echo "  $fprogram"
echo "$cincuenta New versions $cinco"
links -dump $fweb_newfiles | egrep -i "iptables"
exit; fi
############################       english: all-versions: about of program
############################       spanish: all-versions: acerca del programa
if [ "$first_option" = "all-versions" ]; then echo -n
echo "  $fprogram"
echo "$cincuenta All versions $cinco"
links -dump $fweb_tree | grep -i root | sed 's/root//g' | cut -c -40 | sort | uniq -u
exit; fi
############################       english: about: about of program
############################       spanish: about: acerca del programa
if [ "$first_option" = "about" ]; then echo -n
echo ""
echo ""
echo "  Fran FireWall iptables"
echo "$cincuenta"
echo ""
echo "$cinco   Program Name:"
echo "  $fprogram"
echo ""
echo "$cinco   Program Description:"
echo "  $fdescription"
echo ""
echo "$cinco   Program Install:"
echo "  chmod ugo+x $fiptables"
echo "  ./$fiptables"
echo "  [and then fwiptables is in $directory_fiptables/$fiptables"]
echo
echo "$cinco   Devevelopments version program:"
echo "The fran iptables ver in development in git code at sourceforge:"
echo ""
echo "  $fweb_development"
echo ""
echo "$cinco   New versions program:"
echo "The fran iptables ver 170 and versions up in files repository at sourceforge:"
echo ""
echo "  $fweb_newfiles"
echo ""
echo "$cinco   All versions program:"
echo "The fran iptables all versions in code repository at sourceforge:"
echo ""
echo "  $fweb_tree"
echo ""
echo "$cinco   Git clone with all versions:"
echo ""
echo "  git clone $fweb_git"
echo
echo "$cinco   Program License:"
echo "  $flicense"
echo ""
echo "$cincuenta"
echo ""
echo ""
exit; fi
############################       english: system-info: get info system
############################       spanish: system-info: da informacion del sistema
if [ "$first_option" = "system-info" ]; then echo -n
echo
echo "$fprogram version $fversion"
echo "$cincuenta   System info $cinco"
echo
echo "$cinco [System info:  Kernel Linux] $cinco"
echo
uname -a
echo
echo "$cinco [System info:  Memory RAM] $cinco"
echo
free -h
echo
echo "$cinco [System info:  Disks] $cinco"
echo
df -h -x tmpfs
echo
exit; fi
############################       english: help: the help option en english
############################       spanish: help: la opcion de ayuda en ingles
if [ "$first_option" = "help" ]; then echo -n
echo
echo "$fprogram version $fversion"
echo "$cincuenta Help $cinco"
echo
echo
echo "$cinco   One First Option "
echo "     [Launch rules]     eraserules offline client server allpermisive wizard"
echo "     [List rules]       list forward list6 forward6 nat-ip4 nat-ip6"
echo "                        listnum forwardnum listnum6 forwardnum6"
echo "     [Other table]      raw-ip4 raw-ip6 mangle-ip4 mangle-ip6"
echo "                        security-ip4 security-ip6 ebtables arptables"
echo "     [Modify config]    reconfig show-config new-config nueva-config"
echo "                        modify-config clone-config rename-config del-config"
echo "     [List sockets]     route ss netstat lsof ipforwading tcpdump arp"
echo "     [Recover fw]       fw-list fw-save fw-restore"
echo "     [Auth sudo]        auth-sudo remove-sudo list-sudo"
echo "     [Tool icmp]        ping-ip4 ping-ip6"
echo "     [Tool tcp]         trace-ip4 trace-ip6 host resolveip geoip"
echo "     [Version]          version upgrade dev-versions all-versions"
echo "     [Help]             about system-info help ayuda mini-wizard cli gui"
echo ""
echo "$cinco   The cfg are in $directory_config/[config.cfg]"
echo "[Example:]  $(ls $directory_config| egrep -i "default|wizard|example1.cfg" | fmt $flistado)"
echo "[Own:]  $(ls $directory_config| egrep -iv "default|wizard|example1.cfg" | fmt $flistado)"
echo "$cinco   [The examples]"
echo
echo "  [List iptables rules]                 $fiptables list  "
echo "  [Launch iptables like client web]     $fiptables client web-example1.cfg"
echo "  [Launch iptables like server web]     $fiptables server web-example1.cfg"
echo "  [Remove iptables rules]               $fiptables eraserules "
echo "  [Show long help in english]           $fiptables help "
echo "  [Show long help in spanish]           $fiptables ayuda "
echo
echo
echo "$cincuenta The first option"
echo ""
echo "$cinco         [Launch iptables rules]"
echo
echo "   eraserules: Remove the iptables rules in ipv4 and ipv6"
echo "      offline: Disconected for all servers and clients except localhost"
echo "       client: Configure the firewall for internet client"
echo "       server: Configure the firewall for internet client and internet server"
echo " allpermisive: Configure a firewall very permisive"
echo
echo "$cinco         [List iptables rules]"
echo
echo "               The filter table:"
echo "         list: List iptables filter rules input and output ipv4"
echo "      forward: List iptables filter rules foward"
echo "        list6: List iptables filter rules input and output ipv6"
echo "     forward6: List iptables filter rules forward ipv6"
echo
echo "               The filter table numerical: "
echo "      listnum: List iptables filter rules input and output ipv4 in numbers"
echo "   forwardnum: List iptables filter rules foward in numbers"
echo "     listnum6: List iptables filter rules input and output ipv6 in numbers"
echo "  forwardnum6: List iptables filter rules forward ipv6 in numbers"
echo
echo "$cinco         [The others tables]"
echo
echo "      nat-ip4: List iptables nat rules from ipv4"
echo "      nat-ip6: List iptables nat rules from ipv6"
echo "   mangle-ip4: List iptables mangle rules from ipv4"
echo "   mangle-ip6: List iptables mangle rules from ipv6"
echo "      raw-ip4: List iptables raw rules from ipv4"
echo "      raw-ip6: List iptables raw rules from ipv4"
echo " security-ip4: List iptables security rules from ipv4"
echo " security-ip6: List iptables security rules from ipv6"
echo "     ebtables: List rules ebtables nft ethernet"
echo "    arptables: List rules arptables arp"
echo
echo "$cinco         [Modify config]"
echo
echo "     reconfig: Rewrite default files in $directory_config/*sample1.cfg"
echo "   new-config: Create a new configfile.cfg in english"
echo " nueva-config: Create a new configfile.cfg in spanish"
echo " clone-config: Clone a old config in a one new config"
echo "modify-config: Edit one config.cfg"
echo "  show-config: Show one config.cfg"
echo "rename-config: Rename one configuration file"
echo "   del-config: Delete one configuration file"
echo
echo "$cinco         [List open sockets]"
echo
echo "      iproute: Show net devices and ip route tables"
echo "           ss: Show net sockets with command ss"
echo "         lsof: Show net sockets with command lsof"
echo "      netstat: Show net sockets with command netstat"
echo "  ipforwading: Show kernel config about forward"
echo "      tcpdump: Listen the connections"
echo "          arp: List the last conentions arp"
echo
echo "$cinco         [Recover fw]"
echo
echo "      fw-list: Show the files firewall standar"
echo "      fw-save: Save the files in firewall standar"
echo "   fw-restore: Show howto reover files firewall standar"
echo
echo "$cinco         [Auth sudo]"
echo
echo "    auth-sudo: Permit sudo $fiptables to other choosed users"
echo "  remove-sudo: Remove sudo $fiptables to other choosed users"
echo "    list-sudo: List sudo $fiptables to other choosed users"
echo
echo "$cinco         [Tool icmp]"
echo
echo "     ping-ip4: Do a one ping with to one host with ipv4 icmp"
echo "     ping-ip6: Do a one ping with to one host with ipv6 icmp"
echo
echo "$cinco         [Tool tcp]"
echo
echo "    trace-ip4: Trace route a one host with ipv4 tcp"
echo "    trace-ip6: Trace route a one host with ipv6 tcp"
echo "         host: Resolve one host"
echo "    resolveip: Resolve one host and viceversa"
echo "       geo-ip: Locate a one host or ip"
echo
echo "$cinco         [Version]"
echo
echo "      version: Info version program from $fiptables"
echo "      upgrade: Upgrade $fiptables at the latest version"
echo " dev-versions: Version in development from $fiptables"
echo " all-versions: All versions from $fiptables"
echo
echo "$cinco         [Help]"
echo
echo "        about: About the $fiptables"
echo "  system-info: Show info  system"
echo "         help: Show this help in english"
echo "        ayuda: Show this help in spanish"
echo "  mini-wizard: Wizard and Launch simple client iptables"
echo "          cli: Comand line interface with menus"
echo "          gui: Graphicall user interface"
echo ""
echo "$cincuenta The second option: (optional)"
echo ""
echo "    $fiptables client and server takes the config from the command line"
echo "    if launch without specific the config it takes $defaultcfg"
echo "    you can  modify and create the files in the folder $directory_config"
echo ""
echo "$cincuenta Examples"
echo ""
echo " $fiptables client games-example1.cfg      [Configure firewall to allow connect to web and games]"
echo " $fiptables server server-example1.cfg     [Configure firewall to server somes services]"
echo " $fiptables eraserules                     [Remove iptables rules]"
echo " $fiptables list                           [List iptables rules]"
echo " $fiptables help                           [Show this help in english]"
echo ""
echo "$cincuenta Examples of variables to the configs files, $defaultcfg"
echo
head $flinea $0 | grep -iv ^# | tail $fvariables | cut -d "#" -f 1,2 | sed "s/#english:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"
echo
echo "$cincuenta  [uid and/or gid excepcional]"
echo
echo "     User and/or group excepcional have conection allowed in firewall"
echo
echo "$cincuenta  [vpn]"
echo
echo "     Host [vpn] excepcionals hosts has all allowed in firewall"
echo
echo "$cincuenta  [The iptables netftilter]"
echo
echo "     iptables legacy   is    support for xtables firewall"
echo "     iptables nft      is    support for neftables firewall"
echo
echo "$cincuenta  [firewall need clients udp ports]"
echo
echo "     This port is necesary to update the date  : ntp"
echo "     This port is necesary to dhcp and get ip  : bootpc"
echo "     This port is necesary to domain resolver  : domain"
echo
echo "$cincuenta  [Ipv6 needs protocols]"
echo
echo "     Necesary protocol: ipv6-icmp"
echo "     Ipv6 works too with: ipv4 procotols"
echo
echo "$cincuenta  [License]"
echo ""
echo "  Download the latest version $fprogram from sourceforge"
echo "  $fweb_latest"
echo "  $flicense"
echo
exit; fi
############################       english: ayuda: the help option in spanish
############################       spanish: ayuda: la opcion de ayuda en espa単ol
if [ "$first_option" = "ayuda" ]; then echo
echo
echo "$fprogram version $fversion "
echo "$cincuenta Ayuda $cinco"
echo
echo
echo "$cinco   Una primera opcion "
echo "     [Launch rules]     eraserules offline client server allpermisive wizard"
echo "     [List rules]       list forward list6 forward6 nat-ip4 nat-ip6"
echo "                        listnum forwardnum listnum6 forwardnum6"
echo "     [Other table]      raw-ip4 raw-ip6 mangle-ip4 mangle-ip6"
echo "                        security-ip4 security-ip6 ebtables arptables"
echo "     [Modify config]    reconfig show-config new-config nueva-config"
echo "                        modify-config clone-config rename-config del-config"
echo "     [List sockets]     route ss netstat lsof ipforwading tcpdump arp"
echo "     [Recover fw]       fw-list fw-save fw-restore"
echo "     [Auth sudo]        auth-sudo remove-sudo list-sudo"
echo "     [Tool icmp]        ping-ip4 ping-ip6"
echo "     [Tool tcp]         trace-ip4 trace-ip6 host resolveip geoip"
echo "     [Version]          version upgrade dev-versions all-versions"
echo "     [Help]             about system-info help ayuda mini-wizard cli gui"
echo ""
echo "$cinco   Las configs estan en $directory_config/[config.cfg]"
echo "[Example:]  $(ls $directory_config| egrep -i "default|wizard|example1.cfg" | fmt $flistado)"
echo "[Own:]  $(ls $directory_config| egrep -iv "default|wizard|example1.cfg" | fmt $flistado)"
echo "$cinco   [Los ejemplos]"
echo
echo "  [Lista iptables reglas]               $fiptables list  "
echo "  [Lanza iptables coomo cliente web]    $fiptables client web-example1.cfg"
echo "  [Borra las reglas de iptables]        $fiptables eraserules "
echo "  [Muestra larga ayuda en ingles]       $fiptables help "
echo "  [Muestra larga ayuda en espa単ol]      $fiptables ayuda "
echo
echo
echo "$cincuenta La primera opci坦n:"
echo
echo "$cinco         [Lanza reglas de iptables]"
echo
echo "   eraserules: Borra las reglas de iptables de ipv4 y de ipv6"
echo "      offline: Desconecta el cortafuegos de todo excepto localhost"
echo "       client: Configura el cortafuegos de cliente"
echo "       server: Configura el cortafuegos de servidor"
echo " allpermisive: Configura el cortafuegos muy permisivo"
echo
echo "$cinco         [Lista las reglas de tablas de iptables]"
echo
echo "               La tabla de filtros "
echo "         list: Lista las reglas de ipv4 de filtros de entrada y salida"
echo "      forward: Lista las reglas de ipv4 de filtros de reenvio"
echo "        list6: Lista las reglas de ipv6 de filtros de entrada y salida"
echo "     forward6: Lista las reglas de ipv6 de filtros de reenvio"
echo
echo "               La tabla de filtros numerica"
echo "      listnum: Lista las reglas de ipv4 de filtros de entrada y salida en numeros"
echo "   forwardnum: Lista las reglas de ipv4 de filtros de reenvio en numeros"
echo "     list6num: Lista las reglas de ipv6 de filtros de entrada y salida en numeros"
echo "  forward6num: Lista las reglas de ipv6 de filtros de reenvio en numeros"
echo
echo "$cinco         [Las otras tablas de iptables]"
echo
echo "      nat-ip4: Lista las reglas de ipv4 de nat iptables"
echo "      nat-ip6: Lista las reglas de ipv6 de nat iptables"
echo "   mangle-ip4: Lista las reglas de ipv4 de mangle iptables"
echo "   mangle-ip6: Lista las reglas de ipv6 de mangle iptables"
echo "      raw-ip4: Lista las reglas de ipv4 de raw iptables"
echo "      raw-ip6: Lista las reglas de ipv6 de raw iptables"
echo " security-ip4: lista las reglas de ip4 de security iptables"
echo " security-ip6: Lista las reglas de ip6 de security iptables"
echo "     ebtables: Lista las reglas de nft de ethernet"
echo "    arptables: Lista las reglas de arp arptables"
echo
echo "$cinco         [Modifica config]"
echo
echo "     reconfig: Reescribe configs por defecto $directory_config/*ample1.cfg"
echo "   new-config: Crea una nueva configuracion.cfg en ingles"
echo " nueva-config: Crea una nueva configuracion.cfg en espa単ol"
echo " clone-config: Duplica con otro nombre una config cfg"
echo "modify-config: Edita una existente configuracion.cfg"
echo "  show-config: Muestra una existente configuracion.cfg"
echo "rename-config: Cambia el nombre a una existente configuracion.cfg"
echo "del-config: Borra unaa existente configuracion.cfg"
echo
echo "$cinco         [Lista las conexiones abiertas]"
echo
echo "        route: Muestra los dispositivos de red y la tabla de rutas"
echo "           ss: Muestra las conexiones con comando ss"
echo "      netstat: Muestra las conexiones con comando netstat"
echo "         lsof: Muestra las conexiones con command lsof"
echo "  ipforwading: Muestra la configuracion del kernel sobre reenvios ip"
echo "      tcpdump: Escuchar las conexiones ip"
echo "          arp: Lista las ultimas conexiones arp"
echo
echo "$cinco         [Recuperador de firewall en formato standar]"
echo
echo "      fw-list: Lista los archivos de firewall"
echo "      fw-save: Guarda los archivos de firewall"
echo "   fw-restore: Indica como restaurar los archivos de firewall"
echo
echo "$cinco         [Opciones de autorizacion]"
echo
echo "    auth-sudo: Permite autorizacion a $fiptables a usuarios elegidos"
echo "  remove-sudo: Borra la autorizacion otorgada con $fiptables"
echo "    list-sudo: Lista autorizacion a $fiptables de usuarios elegidos"
echo
echo "$cinco         [Herramienta icmp]"
echo
echo "     ping-ip4: Hace un ping a una host con ipv4 icmp"
echo "     ping-ip6: Hace un ping a una host con ipv6 icmp"
echo
echo "$cinco         [Herramienta tcp]"
echo
echo "    trace-ip4: Traza ruta a una host con ipv4 tcp"
echo "    trace-ip6: Traza ruta a una host con ipv6 tcp"
echo "         host: Resuelve la ip de un host"
echo "    resolveip: Resuelve la ip de un host y viceversa"
echo "       geo-ip: Localiza una ip o host"
echo
echo "$cinco         [Version]"
echo
echo "      version: Informacion de la actual version $fiptables"
echo "      upgrade: Actualiza $fiptables a la ultima version"
echo " dev-versions: Version en desarrollo de $fiptables"
echo " all-versions: Todas las versiones de $fiptables"
echo
echo "$cinco         [Ayuda]"
echo
echo "        About: Acerca de $fiptables"
echo "  system-info: Muestra la informacion del sistema"
echo "         help: Muestra la ayuda en ingles"
echo "        ayuda: Muestra la ayuda en espa単ol"
echo "  mini-wizard: Asistente y lanza simple cliente iptables"
echo "          cli: Interfaz de linea de comandos con menus"
echo "          gui: Interfaz grafico de usuario"
echo
echo "$cincuenta La segunda opcion (opcional)"
echo ""
echo "    $fiptables cliente y servidor toman la configuraci坦n de una config"
echo "    si lanzas sin especificar una config tomara por defecto $defaultcfg"
echo "    Puedes modificar y crear archivos en la carpeta $directory_config"
echo
echo "$cincuenta Ejemplos"
echo
echo "   $fiptables client games-example1.cfg    [Configura un cliente para web y juegos]"
echo "   $fiptables server server-example1.cfg   [Configura un servidor]"
echo "   $fiptables eraserules                   [Borra las reglas de iptables] "
echo "   $fiptables list                         [Lista las reglas de iptables] "
echo "   $fiptables help                         [Muestra la ayuda en ingles] "
echo
echo "$cincuenta  Ejemplos de las variables de configuraci坦n, defaultcfg"
echo
head $flinea $0 | grep -iv ^# | tail $fvariables | cut -d "#" -f 1,3 | sed "s/#spanish:/            ### /g" | sed "s/echo -n/#####/g" | sed "s/echo -n//g"
echo
echo "$cincuenta  [vpn]"
echo
echo "     Host [vpn] excepcionales tienen todo permitido en el firewall"
echo
echo "$cincuenta  [uid y/o gid excepcional]"
echo
echo "     Usuario y/o grupo excepcional tienen conexion permitida en el firewall"
echo
echo "$cincuenta  [Los iptables netftilter]"
echo
echo "     iptables legacy   es    soporte para xtables firewall"
echo "     iptables nft      es    soporte para neftables firewall"
echo
echo "$cincuenta  [Puertos cliente udp necesarios]"
echo
echo "     necesario para actualizar la fecha :   ntp"
echo "     necesario para dhcp y conseguir ip :   bootpc"
echo "     necesario para resolver dominios   :   domain"
echo
echo "$cincuenta  [Protocolos necesarios para ipv6]"
echo
echo "     Necesario protocolo: ipv6-icmp"
echo "     Ipv6 funciona tambien con: ipv4 procolos"
echo
echo "$cincuenta  [Licencia]"
echo
echo "  Descarga la ultima version de $fprogram desde la web de sourceforge "
echo "  $fweb_latest"
echo "  $flicense"
echo
exit; fi
###############################################################################################################    ##############################
###############################################################################################################    ##############################
#### Options for launch rules:       offline or client,or server or allpermisive                ###############    ##############################
#### Opciones para lanzar reglas:    offline o client o server o allpermisive                   ###############    ##############################
###############################################################################################################    ##############################
###############################################################################################################    ##############################
#############################        english:  launch iptables rules
#############################        spanish:  lanza iptables rules
if  [ "$launch_iptables" = "si" ] ; then echo -n
##############################       english: overwrite system varibles for files variables configured
##############################       spanish: sobreescribe las variables por la de los archivos de configuracion
####
####
if [ -f "$directory_config/$second_option" ]; then source $directory_config/$second_option ; else source $directory_config/$defaultcfg; fi
##############################      english: output_uid or output_gid with input established     #####################
##############################      spanish: usuario o grupo con establecidos de entrada         #####################
uid_gid=no
if [ "$allow_output_uid" = "$NULL" ]; then uid_gid= ; else uid_gid=no; fi
if [ "$allow_output_gid" = "$NULL" ]; then uid_gid= ; else uid_gid=no; fi
##############################      english: compatibility with old variables           #####################
##############################      spanish: compatibilidad con viejas ariables         #####################
execnft="$iptables_nft"
execlegacy="$iptables_legacy"
############################       english: iptables rules ipv4  iptables-legacy
############################       spanish: reglas de iptables ipv4   iptables-legacy
######### english:  ipv4 filter legacy rules erased
######### spanish:  borrardo de filtros ipv4
### ipv4 erase rules
 $directory_binary/iptables-legacy -t filter -F
### ipv6 erase rules
 $directory_binary/ip6tables-legacy -t filter -F
########## english:  ipv4 filter legacy rules input and output ##### legacy ipv4
########## spanish:  reglas de ipv4 de entrada y salida
### ipv4 filter legacy rules input
$iptables_legacy  $allow_ipv4 $directory_binary/iptables-legacy -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv4 $allow_vpn  $directory_binary/iptables-legacy -A INPUT -s $one_vpn -j ACCEPT &> /dev/null
done
$iptables_legacy  $allow_ipv4 $allow_log_tcp  $directory_binary/iptables-legacy -A INPUT -p tcp -m multiport --dports $log_tcp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_log_udp  $directory_binary/iptables-legacy -A INPUT -p udp -m multiport --dports $log_udp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_server  $directory_binary/iptables-legacy -A INPUT -p udp -m multiport --dports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_server  $directory_binary/iptables-legacy -A INPUT -p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_client   $directory_binary/iptables-legacy -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_client   $directory_binary/iptables-legacy -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_ping_send  $directory_binary/iptables-legacy -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_ping_recive $directory_binary/iptables-legacy -A INPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $uid_gid $directory_binary/iptables-legacy -A INPUT -m state --state established -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv4 $allow_others_protocols $directory_binary/iptables-legacy -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
### ipv4 filter legacy rules output
$iptables_legacy  $allow_ipv4 $directory_binary/iptables-legacy -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv4 $allow_vpn  $directory_binary/iptables-legacy -A OUTPUT -d $one_vpn -j ACCEPT &> /dev/null
done
$iptables_legacy  $allow_ipv4 $allow_log_tcp  $directory_binary/iptables-legacy -A OUTPUT -p tcp -m multiport --sports $log_tcp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_log_tcp  $directory_binary/iptables-legacy -A OUTPUT -p udp -m multiport --sports $log_udp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_server  $directory_binary/iptables-legacy -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_server  $directory_binary/iptables-legacy -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_client   $directory_binary/iptables-legacy -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_client   $directory_binary/iptables-legacy -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_ping_send  $directory_binary/iptables-legacy -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_ping_recive  $directory_binary/iptables-legacy -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_output_uid $directory_binary/iptables-legacy -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $allow_output_gid $directory_binary/iptables-legacy -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv4 $allow_others_protocols      $directory_binary/iptables-legacy -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
########## ipv6 filter legacy rules input and output ##### legacy ipv6
### ipv6 filter legacy rules input
$iptables_legacy  $allow_ipv6 $directory_binary/ip6tables-legacy -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv6 $allow_vpn  $directory_binary/ip6tables-legacy -A INPUT -s $one_vpn -j ACCEPT &> /dev/null
done
$iptables_legacy  $allow_ipv6 $allow_log_tcp  $directory_binary/ip6tables-legacy -A INPUT -p tcp -m multiport --dports $log_tcp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_log_udp  $directory_binary/ip6tables-legacy -A INPUT -p udp -m multiport --dports $log_udp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_server  $directory_binary/ip6tables-legacy -A INPUT -p udp -m multiport --dports $server_udp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_server  $directory_binary/ip6tables-legacy -A INPUT -p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_client  $directory_binary/ip6tables-legacy -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_client  $directory_binary/ip6tables-legacy -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_ping_send      $directory_binary/ip6tables-legacy -A INPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_ping_recive  $directory_binary/ip6tables-legacy -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $uid_gid $directory_binary/ip6tables-legacy -A INPUT -m state --state established -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $directory_binary/ip6tables-legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv6 $allow_others_protocols      $directory_binary/ip6tables-legacy -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
### ipv6 filter legacy rules output
$iptables_legacy  $allow_ipv6 $directory_binary/ip6tables-legacy -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv6 $allow_vpn  $directory_binary/ip6tables-legacy -A OUTPUT -s $one_vpn -j ACCEPT &> /dev/null
done
$iptables_legacy  $allow_ipv6 $allow_log_tcp  $directory_binary/ip6tables-legacy -A OUTPUT -p tcp -m multiport --sports $log_tcp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_log_udp  $directory_binary/ip6tables-legacy -A OUTPUT -p udp -m multiport --sports $log_udp -j LOG &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_server  $directory_binary/ip6tables-legacy -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_server  $directory_binary/ip6tables-legacy -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_client   $directory_binary/ip6tables-legacy -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $launch_client   $directory_binary/ip6tables-legacy -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_ping_send  $directory_binary/ip6tables-legacy -A OUTPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_ping_recive  $directory_binary/ip6tables-legacy -A OUTPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_output_uid $directory_binary/ip6tables-legacy -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $allow_output_gid $directory_binary/ip6tables-legacy -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv6 $directory_binary/ip6tables-legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_legacy  $allow_ipv6 $allow_others_protocols      $directory_binary/ip6tables-legacy -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
############################       english: iptables rules ipv4  iptables-nft
############################       spanish: reglas de iptables ipv4   iptables-nft
######### english:  ipv4 filter nft rules erased
######### spanish:  borrardo de filtros nft ipv4
### ipv4 erase rules
 $directory_binary/iptables-nft -t filter -F
### ipv6 erase rules
 $directory_binary/ip6tables-nft -t filter -F
########## english:  ipv4 filter nft rules input and output  ##### nft ipv4
########## spanish:  reglas de ipv4 nft de entrada y salida
### ipv4 filter nft rules input
$iptables_nft $allow_ipv4 $directory_binary/iptables-nft -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv4 $allow_vpn  $directory_binary/iptables-nft -A INPUT -s $one_vpn -j ACCEPT &> /dev/null
done
$iptables_nft $allow_ipv4 $allow_log_tcp  $directory_binary/iptables-nft -A INPUT -p tcp -m multiport --dports $log_tcp -j LOG &> /dev/null
$iptables_nft $allow_ipv4 $allow_log_udp  $directory_binary/iptables-nft -A INPUT -p udp -m multiport --dports $log_udp -j LOG &> /dev/null
$iptables_nft $allow_ipv4 $launch_server  $directory_binary/iptables-nft -A INPUT -p udp -m multiport --dports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_server  $directory_binary/iptables-nft -A INPUT -p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_client  $directory_binary/iptables-nft -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_client  $directory_binary/iptables-nft -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $allow_ping_send     $directory_binary/iptables-nft -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $allow_ping_recive   $directory_binary/iptables-nft -A INPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $uid_gid $directory_binary/iptables-nft -A INPUT -m state --state established -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv4 $allow_others_protocols       $directory_binary/iptables-nft -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
### ipv4 filter nft rules output
$iptables_nft $allow_ipv4 $directory_binary/iptables-nft -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv4 $allow_vpn  $directory_binary/iptables-nft -A OUTPUT -d $one_vpn -j ACCEPT &> /dev/null
done
$iptables_nft $allow_ipv4 $allow_log_tcp  $directory_binary/iptables-nft -A OUTPUT -p tcp -m multiport --sports $log_tcp -j LOG &> /dev/null
$iptables_nft $allow_ipv4 $allow_log_udp  $directory_binary/iptables-nft -A OUTPUT -p udp -m multiport --sports $log_udp -j LOG &> /dev/null
$iptables_nft $allow_ipv4 $launch_server  $directory_binary/iptables-nft -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_server  $directory_binary/iptables-nft -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv4_server -d $net_ipv4_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_client   $directory_binary/iptables-nft -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_client   $directory_binary/iptables-nft -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv4_client -d $net_ipv4_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $allow_ping_send    $directory_binary/iptables-nft -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $allow_ping_recive  $directory_binary/iptables-nft -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $allow_output_uid $directory_binary/iptables-nft -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $allow_output_gid $directory_binary/iptables-nft -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv4 $allow_others_protocols      $directory_binary/iptables-nft -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
########## ipv6 filter nft rules input and output
### ipv6 filter nft rules input
$iptables_nft $allow_ipv6 $directory_binary/ip6tables-nft -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv6 $allow_vpn  $directory_binary/ip6tables-nft -A INPUT -s $one_vpn -j ACCEPT &> /dev/null
done
$iptables_nft $allow_ipv6 $allow_log_tcp  $directory_binary/ip6tables-nft -A INPUT -p tcp -m multiport --dports $log_tcp -j LOG &> /dev/null
$iptables_nft $allow_ipv6 $allow_log_udp  $directory_binary/ip6tables-nft -A INPUT -p udp -m multiport --dports $log_udp -j LOG &> /dev/null
$iptables_nft $allow_ipv6 $launch_server  $directory_binary/ip6tables-nft -A INPUT -p udp -m multiport --dports $server_udp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_server  $directory_binary/ip6tables-nft -A INPUT -p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_client   $directory_binary/ip6tables-nft -A INPUT -p udp -m multiport $input_state --sports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_client   $directory_binary/ip6tables-nft -A INPUT -p tcp -m multiport $input_state --sports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $allow_ping_send      $directory_binary/ip6tables-nft -A INPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $allow_ping_recive  $directory_binary/ip6tables-nft -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $uid_gid $directory_binary/ip6tables-nft -A INPUT -m state --state established -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $directory_binary/ip6tables-nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv6 $allow_others_protocols      $directory_binary/ip6tables-nft -A INPUT -p $one_protocol -j ACCEPT &> /dev/null
done
### ipv6 filter nft rules output
$iptables_nft $allow_ipv6 $directory_binary/ip6tables-nft -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
for one_vpn in $(echo $vpn | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv6 $allow_vpn  $directory_binary/ip6tables-nft -A OUTPUT -d $one_vpn -j ACCEPT &> /dev/null
done
$iptables_nft $allow_ipv6 $allow_log_tcp  $directory_binary/ip6tables-nft -A OUTPUT -p tcp -m multiport --sports $log_tcp -j LOG &> /dev/null
$iptables_nft $allow_ipv6 $allow_log_udp  $directory_binary/ip6tables-nft -A OUTPUT -p udp -m multiport --sports $log_udp -j LOG &> /dev/null
$iptables_nft $allow_ipv6 $launch_server  $directory_binary/ip6tables-nft -A OUTPUT -p udp -m multiport --sports $server_udp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_server  $directory_binary/ip6tables-nft -A OUTPUT -p tcp -m multiport --sports $server_tcp -s $net_ipv6_server -d $net_ipv6_server -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_client   $directory_binary/ip6tables-nft -A OUTPUT -p udp -m multiport --dports $client_udp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_client   $directory_binary/ip6tables-nft -A OUTPUT -p tcp -m multiport --dports $client_tcp -s $net_ipv6_client -d $net_ipv6_client -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $allow_ping_send      $directory_binary/ip6tables-nft -A OUTPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $allow_ping_recive  $directory_binary/ip6tables-nft -A OUTPUT -p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $allow_output_uid $directory_binary/ip6tables-nft -A OUTPUT -m owner --uid-owner $output_uid -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $allow_output_gid $directory_binary/ip6tables-nft -A OUTPUT -m owner --gid-owner $output_gid -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $directory_binary/ip6tables-nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $iptables_nft $allow_ipv6 $allow_others_protocols      $directory_binary/ip6tables-nft -A OUTPUT -p $one_protocol -j ACCEPT &> /dev/null
done
##########################################    haynat for ipv4 and ipv6
 $directory_binary/iptables-nft -t nat -F
 $directory_binary/iptables-legacy -t nat -F
 $directory_binary/ip6tables-nft -t nat -F
 $directory_binary/ip6tables-legacy -t nat -F
$iptables_nft $allow_ipv4 $allow_nat $directory_binary/iptables-nft -t nat -A POSTROUTING -j MASQUERADE      &>/dev/null
$iptables_legacy $allow_ipv4 $allow_nat $directory_binary/iptables-legacy -t nat -A POSTROUTING -j MASQUERADE   &>/dev/null
$iptables_nft $allow_ipv6 $allow_nat $directory_binary/ip6tables-nft -t nat -A POSTROUTING -j MASQUERADE     &>/dev/null
$iptables_legacy $allow_ipv6 $allow_nat $directory_binary/ip6tables-legacy -t nat -A POSTROUTING -j MASQUERADE  &>/dev/null
##########################################    ipv4 iptables permisisive
$iptables_legacy  $allow_ipv4 $launch_permisive  $directory_binary/iptables-legacy -F &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_permisive  $directory_binary/iptables-legacy -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_permisive  $directory_binary/iptables-legacy -A INPUT $input_state  -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_permisive  $directory_binary/iptables-legacy -A OUTPUT -j ACCEPT &> /dev/null
$iptables_legacy  $allow_ipv4 $launch_permisive  $directory_binary/iptables-legacy -A FORWARD  -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_permisive  $directory_binary/iptables-nft -F &> /dev/null
$iptables_nft $allow_ipv4 $launch_permisive  $directory_binary/iptables-nft -A INPUT -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_permisive  $directory_binary/iptables-nft -A INPUT $input_state -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_permisive  $directory_binary/iptables-nft -A OUTPUT -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv4 $launch_permisive  $directory_binary/iptables-nft -A FORWARD -j ACCEPT &> /dev/null
 ########################################     ipv6 iptables allpermisisive
$iptables_legacy $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-legacy -F &> /dev/null
$iptables_legacy $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-legacy -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$iptables_legacy $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-legacy -A INPUT $input_state -j ACCEPT &> /dev/null
$iptables_legacy $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-legacy -A OUTPUT -j ACCEPT &> /dev/null
$iptables_legacy $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-legacy -A FORWARD  -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-nft -F &> /dev/null
$iptables_nft $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-nft -A INPUT -s ::1 -d ::1  -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-nft -A INPUT $input_state -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-nft -A OUTPUT -j ACCEPT &> /dev/null
$iptables_nft $allow_ipv6 $launch_permisive  $directory_binary/ip6tables-nft -A FORWARD -j ACCEPT &> /dev/null
########################################       iptables ipv4 and ipv6 with forward rules
 ###   deactive for default with forward or without forward
 $directory_binary/sysctl -w net.ipv4.conf.all.forwarding=0 &> /dev/null
 $directory_binary/sysctl -w net.ipv6.conf.all.forwarding=0 &> /dev/null
 ###   Active when there is forward
 $ipv4 $allow_forwading $directory_binary/sysctl -w net.ipv4.conf.all.forwarding=1 &> /dev/null
 $ipv6 $allow_forwading $directory_binary/sysctl -w net.ipv6.conf.all.forwarding=1 &> /dev/null
 ###   ipv4 filter legacy rules forward
$iptables_legacy $allow_forwading $directory_binary/iptables-legacy -A FORWARD -j ACCEPT &> /dev/null
 ###   ipv6 filter legacy rules forward
$iptables_legacy $allow_forwading $directory_binary/ip6tables-legacy -A FORWARD -j ACCEPT &> /dev/null
 ###   ipv4 filter nft rules forward
$iptables_nft $allow_forwading $directory_binary/iptables-nft -A FORWARD -j ACCEPT &> /dev/null
 ###   ipv6 filter nft rules forward
$iptables_nft $allow_forwading $directory_binary/ip6tables-nft -A FORWARD -j ACCEPT &> /dev/null
 #######################################       iptables ipv4 and ipv6 closed with drop input, and drop forward, and drop output rules
 ### ipv4 drop rules iptables-legacy
$iptables_legacy $directory_binary/iptables-legacy -A INPUT -j DROP &> /dev/null
$iptables_legacy $directory_binary/iptables-legacy -A OUTPUT -j DROP &> /dev/null
$iptables_legacy $directory_binary/iptables-legacy -A FORWARD -j DROP &> /dev/null
### ipv6 drop rules iptables-legacy
$iptables_legacy $directory_binary/ip6tables-legacy -A INPUT -j DROP &> /dev/null
$iptables_legacy $directory_binary/ip6tables-legacy -A OUTPUT -j DROP &> /dev/null
$iptables_legacy  $directory_binary/ip6tables-legacy -A FORWARD -j DROP &> /dev/null
### ipv4 drop rules iptables-nft
$iptables_nft $directory_binary/iptables-nft -A INPUT -j DROP &> /dev/null
$iptables_nft $directory_binary/iptables-nft -A OUTPUT -j DROP &> /dev/null
$iptables_nft $directory_binary/iptables-nft -A FORWARD -j DROP &> /dev/null
### ipv6 drop rules iptables-nft
$iptables_nft $directory_binary/ip6tables-nft -A INPUT -j DROP &> /dev/null
$iptables_nft $directory_binary/ip6tables-nft -A OUTPUT -j DROP &> /dev/null
$iptables_nft $directory_binary/ip6tables-nft -A FORWARD -j DROP &> /dev/null
########################################       english: when active rules
########################################       spanish: cuando activas las reglas
echo "$fprogram version $fversion ";
echo "$cincuenta lauching iptables rules $cinco"
echo "  launched $0 $first_option $second_option  ";
if [ "$first_option" = "offline" ]; then echo -n
echo "$cinco  The iptables configured for disconnected to internet $cinco"
echo "  launch $0 list  # to list iptables rules"
echo;  exit ; else echo -n ; fi
if [ "$first_option" = "allpermisive" ]; then echo -n
echo "$cinco  The iptables configured for all permisive to internet $cinco"
echo "  launch $0 list  # to list iptables rules"
exit ; else echo -n ; fi
if [ -f "$directory_config/$second_option" ]; then echo -n
echo "$cinco $program configured with the configuration: $second_option $cinco" ;
else echo "$cinco [Configured with the default configuration] $cinco"
echo "  $defaultcfg "; fi ;
echo "$cinco  [With the netfilter iptables firewall]  $cinco"  ;
echo "  xtables    is  $iptables_legacy configured firewall "
echo "  neftables  is  $iptables_nft configured firewall "
echo "  * At least one is usually necesary"
echo "$cinco  [With the client ports IP]  $cinco" ;
echo "  client tcp: $client_tcp"  ;
echo "  client udp: $client_udp"  ;
echo "  * Ports domain,ntp,bootpc are usually udp necesary"
if [ "$first_option" = "client" ]; then echo -n ;
echo "$cinco  [Without server ports IP] $cinco" ;
else echo -n; fi
if [ "$first_option" = "server" ]; then echo -n ;
echo "$cinco  [With the server ports IP]  $cinco" ;
echo "  server tcp: $server_tcp" ;
echo "  server udp: $server_udp" ;
else echo -n; fi
echo "$cinco  [With the protocols IP]  $cinco" ;
echo "  ipv4 is $allow_ipv4 allowed "
echo "  ipv6 is $allow_ipv6 allowed "
echo "  * Where ipv4 is usually necesary"
echo "$cinco  [With the networks configured]  $cinco" ;
echo "  ipv4 client: $net_ipv4_client And ipv4 server: $net_ipv4_server"
echo "  ipv6 client: $net_ipv6_client And ipv6 server: $net_ipv6_server"
echo "  * Where 0/0 and :: are all the networks, usually necesary "
if [ "$input_state" = "$NULL" ]; then echo "$cinco  [Without specific input state IP]  $cinco"
else echo "$cinco  [With input state IP]  $cinco"
echo " Input satate: $input_state"
echo ; fi
echo "$cinco  [With Others configs]  $cinco"
if [ "$allow_ping_send" = "no" ]; then echo "  Dont allow send ping"; else echo "  Allow send pings" ; fi
if [ "$allow_ping_recive" = "no" ]; then echo "  Dont allow recive ping"; else echo "  Allow recive pings" ; fi
if [ "$allow_log_tcp" = "no" ]; then echo "  Dont allow log server tcp"; else  echo "  Allow logservers in port: $log_tcp" ; fi
if [ "$allow_log_udp" = "no" ]; then echo "  Dont allow log server udp"; else  echo "  Allow logservers in port: $log_udp" ; fi
if [ "$allow_forwading" = "no" ]; then  echo "  Dont allow ip forwading"; else echo "  Allow ip forwading iptables" ; fi
if [ "$allow_nat" = "no" ]; then  echo "  Dont allow ip nat masquerade"; else echo "  Allow nat masquerade" ; fi
if [ "$allow_vpn" = "no" ]; then echo "  Dont allow vpn excepcional"; else  echo "  Allow vpn servers are $vpn" ; fi
if [ "$allow_output_uid" = "no" ]; then  echo "  Dont allow uid excepcional"; else echo "  Allow output uid excepcional: $output_uid , and input established " ; fi
if [ "$allow_output_gid" = "no" ]; then  echo "  Dont allow gid excepcional"; else echo "  Allow output gid excepcional: $output_uid , and input established "; fi
if [ "$allow_others_protocols" = "no" ]; then  echo "  Dont allow other protocolo ip more"; else echo "  Allow other protocol ip: $others_protocols" ; fi
echo "$cinco  List iptables rules with:   $fiptables list  $cinco"
#auto generate iptables save
iptables-nft-save >> $directory_fwrecover/$first_option-$second_option-nft-ipv4
iptables-legacy-save >> $directory_fwrecover/$first_option-$second_option-legacy-ipv4
ip6tables-nft-save >> $directory_fwrecover/$first_option-$second_option-nft-ipv6
ip6tables-legacy-save >> $directory_fwrecover/$first_option-$second_option-legacy-ipv6
$fiptables list
exit; fi
############################       english: default: The default option, the help option for default
############################	   spanish: default: La opcion por defecto, la opcion de ayuda por defecto
echo "$fprogram version $fversion"
echo "$cincuenta Wellcome $fiptables $cinco"
echo "[ ]    [Launch rules]     eraserules offline client server allpermisive        "
echo "[ ]    [List rules]       list forward list6 forward6 nat-ip4 nat-ip6          "
echo "[ ]                       listnum forwardnum listnum6 forwardnum6              "
echo "[ ]    [Modify config]    reconfig show-config new-config nueva-config         "
echo "[ ]                       modify-config clone-config rename-config del-config  "
echo "[ ]    [List sockets]     route ss netstat lsof ipforwading tcpdump arp        "
echo "[ ]    [Recover fw]       fw-list fw-save fw-restore                           "
echo "[ ]    [Auth sudo]        auth-sudo remove-sudo list-sudo                      "
echo "[ ]    [Tool icmp]        ping-ip4 ping-ip6                                    "
echo "[ ]    [Tool tcp]         trace-ip4 trace-ip6 host resolveip geoip             "
echo "[ ]    [Version]          version upgrade dev-versions all-versions            "
echo "[ ]    [Attend]           system-info wizard mini-wizard cli gui               "
echo "[ ]    [Help]             about depends help ayuda                             "
echo "$cinco  Optional $directory_config/[config.cfg]  $cinco"
echo "[ ] [Example]  $(ls $directory_config| egrep -i "default|wizard|example1.cfg" | fmt $flistado)"
echo "[ ] [Own]  $(ls $directory_config| egrep -iv "default|wizard|example1.cfg" | fmt $flistado)"
echo "$cinco  [The examples]  $cinco"
echo "[ ]    [Create a new config myown.cfg]    $fiptables new-config myown.cfg      "
echo "[ ]    [Launch client with myown.cfg]     $fiptables client myown.cfg          "
echo "[ ]    [List iptables rules]              $fiptables list                      "
# left script
#######################         english: End of script
#######################         spanish: fin del script
##
##    for upload push ssh with f-iptables and download clone with https, repository git.code.sf.net/p/f-iptables/code
##    Upload f-iptables repository from local repository  :     git commit -a ; git push ;
##    Download f-iptables repository in folder user       :     git clone https://git.code.sf.net/p/f-iptables/code ;
##
#######################
exit 0
