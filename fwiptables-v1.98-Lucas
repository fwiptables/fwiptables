#!/bin/bash
####
####
####   #### english: necesary to find several PATH and auth xhost to root
####   #### spanish: necesario para encontrar varios PATH y autorizar xhost para root
####
####
####     #### english: whereis path     #### spanish: donde esta el path
directory_fiptables="/usr/bin" ;
####
####
####     #### english: program name     #### spanish: nombre de el programa
fiptables="fwiptables" ;
####
####
####     #### english: launch profile         #### spanish: lanza profile
if [ -f /etc/profile ] ; then . /etc/profile ; fi
####
####     #### english: launch completion      #### spanish: lanza autocompletar
if [ -f /etc/bash_completion.d/$fiptables ] ; then . /etc/bash_completion.d/$fiptables ; fi
####
####
####     #### english: stablished the path    #### spanish: establece el path
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
####
####     #### english: add auth xhost for root    #### spanish: añade autorización xhost para root
####     #### code for add xhost to root for graphicall use
####
####
command_id="$(command -v id)" &> /dev/null
command_xhost="$(command -v xhost)" &> /dev/null
####
####
if [ -n "$($command_id -u)" ] && [ "$($command_id -u)" = "0" ]; then
sudo -u "$(logname)" command_xhost +root@127.0.0.1 &> /dev/null
sudo -u "$(logname)" command_xhost +INET:root@127.0.0.1 &> /dev/null
sudo -u "$(logname)" command_xhost +INET6:root@127.0.0.1 &> /dev/null
sudo -u "$(logname)" command_xhost +DNET:root@127.0.0.1 &> /dev/null
sudo -u "$(logname)" command_xhost +KRB:root@127.0.0.1 &> /dev/null
sudo -u "$(logname)" command_xhost +SI:localuser:root &> /dev/null
sudo -u "$(logname)" command_xhost +NIS:root@127.0.0.1 &> /dev/null
fi
####
####
################################################   english: begin the script
################################################   spanish: empieza el script
####
####
####   license
####   english: This program has gpl license GPL v2, this program is copyleft, it is free.
####   spanish: Este programa tiene licencia GPL v2, este programa es copyleft, esto es libre.
####
####   comments
####   english: The comments are in english language and spanish language
####   spanish: Los comentarios estan en idioma ingles y en idioma español
####
####
################################################   english: basic system variables
################################################   spanish: las variables basicas del sistema
####
####
####       #### english: [the variables names and the path] #### spanish: [nombres de variables y rutas]
####       #### english: new option for default
####       #### spanish: nueva opcion por defecto
null_option="full-options"        ## fwiptables-default ## default for null option: full-options
####       #### english: for all predefined system firewall: EXCEPT custom, and wizards, and load
####       #### spanish: para todos los cortafuegos predefinidos del sistema: EXCEPTO custom, y wizards, y load
allow_legacy="no"                     ## fwiptables-default ## void or no
allow_nft=""                          ## fwiptables-default ## void or no
allow_ipv4=""                         ## fwiptables-default ## void or no
allow_ipv6=""                         ## fwiptables-default ## void or no
####       #### english: allow info HEADER in each option    
####       #### spanish: permitir informacion de CABECERA en cada opcion
allow_header=""                       ## fwiptables-default ## void or no
####       #### english: void to AUTOLOG one line from command launched
####       #### spanish: vacio para AUTOLOG del comando lanzado o no
allow_autolog=""                 ## fwiptables-default ## void or no
####       #### english: void to AUTOSAVE fwrecover or no 
####       #### spanish: AUTOGUARDAR fwrecover o no
allow_autosave="no"                 ## fwiptables-default ## void or no
####       #### english: close from networking ping, trace.. with timeout in seconds 
####       #### spanish: cierra conexion de ping, trace.. con retardo en segundos    
server_waiting="9"                    ## fwiptables-default ## choose seconds: 1..,9..30
####       #### english: PING server for default         
####       #### spanish: servidor de PING por defecto    
server_ping_ipv4="fast.com"           ## fwiptables-default ## default fast.com
server_ping_ipv6="fast.com"           ## fwiptables-default ## default fast.com
####       #### english: TRACEROUTE server for default         
####       #### spanish: servidor de TRACEROUTE por defecto    
server_traceroute_ipv4="fast.com"     ## fwiptables-default ## default fast.com
server_traceroute_ipv6="fast.com"     ## fwiptables-default ## default fast.com
####       #### english: iperf server for default for test net SPEED                 
####       #### spanish: servidor de iperf por defecto para testear VELOCIDAD de internet    
serverip_iperf_ipv4="ping.online.net"   ## fwiptables-default ## default ping.online.net
serverport_iperf_ipv4="5201"            ## fwiptables-default ## default 5201
serverip_iperf_ipv6="ping.online.net"   ## fwiptables-default ## default ping.online.net
serverport_iperf_ipv6="5201"            ## fwiptables-default ## default 5201
####       #### english: zenity GRAPHIC DIMENSIONS        
####       #### spanish: DIMESIONES GRAFICAS de zenity  
graphic_dimension="--width=950 --height=650"   ## fwiptables-default ## default: "--width=950 --height=650"
####       #### english: RADIO URL streaming audio for default
####       #### spanish: direccion de RADIO DE INTERNET por defecto
radio="http://cadena100-cope-rrcast.flumotion.com/cope/cadena100.mp3" ;   ## fwiptables-default ## streaming url
#### #### english: option for default    #### spanish: opcion por defecto
zero_dir="$(pwd)" 
#### #### english: option for default    #### spanish: opcion por defecto
zero_option="$0" 
#### #### english: variables to launch   #### spanish: variables a lanzar
first_option="$(echo $1 | sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
second_option="$(echo $2 | sed s/\\///g -)" ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
third_option="$(echo $3 | sed s/\\///g -)"  ;                       
#### #### english: variable without "/"  #### spanish: variable sin "/"
quarter_option="$(echo $4 | sed s/\\///g -)"  ;                     
#### #### english: variable without "/"  #### spanish: variable sin "/"
genfiles="$zero_option regeneration-default"                        
#### #### english: whereis path          #### spanish: donde esta el path
fdescription="One Script in bash for iptables firewall"             
#### #### english: program description   #### spanish: descripcion del programa
fprogram="Fran FireWall FWiptables Generator" ;                     
#### #### english: program name          #### spanish: nombre del porgrama
fversion="1.98-Lucas" ;                                          
#### #### english: program version       #### spanish: Version del programa
directory_config="/etc/fwiptables" ;                                
####  #### english: default variable version whithout update for config cfg
####  #### spanish: default version de variables sin actualizar por config cfg
config_variable_version="1" ;                                       
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultcfg="$directory_config/default-full-english.cfg"             
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultfullcfg_eng="$directory_config/default-full-english.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultfullcfg_spa="$directory_config/default-full-spanish.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultminicfg_eng="$directory_config/default-mini-english.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
defaultminicfg_spa="$directory_config/default-mini-spanish.cfg"     
#### #### english: path to config files  #### spanish: archivos de configuracion
directory_fwrecover="/etc/fwrecover" ;                              
#### #### english: path to save firewall #### spanish: ruta de firewall guardado
#### #### english: look  #### spanish: apariencia
cinco="#####" ; tab="    " ;  tabz="# _ _ _ _ _ _ _ "  ; rallica="_____"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
cincuenta="##################################################" ;    
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
ralla="______________________"                                      
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_principal=" $cinco [ $fiptables ] [ $fversion ] [ $(date) ] "
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_default="$cinco [ Default: $fiptables show-default ] [ Usage: $fiptables full-options ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_normal="$cinco [ For the usage list:  $fiptables full-options ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
head_autolog="[ $fiptables ] [ $fversion ] [ $(date) ] [ $first_option $second_option $third_option ]"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
header_ender="$ralla"      
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
header_lineal="$ralla   $ralla   $ralla"                           
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
footer_lineal="$ralla   $ralla   $ralla"                            
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_cover="$fiptables header"
#### #### english: [characters to show] #### spanish: [caracteres a mostrar]
give_autosave="$fiptables autosave"
#### #### english: echo void            #### spanish: impresion vacia
nada="$(echo -n)" ; 
#### english: command default route ip  #### spanish: comando de ruta por defecto ip
command_ip="$(command -v ip | cut -d " " -f 1)"                                                
#### english: default route ipv4        #### english: routa por defecto ipv4
case "$command_ip" in "$NULL")default_route_cuatro="$cinco [ Route ip.v4 ] [ No ip command ]" ;;
*)default_route_cuatro="$cinco [ default route ip.v4 ] [ $("$command_ip" -4 route show | grep -i default | head -1) ]" ;; esac
#### english: default route ipv6 #### english: routa por defecto ipv6
case "$command_ip" in "$NULL")default_route_seis="$cinco [ Route ip.v4 ] [ No ip command ]" ;;
*)default_route_seis="$cinco [ default route ip.v6 ]   [ $("$command_ip" -6 route show | grep -i default | head -1) ]" ;; esac
####  english: notice install iptables if necesary
####  spanish: noticia instala iptables en caso necesario
command_iptables_legacy="$(command -v iptables-legacy | cut -d " " -f 1)"
command_iptables_nft="$(command -v iptables-nft | cut -d " " -f 1)"
command_ip6tables_legacy="$(command -v ip6tables-legacy | cut -d " " -f 1)"
command_ip6tables_nft="$(command -v ip6tables-nft | cut -d " " -f 1)"
if [ "$command_iptables_legacy" = "$NULL" ]; then echo "install iptables-legacy"; fi
if [ "$command_ip6tables_legacy" = "$NULL" ]; then echo "install ip6tables-legacy"; fi
if [ "$command_iptables_nft" = "$NULL" ]; then echo "install iptables-nft"; fi
if [ "$command_ip6tables_nft" = "$NULL" ]; then echo "install ip6tables-nft"; fi
####       #### english: to know if there is mac rules #### spanish: saber si hay reglas mac
command_ebtables="$(command -v ebtables | cut -d " " -f 1)"
if [ "$command_ebtables" = "$NULL" ]; then rules_filter_ebtables="0" ; rules_nat_ebtables="0" ; 
else
rules_filter_ebtables="$($command_ebtables -L -t filter | grep -- "-j" | wc -l)"
rules_nat_ebtables="$($command_ebtables -L -t nat       | grep -- "-j" | wc -l)"
fi
####       #### english: to know if there is arptables rules #### spanish: saber si hay reglas arptables
command_arptables="$(command -v arptables | cut -d " " -f 1 )"
if [ "$command_arptables" = "$NULL" ]; then rules_arptables="0" ;
else rules_arptables="$($command_arptables -L | grep -- "-j" | wc -l)" ; fi
####
####
####       #### english: zenity dimensions     #### spanish: dimensiones de zenity
####       #### english: close from graphicall with timeout in seconds #####
####       #### spanish: cierre desde graficos con retardo en segundos #####
close_graphicall="1"
####       #### english: message to close graphicall with timeout in seconds #####
####       #### spanish: mensage de cierre para graficos con retardo en segundos #####
mensage_timeout="Closing gui menu in $close_graphicall seconds"
####       #### english: autovariables        #### spanish: autovariables
launch_iptables="no" ;   #  autoconfigure with launch iptables rules
launch_custom="no";      #  autoconfigure with custom rules
####       #### english: [download web link]  #### spanish: [descarga del enlace web]
fweb_main="https://sourceforge.net/projects/f-iptables/"
fweb_files="https://sourceforge.net/projects/f-iptables/files/" ;
fweb_latest="https://sourceforge.net/projects/f-iptables/files/latest/download" ;
fweb_changes="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-changes?format=raw" ;
fweb_development="https://sourceforge.net/p/f-iptables/code/ci/master/tree/dev-fwiptables?format=raw" ;
fweb_newfiles="https://sourceforge.net/projects/f-iptables/files" ;
fweb_tree="https://sourceforge.net/p/f-iptables/code/ci/master/tree/" ;
fweb_git="https://git.code.sf.net/p/f-iptables/code f-iptables-code" ;
####       #### english: [Program license] #### spanish: [Licencia del programa]
flicense="Copyleft, without warranty, gnu license GPL v2."
license_gpl="https://sourceforge.net/p/f-iptables/code/ci/master/tree/LICENSE.txt?format=raw"
####
####
#### english: if wrong in null_option
#### spanish: si esta mal definidad definida null_option
####
####
default_security="basic-options"
####
####
############################## english: variables: variables to declare     ##############################
############################## spanish: variables: variables para declarar  ##############################
####
####
allow_legacy="" ; allow_nft="" ; allow_ipv4="" ; allow_ipv6="" ;
client_tcp="ssh,http,https" ; client_udp="domain,bootpc,ntp,https" ;
server_tcp="" ; server_udp="" ; 
logserver_tcp="no" ; logserver_udp="no" ;
logserver_prefix_input="fwlog-input::" ; 
logserver_prefix_output="fwlog-output::" ;
allow_maxtries_ssh="no"
allow_forward_ip4="no" ; allow_forward_ip6="no" ; 
allow_gateway_ip4="no" ; allow_gateway_ip6="no" ;
allow_dmz_ip4="no" ; allow_dmz_ip6="no" ;
allow_input_all="no" ; allow_output_all="no" ; 
allow_input_state="no" ; allow_output_state="no" ;
allow_input_bandwidth="no" ; allow_output_bandwidth="no" ;
allow_input_maxconnect="no" ; allow_output_maxconnect="no" ;
allow_input_ping="no" ; allow_output_ping="no" ;
allow_mac_whitelist="no" ; allow_mac_blacklist="no" ; 
allow_net_vpn="no" ; allow_net_blacklist="no" ;
allow_output_uid="no" ; allow_output_gid="no" ;
allow_others_protocols="no" ;
config_maxtries_ssh="20"
config_dmz_ip4="" ; config_dmz_ip6="" ;
config_input_state="new,related,stablished" ;
config_output_state="new,related,stablished" ;
config_input_bandwidth="12512" ; config_output_bandwidth="512" ;
config_input_maxconnect="72" ; config_output_maxconnect="72" ;
config_mac_whitelist="" ; config_mac_blacklist=""
config_net_vpn="wesnoth.org" ; config_net_blacklist="yandex.com" ;
config_output_uid="root" ; config_output_gid="root" ;
config_others_protocols="icmp,igmp" ;
net_ipv4_client="0/0" ; net_ipv4_server="0/0" ;
net_ipv6_client="::/0" ; net_ipv6_server="::/0" ;
####
####
##############################       english: Update variables             ################################### 
##############################       spanish: Actualiza variables          ###################################
####
####
####     #### english: launch /etc/default/fwiptables for update variables
####     #### spanish: lanza /etc/default/fwiptables para actualizar variables
####
####
if [ -f /etc/default/fwiptables ] ; then . /etc/default/fwiptables ; fi
####
####
#### english: if null option is void return default to basic-options
#### spanish: si la opcion por defecto esta vacia vuelve a basic-options
####
####
if [ "$null_option" = "$NULL" ] ; then null_option="$default_security" ; fi
####
####
############################## english: are you root: uid 0 ?                ############################## 
############################## spanish: eres admnistrador: identificador 0 ? ##############################
####
####
if [ "$(id -u)" = "0" ]; then $nada
else
echo $head_principal
echo "$cincuenta need to be root to work"
echo "$ralla"
echo "$cincuenta  Be root to work $fiptables"
echo $footer_lineal
exit ; fi
####
####
##############################       english: intro: show intro
##############################       spanish: intro: show intro
#### :rutina-inicial-intro:
####
####
if [ "$first_option" = "intro" ]; then $nada
echo
echo "--------------------------------------------------------------------------"
echo "  FRAN INTRO "
echo 
echo "  Use Fran Firewall to configure both iptables netfilter. "
echo "  With xtables and/or nftables. with ipv4 and/or ipv6.    "
echo "  Create one firewall with a wizard and save it.          "
echo "  Configure one firewall with your own config files.      "
echo "  Manage the firewall with the standard iptables files.   "
echo "  Too, use this firewall with some utilities for ip.      "
echo
echo "  LICENSE GNU / GPL v2."
echo "  See web page project in $fweb_main"
echo "--------------------------------------------------------------------------"
echo
echo "$cinco [ INSTALL THIS VERSION: fwiptables in /usr/bin ] [ TYPE: ] [ "$zero_option" install ]" ;
echo "$cinco [ INSTALL LAST VERSION: fwiptables in /usr/bin ] [ TYPE: ] [ "$zero_option" upgrade ]" ;
echo
echo "--------------------------------------------------------------------------"
echo
exit; fi
####
####
#### :rutina-final-intro:
##############################      english: search programs: programs path           #####################
##############################      spanish: busca los programas: ruta de programas   #####################
#### :rutina-inicial-command:
####
####
command_bash="$(command -v bash | cut -d " " -f 1)"
command_iptables_legacy="$(command -v iptables-legacy | cut -d " " -f 1)"
command_iptables_nft="$(command -v iptables-nft | cut -d " " -f 1)"
command_ip6tables_legacy="$(command -v ip6tables-legacy | cut -d " " -f 1)"
command_ip6tables_nft="$(command -v ip6tables-nft | cut -d " " -f 1)"
command_arptables="$(command -v arptables |cut -d " " -f 1)"
command_ebtables="$(command -v ebtables | cut -d " " -f 1)"
command_fmt="$(command -v fmt | cut -d " " -f 1)"
command_date="$(command -v date | cut -d " " -f 1)"
command_uname="$(command -v uname | cut -d " " -f 1)"
command_sed="$(command -v sed | cut -d " " -f 1)"
command_xrandr="$(command -v xrandr | cut -d " " -f 1)"
command_ip="$(command -v ip | cut -d " " -f 1)"
command_curl="$(command -v curl | cut -d " " -f 1)"
command_host="$(command -v host | cut -d " " -f 1)"
command_dig="$(command -v dig | cut -d " " -f 1)"
command_resolveip="$(command -v resolveip | cut -d " " -f 1)"
command_geoiplookup="$(command -v geoiplookup | cut -d " " -f 1)"
command_route="$(command -v route | cut -d " " -f 1)"
command_ss="$(command -v ss| cut -d " " -f 1)"
command_netstat="$(command -v netstat | cut -d " " -f 1)"
command_netstat_nat="$(command -v netstat-nat | cut -d " " -f 1)"
command_lsof="$(command -v lsof | cut -d " " -f 1)"
command_sysctl="$(command -v sysctl | cut -d " " -f 1)"
command_tcpdump="$(command -v tcpdump | cut -d " " -f 1)"
command_arp="$(command -v arp | cut -d " " -f 1)"
command_arp_scan="$(command -v arp-scan | cut -d " " -f 1)"
command_ping="$(command -v ping | cut -d " " -f 1)"
command_traceroute="$(command -v traceroute | cut -d " " -f 1)"
command_dialog="$(command -v dialog | cut -d " " -f 1)"
command_zenity="$(command -v zenity | cut -d " " -f 1)"
command_lynx="$(command -v lynx | cut -d " " -f 1)"
command_links="$(command -v links | cut -d " " -f 1)"
command_links2="$(command -v links2 | cut -d " " -f 1)"
command_shc="$(command -v shc | cut -d " " -f 1)"
command_nmap="$(command -v nmap | cut -d " " -f 1)"
command_ntpdate="$(command -v ntpdate | cut -d " " -f 1)"
command_sntp="$(command -v sntp | cut -d "" -f 1)"
command_rdate="$(command -v rdate | cut -d "" -f 1)"
command_wget="$(command -v wget | cut -d " " -f 1)"
command_iperf="$(command -v iperf | cut -d " " -f 1)"
command_tee="$(command -v tee | cut -d " " -f 1)"
command_dd="$(command -v dd | cut -d " " -f 1)"
command_glxgears="$(command -v glxgears | cut -d " " -f 1)"
command_mpg123="$(command -v mpg123 | cut -d " " -f 1)"
command_mpg321="$(command -v mpg321 | cut -d " " -f 1)"
####
####
#### :rutina-final-command:
##############################      english: search favorite browser: favorite browser     #####################
##############################      spanish: busca preferido navegador: favorite browser   #####################
####
####
favorite_text_browser=""
if [ "$command_lynx" = "$NULL"   ]    ; then $nada ; else favorite_text_browser="$command_lynx"      ; fi
if [ "$command_links" = "$NULL"  ]    ; then $nada ; else favorite_text_browser="$command_links"     ; fi
if [ "$command_links2" = "$NULL" ]    ; then $nada ; else favorite_text_browser="$command_links2"    ; fi
####
####
##############################       english: Install:    $fiptables           ###########################################
##############################       spanish: Instalador: $fiptables           ###########################################
#### :rutina-inicial-install:
####
####
if [ "$first_option" = "install" ] ; then $zero_option intro
echo "$cinco [ Install $fiptables in $directory_fiptables ]"
#### 
#### 
####  english: copy the file
####  spanish: copia el archivo
#### 
#### 
echo "$cinco [ Runing.. ] [ $zero_option install ]"
cp $zero_option $directory_fiptables/$fiptables &> /dev/null
#### 
#### 
####  english: create /etc/bash_completion.d/$fiptables and /etc/default/fwiptables
####  spanish: crea  /etc/bash_completion.d/$fiptables y   /etc/default/fwiptables
#### 
#### 
####  english: Install new /etc/bash_completion/fwiptables
####  spanish: instala nuevo /etc/bash_completion/fwiptables
#### 
#### 
if [ -d "/etc/bash_completion.d" ]; then $nada ; else mkdir /etc/bash_completion.d/ &> /dev/null ; fi 
echo "alias $fiptables='sudo $directory_fiptables/$fiptables'"       &>  /etc/bash_completion.d/$fiptables.sh
echo "complete -W 'list list6 list-filter4 list-filter6 list-nat4 list-nat6 basic-options \
full-options long-help help ayuda  version cli-menu gui-menu gui-shell \
info-net info-system stop continue reset names save load ss lsof wizard-mini wizard-full \
eraserules offline allpermisive custom actual sudo-list alias-list' $fiptables" &>>  /etc/bash_completion.d/$fiptables.sh
####
####
####  english: Install new /etc/profile.d/fwiptables
####  spanish: instala nuevo /etc/profile.d/fwiptables
#### 
#### 
if [ -d "/etc/profile.d" ]; then $nada ; else mkdir /etc/profile.d/ &> /dev/null ; fi 
echo "alias $fiptables='sudo $directory_fiptables/$fiptables'"       &>  /etc/profile.d/$fiptables.sh
echo "complete -W 'list list6 list-filter4 list-filter6 list-nat4 list-nat6 basic-options \
full-options long-help help ayuda  version cli-menu gui-menu gui-shell \
info-net info-system stop continue reset names save load ss lsof wizard-mini wizard-full \
eraserules offline allpermisive custom actual sudo-list alias-list' $fiptables" &>>  /etc/profile.d/$fiptables.sh
####
####
#### english: generate /etc/default/fwiptables
#### spanish: genera /etc/default/fwiptables
####
####
echo "$(head -120 $0 | grep -B 2 fwiptables-default)" &> /etc/default/fwiptables
#### 
#### 
####  english: probe sane dir /etc/bash_completion.d
####  spanish: comprueba directorio sano /etc/bash_completion.d
#### 
#### 
chmod ugo+rx /etc/bash_completion.d/$fiptables &> /dev/null
chmod ugo+rx $directory_fiptables/$fiptables &> /dev/null
####
####
echo "$cinco [ $fiptables $fversion / SCRIPT INSTALLED IN: ] [ $directory_fiptables/$fiptables ]" 
echo "$cinco [ Configurations files in: ] [ /etc/fwiptables | /etc/fwrecover | /etc/default/fwiptables ] ]"
echo "$cinco [ /etc/bash_completion.d/fwiptables | /etc/profile.d/fwiptables ]"
#### 
#### 
####  english: modes of file 
####  spanish: modos de archivo
#### 
#### 
echo "$cinco [ Launch $fiptables to run / TYPE :] [ $fiptables ]" 
echo "$rallica [ OK FIREWALL INSTALLED ] [ $directory_fiptables/$fiptables ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-install:
##############################       english: upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: upgrade: actualiza en el archivo /usr/bin/fwiptables
#### :rutina-inicial-upgrade:
####
####
if [ "$first_option" = "upgrade" ]; then $give_cover
echo "$cinco [ upgrade ] [ upgrade $fiptables at last version for web ]"
echo "$cinco [ upgrade $fiptables in $directory_fiptables ]"
case "$favorite_text_browser" in
"$NULL")echo " [ Install a text web browser for upgrade fwiptables ]"; exit ;; esac
echo "$cinco [ Upgrade The $fiptables in file $directory_fiptables/$fiptables with $favorite_text_browser command ]"
echo "$cinco [ Downloading $fiptables with the comand $favorite_text_browser browser ]"
rm /tmp/$fiptables &> /dev/null
####
####
####  English: download fwiptables
####  Spanish: descarga fwiptables
####
####
echo "$cinco [ Waiting several seconds .. ]"
download_version="$($favorite_text_browser -dump $fweb_newfiles  | grep -i fwiptables \
 | grep -i download | egrep -iv "deb" | head -1 | sed s/"Download Latest Version"//g \
 | cut -d "(" -f 1 | sed s/" "//g)"
download_ruta="$fweb_files$download_version/download"
echo "$rallica [ Downloading.. $download_ruta ]"
echo "$cinco [ Waiting several seconds .. ]"
$favorite_text_browser -source "$fweb_files""$download_version"/download &> "/tmp/$fiptables-installer"
chmod ugo+rx /tmp/$fiptables-installer &> /dev/null
####
####
#### English: launch install
#### Spanish: lanza instalacion
####
####
if [ -s "/tmp/$fiptables-installer" ]; then /tmp/$fiptables-installer install; rm /tmp/$fiptables-installer
else "$rallica Install fail"; fi
echo $footer_lineal
exit ; fi
####
####
#### :rutina-final-upgrade:
##############################       english: Notice Installer with intro      ###################################
##############################       spanish: noticia de Instalador con intro  ###################################
#### :rutina-inicial-notice:
####
####
cmp -s $0 $directory_fiptables/$fiptables || . $0 intro
####
####
#### :rutina-final-notice:
##############################       alias for fwiptables       ##############################
##############################       apodos de fwiptables      ##############################
####
####
#### english: temporal files
#### spanish: archivos temporales
####
####
mkdir /tmp/fwiptables-$fversion-data/ &> /dev/null
file_temporal_rute="/tmp/fwiptables-$fversion-data/"
file_temporal_text="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option"
file_temporal_textfinal="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option-2"
file_temporal_gui="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option"
file_temporal_guifinal="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option-2"
file_output_log="/tmp/fwiptables-$fversion-data/$first_option-$second_option-$third_option"
file_output_logfinal="/var/log/fwiptables"
####
####
#### english: Exceptions when begin with -text
#### english: Excepciones cuando empiezan con -text
####
####
if [ "$first_option" = "text" ] || [ "$first_option" = "-text" ]; then
case "$second_option" in 
wizard-*) $fiptables $second_option $third_option ; exit ;;
nueva-mini-config) $fiptables $second_option $third_option ; exit ;;
nueva-completa-config) $fiptables $second_option $third_option ; exit ;;
new-mini-config) $fiptables $second_option $third_option ; exit ;;
new-full-config) $fiptables $second_option $third_option ; exit ;;
modify-config) $fiptables $second_option $third_option ; exit ;;
ping-*) $fiptables $second_option $third_option ; exit ;;
speed-*) $fiptables $second_option $third_option ; exit ;;
scan-*) $fiptables $second_option $third_option ; exit ;;
"install") $fiptables $second_option $third_option ; exit ;;
uprade) $fiptables $second_option $third_option ; exit ;;
ram-speed) $fiptables $second_option $third_option ; exit ;;
disc-speed) $fiptables $second_option $third_option ; exit ;;
gl-speed) $fiptables $second_option $third_option ; exit ;;
radio) $fiptables $second_option $third_option ; exit ;;
log-*) $fiptables $second_option $third_option ; exit ;;
license-*) $fiptables $second_option $third_option ; exit ;;
ipforward-*) $fiptables $second_option $third_option ; exit ;;
esac
fi
####
####
case "$first_option" in 
"$NULL") $fiptables "$null_option" ; exit ;;
"gui") first_option="-gui" ;;
"cli") first_option="cli-menu" ;;
"gui-menu") first_option="gui-menu" ;;
"gui-shell") first_option="gui-shell" ;;
"log")
$fiptables $second_option $third_option &>> $file_output_log
cat $file_output_log | grep -v Warning: &>> $file_output_logfinal
echo "$cinco Output $fiptables $second_option $third_option sended to $file_output_logfinal" 
exit ;;
"-log") 
$fiptables $second_option $third_option &>> $file_output_log
cat $file_output_log | grep -v Warding: &>> $file_output_logfinal
echo "$cinco Output $fiptables $second_option $third_option sended to $file_output_logfinal" 
exit ;;
"text")
$fiptables $second_option $third_option &> $file_temporal_text
cat $file_temporal_text | grep -v Warning:  &> $file_temporal_textfinal
cat $file_temporal_textfinal ; exit ;;
"-text")
$fiptables $second_option $third_option &> $file_temporal_text
cat $file_temporal_text | grep -v Warning:  &> $file_temporal_textfinal
cat $file_temporal_textfinal ; exit ;;
"list") $fiptables list4-ip &> $file_temporal_text 
cat $file_temporal_text | grep -v Warning:  &> $file_temporal_textfinal
cat $file_temporal_textfinal ; exit ;;
"list6") $fiptables list6-ip &> $file_temporal_text 
cat $file_temporal_text | grep -v Warning:  &> $file_temporal_textfinal
cat $file_temporal_textfinal ; exit ;;
esac
####
####
##############################     english: cfg: list: some config, alias to list-config
##############################     spanish: cfg: lista alguna config, apodo a list-config
####
####
if [ "$first_option" = "cfg" ]; then first_option="list-config" ; fi
####
####
#############################     english: alias for cfg-custom to custom  
#############################     spanish: apodo de cfg-custom para custom
####
####
if [ "$first_option" = "cfg-custom" ]; then first_option="custom" ; fi
####
####
############################       english: list-fw: alias to names
############################       spanish: list-fw: apodo a names
####
####
if [ "$first_option" = "list-fw" ]; then first_option="names"; fi
####
####
############################       english: options: alias options to full-options
############################       spanish: options: apodo options a full-options
####
####
if [ "$first_option" = "options" ]; then first_option="full-options"; fi
####
####
##############################     english: autolog:         ###################################
##############################     spanish: autoguardado     ###################################
#### :rutina-inicial-autolog:
####
####
####   english: autolog  #### spanish: autoguardado
####
####
if [ "$first_option" != "header" ] ; then
if [ "$allow_autolog" = "no" ]   ; then echo $nada
else echo $head_autolog >> /var/log/fwiptables ; fi; fi
####
####
#### :rutina-final-autolog:
##############################     english: allow header          ###################################
##############################     spanish: permite cabeceras     ###################################
#### :rutina-inicial-header:
####
####
#### english:  allow_header: #### spanish permitir cabecera
####
####
if [ "$first_option" = "header" ] ; then
if [ "$allow_header" = "no" ]   ; then 
echo $head_default
#### echo "$head_normal" 
if [ "$rules_arptables" != "0" ]       ; then echo "$cinco [ whith ebtables arp rules ]"        ; fi
if [ "$rules_filter_ebtables" != "0" ] ; then echo "$cinco [ whith ebtables filter mac rules ]" ; fi
if [ "$rules_nat_ebtables" != "0" ]    ; then echo "$cinco [ whith ebtables nat mac rules ]"    ; fi
else 
echo $head_principal
echo $head_default
#### echo $head_normal
echo $default_route_cuatro
echo $default_route_seis
if [ "$rules_arptables" != "0" ]       ; then echo "$cinco [ whith ebtables arp rules ]"        ; fi
if [ "$rules_filter_ebtables" != "0" ] ; then echo "$cinco [ whith ebtables filter mac rules ]" ; fi
if [ "$rules_nat_ebtables" != "0" ]    ; then echo "$cinco [ whith ebtables nat mac rules ]"    ; fi
echo $header_ender
fi ; exit ; fi
####
####
#### :rutina-final-header:
##################################### english: regeneration-default: regen files       #####################################
##################################### spanish: regeneration-default: regenera archivos #####################################
#### :rutina-inicial-regeneration-default:
####
####
if [ "$first_option" = "regeneration-default" ]; then $nada
####
####
####  english: variables to prepare to gen files
####  spanish: variables para preparar para generar archivos
####
####
#### english: basic options in configuration file cfg
#### spanish: opciones basicas en configuracion de archivo cfg
####
####
var0=$(echo "$cinco $fprogram from $fiptables version $fversion whith config_variable_version=2 " )
var1=$(echo "$cinco BEGIN NECESARY #" )
eng1=$(echo "$cinco  .......... BEGIN Necesary options .......... .......... #")
spa1=$(echo "$cinco INICIO .......... Opciones Necesarias .......... .......... #")
var2=$(echo "$cinco NETFILTER #" )
eng2=$(echo "$cinco the iptables firewall netfilter, choose one or two")
spa2=$(echo "$cinco el iptables firewall netfilter, elige uno o dos")
var3=$(echo "allow_legacy=no" )
eng3=$(echo "$cinco launch xtables, void to yes or type no")
spa3=$(echo "$cinco lanza xtables, vacio para si, o escribe no")
var4=$(echo "allow_nft=" ) 
eng4=$(echo "$cinco launch nftables, void to yes or type no")
spa4=$(echo "$cinco lanza nftables, vacio para si, o escribe no")
var5=$(echo "$cinco PROTOCOL IP #" )
eng5=$(echo "$cinco ip protocol, modify with void or no")
spa5=$(echo "$cinco procolo ip, modificar con vacio o no")
var6=$(echo "allow_ipv4=" )
eng6=$(echo "$cinco void to config firewall with ipv4 or no to dont configure ipv4")
spa6=$(echo "$cinco varcio para ejecutar el firewall con ipv4 o no para no")
var7=$(echo "allow_ipv6=" )
eng7=$(echo "$cinco void to config firewall with ipv6 or no to dont configure ipv6")
spa7=$(echo "$cinco varcio para ejecutar el firewall con ipv6 o no para no")
var8=$(echo "$cinco CLIENT PORTS #")
eng8=$(echo "$cinco Client ports, add with ',' and join ranges with ':'")
spa8=$(echo "$cinco puertos Cliente, añadir con ',' y poner rangos con ':' ")
var9=$(echo "client_tcp=http,https,ssh")
eng9=$(echo "$cinco tcp ports for client")
spa9=$(echo "$cinco puertos tcp para ser cliente")
var10=$(echo "client_udp=domain,bootpc,bootps,ntp,https")
eng10=$(echo "$cinco udp ports for client")
spa10=$(echo "$cinco puertos udp para ser cliente")
var11=$(echo "$cinco SERVER PORTS #" )
eng11=$(echo "$cinco Server ports, add with ',' and join ranges with ':'")
spa11=$(echo "$cinco Puertos Servidor, añadir con ',' y poner rangos con ':'")
var12=$(echo "server_tcp=ssh" )
eng12=$(echo "$cinco tcp ports for server")
spa12=$(echo "$cinco puertos tcp para servidor")
var13=$(echo "server_udp= ")
eng13=$(echo "$cinco udp ports for server")
spa13=$(echo "$cinco puertos udp para servidor")
var14=$(echo "$cinco LOG TO SERVER PORTS #" )
eng14=$(echo "$cinco Log to server ports, add with ',' and join ranges with ':'")
spa14=$(echo "$cinco logear para puertos de Servidor, añadir con ',' y poner rangos con ':'")
var15=$(echo "logserver_tcp= ")
eng15=$(echo "$cinco the tcp ports to log server")
spa15=$(echo "$cinco puertos tcp para logear servidor")
var16=$(echo "logserver_udp= ")
eng16=$(echo "$cinco the udp ports to log server")
spa16=$(echo "$cinco puertos udp para logear servidor")
var17=$(echo "$cinco LOG PREFIX TO SERVER #" )
eng17=$(echo "$cinco Log to server ports with prefix")
spa17=$(echo "$cinco logear para puertos de servidor con prefijo")
var18=$(echo "logserver_prefix_input=fwlog-input::")
eng18=$(echo "$cinco type input prefix for logserver")
spa18=$(echo "$cinco especifica prefijo de entrada para logserver")
var19=$(echo "logserver_prefix_output=fwlog-output::")
eng19=$(echo "$cinco type output prefix for logserver")
spa19=$(echo "$cinco especifica prefijo de salida para logserver")
var20=$(echo "$cinco END NECESARY #" )
eng20=$(echo "$cinco .......... END Necesary options .......... .......... #")
spa20=$(echo "$cinco FINAL .......... Opciones Necesarias .......... .......... #")
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var32=$(echo "$cinco BEGIN OPTIONAL #" )
eng32=$(echo "$cinco .......... BEGIN Optional options .......... .......... #")
spa32=$(echo "$cinco INICIO .......... Opciones opcionales .......... .......... #")
var33=$(echo "$cinco choose void or no #" )
eng33=$(echo "$cinco Allow Other Options,  modify with void, or no")
spa33=$(echo "$cinco Permitir Otras Opciones, modificar con vacio o no")
var34=$(echo "allow_maxtries_ssh=no" )
eng34=$(echo "$cinco void to allow max tries login in ssh for hour or no")
spa34=$(echo "$cinco vacio para permitir maximos intentos de logins in ssh por hora o no")
var35=$(echo "allow_forward_ip4=no" )
eng35=$(echo "$cinco void to yes to forward ip4, or no to no")
spa35=$(echo "$cinco vacio para reenvios ip4, o no para no")
var36=$(echo "allow_forward_ip6=no" )
eng36=$(echo "$cinco void to allow ip forward ip6 or no")
spa36=$(echo "$cinco vacio para permitir reenvio ip6, o no")
var37=$(echo "allow_gateway_ip4=no" )
eng37=$(echo "$cinco void to allow gateway ip4 to others nets or no")
spa37=$(echo "$cinco vacio para permitir gateway ip4  a otras redes, o no")
var38=$(echo "allow_gateway_ip6=no" )
eng38=$(echo "$cinco void to allow gateway ip6 to other nets or no")
spa38=$(echo "$cinco vacio para hacer gateway ip6 a otras redes o no")
var39=$(echo "allow_dmz_ip4=no" )
eng39=$(echo "$cinco void to allow dmz ip4 to one host local or no")
spa39=$(echo "$cinco vacio para permitir dmz ip4  a una host local, o no")
var40=$(echo "allow_dmz_ip6=no" )
eng40=$(echo "$cinco void to allow dmz ip6 to one host local or no")
spa40=$(echo "$cinco vacio para hacer dmz ip6 a una host local o no")
var41=$(echo "allow_input_all=no ")
eng41=$(echo "$cinco void when the rules are to allow input to all or no")
spa41=$(echo "$cinco vacio, reglas para permitir toda entrada o no")
var42=$(echo "allow_output_all=no ")
eng42=$(echo "$cinco void when the rules are to allow output to all or no")
spa42=$(echo "$cinco vacio, reglas para permitir toda salida o no")
var43=$(echo "allow_input_state=no ")
eng43=$(echo "$cinco Selective Input state with void or no")
spa43=$(echo "$cinco Estado de entrada selectivo con vacio o no")
var44=$(echo "allow_output_state=no ")
eng44=$(echo "$cinco Selective Output state with void or no")
spa44=$(echo "$cinco Estado de salida selectivo con vacio o no")
var45=$(echo "allow_input_bandwidth=no ")
eng45=$(echo "$cinco void to limit bandwidth input in kbits/sec for all sources or no")
spa45=$(echo "$cinco vacio para limitar ancho de banda de entrada para todas las fuentes en kbits/sec o no")
var46=$(echo "allow_output_bandwidth=no" )
eng46=$(echo "$cinco void to limit bandwidth output in kbits/sec for each destination or no")
spa46=$(echo "$cinco vacio limitar ancho de banda de salida en kbits/sec por cada destino o no")
var47=$(echo "allow_input_maxconnect=no" )
eng47=$(echo "$cinco void to limit max number for input simultaneous connections or no" )
spa47=$(echo "$cinco vacio para limitar numero de conexiones simultaneas de entrada o no" )
var48=$(echo "allow_output_maxconnect=no" )
eng48=$(echo "$cinco void to limit max number for output simultaneous connections or no" )
spa48=$(echo "$cinco vacio para limitar numero de conexiones simultaneas de salida o no" )
var49=$(echo "allow_input_ping=no" )
eng49=$(echo "$cinco void to allow RECIVE PING or no" )
spa49=$(echo "$cinco vacio para permitir RECIVIR PING o no")
var50=$(echo "allow_output_ping=no" )
eng50=$(echo "$cinco void to allow SEND PING or no" )
spa50=$(echo "$cinco vacio para permitir ENVIAR PING o no" )
var51=$(echo "allow_mac_whitelist=no" )
eng51=$(echo "$cinco void to allow some exceptional MAC-ADDRESS or no")
spa51=$(echo "$cinco vacio para permitir DIRECCION-MAC excepcionales o no")
var52=$(echo "allow_mac_blacklist=no")
eng52=$(echo "$cinco void to drop some excepcional MAC-ADDRESS or no")
spa52=$(echo "$cinco vacio para denegar DIRECCION-MAC excepcionales o no")
var53=$(echo "allow_net_vpn=no" )
eng53=$(echo "$cinco void to allow some exceptional HOST/IP or no")
spa53=$(echo "$cinco vacio para permitir HOST/IP excepcionales o no")
var54=$(echo "allow_net_blacklist=no")
eng54=$(echo "$cinco void to drop some excepcional HOST/IP or no")
spa54=$(echo "$cinco vacio para denegar HOST/IP excepcionales o no")
var55=$(echo "allow_output_uid=no" )
eng55=$(echo "$cinco void to allow excepcional USER or no" )
spa55=$(echo "$cinco vacio permite salida de paquetes de un USUARIO excepcional o no" )
var56=$(echo "allow_output_gid=no" )
eng56=$(echo "$cinco void to allow excepcional GROUP or no" )
spa56=$(echo "$cinco vacio permite salida de paquetes de un GRUPO excepcional o no" )
var57=$(echo "allow_others_protocols=no" )
eng57=$(echo "$cinco void to allow other PROTOCOL-IP excepcional or no" )
spa57=$(echo "$cinco vacio para permitir otro PROTOCOLO-IP excepcional o no" )
####
####
#### english: advance options in configurations file cfg
#### spanish: avanzadas opciones in configuracion de archivo cfg
####
####
var58=$(echo "$cinco Begin Variables #.......... .......... #.........." )
eng58=$(echo "$cinco Fill Variables" )
spa58=$(echo "$cinco Rellena Variables" )
var59=$(echo "$cinco Options" )
eng59=$(echo "$cinco Other Options, add with , and join ranges with :" )
spa59=$(echo "$cinco Otras Opciones, añadir con , y poner rangos con :" )
var60=$(echo "config_maxtries_ssh=20")
eng60=$(echo "$cinco modify with number max of tries to log in us ssh server for hour")
spa60=$(echo "$cinco modificar con los maximos intentos de logeo a nuestro servidor ssh por hora")
var61=$(echo "config_dmz_ip4=192.168.1.7")
eng61=$(echo "$cinco ip server ip lan to other external nets, nat prerouting")
spa61=$(echo "$cinco servidor ip lan para otras redes esternas, nat prerouting")
var62=$(echo "config_dmz_ip6=d4:12:43:01:36:2e")
eng62=$(echo "$cinco ip server ip lan to other external nets, nat prerouting")
spa62=$(echo "$cinco servidor ip lan para otras redes esternas, nat prerouting")
var63=$(echo "config_input_state=new,related,established")
eng63=$(echo "$cinco void for all or new,related,established,untracked,invalid")
spa63=$(echo "$cinco modificar con vacio o new,related,established,untracked,invalid")
var64=$(echo "config_output_state=new,related,established")
eng64=$(echo "$cinco void for all or new,related,established,untracked,invalid")
spa64=$(echo "$cinco modificar con vacio o new,related,established,untracked,invalid")
var65=$(echo "config_input_bandwidth=12512" )
eng65=$(echo "$cinco max input bandwidth in kbits/sec for all" )
spa65=$(echo "$cinco maximo entrada de ancho de banda en kbit/sec para todos" )
var66=$(echo "config_output_bandwidth=512" )
eng66=$(echo "$cinco max output bandwidth in kbits/sec for each ip" )
spa66=$(echo "$cinco maximo salida de ancho de banda en kbits/sec para cada ip" )
var67=$(echo "config_input_maxconnect=72" )
eng67=$(echo "$cinco max number for input simultaneous connections" )
spa67=$(echo "$cinco maximo numero de conexiones simultaneas de entrada" )
var68=$(echo "config_output_maxconnect=72" )
eng68=$(echo "$cinco max number for output simultaneous connections" )
spa68=$(echo "$cinco maximo numero de conexiones simultaneas de salida" )
var69=$(echo "config_mac_whitelist=d4:12:43:01:36:2e" )
eng69=$(echo "$cinco allow this excepcitonal MAC-ADRESS" )
spa69=$(echo "$cinco permitir estos MAC-ADDRESS excepcionales" )
var70=$(echo "config_mac_blacklist=d4:12:43:01:36:2e" )
eng70=$(echo "$cinco drop this excepcional MAC-ADDRESS" )
spa70=$(echo "$cinco deniega estos MAC-ADDRESS excepcionales" )
var71=$(echo "config_net_vpn=wesnoth.org,sf.net" )
eng71=$(echo "$cinco allow this excepcitonal HOST/IP" )
spa71=$(echo "$cinco permitir estos HOST/IP excepcionales" )
var72=$(echo "config_net_blacklist=facebook.com,www.facebook.com" )
eng72=$(echo "$cinco drop this excepcional HOST/IP" )
spa72=$(echo "$cinco deniega estos HOST/IP excepcionales" )
var73=$(echo "config_output_uid=root" )
eng73=$(echo "$cinco allow out packages excepcional from this USER excepcional" )
spa73=$(echo "$cinco permite salida de paquetes de este USUARIO excepcional" )
var74=$(echo "config_output_gid=root" )
eng74=$(echo "$cinco allow out packages excepcional from this GROUP excepcional" )
spa74=$(echo "$cinco permite salida de paquetes de este GRUPO excepcional" )
var75=$(echo "config_others_protocols=icmp,igmp" )
eng75=$(echo "$cinco allow others protocols from /etc/protocolos" )
spa75=$(echo "$cinco permitir otros protocolos desde /etc/protocols" )
var76=$(echo "$cinco NET CLIENT AND NET SERVER #" )
eng76=$(echo "$cinco Net to connect like client or server" )
spa76=$(echo "$cinco Red para conectar como cliente o server" )
var77=$(echo "net_ipv4_client=0/0" )
eng77=$(echo "$cinco the net to client ipv4, all is 0/0" )
spa77=$(echo "$cinco la red cual cliente ipv4, todos es 0/0" )
var78=$(echo "net_ipv4_server=0/0" )
eng78=$(echo "$cinco the net to server ipv4, all is 0/0" )
spa78=$(echo "$cinco la red cual servidor ipv4, todos es 0/0" )
var79=$(echo "net_ipv6_client=::/0" )
eng79=$(echo "$cinco the net to client ipv6, all is ::/0" )
spa79=$(echo "$cinco la red cual cliente ipv6, todos es ::/0" )
var80=$(echo "net_ipv6_server=::/0" )
eng80=$(echo "$cinco the net to server ipv6, all is ::/0" )
spa80=$(echo "$cinco la red cual servidor ipv6, todos es ::/0" )
var81=$(echo "$cinco #" )
eng81=$(echo "$cinco .......... END Optional options .......... .......... #")
spa81=$(echo "$cinco FINAL .......... Opciones opcionales .......... .......... #")
####
####
##############################   english: continue with autogen defaults configs cfg
##############################   spanish: continua con auto genera configs cfg por defecto
####
####
#### english: where save default files #### spanish: donde se guardan los archivos
####
####
me="$defaultminicfg_eng"
ms="$defaultminicfg_spa"
fe="$defaultfullcfg_eng"
fs="$defaultfullcfg_spa"
####
####
#### wizard mini-english
####
####
echo $var0  &> $me
echo $var1  $tabz $eng1  &>> $me
echo $var2  $tabz $eng2  &>> $me
echo $var3  $tabz $eng3  &>> $me
echo $var4  $tabz $eng4  &>> $me
echo $var5  $tabz $eng5  &>> $me
echo $var6  $tabz $eng6  &>> $me
echo $var7  $tabz $eng7  &>> $me
echo $var8  $tabz $eng8  &>> $me
echo $var9  $tabz $eng9  &>> $me
echo $var10 $tabz $eng10 &>> $me
echo $var11 $tabz $eng11 &>> $me
echo $var12 $tabz $eng12 &>> $me
echo $var13 $tabz $eng13 &>> $me
echo $var14 $tabz $eng14 &>> $me
echo $var15 $tabz $eng15 &>> $me
echo $var16 $tabz $eng16 &>> $me
echo $var17 $tabz $eng17 &>> $me
echo $var18 $tabz $eng18 &>> $me
echo $var19 $tabz $eng19 &>> $me
echo $var20 $tabz $eng20 &>> $me
####
####
#### wizard mini-spanish
####
####
echo $var0  &> $ms
echo $var1  $tabz $spa1  &>> $ms
echo $var2  $tabz $spa2  &>> $ms
echo $var3  $tabz $spa3  &>> $ms
echo $var4  $tabz $spa4  &>> $ms
echo $var5  $tabz $spa5  &>> $ms
echo $var6  $tabz $spa6  &>> $ms
echo $var7  $tabz $spa7  &>> $ms
echo $var8  $tabz $spa8  &>> $ms
echo $var9  $tabz $spa9  &>> $ms
echo $var10 $tabz $spa10 &>> $ms
echo $var11 $tabz $spa11 &>> $ms
echo $var12 $tabz $spa12 &>> $ms
echo $var13 $tabz $spa13 &>> $ms
echo $var14 $tabz $spa14 &>> $ms
echo $var15 $tabz $spa15 &>> $ms
echo $var16 $tabz $spa16 &>> $ms
echo $var17 $tabz $spa17 &>> $ms
echo $var18 $tabz $spa18 &>> $ms
echo $var19 $tabz $spa19 &>> $ms
echo $var20 $tabz $spa20 &>> $ms
####
####
#### wizard full-english
####
####
echo $var0  &> $fe
echo $var1  $tabz $eng1  &>> $fe
echo $var2  $tabz $eng2  &>> $fe
echo $var3  $tabz $eng3  &>> $fe
echo $var4  $tabz $eng4  &>> $fe
echo $var5  $tabz $eng5  &>> $fe
echo $var6  $tabz $eng6  &>> $fe
echo $var7  $tabz $eng7  &>> $fe
echo $var8  $tabz $eng8  &>> $fe
echo $var9  $tabz $eng9  &>> $fe
echo $var10 $tabz $eng10 &>> $fe
echo $var11 $tabz $eng11 &>> $fe
echo $var12 $tabz $eng12 &>> $fe
echo $var13 $tabz $eng13 &>> $fe
echo $var14 $tabz $eng14 &>> $fe
echo $var15 $tabz $eng15 &>> $fe
echo $var16 $tabz $eng16 &>> $fe
echo $var17 $tabz $eng17 &>> $fe
echo $var18 $tabz $eng18 &>> $fe
echo $var19 $tabz $eng19 &>> $fe
echo $var20 $tabz $eng20 &>> $fe
##### english: advance variables
##### spanish: avanzadas variables
echo $var30 $tabz $eng30 &>> $fe
echo $var31 $tabz $eng31 &>> $fe
echo $var32 $tabz $eng32 &>> $fe
echo $var33 $tabz $eng33 &>> $fe
echo $var34 $tabz $eng34 &>> $fe
echo $var35 $tabz $eng35 &>> $fe
echo $var36 $tabz $eng36 &>> $fe
echo $var37 $tabz $eng37 &>> $fe
echo $var38 $tabz $eng38 &>> $fe
echo $var39 $tabz $eng39 &>> $fe
echo $var40 $tabz $eng40 &>> $fe
echo $var41 $tabz $eng41 &>> $fe
echo $var42 $tabz $eng42 &>> $fe
echo $var43 $tabz $eng43 &>> $fe
echo $var44 $tabz $eng44 &>> $fe
echo $var45 $tabz $eng45 &>> $fe
echo $var46 $tabz $eng46 &>> $fe
echo $var47 $tabz $eng47 &>> $fe
echo $var48 $tabz $eng48 &>> $fe
echo $var49 $tabz $eng49 &>> $fe
echo $var50 $tabz $eng50 &>> $fe
echo $var51 $tabz $eng51 &>> $fe
echo $var52 $tabz $eng52 &>> $fe
echo $var53 $tabz $eng53 &>> $fe
echo $var54 $tabz $eng54 &>> $fe
echo $var55 $tabz $eng55 &>> $fe
echo $var56 $tabz $eng56 &>> $fe
echo $var57 $tabz $eng57 &>> $fe
echo $var58 $tabz $eng58 &>> $fe
echo $var59 $tabz $eng59 &>> $fe
echo $var60 $tabz $eng60 &>> $fe
echo $var61 $tabz $eng61 &>> $fe
echo $var62 $tabz $eng62 &>> $fe
echo $var63 $tabz $eng63 &>> $fe
echo $var64 $tabz $eng64 &>> $fe
echo $var65 $tabz $eng65 &>> $fe
echo $var66 $tabz $eng66 &>> $fe
echo $var67 $tabz $eng67 &>> $fe
echo $var68 $tabz $eng68 &>> $fe
echo $var69 $tabz $eng69 &>> $fe
echo $var70 $tabz $eng70 &>> $fe
echo $var71 $tabz $eng71 &>> $fe
echo $var72 $tabz $eng72 &>> $fe
echo $var73 $tabz $eng73 &>> $fe
echo $var74 $tabz $eng74 &>> $fe
echo $var75 $tabz $eng75 &>> $fe
echo $var76 $tabz $eng76 &>> $fe
echo $var77 $tabz $eng77 &>> $fe
echo $var78 $tabz $eng78 &>> $fe
echo $var79 $tabz $eng79 &>> $fe
echo $var80 $tabz $eng80 &>> $fe
echo $var81 $tabz $eng81 &>> $fe
####
####
#### wizard full-spanish
####
####
echo $var0  &> $fs
echo $var1  $tabz $spa1 &>> $fs
echo $var2  $tabz $spa2 &>> $fs
echo $var3  $tabz $spa3 &>> $fs
echo $var4  $tabz $spa4 &>> $fs
echo $var5  $tabz $spa5 &>> $fs
echo $var6  $tabz $spa6 &>> $fs
echo $var7  $tabz $spa7 &>> $fs
echo $var8  $tabz $spa8 &>> $fs
echo $var9  $tabz $spa9 &>> $fs
echo $var10 $tabz $spa10 &>> $fs
echo $var11 $tabz $spa11 &>> $fs
echo $var12 $tabz $spa12 &>> $fs
echo $var13 $tabz $spa13 &>> $fs
echo $var14 $tabz $spa14 &>> $fs
echo $var15 $tabz $spa15 &>> $fs
echo $var16 $tabz $spa16 &>> $fs
echo $var17 $tabz $spa17 &>> $fs
echo $var18 $tabz $spa18 &>> $fs
echo $var19 $tabz $spa19 &>> $fs
echo $var20 $tabz $spa20 &>> $fs
##### english: advance variables
##### spanish: avanzadas variables
echo $var30 $tabz $spa30 &>> $fs
echo $var31 $tabz $spa31 &>> $fs
echo $var32 $tabz $spa32 &>> $fs
echo $var33 $tabz $spa33 &>> $fs
echo $var34 $tabz $spa34 &>> $fs
echo $var35 $tabz $spa35 &>> $fs
echo $var36 $tabz $spa36 &>> $fs
echo $var37 $tabz $spa37 &>> $fs
echo $var38 $tabz $spa38 &>> $fs
echo $var39 $tabz $spa39 &>> $fs
echo $var40 $tabz $spa40 &>> $fs
echo $var41 $tabz $spa41 &>> $fs
echo $var42 $tabz $spa42 &>> $fs
echo $var43 $tabz $spa43 &>> $fs
echo $var44 $tabz $spa44 &>> $fs
echo $var45 $tabz $spa45 &>> $fs
echo $var46 $tabz $spa46 &>> $fs
echo $var47 $tabz $spa47 &>> $fs
echo $var48 $tabz $spa48 &>> $fs
echo $var49 $tabz $spa49 &>> $fs
echo $var50 $tabz $spa50 &>> $fs
echo $var51 $tabz $spa51 &>> $fs
echo $var52 $tabz $spa52 &>> $fs
echo $var53 $tabz $spa53 &>> $fs
echo $var54 $tabz $spa54 &>> $fs
echo $var55 $tabz $spa55 &>> $fs
echo $var56 $tabz $spa56 &>> $fs
echo $var57 $tabz $spa57 &>> $fs
echo $var58 $tabz $eng58 &>> $fs
echo $var59 $tabz $eng59 &>> $fs
echo $var60 $tabz $eng60 &>> $fs
echo $var61 $tabz $eng61 &>> $fs
echo $var62 $tabz $eng62 &>> $fs
echo $var63 $tabz $eng63 &>> $fs
echo $var64 $tabz $eng64 &>> $fs
echo $var65 $tabz $eng65 &>> $fs
echo $var66 $tabz $eng66 &>> $fs
echo $var67 $tabz $eng67 &>> $fs
echo $var68 $tabz $eng68 &>> $fs
echo $var69 $tabz $eng69 &>> $fs
echo $var70 $tabz $eng70 &>> $fs
echo $var71 $tabz $spa71 &>> $fs
echo $var72 $tabz $spa72 &>> $fs
echo $var73 $tabz $spa73 &>> $fs
echo $var74 $tabz $spa74 &>> $fs
echo $var75 $tabz $spa75 &>> $fs
echo $var76 $tabz $spa76 &>> $fs
echo $var77 $tabz $spa77 &>> $fs
echo $var78 $tabz $eng78 &>> $fs
echo $var79 $tabz $eng79 &>> $fs
echo $var80 $tabz $eng80 &>> $fs
echo $var81 $tabz $eng81 &>> $fs
exit ; fi
####
####
#### :rutina-final-regeneration-default:
##############################  english:  sane variables: for working sane         ############################## 
##############################  spanish:  sana variables: para funcionamiento sano ##############################
#### :rutina-inicial-sane:
####
####
case "$NULL" in
"$allow_header");;
*)allow_header="no";;
"$allow_legacy");; 
*)allow_legacy="no";;
"$allow_nft");; 
*)allow_nft="no";;
"$allow_ipv4");; 
*)allow_ipv4="no";;
"$allow_ipv6");; 
*)allow_ipv6="no";;
"$allow_forward_ip4");; 
*)allow_forward_ip4="no";;
"$allow_forward_ip6");; 
*)allow_forward_ip6="no";;
"$allow_gateway_ip4");; 
*)allow_gateway_ip4="no";;
"$allow_gateway_ip6");; 
*)allow_gateway_ip6="no";;
"$allow_only_output");; 
*)allow_only_output="no";;
"$allow_input_all");; 
*)allow_input_all="no";;
"$allow_output_all");; 
*)allow_output_all="no";;
"$allow_input_state");; 
*)allow_input_state="no";;
"$allow_output_state");; 
*)allow_output_state="no";;
"$allow_input_bandwidth");;
*)allow_input_bandwidth="no";;
"$allow_output_bandwidth");; 
*)allow_output_bandwidth="no";;
"$allow_input_maxconnect");; 
*)allow_input_maxconnect="no";;
"$allow_output_maxconnect");; 
*)allow_output_maxconnect="no";;
"$allow_input_ping");; 
*)allow_input_ping="no";;
"$allow_output_ping");; 
*)allow_output_ping="no";;
"$allow_net_vpn");; 
*)allow_net_vpn="no";;
"$allow_net_blacklist");; 
*)allow_net_blacklist="no";;
"$allow_output_uid");; 
*)allow_output_uid="no";;
"$allow_output_gid");; 
*)allow_output_gid="no";;
"$allow_other_protocols");; 
*)allow_other_protocols="no";;
"$allow_autosave");;
*)allow_autosave="no";;
"$choosed_iptables");;
*)choosed_iptables="no";;
esac
####
####
#### :rutina-final-sane:
##############################       english: if sane config dir                       #############################
##############################       spanish: comprobar sanos directorios              #############################
####
####
if [ -d "$directory_config" ]; then $nada ; else rm "$directory_config" &> /dev/null ; mkdir "$directory_config" &> /dev/null ; fi
if [ -d "$directory_fwrecover" ]; then $nada ; else rm "$directory_fwrecover" &> /dev/null ; mkdir "$directory_fwrecover" &> /dev/null ; fi
####
####
########################################       english: autosave: autosave of firewall to restore standard rules
########################################       english: autosave: autoguardado de firewall para recuperador de reglas estandar
#### :rutina-inicial-autosave:
####
####
#### english: iptables saved
#### spanish: iptables guardado
####
####
#### english: autosave with name autosave
#### spanish: autoguardado con nombre autosave
####
####
if [ "$first_option" = "autosave" ]; then
if [ "$allow_autosave" = "$NULL" ] ; then $nada ;
echo "$rallica [ autosave ] [ previus firewall saved ] [ autosave-fwiptables ]"
$fiptables save autosave-fwiptables &> /dev/null
fi; exit; fi
####
####
#### :rutina-final-autosave:
##############################      english: search favorite date: favorite date command        #####################
##############################      spanish: busca preferida fecha: favorita comando de fecha   #####################
####
####
favorite_date_command=""
if [ "$command_rdate" = "$NULL"   ]    ; then $nada ; else favorite_date_command="$command_rdate -4 -a -n"  ; fi
if [ "$command_sntp" = "$NULL"  ]    ; then $nada ; else favorite_date_command="$command_sntp"              ; fi
if [ "$command_ntpdate" = "$NULL" ]    ; then $nada ; else favorite_date_command="$command_ntpdate"         ; fi
####
####
##############################      english: search favorite music player            #####################
##############################      spanish: busca preferida reproductor de musica   #####################
####
####
favoite_music_command=""
if [ "$command_mpg321" = "$NULL" ]   ; then $nada ; else favorite_radio_command="$command_mpg321"   ; fi
if [ "$command_mpg123" = "$NULL" ]   ; then $nada ; else favorite_radio_command="$command_mpg123"   ; fi
####
####
##############################      english: ready system rules con its option               #####################
##############################      spanish: preprara reglas del sistema con sus opciones    #####################
####
####
####   #### english: The first        firewall of system  
####   #### spanish: El primero       cortafuego del sistema
####
####
if [ "$first_option" = "offline" ];       then $give_cover; echo "$cinco  FIREWALL OFFLINE" ; 
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "allpermisive" ];  then $give_cover; echo "$cinco  FIREWALL ALLPERMISIVE" ; 
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "clientweb" ];     then $give_cover; echo "$cinco  FIREWALL CLIENTWEB" ;
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "serverweb" ];     then $give_cover; echo "$cinco  FIREWALL SERVERWEB" ;
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "serversamba" ];         then $give_cover; echo "$cinco  FIREWALL SERVERSAMBA" ;
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "serverprint" ];         then $give_cover; echo "$cinco  FIREWALL SERVERPRINT" ;
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "serverssh" ];         then $give_cover; echo "$cinco  FIREWALL SERVERSSH" ;
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "gamesudp" ];      then $give_cover; echo "$cinco  FIREWALL GAMESUDP" ;
launch_iptables="" ;     config_variable_version="2"  ;  fi
if [ "$first_option" = "custom" ];        then $give_cover; echo "$cinco  FIREWALL CUSTOM" ;
launch_iptables="" ; launch_custom=""     ; config_variable_version="2"  ;  fi
####
####
##############################   english: custom without valid config cfg
##############################   spanish: custom sin valido configuracion cfg
#### :rutina-inicial-custom:
####
####
if [ "$first_option" = "custom" ]; then
if [ -f $directory_config/$second_option ]; then $nada
else  $fiptables cfg 
echo "$cinco Usage: $fiptables custom existent-file-cfg"
echo "$cinco See:   $fiptables launch-custom"; fi ; fi
####
####
#### :rutina-final-custom:
##############################       english: basic-options: wellcome with semi help
##############################       spanish: basic-options: bienvenida con semi ayuda
#### :rutina-inicial-basic-options:
####
####
if [ "$first_option" = "basic-options" ]; then $give_cover
echo "$ralla [ $first_option ] [ List basic options ]"
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "     | info |                      | Basic options |                         "
echo "$tab" "$tab"  "    control-guide      info-net info-system wizard-full wizard-mini          "
echo "$tab" "$tab"  "    control-rules      stop continue reset names actual show save load       "
echo "$tab" "$tab"  "    user-interface     cli-menu gui-menu gui-shell -text -log -gui           "
echo "$tab" "$tab"  "    list-rules         list listnum list6 listnum6                           "
echo "$tab" "$tab"  "                       list-allrules list-forward list-forward6              "
echo "$tab" "$tab"  "                       list-filter4 list-filter6 list-nat4 list-nat6         "
echo "$tab" "$tab"  "                       list-raw4 list-raw6 list-mangle4 list-mangle6         "
echo "$tab" "$tab"  "                       list-security4 list-security6                         "
echo "$tab" "$tab"  "                       list-ebtables list-arptables                          "
echo "$tab" "$tab"  "    show-help          long-help help ayuda notes options info ..            "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "     | info |                      | Group options |                         "
echo "$tab" "$tab"  "         control-guide   control-rules   user-interface   list-rules         " 
echo "$tab" "$tab"  "         launch-rules    launch-custom   tool-sockets     tool-forward       " 
echo "$tab" "$tab"  "         tool-tcp        tool-udp        tool-icmp        tool-nmap          "
echo "$tab" "$tab"  "         tool-sudo       tool-system     tool-install     tool-blacklist     "
echo "$tab" "$tab"  "         tool-dev        show-hardware   show-etc         show-log           "
echo "$tab" "$tab"  "         tool-about      show-help       show-example                        "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "    some-example       | whith default output or -text or -log or -gui |     "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "  Generate new iptables rules :           $fiptables wizard-mini             "
echo "$tab" "$tab"  "  Save iptables rules with one name :     $fiptables save name               "
echo "$tab" "$tab"  "  List names from all firewall saved :    $fiptables names                   "
echo "$tab" "$tab"  "  Show control-guide with output gui :    $fiptables -gui control-guide      "
echo "$tab" "$tab"  "  For more options :                      $fiptables options                 "
echo $footer_lineal
exit ; fi
####
####
#### :rutina-final-basic-options:
##############################       english: full-options: wellcome with semi help
##############################       spanish: full-options: bienvenida con semi ayuda
#### :rutina-inicial-full-options:
####
####
if [ "$first_option" = "full-options" ]; then $give_cover
echo "$ralla [ $first_option ] [ List full options ]"
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "     | info |                      | Principal options |                     "
echo "$tab" "$tab"  "    control-guide      info-net info-system wizard-full wizard-mini          "
echo "$tab" "$tab"  "    control-rules      stop continue reset names actual show save load       "
echo "$tab" "$tab"  "    user-interface     cli-menu gui-menu gui-shell -text -log -gui           "
echo "$tab" "$tab"  "    list-rules         list listnum list6 listnum6                           "
echo "$tab" "$tab"  "                       list-allrules list-forward list-forward6              "
echo "$tab" "$tab"  "                       list-filter4 list-filter6 list-nat4 list-nat6         "
echo "$tab" "$tab"  "                       list-raw4 list-raw6 list-mangle4 list-mangle6         "
echo "$tab" "$tab"  "                       list-security4 list-security6                         "
echo "$tab" "$tab"  "                       list-ebtables list-arptables                          "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "     | info |                      | Other options |                         "
echo "$tab" "$tab"  "    launch-rules       eraserules offline allpermisive gamesudp custom       "
echo "$tab" "$tab"  "                       clientweb serverweb serversamba serverprint serverssh "
echo "$tab" "$tab"  "    launch-custom      new-full-config nueva-completa-config                 "
echo "$tab" "$tab"  "                       new-mini-config nueva-mini-config                     "
echo "$tab" "$tab"  "                       list-config show-config modify-config del-config      "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "     | info |                      | tool options |                          " 
echo "$tab" "$tab"  "    tool-sockets       info-listen info-proxy route ss lsof arp-lan          "
echo "$tab" "$tab"  "                       tcpdump netstat netstat-nat                           "
echo "$tab" "$tab"  "    tool-forward       ipforward-list ipforward-on ipforward-off             "
echo "$tab" "$tab"  "    tool-tcp           tracetcp-ip4 tracetcp-ip6 speed-ip4 speed-ip6         "
echo "$tab" "$tab"  "    tool-udp           host dig resolveip geoip ntpdate                      "
echo "$tab" "$tab"  "    tool-icmp          ping-ip4 ping-ip6                                     "
echo "$tab" "$tab"  "    tool-nmap          scan-tcp scan-syn scan-fin scan-udp scan-ping         "
echo "$tab" "$tab"  "    tool-sudo          sudo-auth sudo-remove sudo-list alias-list            "
echo "$tab" "$tab"  "    tool-system        ram-free ram-speed disc-speed gl-speed radio          "
echo "$tab" "$tab"  "    tool-install       install upgrade howto-upgrade                         "
echo "$tab" "$tab"  "    tool-blacklist     blacklist-list blacklist-on blacklist-off             "
echo "$tab" "$tab"  "    tool-dev           new-versions dev-version dev-changes code             "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "     | info |                     | show options |                           " 
echo "$tab" "$tab"  "    show-hardware      lpinfo lsblk lsusb lscpu lspci lsgpu lshw             "
echo "$tab" "$tab"  "    show-etc           hosts protocols services hosts.allow hosts.deny       "
echo "$tab" "$tab"  "    show-log           log-search log-ssh log-fwiptables                     "
echo "$tab" "$tab"  "                       resolv.conf show-default modify-default               "
echo "$tab" "$tab"  "    show-about         about version depends examples                        "
echo "$tab" "$tab"  "                       config-eng config-spa license                         "
echo "$tab" "$tab"  "    show-help          long-help help ayuda notes options info               "
echo "$tab" "$tab"  "                       group-options basic-options full-options              "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "    some-example       | whith default output or -text or -log or -gui |     "
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "  Generate new iptables rules :             $fiptables wizard-mini           "
echo "$tab" "$tab"  "  Save iptables rules with one name :       $fiptables save name             "
echo "$tab" "$tab"  "  List names from all firewall saved :      $fiptables names                 "
echo "$tab" "$tab"  "  Show control-guide with output gui :      $fiptables -gui control-guide    "
echo "$tab" "$tab"  "  For less options :                        $fiptables basic-options         "
echo $footer_lineal
exit ; fi
####
####
#### :rutina-final-full-options:
##############################       english: long-help: long help        ##############################
##############################       spanish: larga-opcion: larga ayuda   ##############################
#### :rutina-inicial-long-help:
####
####
if [ "$first_option" = "long-help" ]; then $genfiles ; $give_cover
echo "$ralla [Long-help]"
echo "$ralla [Larga-ayuda]"
echo
echo
$fiptables intro 
echo
echo "$cinco [ full-options ] $cinco"
echo
$fiptables full-options
echo
echo "$cinco [ group-options ] $cinco"
echo
$fiptables group-options
echo
echo "$cinco [ Principal options ] $cinco"
echo
$fiptables control-guide
echo
$fiptables control-rules
echo
$fiptables list-rules
echo
$fiptables user-interface
echo
echo "$cinco [ Secondary options ] $cinco"
echo 
$fiptables launch-rules
echo
$fiptables launch-custom
echo
$fiptables tool-sockets
echo
$fiptables tool-forward
echo
$fiptables tool-udp
echo
$fiptables tool-tcp
echo
$fiptables tool-icmp
echo
$fiptables tool-nmap
echo
$fiptables tool-sudo
echo
$fiptables tool-system
echo
$fiptables tool-install
echo
$fiptables tool-blacklist
echo
$fiptables tool-dev
echo
$fiptables show-hardware
echo
$fiptables show-etc
echo
$fiptables show-log
echo
$fiptables show-about
echo
$fiptables show-help
echo
$fiptables notes
echo
echo "$cinco [Config cfg example]"
echo "$cinco [Configuracion cfg ejemplo]"
echo
cat $defaultcfg
echo
$fiptables version
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-long-help:
##############################       english: list-config: list some config
##############################       spanish: list-config: lista alguna config
#### :rutina-inicial-list-config:
####
####
if [ "$first_option" = "list-config" ]; then $give_cover
echo "$ralla [ $first_option ] [ List configs cfg ]"
echo "$rallica $tab [English:] [list configs files in cfg format]"
echo "$rallica $tab [Spanish:] [Lista de archivos de configuraciones en cfg formato]"
ls -1 $directory_config/
echo "$rallica [OK CFG FILES NAMES]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-list-config:
##############################       english: some-example: some example
##############################       spanish: some-example: algun ejemplo
#### :rutina-inicial-some-example:
####
####
if [ "$first_option" = "some-example" ]; then $give_cover
echo "$ralla [ $first_option ] [ List examples ]"
echo "$rallica [ list examples ]"
echo "$rallica [ Lista ejemplos ]"
echo "$tab" "$tab"  "$ralla $ralla $ralla"
echo "$tab" "$tab"  "$tab example           | -text for default output, or -log or -gui |       "
echo "$tab" "$tab"  "  Generate new iptables rules :#            $fiptables wizard-mini         "
echo "$tab" "$tab"  "  Save iptables rules in name :#            $fiptables save name           "
echo "$tab" "$tab"  "  Load iptables rules :#                    $fiptables load name           "
echo "$tab" "$tab"  "  Load iptables rules to output log :#      $fiptables -log load name      "
echo "$tab" "$tab"  "  Load iptables rules to output gui :#      $fiptables -gui load name      "
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-some-example:
##############################       english: group-options: some option
##############################       spanish: group-options: alguna opcion
#### :rutina-inicial-group-options:
####
####
if [ "$first_option" = "group-options" ]; then $give_cover
echo "$ralla [ $first_option ] [ List options ]"
echo "$rallica [ List option ]"
echo "$rallica [ Lista opcion ]"
echo
echo "[ info ] [ Help to one group. For Example: fwiptables control-guide ]"
echo "[ info ] [ Ayuda a un grupo.  Por ejemplo: fwiptables control-guide ]"
echo
echo "                  [ Principal options ]"
echo
echo " control-guide:  Guide to beginners"
echo "              :  Guia para empezar"
echo " control-rules:  Control the iptables firewall rules"
echo "              :  Controla las reglas de iptables"
echo "    list-rules:  List the iptables firewall rules"
echo "              :  Lista las reglas de iptables"
echo "user-interface:  Manage the interface with text or log or gui"
echo "              :  Manage el interfaz con text o log o gui"
echo
echo "                  [ Secondary options ]"
echo
echo "  launch-rules:  Launch the iptables firewall rules"
echo "              :  Lanza las reglas de iptables"
echo " launch-custom:  Create, modify and show configurations"
echo "              :  Crea, modifica y muestra configuraciones"
echo "  tool-sockets:  List net sockets ip in system"
echo "              :  Lista sockets de red ip en el sistema"
echo "  tool-forward:  list, active and desactive ipforward in linux"
echo "              :  lista, activa y desactiva ipforward en linux"
echo "      tool-tcp:  Several tools tcp"
echo "              :  Varias herramientas tcp"
echo "      tool-udp:  Several tools udp"
echo "              :  Varias herramientas udp"
echo "     tool-icmp:  Several tools icmp"
echo "              :  Varias herramientas icmp"
echo "     tool-nmap:  Port scan"
echo "              :  Escaneo de puertos"
echo "     tool-sudo:  Tool to auth sudo a users for $fiptables"
echo "              :  Herramienta de autorizacion a usuarios para $fiptables"
echo "  tool-install:  Tool to install and upgrade $fiptables"
echo "              :  Herramienta para instalar y actualizar $fiptables"
echo "tool-blacklist:  Tool for block dangerous sites"
echo "              :  Herramienta para bloquear peligrosos sitios"
echo "      tool-dev:  Tool to develop $fiptables"
echo "              :  Herramienta de desarrollo $fiptables"
echo "   tool-system:  Several tools for the system"
echo "              :  Varias herramientas para el sistema"
echo "      show-etc:  Show net files in /etc/"
echo "              :  Muestra archivos de red de /etc/"
echo "      show-log:  Show logs systems"
echo "              :  Muestra logs del sistema"
echo "    show-about:  About $fiptables"
echo "              :  Acerca de $fiptables"
echo "     show-help:  Help for $fiptables"
echo "              :  Ayuda de $fiptables"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-group-options:
##############################       english: launch-rules: options
##############################       spanish: launch-rules: opciones
#### :rutina-inicial-launch-rules:
####
####
if [ "$first_option" = "launch-rules" ]; then $give_cover
echo "$ralla [ $first_option ] [ launch rules ]"
echo "$rallica [ Launch iptables rules ]"
echo "$rallica [ Lanza reglas de iptables ]"
echo
echo "   eraserules: Remove the iptables rules in ipv4 and ipv6"
echo "             : Borra las reglas de iptables en ipv4 y ipv6"
echo "      offline: Launch a firewall disconected for all servers and clients except localhost"
echo "             : Lanza un Firewall desconectado para todo servidores y clientes excepto localhost"
echo " allpermisive: Launch a firewall very permisive"
echo "             : Lanza un firewall muy permisivo"
echo "    clientweb: Launch a firewall like client web and ssh"
echo "             : Lanza un firewall como cliente web y ssh"
echo "    serverweb: Launch a firewall like server web and ssh"
echo "             : Lanza un firewall como servidor web y ssh"
echo "  serversamba: Launch a firewall samba and ssh like client and server both"
echo "             : Lanza un firewall sambla y ssh como cliente y servidor ambos"
echo "     gamesudp: Launch a firewall like client games for udp non-root"
echo "             : Lanza un firewall como cliente juegos udp no-root"
echo "  serverprint: Launch a firewall like server ipp, printer and ssh"
echo "             : Lanza un firewall como servidor ipp, printer y ssh"
echo "    serverssh: Launch a firewall like server ssh"
echo "             : Lanza un firewall como servidor ssh"
echo "          cfg: Alias a custom"
echo "             : Apodo a custom"
echo "       custom: Launch one custom firewall with one file cfg"
echo "             : Lanza un modificado firewall con un archivo cfg"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-launch-rules:
##############################       english: control-rules: options
##############################       spanish: control-rules: opciones
#### :rutina-inicial-control-rules:
####
####
if [ "$first_option" = "control-rules" ]; then $give_cover
echo "$ralla [ $first_option ] [ control rules ]"
echo "$rallica [ Control iptables rules ]"
echo "$rallica [ Controla reglas de iptables ]"
echo
echo "          stop: Save and stop the rules"
echo "              : Guarda y para las reglas"
echo "      continue: continue with old rules"
echo "              : Continua con las viejas reglas"
echo "         reset: Reset the rules"
echo "              : Resetea las reglas"
echo "       list-fw: Alias to names"
echo "              : Apodo a names"
echo "         names: Show the files of firewall standard"
echo "              : Muestra los archivos de firewall estandard guardados"
echo "          show: Show the files in firewall standard"
echo "              : Muestra los archivos de firewall estandard"
echo "          save: Save the files in firewall standard"
echo "              : Guarda los archivos de firewall estandard"
echo "          load: Restore files from firewall standard"
echo "              : Recupera los archivos de firewall estandard"
echo "        actual: Show the actual iptables standard"
echo "              : Muestra el actual firewall estandard"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-control-rules:
##############################       english: list-rules: options
##############################       spanish: list-rules: opciones
#### :rutina-inicial-list-rules:
####
####
if [ "$first_option" = "list-rules" ]; then $give_cover
echo "$ralla [ $first_option ] [ List rules ]"
echo "$rallica [ List filter iptables rules ]"
echo "$rallica [ Lista reglas de iptables filtros ]"
echo
echo "               [The filter table with names]"
echo "               [Lista tabla filtros con nombres]"
echo
echo "              list: List iptables filter rules from ipv4 with hide no used"
echo "                  : Lista reglas de tabla filtros desde ipv4 esconde no usadas"
echo "             list6: List iptables filter rules from ipv6 with hide no used"
echo "                  : Lista reglas de tabla filtros desde ipv6 esconde no usadas"
echo "      list-forward: List iptables filter rules foward"
echo "                  : Lista tabla de iptables de reenvio ipv4"
echo "     list-forward6: List iptables filter rules forward ipv6"
echo "                  : Lista tabla de iptables de reenvio ipv6"
echo
echo "               [List filter table with numbers]"
echo "               [Lista tabla filtros con numeros]"
echo
echo "           listnum: List iptables filter rules from ipv4 in numbers"
echo "                  : Lista la tabla de reglas de filtros desde ipv4 in numeros"
echo "          listnum6: List iptables filter rules from ipv6 in numbers"
echo "                  : Lista la tabla de reglas de filtros desde ipv6 in numeros"
echo "   list-forwardnum: List iptables filter rules foward in numbers"
echo "                  : Lista la tabla de reglas de filtros de reenvio ipv4 in numeros"
echo "  list-forwardnum6: List iptables filter rules forward ipv6 in numbers"
echo "                  : Lista la tabla de reglas de filtros de reenvio ipv6 in numeros"
echo
echo "$cinco         [The others tables]"
echo "$cinco         [Las otras tablas]"
echo
echo "  list-ebtables: List rules mac ethernet"
echo "               : Lista reglas mac de ethernet"
echo " list-arptables: List rules arptables arp"
echo "               : Lista reglas de tabla de arpanet"
echo "   list-filter4: List iptables filter rules from ipv4"
echo "               : Lista iptables reglas de filtros desde ipv4"
echo "   list-filter6: List iptables filter rules from ipv6"
echo "               : Lista iptables reglas de filtros desde ipv6"
echo "      list-nat4: List iptables nat rules from ipv4"
echo "               : Lista iptables nat reglas de ipv4"
echo "      list-nat6: List iptables nat rules from ipv6"
echo "               : Lista iptables nat reglas de ipv6"
echo "   list-mangle4: List iptables mangle rules from ipv4"
echo "               : Lista reglas de manipulacion ipv4"
echo "   list-mangle6: List iptables mangle rules from ipv6"
echo "               : Lista reglas de manipulacion ipv6"
echo "      list-raw4: List iptables raw rules from ipv4"
echo "               : Lista reglas directas de ipv4"
echo "      list-raw6: List iptables raw rules from ipv6"
echo "               : Lista reglas directas de ipv6"
echo " list-security4: List iptables security rules from ipv4"
echo "               : lista reglas de seguridad de ipv4"
echo " list-security6: List iptables security rules from ipv6"
echo "               : lista reglas de seguridad de ipv6"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-list-rules:
##############################       english: list-numrules: options
##############################       spanish: list-numrules: opciones
#### :rutina-inicial-list-numrules:
####
####
if [ "$first_option" = "list-numrules" ]; then $give_cover
echo "$ralla [ $first_option ] [ List rules in numerical ]"
echo "$rallica [ List iptables numerical rules ]"
echo "$rallica [ Lista reglas numericas de iptables ]"
echo
echo "           listnum: List iptables filter rules input and output ipv4 in numbers"
echo "                  : Lista la tabla de reglas de filtros de entrada y salida ipv4 in numeros"
echo "  list- forwardnum: List iptables filter rules foward in numbers"
echo "                  : Lista la tabla de reglas de filtros de reenvio ipv4 in numeros"
echo "          listnum6: List iptables filter rules input and output ipv6 in numbers"
echo "                  : Lista la tabla de reglas de filtros de entrada y salida ipv6 in numeros"
echo "  list-forwardnum6: List iptables filter rules forward ipv6 in numbers"
echo "                  : Lista la tabla de reglas de filtros de reenvio ipv6 in numeros"
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-list-numrules:
##############################       english: launch-custom: options
##############################       spanish: launch-custom: opciones
#### :rutina-inicial-launch-custom:
####
####
if [ "$first_option" = "launch-custom" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool custom config ]"
echo "$rallica [ Tool configs ]"
echo "$rallica [ Herramienta de configuraciones ]"
echo
echo "       new-full-config: Create a new advance configfile.cfg in english"
echo "                      : Crea una nueva avanzada configfile.cfg en ingles"
echo " nueva-completa-config: Create a new advance configfile.cfg in spanish"
echo "                      : Crea una nueva avanzada configfile.cfg en español"
echo "       new-mini-config: Create a new basic configfile.cfg in english"
echo "                      : Crea una nueva basica configfile.cfg en ingles"
echo "     nueva-mini-config: Create a new basic configfile.cfg in spanish"
echo "                      : Crea una nueva basica configfile.cfg en español"
echo "           list-config: List config files cfg"
echo "                      : Lista las configuraciones de archivo cfg"
echo "         modify-config: Edit one configfile.cfg"
echo "                      : Edita una configuracion.cfg"
echo "           show-config: Show one configfile.cfg"
echo "                      : Muestra una configuracion.cfg"
echo "            del-config: Delete one configuration file"
echo "                      : Borra una configuracion.cfg"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-launch-custom:
##############################       english: control-guide: options
##############################       spanish: control-guide: opciones
#### :rutina-inicial-control-guide:
####
####
if [ "$first_option" = "control-guide" ]; then $give_cover
echo "$ralla [ $first_option ] [ control guide ]"
echo "$rallica [ Control guide ]" 
echo "$rallica [ Control guia ]"
echo
echo "  info-system: Show info system"
echo "             : Muestra informacion del sistema"
echo "     info-net: Show net info"
echo "             : Muestra informacion del sistema"
echo "  wizard-full: Asistant y launch complete firewall"
echo "             : Asiste y lanza un completo firewall"
echo "  wizard-mini: Asistant y Launch simple firewall"
echo "             : Asiste y lanza un simple firewall"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-control-guide:
##############################       english: user-interface: options
##############################       spanish: user-intarface: opciones
#### :rutina-inicial-user-interface:
####
####
if [ "$first_option" = "user-interface" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool interface ]"
echo "$rallica [ control interface ]" 
echo "$rallica [ control de interfaz ]"
echo
echo "     cli-menu: Text cli interface from menus"
echo "             : Interfaz de menus desde texto"
echo "     gui-menu: Gui interface from menu"
echo "             : Interfaz grafica desde menu"
echo "    gui-shell: Gui with comand line interface"
echo "             : Gui con interfaz desde linea de comandos"
echo "        -text: Text output interface, for default"
echo "             : Interfaz de texto, por defecto"
echo "         -log: Save the output to /var/log/fwiptables"
echo "             : Guarda la salida a /var/log/fwiptables"
echo "         -gui: Graphicall output interface"
echo "             : Interfaz grafico de salida"
echo "         text: alias a -text"
echo "             : apodo a -text"
echo "          log: alias a -log"
echo "             : apodo a -log"
echo "          gui: alias a -gui"
echo "             : apodo a -gui"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-user-interface:
##############################       english: tool-sockets: options sockets
##############################       spanish: tool-sockets: opciones sockets
#### :rutina-inicial-tool-sockets:
####
####
if [ "$first_option" = "tool-sockets" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool sockets ]"
echo "$rallica [ Tool sockets ]"
echo "$rallica [ Herramienta de sockets ]"
echo
echo "      info-sockets: List system listen sockets"
echo "                    Lista sockets a la escuha del sistema"
echo "        info-proxy: List system proxy"
echo "                    Lista proxy del sistema"
echo "             route: Show net devices and ip route tables"
echo "                  : Muestra los dispositivos de red y la tabla de rutas"
echo "                ss: Show net sockets with command ss"
echo "                  : Muestra las conexiones de red con ss"
echo "              lsof: Show net sockets with command lsof"
echo "                  : Muestra las conexiones con lsof"
echo "           netstat: Show net sockets with command netstat"
echo "                  : Muestra las conexiones con netstat"
echo "       netstat-nat: Show net sockets wiht command netstat-nat"
echo "                  : Muestra las conexiones con netstat-nat"
echo "           tcpdump: Listen the connections"
echo "                  : Escucha las conexiones"
echo "           arp-lan: List the conentions arp in the lan"
echo "                  : Lista las conexiones arp en la red local"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-sockets:
##############################       english: tool-forward: options ipforwading
##############################       spanish: tool-forward: opciones ipforwading
#### :rutina-inicial-tool-forward:
####
####
if [ "$first_option" = "tool-forward" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool forward ]"
echo "$rallica [ Tool forward ]"
echo "$rallica [ Herramienta de ipforwading ]"
echo
echo "    ipforward-list: Show kernel config about forward"
echo "                  : Muestra configuracion del kernel sobre reenvios"
echo "      ipforward-on: Active the kernel config about forward"
echo "                  : Activa la configuracion del kernel sobre reenvios"
echo "     ipforward-off: Deactive kernel config about forward"
echo "                  : Desactiva la configuracion del kernel sobre reenvios"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-forward:
##############################       english: tool-icmp: options
##############################       spanish: tool-cimp: opciones
#### :rutina-inicial-tool-icmp:
####
####
if [ "$first_option" = "tool-icmp" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool icmp ]"
echo "$rallica [ Tool icmp ]"
echo "$rallica [ Herramienta icmp ]"
echo
echo "     ping-ip4: Do a one ping with to one host with ipv4 icmp"
echo "             : Hace un ping con una direccion con ipv4 icmp"
echo "     ping-ip6: Do a one ping with to one host with ipv6 icmp"
echo "             : Hace un ping con una direccion con ipv6 icmp"
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-icmp:
##############################       english: tool-tcp: options
##############################       spanish: tool-tcp: opciones
#### :rutina-inicial-tool-tcp:
####
####
if [ "$first_option" = "tool-tcp" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool tcp ]"
echo "$rallica [ Tool tcp ]"
echo "$rallica [ Herramienta tcp ]"
echo
echo "  racetcp-ip4: Trace route a one host with ipv4 tcp"
echo "             : Traza la routa a una direccion con ipv4 tcp"
echo "  racetcp-ip6: Trace route a one host with ipv6 tcp"
echo "             : Traza la routa a una direccion con ipv6 tcp"
echo "    speed-ip4: test bandwith with ipv4"
echo "             : Testea la velocidad de conexion con ipv4"
echo "    speed-ip6: Test net bandwith with ipv6"
echo "             : Testea la velocidad de conexion con ipv6"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-tcp:
##############################       english: tool-udp: options
##############################       spanish: tool-udp: opciones
#### :rutina-inicial-tool-udp:
####
####
if [ "$first_option" = "tool-udp" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool tcp ]"
echo "$rallica [ Tool tcp ]"
echo "$rallica [ Herramienta tcp ]"
echo
echo "         host: Resolve one host"
echo "             : Resuelve una direccion a ip"
echo "          dig: Resolve one host"
echo "             : Resuelve una direccion a ip"
echo "    resolveip: Resolve one host and viceversa"
echo "             : Resuelve una direccion a ip y a host"
echo "        geoip: Locate a one host or ip"
echo "             : Localiza una direccion o ip"
echo "      ntpdate: Update the system date from ntp server"
echo "             : Actualiza la fecha del sistema desde un servidor de fecha"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-udp:
##############################       english: tool-nmap: options
##############################       spanish: tool-nmap: opciones
#### :rutina-inicial-tool-nmap:
####
####
if [ "$first_option" = "tool-nmap" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool nmap ]"
echo "$rallica [ Tool nmap ]"
echo "$rallica [ Herramienta nmap ]"
echo
echo "     scan-tcp: Scan a host/mask per tcp protocol"
echo "             : Escanea una host/mascara por tcp protocolo"
echo "     scan-syn: Scan a host/mask per syn socket"
echo "             : Escanea una host/mascara por syn socket"
echo "     scan-fin: Scan a host/mask per fin socket"
echo "             : Escanea una host/mascara por fin socket"
echo "     scan-udp: Scan a host/mask per udp protocol"
echo "             : Escanea una host/mascara por udp protocolo"
echo "    scan-ping: Scan a host/mask per ping udp"
echo "             : Escanea una host/mascara por ping protocolo"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-nmap:
##############################       english: tool-sudo: options
##############################       spanish: tool-sudo: opciones
#### :rutina-inicial-tool-sudo:
####
####
if [ "$first_option" = "tool-sudo" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool sudo $fiptables ]"
echo "$rallica [ Tool sudo ]"
echo "$rallica [ Herramienta sudo ]"
echo
echo "    sudo-auth: Allow sudo $fiptables to other choosed users"
echo "             : Permite sudo $fiptables a otros elegidos usuarios"
echo "  sudo-remove: Remove sudo $fiptables to other choosed users"
echo "             : Borra sudo $fiptables a otros elegidos usuarios"
echo "    sudo-list: List sudo $fiptables to other choosed users"
echo "             : Lista sudo $fiptables a otros elegidos usuarios"
echo "   alias-list: List the autocompletion alias for $fiptables"
echo "             : Lista los alias de autocompletar para $fiptables"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-sudo:
##############################       english: tool-install: options
##############################       spanish: tool-install: opciones
#### :rutina-inicial-tool-install:
####
####
if [ "$first_option" = "tool-install" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool install $fiptables ]"
echo "$rallica [ Tool install ]"
echo "$rallica [ Herramienta instalar ]"
echo
echo "       install: Install this version actual"
echo "              : Instala esta version actual"
echo " howto-upgrade: Show howto upgrade at the latest version"
echo "              : Muestra como actualizar a la ultima version"
echo "       upgrade: Upgrade at the latest version"
echo "              : Actualiza a la ultima version"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-install:
##############################       english: tool-blacklist: options
##############################       spanish: tool-blacklist: opciones
#### :rutina-inicial-tool-blacklist:
####
####
if [ "$first_option" = "tool-blacklist" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool blacklist in /etc/hosts ]"
echo "$rallica [ Tool blacklist ]"
echo "$rallica [ Herramienta de lista negra ]"
echo
echo " blacklist-list: Options list to block at dangerous sites from /etc/hosts"
echo "                 Lista de opciones para bloquear a peligrosos sitios desde /etc/hosts"
echo "   blacklist-on: Active a list to block dangerous sites in /etc/hosts"
echo "                 Activa una lista para bloquear sitios peligrosos in /etc/hosts"
echo "  blacklist-off: Return to default /etc/hosts"
echo "                 Vuelve al archivo por defecto /etc/hosts"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-blacklist:
##############################       english: tool-dev: options
##############################       spanish: tool-dev: opciones
#### :rutina-inicial-tool-dev:
####
####
if [ "$first_option" = "tool-dev" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool install $fiptables ]"
echo "$rallica [ Tool install ]"
echo "$rallica [ Herramienta instalar ]"
echo
echo "  new-versions: Show the list of the last versions"
echo "              : Muestra el listado de las ultivas versiones"
echo "   dev-version: Show the link at developer version"
echo "              : Muestra en enlace a la version de desarrollo"
echo "   dev-changes: Show the last changes"
echo "              : Muestra los ultimos cambios"
echo "          code: Show code source from one option"
echo "              : Muestra el codigo fuente de una opcion"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-dev:
##############################       english: tool-system: options
##############################       spanish: tool-system: opciones
#### :rutina-inicial-tool-system:
####
####
if [ "$first_option" = "tool-system" ]; then $give_cover
echo "$ralla [ $first_option ] [ tool system ]"
echo "$rallica [ Tool system ]"
echo "$rallica [ Herramienta systema ]"
echo
echo "      ram-free: Clean for innecesary memory"
echo "              : Libera la memoria innecesaria"
echo "     ram-speed: Show the speed of ram"
echo "              : Muestra la velocidad de la ram"
echo "    disc-speed: Show the speed of disc"
echo "              : Muestra la velocidad de el disco"
echo "      gl-speed: Show frammes for seconds with mesa graphicall"
echo "              : Muestra fotogramas por segundo con graficos mesa"
echo "         radio: connect to one server mp3, see $fiptables default"
echo "              : connecta a on servidor mp3, see $fiptables default"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-tool-system:
##############################       english: show-etc: options
##############################       spanish: show-ver: opciones
#### :rutina-inicial-show-etc:
####
####
if [ "$first_option" = "show-etc" ]; then $give_cover
echo "$ralla [ $first_option ] [ show etc files ]"
echo "$rallica [ Show configs files from etc ]"
echo "$rallica [ Mostrar configuraciones de archivos de etc ]"
echo
echo "           hosts: Show /etc/hosts, hosts local and statics host"
echo "                : Muestra /etc/hosts, hosts locales y hosts estaticos"
echo "      protocolos: Show /etc/protocols, protocols names"
echo "                : Muestra /etc/protocols, nombres de protocolos"
echo "        services: Show /etc/services, ports names"
echo "                : Muestra /etc/services, nombres de los puertos"
echo "     hosts.allow: Show /etc/hosts.allow, hosts allowed in some own server"
echo "                : Muestra /etc/hosts.allow, hosts permitidas en algunos propios servidores"
echo "      hosts.deny: Show /etc/hosts.deny, hosts drops in some own server"
echo "                : Muestra /etc/hosts.deny, hosts denegadas en algunos propios servidores"
echo "     resolv.conf: Show /etc/resolv.conf, it are the dns configured"
echo "                : Muestra /etc/resolv.conf, este es el dns configurado"
echo "    show-default: Show /etc/default/fwiptables, show variables for fwiptables"
echo "                : Muestra /etc/default/fwiptables, muestra variables para fwiptables"
echo "  modify-default: Modify /etc/default/fwiptables, modify variables for fwiptables"
echo "                : Modifica /etc/default/fwiptables, modifica variables para fwiptables"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-etc:
##############################       english: show-hardware: options
##############################       spanish: show-hardware: opciones
#### :rutina-inicial-show-hardware:
####
####
if [ "$first_option" = "show-hardware" ]; then $give_cover
echo "$ralla [ $first_option ] [ show hardware info ]"
echo "$rallica [ Show hardware info ]"
echo "$rallica [ Muestra informacion del hardware ]"
echo
echo "          lpinfo: Show the device printers"
echo "                : Muestra los dispositivos de impresora"
echo "           lsblk: Show the device disks"
echo "                : Muestra los dispositivos de disco"
echo "           lsusb: Show the devices usb"
echo "                : Muestra los dispositivos de usb"
echo "           lscpu: Show the devices cpu"
echo "                : Muestra los dispositivos cpu"
echo "           lsgpu: Show the devices gpu"
echo "                : Muestra los dispositivos gpu"
echo "           lspci: Show the devices pci"
echo "                : Muestra los dispositivos pci"
echo "            lshw: Show the hardware devices"
echo "                : Muestra los dispositivos de hardware"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-hardware:
##############################       english: show-log: options
##############################       spanish: show-log: opciones
#### :rutina-inicial-show-log:
####
####
if [ "$first_option" = "show-log" ]; then $give_cover
echo "$ralla [ $first_option ] [ show log files ]"
echo "$rallica [ Show log ]"
echo "$rallica [ Mostrar log ]"
echo
echo " log-fwiptables: Show /var/log/fwiptables history"
echo "               : Muestra /var/log/fwiptables historia"
echo "        log-ssh: Search logs for ssh in /var/log"
echo "               : Busca logs con sshd en /var/log"
echo "     log-search: Search logs whith a prefix in /var/log"
echo "               : Busca logs con patron en /var/log"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-log:
##############################       english: show-about: options
##############################       spanish: show-about: opciones
#### :rutina-inicial-show-about:
####
####
if [ "$first_option" = "show-about" ]; then $give_cover
echo "$ralla [ $first_option ] [ show about $fiptables ]"
echo "$rallica [ Show about ]"
echo "$rallica [ Mostrar acerca de ]"
echo
echo "          about: About"
echo "               : Acerca"
echo "        version: Info version"
echo "               : Informacion de version"
echo "        depends: Show depends"
echo "               : Muestra dependencias"
echo "       examples: Show examples"
echo "               : Muestra ejemplos"
echo "     config-eng: Config example with comments in english"
echo "               : Ejemplo de configuracion con comentarios en ingles"
echo "     config-spa: Config example with comments in spanish"
echo "               : Ejemplo de configuracion con comentarios en español"
echo "        license: Show license gpl v2"
echo "               : Muestra la licencia gpl v2"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-show-about:
##############################       english: show-help: options
##############################       spanish: show-help: opciones
#### :rutina-inicial-show-help:
####
####
if [ "$first_option" = "show-help" ]; then $give_cover
echo "$ralla [ $first_option ] [ show help ]"
echo "$rallica [ Show help ]"
echo "$rallica [ Mostrar ayuda ]"
echo
echo "        long-help: Show help in english and spanish"
echo "                 : Muestra la ayuda en ingles y en español"
echo "             help: Show help in english"
echo "                 : Muestra la ayuda en ingles"
echo "            ayuda: Show help in spanish"
echo "                 : Muestra la ayuda en español"
echo "    group-options: show the options groups"
echo "                   show los grupos de opciones"
echo "    basic-options: Show basic options"
echo "                 : Muestra lista de opciones"
echo "     full-options: Show full options"
echo "                 : Muestra lista de opciones"
echo "          options: Alias to full options"
echo "                 : Apodo a full-options"
echo "            notes: Several notes"
echo "                 : Varias notas"
exit; fi
####
####
#### :rutina-final-show-help:
##############################       english: notes: notes to configure iptables
##############################       spanish: notes: notas para configurar iptables
#### :rutina-inicial-notes:
####
####
if [ "$first_option" = "notes" ]; then $give_cover
echo "$ralla [ $first_option ] [ List notes about $fiptables ]"
echo
echo "$cinco [ legacy or nft ] [ whith one of them is sufficent ] [ becouse when one accept then go to the other one ]"
echo "$cinco [ legacy or nft ] [ con uno de ellos es suficiente ] [ porque cuando uno acepta despues va a la otro ]" 
echo
echo "$cinco [ allow_maxtries_ssh ] [ limit a attack per bruteforce to us ssh server] "
echo "$cinco [ allow_maxtries_ssh ] [ limita un ataque por fuerza bruta a nuestro servidor ssh ]"
echo
echo "$cinco [ net vpn ]  [ virtual private network ] [ whitelist ]"
echo "$cinco [ net vpnn ] [ red privada virtual ]     [ lista blanca ]"
echo
echo "$tab Host [net vpn] excepcionals hosts has conection allowed in firewall"
echo "$tab Host [net vpn] excepcionales hosts tienen la conexion permitida en el firewall"
echo
echo "$cinco [net blacklist] [deny host]"
echo "$cinco [net blacklist] [Lista negra]"
echo
echo "$tab Host [ net blacklist ] excepcionals hosts has conection dropped in firewall"
echo "$tab Host [ net blacklist ] expcecionales hosts tienen la conexion denegada en firewall"
echo
echo "$cinco [ allow output uid ] [user and group]"
echo "$cinco [ allow output uid ] [usuario y grupo]"
echo
echo "$tab User and/or group excepcional have output conection allowed in firewall"
echo "$tab Usuario y/o grupo excepcional tienen la salida permitida en firewall"
echo
echo "$cinco [ Notes ] [ Two iptables netfilter ]"
echo "$cinco [ Notas ] [ Dos iptables netfilter ]"
echo
echo "$tab iptables-legacy   is    support for xtables "
echo "$tab iptables-nft      is    support for nftables "
echo
echo "$cinco [ Notes ] [necesary ports to connect with ipv4 and ipv6 in UDP protocol]"
echo "$cinco [ Notas ] [puertos necesarios para conectar con ipv4 y ipv6 en UDP protocolo]"
echo
echo "    ntp : Port necesary to update the time and date"
echo "        : Puerto necesario para actualizar la hora y fecha"
echo " bootpc : Port necesary to dhcp and get ip"
echo "        : Puerto necesario para actualizar y conseguir la ip"
echo " domain : This port is necesary to domain resolver"
echo "        : Puerto necesario para resolver dominios"
echo "  https : This port is necesary for udp named web html5"
echo "        : Puerto necesario para udp llamado web html5"
echo
echo "$cinco [ Notes ] [necesary protocols for ip v6]"
echo "$cinco [ Notas ] [protocolos necesarios para ip v6]"
echo
echo "      ipv6-icmp : Necesary protocol in ipv6"
echo "                : Protocolo necesario en ipv6"
echo " ipv4 protocols : ipv6 works too with old ipv4 procotols"
echo "                : ipv6 funciona tambien con viejos ipv4 protocolos"
echo
echo "$cincuenta  [ License ]"
echo ""
echo "  Download the latest version $fprogram from sourceforge"
echo "  $fweb_latest"
echo "  $flicense"
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-notes:
##############################       english: depends: depends for $fiptables
##############################       spanish: dependencias: dependencias para $fiptables
#### :rutina-inicial-depends:
####
####
if [ "$first_option" = "depends" ]; then $give_cover
echo "$ralla [ $first_option ] [ List programs depends about $fiptables ]"
echo $ralla
echo "$rallica [ It are all the depends to full work in $fiptables $fversion ]"
echo $ralla
echo "$tab [Configuration directory]"
echo "list cfg:            $directory_config"
echo "names fw:            $directory_fwrecover"
echo $ralla
echo "$tab [Configuration file]"
echo "default variables:   /etc/default/fwiptables"
echo "shell completions:   /etc/completion.d/fwiptables.sh"
echo "                     /etc/profile.d/fwiptables.sh"
echo "auth users:          /etc/sudoers.d/fwiptables"
echo $ralla
echo "$tab [output log]"
echo "destination log:     /var/log/fwiptables"
echo $ralla
echo "$tab [$fiptables util]"
echo "sed:       $command_sed"
echo "fmt:       $command_fmt"
echo $ralla
echo "$tab [$fiptables cli]"
echo "dialog:    $command_dialog"
echo $ralla
echo "$tab [$fiptables gui]"
echo "zenity:      $command_zenity"
echo $ralla
echo "$tab [$fiptables auto text browser]"
echo "automatic: lynx or links or links2 "
echo "auto text browser: $favorite_text_browser"
echo $ralla
echo "$tab [$fiptables auto date command]"
echo "automatic: rdate or sntp or ntpdate"
echo "auto text browser: $favorite_date_command"
echo $ralla
echo "$tab [$fiptables auto music browser]"
echo "automatic: mpg321 or mpg123"
echo "auto text browser: $favorite_radio_command"
echo $ralla
echo "$tab [the iptables]"
echo "iptables legacy:   $command_iptables_legacy"
echo "iptables nft:      $command_iptables_nft"
echo "ip6tables legacy:  $command_ip6tables_legacy"
echo "ip6tables nft:     $command_ip6tables_nft"
echo "arptables:         $command_arptables"
echo "ebtables:          $command_ebtables"
echo $ralla
echo "$tab [$fiptables tool]"
echo "date:       $command_date"
echo "uname:      $command_uname"
echo "ip:         $command_ip"
echo "curl:       $command_curl"
echo "route:      $command_route"
echo "ss:         $command_ss"
echo "netstat:    $command_netstat"
echo "netstat-nat:$command_netstat_nat"
echo "lsof:       $command_lsof"
echo "sysctl:     $command_sysctl"
echo "tcpdump:    $command_tcpdump"
echo "arp:        $command_arp"
echo "arp-scan:   $command_arp_scan"
echo "ping:       $command_ping"
echo "ntpdate:    $command_ntpdate"
echo "rdate:      $command_rdate"
echo "sntp:       $command_sntp"
echo "traceroute: $command_traceroute"
echo "host:       $command_host"
echo "dig:        $command_dig"
echo "resolveip:  $command_resolveip"
echo "geoip:      $command_geoiplookup"
echo "nmap:       $command_nmap"
echo "wget:       $command_wget"
echo "iperf:      $command_iperf"
echo "dd:         $command_dd"
echo "tee:        $command_tee"
echo "glxgears:   $command_glxgears"
echo $ralla
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-depends:
############################## english: -gui: Manage gui con three options  ##############################
############################## spanish: -gui: Maneja gui con tres opciones  ##############################
####
####
#### english: with third option
#### spanish: con tercera opcion
####
####
if [ "$first_option" = "-gui" ] && [ "$third_option" != "$NULL" ] ; then $genfiles ;
echo "Graphics: Wait several seconds.. with max $server_waiting seconds" ;
case "$command_zenity" in "$NULL") echo " Install zenity to work" ; exit ;; esac
case $second_option in
#### 
#### 
"new-mini-config")
cp "$defaultminicfg_eng" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"new-full-config")
cp "$defaultfullcfg_eng" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-mini-config")
cp "$defaultminicfg_spa" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"nueva-completa-config")
cp "$defaultfullcfg_spa" "/tmp/fiptables-$third_option"
if [ -f "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="file $third_option exists" ; exit 
else zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option" ; fi
if [ -s "$directory_config/$third_option" ]; then $nada ;
zenity --forms $graphic_dimension --text="OK new file: $third_option" ; exit
else rm "$directory_config/$third_option" ; 
zenity --forms $graphic_dimension --text="Canceled new file: $third_option" ; exit; fi
;;
#### 
#### 
"modify-config")
if [ -f "$directory_config/$third_option" ] ; then $nada
else zenity --forms $graphic_dimension --text="file do not exist: $third_option" ; exit ; fi 
cp "$directory_config/$third_option" "/tmp/fiptables-$third_option"
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$third_option" \
--editable --title="MODIFY FILE" &> "$directory_config/$third_option"
if [ -s "$directory_config/$third_option" ]; then $nada ; 
zenity --forms $graphic_dimension --text="OK. file: $third_option"
else cp "/tmp/fiptables-$third_option" "$directory_config/$third_option"
zenity --forms $graphic_dimension --text="Canceled. file: $third_option"; fi
;;
#### 
#### 
*)
#### fecha_temporal=$(date | sed s/\ //g) ;
$fiptables $second_option $third_option &> $file_temporal_gui
cat $file_temporal_gui | grep -v Warning: &> $file_temporal_guifinal
zenity --text-info $graphic_dimension --title "[$fiptables gui] [$second_option]" \
--filename=$file_temporal_guifinal --auto-scroll
#### rm $file_temporal_guifinal
;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
############################## english: -gui: with second option ##############################
############################## spanish: -gui: con segunda opcion ##############################
####
####
if [ "$first_option" = "-gui" ] && [ "$second_option" != "$NULL" ] ; then $genfiles
echo "Graphics: Wait several seconds.. with max $server_waiting seconds" ;
case "$command_zenity" in "$NULL") echo " Install zenity to work" ; exit ;; esac
case $second_option in
#### 
#### 
wizard-mini)
archivo=wizard-mini
cp "$defaultminicfg_eng" "/tmp/fiptables-$archivo"
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$archivo" \
--editable --title="MODIFY FILE" &> "$directory_config/$second_option"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$fiptables -gui custom $second_option ; $fiptables -gui list ;
else rm "$directory_config/$second_option" ;
zenity --info $graphic_dimension --text "Ok. $archivo canceled"; fi
;;
#### 
#### 
wizard-full)
archivo=wizard-full
cp "$defaultfullcfg_eng" "/tmp/fiptables-$archivo"
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-$archivo" \
--editable --title="MODIFY FILE" &> "$directory_config/$second_option"
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$fiptables -gui custom $second_option ; $fiptables -gui list ;
else rm "$directory_config/$second_option" ;
zenity --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
####
modify-default)
cp /etc/default/fwiptables /tmp/fiptables-modify-default
zenity --text-info $graphic_dimension --filename="/tmp/fiptables-modify-default" \
--editable --title="MODIFY FILE" &> /etc/default/fwiptables
if [  -s "/etc/default/fwiptables" ]; then $nada ; 
$fiptables -gui show-default ;
else cp /tmp/fiptables-modify-default /etc/default/fwiptables;
zenity --info $graphic_dimension --text "OK. $archivo canceled"; fi
;;
#### 
#### 
*)
#### fecha_temporal=$(date | sed s/\ //g)
$fiptables $second_option &> $file_temporal_gui
cat $file_temporal_gui | grep -v Warning: &> $file_temporal_guifinal
zenity --text-info $graphic_dimension --title "[$fiptables gui] [$second_option]" \
--filename=$file_temporal_guifinal --auto-scroll
#### rm /tmp/fwiptables-$fecha_temporal
;;
#### 
#### 
esac
#### 
#### 
exit; fi
####
####
############################## english: -gui: wihtout more options ##############################
############################## spanish: -gui: sin mas opcion       ##############################
####
####
if [ "$first_option" = "-gui" ] && [ "$second_option" = "$NULL" ] ; then echo "Graphics: Wait several seconds.." ;
case "$command_zenity" in "$NULL") echo " Install zenity to work" ; exit ;; esac
zenity --forms $graphic_dimension --title="Type of Interface" --text="$($fiptables user-interface)"
exit; fi
####
####
############################## english: gui-menu: gui menu general: gui con menu  ##############################
############################## spanish: gui-menu: gui menu general: gui con menu  ##############################
#### :rutina-inicial-gui-menu:
####
####
if [ "$first_option" = "gui-menu" ] ; then $genfiles 
echo "Graphics: Wait several seconds.. with max $server_waiting seconds" ;
case "$command_zenity" in "$NULL") echo " Install zenity to work"; exit ;; esac
selection=$(zenity $graphic_dimension  \
 --list "01 Control guide" "02 Control rules" "03 List rules" "04 Launch rules" "05 Launch custom" \
"06 Tool sockets" "07 Tool forward" "08 Tool tcp" "09 Tool udp" "10 Tool icmp"  "11 Tool sudo" \
"12 Tool system" "13 Tool install" "14 Tool blacklist" "15 Tool dev" "16 Show hardware" \
"17 Show etc" "18 Show log" "19 Show about" "20 Show help" \
--column="Option list $fiptables" --text="Select one option" --title="[Gui Menu]  [$fiptables]")
#### 
#### 
case "$selection" in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"01 Control guide")$fiptables gui-menu-control-guide;;
"02 Control rules")$fiptables gui-menu-control-rules;;
"03 List rules")$fiptables gui-menu-list-rules;;
"04 Launch rules")$fiptables gui-menu-launch-rules;;
"05 Launch custom")$fiptables gui-menu-launch-custom;;
"06 Tool sockets")$fiptables gui-menu-tool-sockets;;
"07 Tool forward")$fiptables gui-menu-tool-forward ;;
"08 Tool tcp")$fiptables gui-menu-tool-tcp;;
"09 Tool udp")$fiptables gui-menu-tool-udp;;
"10 Tool icmp")$fiptables gui-menu-tool-icmp;;
"11 Tool sudo")$fiptables gui-menu-tool-sudo;;
"12 Tool system")$fiptables gui-menu-tool-system;;
"13 Tool install")$fiptables gui-menu-tool-install;;
"14 Tool blacklist")$fiptables gui-menu-tool-blacklist;;
"15 Tool dev")$fiptables gui-menu-tool-dev;;
"16 Show hardware")$fiptables gui-menu-show-hardware;;
"17 Show etc")$fiptables gui-menu-show-etc;;
"18 Show log")$fiptables gui-menu-show-log;;
"19 Show about")$fiptables gui-menu-show-about;;
"20 Show help")$fiptables gui-menu-show-help;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu:
############################## english: gui-menu-control-guide: gui with menu ##############################
############################## spanish: gui-menu-control-guide: gui con menu  ##############################
#### :rutina-inicial-gui-menu-control-guide:
####
####
if [ "$first_option" = "gui-menu-control-guide" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "info-net" "info-system" "wizard-full" "wizard-mini" \
--column="Option list $fiptables" --text="Select one option" --title="[Control Guide] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui control-guide ;;
"info-net") $fiptables -gui info-net ;;
"info-system")$fiptables -gui info-system ;;
"wizard-full")$fiptables -gui wizard-full ;;
"wizard-mini")$fiptables -gui wizard-mini ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-control-guide:
############################## english: gui-menu-launch-rules: gui with menu ##############################
############################## spanish: gui-menu-launch-rules: gui con menu  ##############################
#### :rutina-inicial-gui-menu-launch-rules:
####
####  
if [ "$first_option" = "gui-menu-launch-rules" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "eraserules" "offline" "allpermisive" \
"clientweb" "serverweb" "gamesudp" "serversamba" "custom cfg" \
--column="Option list $fiptables" --text="Select one option" \
--title="[Launch Rules] [$fiptables]")
#### 
#### 
case "$selection" in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui launch-rules ;;
"eraserules") $fiptables -gui eraserules ; $fiptables gui list ;;
"offline") $fiptables -gui offline ; $fiptables gui list ;;
"allpermisive") $fiptables -gui allpermisive ; $fiptables gui list ;;
"clientweb") $fiptables -gui clientweb ; $fiptables gui list ;;
"serverweb") $fiptables -gui serverweb ; $fiptables gui list ;;
"gamesudp") $fiptables -gui gamesudp ; $fiptables gui list ;;
"serversamba") $fiptables -gui serversamba ; $fiptables gui list ;;
"custom cfg")archivo="$(zenity --entry $graphic_dimension --title "[Launch Custom]" --text="$(ls -1 $directory_config)")" ; 
$fiptables -gui custom $archivo ; $fiptables gui list ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-launch-rules:
############################## english: gui-menu-control-rules: gui with menu ##############################
############################## spanish: gui-menu-control-rules: gui con menu  ##############################
#### :rutina-inicial-gui-menu-control-rules:
####
####
if [ "$first_option" = "gui-menu-control-rules" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "stop" "continue" "reset" "names" "show" "save" "load" "actual" \
--column="Option list $fiptables" --text="Select one option" --title="[Control Rules] [$fiptables]")
#### 
#### 
case "$selection" in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui control-rules ;;
"stop") $fiptables -gui stop ; $fiptables -gui list ;;
"continue") $fiptables -gui continue ; $fiptables -gui list ;;
"reset") $fiptables -gui reset ; $fiptables -gui list ;;
"names") $fiptables -gui list-fw ;;
"show")archivo="$(zenity --entry $graphic_dimension --title "[Save Firewall]" --text="$($fiptables list-fw)")" ; 
$fiptables -gui show $archivo ;;
"save")archivo="$(zenity --entry $graphic_dimension --title "[Save Firewall]" --text="$($fiptables list-fw)")" ; 
$fiptables -gui save $archivo ;;
"load")archivo="$(zenity --entry $graphic_dimension --title "[Load Firewall]" --text="$($fiptables list-fw)")" ;
$fiptables -gui load $archivo ; $fiptables -gui list ;;
"actual") $fiptables -gui actual ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-control-rules:
############################## english: gui-menu-list-rules: gui with menu ##############################
############################## spanish: gui-menu-list-rules: gui con menu  ##############################
#### :rutina-inicial-gui-menu-list-rules:
####
####
if [ "$first_option" = "gui-menu-list-rules" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "list" "list6" "list-filter4" "list-filter6" "list-allrules" \
"listnum" "listnum6" "list-nat4" "list-nat6" "list-mangle4" "list-mangle6" "list-raw4" "list-raw6" \
"list-security4" "list-security6" "list-ebtables" "list-arptables" \
--column="Option list $fiptables" --text="Select one option" --title="[List Rules] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui list-rules ;;
"list") $fiptables -gui list ;;
"list6") $fiptables -gui list6 ;;
"list-allrules") $fiptables -gui list-allrules ;;
"list-filter4") $fiptables -gui list-filter4 ;;
"list-filter6") $fiptables -gui list-filter6 ;;
"list-forward") $fiptables -gui forward ;;
"list-forward6") $fiptables -gui forward6 ;;
"listnum") $fiptables -gui listnum ;;
"listnum6") $fiptables -gui listnum6 ;;
"list-nat4") $fiptables -gui list-nat4 ;;
"list-nat6") $fiptables -gui list-nat6 ;;
"list-mangle4") $fiptables -gui list-mangle4 ;;
"list-mangle6") $fiptables -gui list-mangle6 ;;
"list-raw4") $fiptables -gui list-raw4 ;;
"list-raw6") $fiptables -gui list-raw6 ;;
"list-security4") $fiptables -gui list-security4 ;;
"list-security6") $fiptables -gui list-security6 ;;
"list-ebtables") $fiptables -gui list-ebtables ;;
"list-arptables") $fiptables -gui list-arptables ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-list-rules:
############################## english: gui-menu-launch-custom: gui with menu ##############################
############################## spanish: gui-menu-launch-custom: gui con menu  ##############################
#### :rutina-inicial-gui-menu-launch-custom:
####
####
if [ "$first_option" = "gui-menu-launch-custom" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "new-full-config" "nueva-completa-config" "new-mini-config" "nueva-mini-config" \
"list-config" "show-config" "modify-config" "del-config" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Config] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui launch-custom;;
"new-full-config")
archivo="$(zenity $graphic_dimension --entry --title "[new-full-config]" --text="Input file name to new full configuration")" ;
$fiptables -gui new-full-config $archivo ;;
"nueva-completa-config")
archivo="$(zenity $graphic_dimension --entry --title "[nueva-completa-config]" --text="Introduce el nombre del nuevo archivo cfg")" ;
$fiptables -gui nueva-completa-config $archivo ;;
"new-mini-config")
archivo="$(zenity $graphic_dimension --entry --title "[new-mini-config]" --text="Input file name to new mini configuration")" ;
$fiptables -gui new-mini-config $archivo ;;
"nueva-mini-config")
archivo="$(zenity $graphic_dimension --entry --title "[nueva-mini-config]" --text="Introduce el nombre del nuevo archivo cfg")" ;
$fiptables -gui nueva-mini-config $archivo ;;
"list-config")
$fiptables -gui list-config ;;
"show-config")
archivo="$(zenity $graphic_dimension --entry --title "[show-config]" --text="$($fiptables cfg)")" ;
$fiptables -gui show-config $archivo ;;
"modify-config")
archivo="$(zenity $graphic_dimension --entry --title "[modify-config]" --text="$($fiptables cfg)")" ;
$fiptables -gui modify-config $archivo ;;
"del-config")
archivo="$(zenity $graphic_dimension --entry --title "[del-config]" --text="$($fiptables cfg)")" ;
$fiptables -gui del-config $archivo;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-launch-custom:
############################## english: gui-menu-tool-sockets: gui with menu ##############################
############################## spanish: gui-menu-tool-sockets: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-sockets:
####
####
if [ "$first_option" = "gui-menu-tool-sockets" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "route" "ss" "lsof" \
"netstat" "netstat-nat" "tcpdump" "info-proxy" "info-listen" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Sockets] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu") $fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-sockets ;;
"route") $fiptables -gui route ;;
"ss") $fiptables -gui ss ;;
"lsof") $fiptables -gui lsof ;;
"netstat") $fiptables -gui netstat ;;
"netstat-nat") $fiptables -gui netstat-nat ;;
"tcpdump") $fiptables -gui tcpdump ;;
"info-proxy") $fiptables -gui info-proxy ;;
"info-listen") $fiptables -gui info-listen ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-sockets:
############################## english: gui-menu-tool-forward: gui with menu ##############################
############################## spanish: gui-menu-tool-forward: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-forward:
####
####
if [ "$first_option" = "gui-menu-tool-forward" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "ipforward-list" "ipforward-on" "ipforward-off" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Sockets] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu") $fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-forward;;
"ipforward-list") $fiptables -gui ipforward-list;;
"ipforward-on") $fiptables -gui ipforward-on;;
"ipforward-off") $fiptables -gui ipforward-off;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-forward:
############################## english: gui-menu-tool-icmp: gui with menu ##############################
############################## spanish: gui-menu-tool-icmp: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-icmp:
####
####
if [ "$first_option" = "gui-menu-tool-icmp" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "ping-ip4" "ping-ip6" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Icmp] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-icmp ;;
"ping-ip4")  $fiptables -gui ping-ip4  ;;
"ping-ip6")  $fiptables -gui ping-ip6  ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-icmp:
############################## english: gui-menu-tool-udp: gui with menu ##############################
############################## spanish: gui-menu-tool-udp: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-udp:
####
####
if [ "$first_option" = "gui-menu-tool-udp" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "host" "dig" "resolveip" "geoip" "ntpdate" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool tcp] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-udp ;;
"host")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$fiptables -gui host $archivo ;;
"dig")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$fiptables -gui dig $archivo ;;
"resolveip")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv6 or host to resolve with ipv6 ]")" ; 
$fiptables -gui resolveip $archivo ;;
"geoip")archivo="$(zenity $graphic_dimension --entry --text="[ type the ipv4 or host to resolve with ipv4 ]")" ;
$fiptables -gui geoip $archivo ;;
"ntpdate")$fiptables -gui ntpdate ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-udp:
############################## english: gui-menu-tool-tcp: gui with menu ##############################
############################## spanish: gui-menu-tool-tcp: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-tcp:
####
####
if [ "$first_option" = "gui-menu-tool-tcp" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "tracetcp-ip4" "tracetcp-ip6" "speed-ip4" "speed-ip6" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool tcp] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-tcp ;;
"tracetcp-ip4") $fiptables -gui tracetcp-ip4   ;;
"tracetcp-ip6") $fiptables -gui tracetcp-ip6   ;;
"speed-ip4") $fiptables -gui speed-ip4 ;;
"speed-ip6") $fiptables -gui speed-ip6 ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-tcp:
############################## english: gui-menu-tool-sudo: gui with menu ##############################
############################## spanish: gui-menu-tool-sudo: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-sudo:
####
####
if [ "$first_option" = "gui-menu-tool-sudo" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "sudo-auth" "sudo-remove" "sudo-list" "alias-list" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Sudo] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-sudo ;;
"sudo-auth")archivo="$(zenity $graphic_dimension --entry --text="[ type username to allow sudo: username1,username2 ]")" ;
$fiptables -gui sudo-auth $archivo ;;
"sudo-remove")$fiptables -gui sudo-remove ;;
"sudo-list")$fiptables -gui sudo-list ;;
"alias-list")$fiptables -gui alias-list ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-sudo:
############################## english: gui-menu-tool-system: gui with menu ##############################
############################## spanish: gui-menu-tool-system: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-system:
####
####
if [ "$first_option" = "gui-menu-tool-system" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "ram-free" "ram-speed" "disc-speed" "gl-speed" "radio" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool System] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-system ;;
"ram-free")   $fiptables -gui ram-free ;;
"ram-speed")  $fiptables -gui ram-speed ;;
"disc-speed") $fiptables -gui disc-speed ;;
"gl-speed")   $fiptables -gui gl-speed ;;
"radio")      $fiptables -gui radio ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-system:
############################## english: gui-menu-tool-install: gui with menu ##############################
############################## spanish: gui-menu-tool-install: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-install:
####
####
if [ "$first_option" = "gui-menu-tool-install" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "install" "howto-upgrade" "upgrade" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Install] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui tool-install ;;
"install")$fiptables -gui install ;;
"howto-upgrade")$fiptables -gui howto-upgrade ;;
"upgrade")$fiptables -gui upgrade ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-install:
############################## english: gui-menu-tool-blacklist: gui with menu ##############################
############################## spanish: gui-menu-tool-blacklist: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-blacklist:
####
####
if [ "$first_option" = "gui-menu-tool-blacklist" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "blacklist-list" "blacklist-list info" \
"blacklist-on" "blacklist-off" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Install] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu;;
"Gui Info Menu") $fiptables -gui tool-blacklist;;
"blacklist-list")$fiptables -gui blacklist-list;;
"blacklist-list info")$fiptables -gui blacklist-list info ;;
"blacklist-on")
 archivo="$(zenity $graphic_dimension --entry --text="[ type one: fademind, mvps, adaway, stevenblack ]")" ;
 $fiptables -gui blacklist-on $archivo;;
"blacklist-off") $fiptables -gui blacklist-off;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-blacklist:
############################## english: gui-menu-tool-dev: gui with menu ##############################
############################## spanish: gui-menu-tool-dev: gui con menu  ##############################
#### :rutina-inicial-gui-menu-tool-dev:
####
####
if [ "$first_option" = "gui-menu-tool-dev" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "new-versions" "dev-version" "dev-changes" \
--column="Option list $fiptables" --text="Select one option" --title="[Tool Install] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu  ;;
"Gui Info Menu") $fiptables -gui tool-dev ;;
"new-versions")$fiptables -gui new-versions ;;
"dev-version") $fiptables -gui dev-version  ;;
"dev-changes") $fiptables -gui dev-changes  ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-tool-dev:
############################## english: gui-menu-show-hardware: gui with menu ##############################
############################## spanish: gui-menu-show-hardware: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-hardware:
####
####
if [ "$first_option" = "gui-menu-show-hardware" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "lpinfo" "lsblk" "lsusb" "lscpu" "lspci" "lsgpu" "lshw" \
--column="Option list $fiptables" --text="Select one option" --title="[Show etc] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui show-hardware;;
"lpinfo")$fiptables -gui lpinfo;;
"lsblk")$fiptables -gui lsblk;;
"lpusb")$fiptables -gui lsusb;;
"lscpu")$fiptables -gui lscpu;;
"lspci")$fiptables -gui lspci;;
"lsgpu")$fiptables -gui lsgpu;;
"lshw")$fiptables -gui lshw;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-hardware:
############################## english: gui-menu-show-etc: gui with menu ##############################
############################## spanish: gui-menu-show-etc: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-etc:
####
####
if [ "$first_option" = "gui-menu-show-etc" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "hosts" "protocols" "services" "hosts.allow" "hosts.deny" "default" \
 "show-default" "modify-default" \
--column="Option list $fiptables" --text="Select one option" --title="[Show etc] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui show-etc ;;
"hosts") $fiptables -gui hosts ;;
"protocols") $fiptables -gui protocols ;;
"services") $fiptables -gui services ;;
"hosts.allow") $fiptables -gui hosts.allow ;;
"hosts.deny") $fiptables -gui hosts.deny ;;
"show-default") $fiptables -gui show-default ;;
"modify-default") $fiptables -gui modify-default ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-etc:
############################## english: gui-menu-show-log: gui with menu ##############################
############################## spanish: gui-menu-show-log: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-log:
####
####
if [ "$first_option" = "gui-menu-show-log" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "log-ssh" "log-fwiptables" "log-search" \
--column="Option list $fiptables" --text="Select one option" --title="[Show log] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui show-log ;;
"log-ssh")   $fiptables -gui log-ssh ;;
"log-fwiptables") $fiptables -gui log-fwiptables ;;
"log-search")
pattern="$(zenity $graphic_dimension --entry --text="[ type a one PATTERN to search in log files ]")" ;
$fiptables -gui log-search $pattern;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-log:
############################## english: gui-menu-show-about: gui with menu ##############################
############################## spanish: gui-menu-show-about: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-about:
####
####
if [ "$first_option" = "gui-menu-show-about" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "about" "version" \
"depends" "examples" "config-eng" "config-spa" \
--column="Option list $fiptables" --text="Select one option" --title="[Show about] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui show-about ;;
"about")$fiptables -gui about ;;
"version")$fiptables -gui version ;;
"depends")$fiptables -gui depends ;;
"examples")$fiptables -gui examples ;;
"config-eng")$fiptables -gui config-eng ;;
"config-spa")$fiptables -gui config-spa ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-about:
############################## english: gui-menu-show-help: gui with menu ##############################
############################## spanish: gui-menu-show-help: gui con menu  ##############################
#### :rutina-inicial-gui-menu-show-help:
####
####
if [ "$first_option" = "gui-menu-show-help" ] ; then $nada ;
selection=$(zenity $graphic_dimension \
--list "Gui Principal Menu" "Gui Info Menu" "full-options" "long-help" "help" "ayuda" "notes" "license" \
--column="Option list $fiptables" --text="Select one option" --title="[Show help] [$fiptables]" )
#### 
#### 
case $selection in
1)zenity --info $graphic_dimension --text="$fiptables good bye"; exit ;;
"Gui Principal Menu")$fiptables gui-menu ;;
"Gui Info Menu") $fiptables -gui show-help ;;
"full-options")$fiptables -gui full-options ;;
"long-help") $fiptables -gui long-help ;;
"help") $fiptables -gui help ;;
"ayuda") $fiptables -gui ayuda ;;
"notes") $fiptables -gui notes ;;
"license") $fiptables -gui license ;;
esac
####
####
zenity --question --text="  Continue ?" --ok-label="Yes" --cancel-label="No"
if [ "$?" -eq 0 ]; then $fiptables gui-menu ; exit ; fi
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" --auto-close --auto-kill
exit; fi
####
####
#### :rutina-final-gui-menu-show-help:
############################## english: gui-shell: graphic enviroment          ##############################
############################## spanish: gui-shell: entorno de comandos grafico ##############################
#### :rutina-inicial-gui-shell:
####
####
if [ "$first_option" = "gui-shell" ] ; then $genfiles
echo "Graphics: Wait several seconds.."  ;
case "$command_zenity" in "$NULL") echo " Install zenity to work" ; exit ;; esac
####
####
####  english: principal gui  #### spanish: principal gui
####
####
titulo="$fiptables gui-shell"
untexto="$fiptables gui-shell"
####
####
#### cd $directory_config
####
####
menugtk=$(zenity --forms $graphic_dimension --title="[gui shell]  [$fiptables]" \
--text="$($fiptables basic-options)" --add-entry="$fiptables " )
case $? in
1)
####
####
#### zenity --info $graphic_dimension --text="$fiptables good bye";
####
####
zenity --progress $graphic_dimension --timeout=$close_graphicall --text="$mensage_timeout" \
--auto-close --auto-kill ; exit;;
esac
####
####
#### english: manage some configs    ####
#### spanish: maneja algunas configs ####
####
####
case $menugtk in
####
####
#### english: new-full-config and nueva-completa-config whithout parameters ####
#### spanish: new-full-config and nueva-completa-config sin parametros      ####
####
####
"new-full-config")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables new-full-config config.cfg"
;;
"new-mini-config")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables new-mini-config config.cfg"
;;
"nueva-completa-config")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables nueva-completa-config config.cfg"
;;
"new-mini-config")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables nueva-mini-config config.cfg"
;;
"modify-config")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables modify-config config.cfg"
;;
####
####
#### english: new-full-config and nueva-completa-config whithout parameters and with one space  ####
#### spanish: new-full-config and nueva-completa-config sin parametros y con un espacio         ####
####
####
"new-full-config ")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables new-full-config config.cfg"
;;
"new-mini-config ")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables new-mini-config config.cfg"
;;
"nueva-completa-config ")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables nueva-completa-config config.cfg"
;;
"new-mini-config ")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables nueva-mini-config config.cfg"
;;
"modify-config ")
zenity --forms $graphic_dimension --text="$cinco Use: $fiptables modify-config config.cfg"
;;
####
####
#### english: several options con parametros
#### spanish: varias opciones con parametros
####
####
new-full-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fiptables -gui new-full-config $unarchivo
;;
nueva-completa-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fiptables -gui nueva-completa-config $unarchivo
;;
new-mini-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fiptables -gui new-mini-config $unarchivo
;;
nueva-mini-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fiptables -gui nueva-mini-config $unarchivo
;;
modify-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fiptables -gui modify-config $unarchivo
;;
show-config*)
unarchivo=$(echo $menugtk | sed 's/\///g' | cut -d " " -f 2)
$fiptables -gui show-config $unarchivo
;;
wizard-full*) $fiptables gui wizard-full ;;
wizard-mini*) $fiptables gui wizard-mini ;;
####
####
#### english: all other otpions    ####
#### spanish: las demas opciones   ####
####
####
"$NULL")
zenity --info $graphic_dimension --text="$fiptables good bye";
zenity --progress $graphic_dimension --timeout=1 --text="Closing gui menu" --auto-close --auto-kill ; exit ;;
*) fecha_temporal=$(date | sed s/\ //g) ; $fiptables $menugtk &> /tmp/fwiptables-$fecha_temporal
zenity --text-info $graphic_dimension --title "[$fiptables gui-shell] [$menugtk]" --filename=/tmp/fwiptables-$fecha_temporal --auto-scroll
rm /tmp/fwiptables-$fecha_temporal
;;
esac
$fiptables gui-shell
exit ; fi
####
####
#### :rutina-final-gui-shell:
##############################       english: cli-menu: Manage list rules with one text menu
##############################       spanish: cli-menu: Maneja lista de reglas con un menu de texto
####
####
if [ "$first_option" = "cli-menu" ]; then $nada
case "$command_dialog" in "$NULL") echo " Install dialog to work" ; exit ;; esac
#### cd "$directory_config"
menuprincipal="$(dialog --stdout --title "[$fprogram] [version $fversion]" --menu "Select:" 0 0 0\
  0000 "$cinco $tab [$fiptables cli-menu] $tab $cinco" \
  0100 "$cinco [ Tool guide to begin ] $cinco" \
  11  "info-system" \
  12  "info-net" \
  13  "wizard-mini" \
  14  "wizard-full" \
  0020 "$cinco [ Control rules with firewall standard ] $cinco" \
  21  "stop" \
  22  "continue" \
  23  "reset" \
  24  "list-fw"  \
  25  "show" \
  26  "save" \
  27  "load" \
  28  "actual" \
  0030 "$cinco [ List rules alphabetical ] $cinco" \
  31  "list" \
  32  "list6"  \
  33  "list-filter4" \
  34  "list-filter6" \
  35  "list-forward" \
  36  "list-forward6" \
  37  "list-nat4" \
  38  "list-nat6" \
  39  "list-allrules" \
  0040 "$cinco [ List rules numerical ] $cinco" \
  41  "listnum" \
  42  "list-forwardnum" \
  43  "listnum6" \
  44  "list-forwardnum6" \
  0050 "$cinco [ List other tables ] $cinco"  \
  51  "list-raw4" \
  52  "list-raw6" \
  53  "list-mangle4" \
  54  "list-mangle6" \
  55  "list-security4" \
  56  "list-security6" \
  57  "list-ebtables" \
  58  "list-arptables" \
  0060 "$cinco [ Launch rules iptables ] $cinco" \
  61  "eraserules" \
  62  "offline" \
  63  "allpermisive" \
  64  "clientweb" \
  65  "serverweb" \
  66  "gamesudp" \
  67  "serversamba" \
  68  "custom cfg" \
  0070 "$cinco [ Tool custom configurations cfg ] $cinco" \
  71  "new-full-config" \
  72  "nueva-completa-config" \
  73  "new-mini-config" \
  74  "nueva-mini-config" \
  75  "show-config" \
  76  "modify-config" \
  77  "del-config" \
  78  "list-config" \
  0080 "$cinco [ Tool net sockets ] $cinco" \
  81  "route" \
  82  "ss" \
  83  "netstat" \
  84  "lsof" \
  85  "tcpdump" \
  86  "arp" \
  87  "info-listen" \
  88  "info-proxy" \
  0090 "$cinco [ Tool for ipfwarding ] $cinco" \
  91  "ipforward-list" \
  92  "ipforward-on" \
  93  "ipforward-off" \
  0100 "$cinco [ Tool tcp ] $cinco " \
  101   "speed-ip4" \
  102   "speed-ip6" \
  103   "tracetcp-ip4" \
  104   "tracetcp-ip6" \
  0110 "$cinco [ Tool icmp ] $cinco" \
  111   "ping-ip4" \
  112   "ping-ip6" \
  0120 "$cinco [ Tool udp ] $cinco"  \
  121  "host" \
  122  "dig" \
  123  "resolveip" \
  124  "geoip" \
  125  "ntpdate" \
  0130 "$cinco [ Tool sudo operations ] $cinco"  \
  131  "sudo-auth" \
  132  "sudo-remove" \
  133  "sudo-list" \
  0140 "$cinco [ Tool install ] $cinco" \
  141  "install" \
  142  "howto-upgrade" \
  143  "upgrade" \
  0150 "$cinco [ Tool blacklist ] $cinco" \
  151  "blacklist-list" \
  152  "blacklist-list info" \
  153  "blacklist-on" \
  154  "blacklist-off" \
  0160 "$cinco [ Tool dev ] $cinco" \
  161  "new-versions" \
  162  "dev-version" \
  163  "dev-changes" \
  0170 "$cinco [ Tool system program ] $cinco" \
  171  "ram-free" \
  172  "ram-speed" \
  173  "disc-speed" \
  174  "gl-speed" \
  175  "radio" \
  0180 "$cinco [ Show hardware system ] $cinco" \
  181  "lpinfo" \
  182  "lsblk" \
  183  "lsusb" \
  184  "lscpu" \
  185  "lspci" \
  186  "lsgpu" \
  187  "lshw" \
  0190 "$cinco [ Show etc configurations ] $cinco" \
  191  "hosts" \
  192  "protocols" \
  193  "services" \
  194  "hosts.allow" \
  195  "hosts.deny" \
  196  "show-default" \
  197  "modify-default" \
  0200 "$cinco [ Show log registry ] $cinco" \
  201  "log-ssh" \
  202  "log-search" \
  203  "log-fwiptables" \
  0210 "$cinco [ Show about ] $cinco" \
  211  "about" \
  212  "depends" \
  213  "examples" \
  214  "config-eng" \
  215  "config-spa" \
  0220 "$cinco [ Show help global options ] $cinco" \
  221  "basic-options" \
  222  "full-options" \
  223  "help" \
  224  "ayuda" \
  225  "long-help" \
  226  "notes" \
  227  "license" \
 )"  
#### 
#### 
#### english: dialog choosed #### spanish: dialogo elegido
#### 
#### 
 case "$menuprincipal" in
 0000) clear ; $fiptables info ;;
 0010) clear ; $fiptables control-guide ;;
 0020) clear ; $fiptables control-rules ;;
 0030) clear ; $fiptables list-rules ;;
 0040) clear ; $fiptables list-rules ;;
 0050) clear ; $fiptables list-rules ;;
 0060) clear ; $fiptables launch-rules ;;
 0070) clear ; $fiptables launch-custom ;;
 0080) clear ; $fiptables tool-socket ;;
 0090) clear ; $fiptables tool-ipforward ;;
 0100) clear ; $fiptables tool-tcp ;;
 0110) clear ; $fiptables tool-icmp ;;
 0120) clear ; $fiptables tool-udp ;;
 0130) clear ; $fiptables tool-sudo ;;
 0140) clear ; $fiptables tool-install ;;
 0150) clear ; $fiptables tool-blacklist ;;
 0160) clear ; $fiptables tool-dev ;;
 0170) clear ; $fiptables tool-system ;;
 0180) clear ; $fiptables show-hardware ;;
 0190) clear ; $fiptables show-etc ;;
 0200) clear ; $fiptables show-log ;;
 0210) clear ; $fiptables show-about ;;
 0220) clear ; $fiptables show-help ;; 
 11) clear ; $fiptables "info-system" | less ;;
 12) clear ; $fiptables "info-net" | less ;;
 13) clear ; $fiptables "wizard-mini" ;;
 14) clear ; $fiptables "wizard-full" ;;
 21) clear ; $fiptables stop ;;
 22) clear ; $fiptables continue ;;
 23) clear ; $fiptables reset ;;
 24) clear ; $fiptables list-fw ;;
 25) clear ; $fiptables "list-fw" ; echo "$cincuenta"
 read -p "Type the firewall name to read   " nombrecillo
 nombrecillo=$(echo $nombrecillo | sed s/\\///g) ; $fiptables show $nombrecillo ;; 
 26)archivo="$(dialog --stdout --title "save the firewall format standar" --inputbox "New name" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ;  echo "$cincuenta saved $archivo" ; $fiptables save $archivo ;;
 27) clear ; $fiptables "list-fw" ; echo "$cincuenta"
 read -p "Type the firewall name to restore   " nombrecillo
 nombrecillo=$(echo $nombrecillo | sed s/\\///g) ; $fiptables load $nombrecillo ;;
 28) clear ; $fiptables "actual" ;;
 31) clear ; $fiptables "list" | less ;;
 32) clear ; $fiptables "list6" | less ;;
 33) clear ; $fiptables "list-filter4" | less ;;
 34) clear ; $fiptables "list-filter6" | less ;;
 35) clear ; $fiptables "list-forward" | less ;;
 36) clear ; $fiptables "list-forward6" | less ;;
 37) clear ; $fiptables "list-nat4" | less ;;
 38) clear ; $fiptables "list-nat6" | less ;;
 39) clear ; $fiptables "list-allrules" | less ;;
 41) clear ; $fiptables "listnum" | less ;;
 42) clear ; $fiptables "list-forwardnum" | less ;;
 43) clear ; $fiptables "listnum6" | less ;;
 44) clear ; $fiptables "list-forwardnum6" | less ;;
 51) clear ; $fiptables "list-raw4" | less ;;
 52) clear ; $fiptables "list-raw6" | less ;;
 53) clear ; $fiptables "list-mangle4" | less ;; 
 54) clear ; $fiptables "list-mangle6" | less ;;
 55) clear ; $fiptables "list-security4" | less ;;
 56) clear ; $fiptables "list-security6" | less ;;
 57) clear ; $fiptables "list-ebtables" | less ;;
 58) clear ; $fiptables "list-arptables" | less ;;
 61) clear ; $fiptables "eraserules" ; $fiptables list  ;;
 62) clear ; $fiptables "offline" ; $fiptables list ;;
 63) clear ; $fiptables "allpermisive" ; $fiptables list  ;;
 64) clear ; $fiptables "clientweb" ; $fiptables list  ;;
 65) clear ; $fiptables "serverweb" ; $fiptables list  ;;
 66) clear ; $fiptables "gamesudp" ; $fiptables list  ;; 
 67) clear ; $fiptables "serversamba" ; $fiptables list ;;
 68) archivo="$(dialog --title "custom" --stdout --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables custom $archivo ;;
 71) archivo="$(dialog --stdout --title "new-full-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables new-full-config $archivo ;;
 72) archivo="$(dialog --stdout --title "nueva-completa-config example: archivo.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables nueva-completa-config $archivo ;;
 73) archivo="$(dialog --stdout --title "new-mini-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables new-mini-config $archivo ;;
 74) archivo="$(dialog --stdout --title "nueva-mini-config example: archivo.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables nueva-mini-config $archivo ;;
 75) archivo="$(dialog --stdout --title "show-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables show-config $archivo ; echo "$cinco Launch: $fiptables custom $archivo";;
 76) archivo="$(dialog --stdout --title "modify-config example: file.cfg" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables modify-config $archivo ;;
 77) archivo="$(dialog --stdout --title "del-config" --inputbox "$(ls $directory_config)" 0 0)"
 archivo=$(echo $archivo | sed s/\\///g)
 clear ; $fiptables del-config $archivo ; echo "deleted $archivo" ;;
 78) clear ; $fiptables list-config ;;
 81) clear ; $fiptables "route" | less ;;
 82) clear ; $fiptables "ss"  | less ;;
 83) clear ; $fiptables "netstat" | less ;;
 84) clear ; $fiptables "lsof" | less ;;
 85) clear ; $fiptables "tcpdump" | less ;;
 86) clear ; $fiptables arp -a | less ;;
 87) clear ; $fiptables info-listen ;;
 88) clear ; $fiptables info-proxy ;;
 91) clear ; $fiptables "ipforward-list" | less ;;
 92) clear ; $fiptables "ipforward-on" | less ;;
 93) clear ; $fiptables "ipforward-off" | less ;;
 101) clear ; $fiptables speed-ip4 ;;
 102) clear ; $fiptables speed-ip6 ;;
 103) clear ; $fiptables tracetcp-ip4 ;;
 104) clear ; $fiptables tracetcp-ip6 ;;
 111) clear ; $fiptables ping-ip4 ;;
 112) clear ; $fiptables ping-ip6 ;;
 121) resolve="$(dialog --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fiptables host $resolve ;;
 122) resolve="$(dialog --stdout --title "type host to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fiptables dig $resolve ;;
 123) resolve="$(dialog --stdout --title "type host  or ip to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fiptables resolveip $resolve ;;
 124) resolve="$(dialog --stdout --title "type host or ip to resolve" --inputbox "example: fast.com" 0 0)"
 clear ; $fiptables geoip $resolve ;;
 125) clear ; $fiptables "ntpdate" ;;
 131) resolve="$(dialog --stdout --title "type username to auth sudo" --inputbox "example: user1,user2,user3" 0 0)"
 clear ; $fiptables sudo-auth $resolve ;;
 132) clear ; $fiptables "sudo-remove" ;;
 133) clear ; $fiptables "sudo-list" ;;
 141) clear ; $zero_option "install";;
 142) clear ; $fiptables "howto-upgrade" | less ;;
 143) clear ; $fiptables "upgrade" ;;
 151) clear ; $fiptables blacklist-list ;;
 152) clear ; $fiptables blacklist-list info ;;
 153) clear ; resolve="$(dialog --stdout --title "type the blacklist" --inputbox "type only one: fademind mvps adaway stevenblack" 0 0)" 
 clear ; $fiptables blacklist-on $resolve ;;
 154) clear ; $fiptables blacklist-off ;;
 161) clear ; $fiptables "new-versions" | less ;;
 162) clear ; $fiptables "dev-version" | less ;;
 163) clear ; $fiptables "dev-changes" | less ;; 
 171) clear ; $fiptables "ram-free" ;;
 172) clear ; $fiptables "ram-speed" ;;
 173) clear ; $fiptables "disc-speed" ;;
 174) clear ; $fiptables "gl-speed" ;;
 175) clear ; $fiptables "radio" ;;
 181) clear ; $fiptables "lpinfo" ;; 
 182) clear ; $fiptables "lsblk" ;;
 183) clear ; $fiptables "lsusb" ;; 
 184) clear ; $fiptables "lscpu" ;;
 185) clear ; $fiptables "lspci" ;;  
 186) clear ; $fiptables "lsgpu" ;;
 187) clear ; $fiptables "lshw" | less ;;
 191) clear ; $fiptables "hosts" | less ;;
 192) clear ; $fiptables "protocols" | less ;;
 193) clear ; $fiptables "services" | less ;;
 194) clear ; $fiptables "hosts.allow" | less ;;
 195) clear ; $fiptables "hosts.deny" | less ;;
 196) clear ; $fiptables "show-default"   ;;
 197) clear ; $fiptables "modify-default" ;;
 201) clear ; $fiptables "log-ssh" | less ;;
 202) pattern="$(dialog --stdout --title "type the pattern to search" --inputbox "example: sshd" 0 0)"
 clear ; $fiptables "log-search" "$pattern" | less ;;
 203) clear ; $fiptables "log-fwiptables" | less ;;
 211) clear ; $fiptables "about" | less ;;
 212) clear ; $fiptables "depends" | less ;;
 213) clear ; $fiptables "examples" | less ;;
 214) clear ; $fiptables "config-eng" | less ;;
 215) clear ; $fiptables "config-spa" | less ;;
 221) clear ; $fiptables "basic-options" ;;
 222) clear ; $fiptables "full-options" | less ;;
 223) clear ; $fiptables "help" | less ;;
 224) clear ; $fiptables "ayuda" | less ;;
 225) clear ; $fiptables "long-help" | less ;;
 226) clear ; $fiptables "notes" | less ;;
 227) clear ; $fiptables "license" | less ;;
 *) clear ; dialog --msgbox "fwiptables good bye" 0 0 ; clear ; exit ;;
 esac 
 echo "press [enter] to continue with the $fiptables cli-menu"
 read -s
 clear ; 
 $fiptables cli-menu
 exit; fi
####
####
##############################       english: version: system script, the version option
##############################       spanish: version: script de sistema, la opcion mostrar version
#### :rutina-inicial-version:
####
####
 if [ "$first_option" = "version" ]; then $give_cover
 echo "$ralla [ $first_option ] [ Show version about $fiptables ]"
 echo $header_lineal
 echo
 echo "$tab [Name program]"
 echo "$fprogram"
 echo
 echo "$tab [Description program]"
 echo "$fdescription"
 echo
 echo "$tab [Exec program]"
 echo "$directory_fiptables/$fiptables"
 echo
 echo "$tab [File format]"
 file $directory_fiptables/$fiptables | cut -d "," -f 1-2
 echo
 echo "$tab [Config cfg directory]"
 echo "$directory_config"
 echo "$tab [Firewall standard directory]"
 echo "$directory_fwrecover"
 echo "$tab [Config files]"
 echo "variables:    /etc/default/fwiptables"
 echo "completion:   /etc/profile.d/fwiptables.sh"
 echo "completion:   /etc/bash_completion.d/fwiptables.sh"
 echo "auth users:   /etc/sudoers/fwiptables"
 echo "$tab [Output log]"
 echo "output log:   /var/log/fwiptables"
 echo
 echo "$tab [Version program]"
 echo "$fversion"
 echo $footer_lineal
 exit ; fi
####
####
#### :rutina-final-version:
##############################       english: examples: system script to show config files examples
##############################       spanish: examples: script de sistema para mostrar ejemplos de configuraciones
#### :rutina-inicial-examples:
####
####
 if [ "$first_option" = "examples" ]; then $give_cover
 echo "$ralla [ $first_option ] [ Show examples for $fiptables ]"
 echo $header_lineal
 echo $rallica "[ examples ] [ examples for some services in client mode ]"
 echo
####
####
#### config: web example ####
####
####
 echo
 echo "# config web example #" 
 echo "config_client_tcp=http,https ;"
 echo "config_client_udp=domain,ntp,bootpc,http ;"
####
####
#### config:  games example  ####
####
####
 echo
 echo "# config games example #"
 echo "config_client_udp=domain,bootpc,ntp,https,1025:65499; "
 echo "config_client_tcp=http,https"
####
####
#### config: wesnoth game example ####
####
####
 echo
 echo "# config web example #" 
 echo "config_client_tcp=http,https,14995:15000 ;"
 echo "config_client_udp=domain,ntp,bootpc,http ;"
####
####
#### config:  torrent-example1 ####
####
####
 echo
 echo "# config torrent example #"
 echo "config_client_udp=domain,bootpc,ntp,https,1025:65499; "
 echo "config_client_tcp=http,https"
####
####
#### config: samba-example1 ####
####
####
 echo
 echo "# config samba example #"
 echo "config_client_udp=domain,bootpc,ntp,https,137:139 ; "
 echo "config_client_tcp=http,https,ipp,microsoft-ds"
 echo "allow_output_ping= ; allow_input_ping= ; "
####
####
#### config: server gateway masquerade ##
####
####
 echo
 echo "# config vpn example #"
 echo "allow_gateway_ip4= ; "
####
####
#### config: vpn-sample1 ##
####
####
 echo
 echo "# config vpn example #"
 echo "allow_forward_ip4= ; "
 echo "allow_net_vpn= ; "
 echo "config_net_vpn=wesnoth.org,sourceforge.net"
####
####
#### config: email-example1 ####
####
####
 echo
 echo "# config email example #"
 echo "config_client_tcp=http,https,rsync,ssh,pop3,pop3s,poppassd,smtp,imap2,imaps"
####
####
#### config: ssh-example1 ####
####
####
 echo
 echo "# config ssh example #"
 echo "config_client_tcp=http,https,printer,ipp,ssh,rsync,git"
####
####
#### config: vnc-example1 ####
####
####
 echo
 echo "# config vnc example #"
 echo "config_client_tcp=http,https,ssh,5900:5910"
####
####
#### config: ftp-example1 ####
####
####
 echo
 echo "# config ftp example #"
 echo "config_client_tcp=http,https,ftp,ftp-data,ftps,ftps-data,gsiftp,zope-ftp"
 echo "config_client_udp=domain,bootpc,ntp,https,tftp"
####
####
#### config: printer-example1 ####
####
####
 echo
 echo "# config printer example #"
 echo "config_client_tcp=http,https,ipp,printer"
####
####
#### config: irc-example1 ####
####
####
 echo
 echo "# config irc example #"
 echo "config_client_tcp=http,https,ircd,ircs-u"
####
####
#### config: sql-example1 ####
####
####
 echo
 echo "# config sql example #"
 echo "config_client_tcp=http,https,mysql,postgresql,mysql-proxy,ms-sql-s"
####
####
 echo $footer_lineal
 exit ; fi
####
####
#### :rutina-final-examples:
##############################       english: code: source from loop
##############################       spanish: code: fuente de la rutina
#### :rutina-inicial-code:
####
####
if [ "$first_option" = "code" ]; then $give_cover
echo $header_lineal
echo $rallica "[ code ] [ show source code for options from $fiptables ]"
echo $ralla
code_error="$rallica Usage: $fiptables code option"
if [ "$second_option" = "$NULL" ]; then echo; echo "$code_error" ; exit ; fi
value_first="$(cat -n $directory_fiptables/$fiptables | grep  :rutina-inicial-$2: | cut -d "#" -f 1 | head -1)"
value_second="$(cat -n $directory_fiptables/$fiptables | grep :rutina-final-$2:  | cut -d "#" -f 1 | head -1)"
value_count="$(("$value_second"-"$value_first+1"))"
if [ ! -n "$value_first" ];   then echo; echo "$code_error" ; exit ; fi
if [ ! -n "$value_second" ];  then echo; echo "$code_error" ; exit ; fi
if [ ! -n "$value_count" ];   then echo; echo "$code_error" ; exit ; fi
echo "$rallica [ code ] [ option: "$second_option" ] [ show $value_count lines ] \
[ from the "$value_first" line number to "$value_second" line number ]"
echo "$ralla"
cat $directory_fiptables/$fiptables | head -n $value_second | tail -n $value_count
exit; fi
####
####
#### :rutina-final-code:
##############################       english: license: license gpl v2
##############################       spanish: license: license gpl v2
#### :rutina-inicial-license:
####
####
 if [ "$first_option" = "license" ]; then $give_cover
 echo "$ralla [ $first_option ] [ Show license from git sourceforge for $fiptables ]"
 echo $header_lineal
 echo $rallica "license text for gpl v2 downloading .."
 echo "$ralla" "$ralla" "$ralla"
 $favorite_text_browser -source "$license_gpl" | more
 echo $footer_lineal
 exit;  fi
####
####
#### :rutina-final-license:
##############################       english: howto-upgrade: upgrade in the file /usr/bin/fwiptables
##############################       spanish: howto-upgrade: actualiza en el archivo /usr/bin/fwiptables
#### :rutina-inicial-howto-upgrade:
####
####
 if [ "$first_option" = "howto-upgrade" ]; then $give_cover
 echo "$ralla [ $first_option ] [ Show howto upgrade $fiptables ]"
 echo $header_lineal
 echo "$cinco The actually version is: $fiptables $fversion actual"
 echo "$cinco   The latest version is:"
 $favorite_text_browser -dump $fweb_newfiles  | grep -i fwiptables | grep -i download | head -1
 echo "$cinco"
 echo "$cinco Upgrade The fwiptables in file $directory_fiptables/$fiptables with $favorite_text_browser"
 echo "$cinco    OR download manually   || OR $fiptables upgrade || OR look down: "
 echo "launch: $favorite_text_browser -source $fweb_latest &> /tmp/$fiptables"
 echo "launch: chmod ugo+x /tmp/$fiptables"
 echo "launch: /tmp/$fiptables install"
 echo "$cinco ok and it will be upgrade with the name $directory_fiptables/$fiptables"
 echo $footer_lineal
 exit;  fi
####
####
#### :rutina-final-howto-upgrade:
#############################      english: blacklist-list:
#############################      spanish: blacklist-list:
#### :rutina-inicial-blacklist-list:
####
####
if [ "$first_option" = "blacklist-list" ]; then $give_cover
echo $rallica
blacklist_server_fademind="https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts"
blacklist_server_mvps="http://winhelp2002.mvps.org/hosts.txt"
blacklist_server_adaway="https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt"
blacklist_server_stevenblack="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
####
####
echo
echo "$rallica [ actually ] [ File /etc/hosts has "$(cat /etc/hosts | wc -l)" numbers line]"
echo "$rallica [ actually ] [ Show the file: $fiptables hosts ]"
echo
echo "$rallica [   info: ] [ Get server lines numbers total ] [ $fiptables blacklist-list info ]"
echo "$rallica [ change: ] [ $fiptables blacklist-on name-bl ] OR [ $fiptables blacklist-off ]" 
echo
echo "$ralla"
echo "$rallica"
echo "$tab  name-bl          link-bl"
echo "$tab fademind        $blacklist_server_fademind"
echo "$tab mvps            $blacklist_server_mvps"
echo "$tab adaway          $blacklist_server_adaway"
echo "$tab stevenblack     $blacklist_server_stevenblack"
echo "$ralla"
####
####
if [ "$second_option" = "info" ]; then echo "$tab Getting lines numbers total.."; echo 
$favorite_text_browser -source "$blacklist_server_fademind" > $file_temporal_rute/hosts.fademind 
$favorite_text_browser -source "$blacklist_server_mvps" > $file_temporal_rute/hosts.mvps 
$favorite_text_browser -source "$blacklist_server_adaway" > $file_temporal_rute/hosts.adaway 
$favorite_text_browser -source "$blacklist_server_stevenblack" > $file_temporal_rute/hosts.stevenblack 
blacklist_lines_fademind="$(cat $file_temporal_rute/hosts.fademind | wc -l)"
blacklist_lines_mvps="$(cat $file_temporal_rute/hosts.mvps | wc -l)"
blacklist_lines_adaway="$(cat $file_temporal_rute/hosts.adaway | wc -l)"
blacklist_lines_stevenblack="$(cat $file_temporal_rute/hosts.stevenblack | wc -l)"
echo
echo "$rallica [ actually ] [ File /etc/hosts has "$(cat /etc/hosts | wc -l)" numbers line]"
echo "$rallica [ actually ] [ Show the file: $fiptables hosts ]"
echo
echo "$tab [ info ] [ total numbers lines for those servers ]"
echo "$tab fademind:    $blacklist_lines_fademind"
echo "$tab mvps:        $blacklist_lines_mvps"
echo "$tab adaway:      $blacklist_lines_adaway"
echo "$tab stevenblack: $blacklist_lines_stevenblack"
echo "$ralla"; fi
####
####
echo "$footer_lineal"
exit; fi
####
####
#### :rutina-final-blacklist-list:
#############################      english: blacklist-on
#############################      spanish: blacklist-on
#### :rutina-inicial-blacklist-on:
####
####
if [ "$first_option" = "blacklist-on" ]; then $give_cover
echo $rallica
####
####
if [ "$second_option" = "$NULL" ]; then
echo "$tab [ Launched wihtout options ] [ See: $fiptables blacklist-list ]"
echo $rallica; exit; fi
####
####
blacklist_server_fademind="https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts"
blacklist_server_adaway="https://raw.githubusercontent.com/AdAway/adaway.github.io/master/hosts.txt"
blacklist_server_mvps="http://winhelp2002.mvps.org/hosts.txt"
blacklist_server_stevenblack="https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts"
####
####
if [ "$second_option" = "fademind" ]; then 
$favorite_text_browser -source "$blacklist_server_fademind" > $file_temporal_rute/hosts.fademind 
$fiptables blacklist-off &> /dev/null
cat $file_temporal_rute/hosts.fademind >> /etc/hosts
echo "$tab New file /etc/hosts has its alias localhost, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like local"; exit; fi
####
####
if [ "$second_option" = "adaway" ]; then 
$favorite_text_browser -source "$blacklist_server_adaway" > $file_temporal_rute/hosts.adaway 
$fiptables blacklist-off &> /dev/null
cat $file_temporal_rute/hosts.adaway >> /etc/hosts
echo "$tab New file /etc/hosts has its alias localhost, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like local"; exit; fi
####
####
if [ "$second_option" = "mvps" ]; then 
$favorite_text_browser -source "$blacklist_server_mvps" > $file_temporal_rute/hosts.mvps 
$fiptables blacklist-off &> /dev/null
cat $file_temporal_rute/hosts.mvps >> /etc/hosts
echo "$tab New file /etc/hosts has its alias localhost, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like local"; exit; fi
####
####
if [ "$second_option" = "stevenblack" ]; then 
$favorite_text_browser -source "$blacklist_server_stevenblack" > $file_temporal_rute/hosts.stevenblack 
$fiptables blacklist-off &> /dev/null
cat $file_temporal_rute/hosts.stevenblack >> /etc/hosts
echo "$tab New file /etc/hosts has its alias localhost, and " "$(cat /etc/hosts | wc -l)" " hosts blockeds like local"; exit; fi
####
####
echo "$tab [ Invalid option ] [ See: $fiptables blacklist-list ]"
echo $rallica; exit; fi
####
####
#### :rutina-final-blacklist-on:
#############################      english: blacklist-off:
#############################      spanish: blacklist-off:
#### :rutina-inicial-blacklist-off:
####
####
if [ "$first_option" = "blacklist-off" ]; then $give_cover
echo $rallica
echo "$cinco" > "$file_temporal_rute/hosts"
echo "## ip v4 loopback ##" >> "$file_temporal_rute/hosts"
echo "127.0.0.1	localhost-ip4 localhost localhost.localdomain" >> "$file_temporal_rute/hosts"
echo "## ip v6 loopback ##" >> "$file_temporal_rute/hosts"
echo "::1      localhost-ip6 localhost loopback-ip6" >> "$file_temporal_rute/hosts"
echo "ff02::1 ip6-allnodes" >> "$file_temporal_rute/hosts"
echo "ff02::2 ip6-allrouters" >> "$file_temporal_rute/hosts"
echo "$cinco" >> "$file_temporal_rute/hosts"
echo "$cincuenta" >> "$file_temporal_rute/hosts"
cp "$file_temporal_rute/hosts" /etc/hosts
echo "$rallica [ OK HOST RESTAURED ] [ FILE BASIC HOSTS FOR DEFAULT ]"
echo $footer_lineal
$directory_fiptables/$fiptables hosts
exit; fi
####
####
#### :rutina-final-blacklist-off:
#############################       english: eraserules: system script, the erase rules option
#############################       spanish: eraserules: script de sistema, la opcion borra reglas
#### :rutina-inicial-eraserules:
####
####
 if [ "$first_option" = "eraserules" ]; then $nada 
 #### give_cover to null, so you can head_autolog.
 $give_cover &> /dev/null
 echo $head_principal
 echo $header_lineal
 ####
 ####
 #### english: erase the rules
 #### spanish: borra las reglas
 ####
 ####
 $command_ebtables -t filter -F
 $command_ebtables -t nat -F
 $command_iptables_nft -t filter -F
 $command_ip6tables_nft -t filter  -F
 $command_iptables_legacy -t filter -F
 $command_ip6tables_legacy -t filter -F
 $command_iptables_nft -t nat -F
 $command_ip6tables_nft -t nat  -F
 $command_iptables_legacy -t nat -F
 $command_ip6tables_legacy -t nat -F
 $command_iptables_nft -t mangle -F
 $command_ip6tables_nft -t mangle  -F
 $command_iptables_legacy -t mangle -F
 $command_ip6tables_legacy -t mangle -F
 $command_iptables_nft -t raw -F
 $command_ip6tables_nft -t raw  -F
 $command_iptables_legacy -t raw -F
 $command_ip6tables_legacy -t raw -F
 $command_iptables_nft -t security -F
 $command_ip6tables_nft -t security -F
 $command_iptables_legacy -t security -F
 $command_ip6tables_legacy -t security -F
####
####
 $command_ebtables -t filter -P INPUT ACCEPT
 $command_ebtables -t filter -P FORWARD ACCEPT 
 $command_ebtables -t filter -P OUTPUT ACCEPT
 $command_ebtables -t nat -P PREROUTING ACCEPT
 $command_ebtables -t nat -P OUTPUT ACCEPT 
 $command_ebtables -t nat -P POSTROUTING ACCEPT
 $command_iptables_nft -t filter -P INPUT ACCEPT
 $command_iptables_nft -t filter -P FORWARD ACCEPT
 $command_iptables_nft -t filter -P OUTPUT ACCEPT
 $command_ip6tables_nft -t filter -P INPUT ACCEPT
 $command_ip6tables_nft -t filter -P FORWARD ACCEPT
 $command_ip6tables_nft -t filter -P OUTPUT ACCEPT
 $command_iptables_legacy -t filter -P INPUT ACCEPT
 $command_iptables_legacy -t filter -P FORWARD ACCEPT
 $command_iptables_legacy -t filter -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t filter -P INPUT ACCEPT
 $command_ip6tables_legacy -t filter -P FORWARD ACCEPT
 $command_ip6tables_legacy -t filter -P OUTPUT ACCEPT
 $command_iptables_nft -t nat -P INPUT ACCEPT
 $command_iptables_nft -t nat -P OUTPUT ACCEPT
 $command_iptables_nft -t nat -P PREROUTING ACCEPT
 $command_iptables_nft -t nat -P POSTROUTING ACCEPT
 $command_ip6tables_nft -t nat -P INPUT ACCEPT
 $command_ip6tables_nft -t nat -P OUTPUT ACCEPT
 $command_ip6tables_nft -t nat -P PREROUTING ACCEPT
 $command_ip6tables_nft -t nat -P POSTROUTING ACCEPT
 $command_iptables_legacy -t nat -P INPUT ACCEPT
 $command_iptables_legacy -t nat -P OUTPUT ACCEPT
 $command_iptables_legacy -t nat -P PREROUTING ACCEPT
 $command_iptables_legacy -t nat -P POSTROUTING ACCEPT
 $command_ip6tables_legacy -t nat -P INPUT ACCEPT
 $command_ip6tables_legacy -t nat -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t nat -P PREROUTING ACCEPT
 $command_ip6tables_legacy -t nat -P POSTROUTING ACCEPT
 $command_iptables_nft -t mangle -P INPUT ACCEPT
 $command_iptables_nft -t mangle -P FORWARD ACCEPT
 $command_iptables_nft -t mangle -P OUTPUT ACCEPT
 $command_iptables_nft -t mangle -P PREROUTING ACCEPT
 $command_iptables_nft -t mangle -P POSTROUTING ACCEPT
 $command_ip6tables_nft -t mangle -P INPUT ACCEPT
 $command_ip6tables_nft -t mangle -P FORWARD ACCEPT
 $command_ip6tables_nft -t mangle -P OUTPUT ACCEPT
 $command_ip6tables_nft -t mangle -P PREROUTING ACCEPT
 $command_ip6tables_nft -t mangle -P POSTROUTING ACCEPT
 $command_iptables_legacy -t mangle -P INPUT ACCEPT
 $command_iptables_legacy -t mangle -P FORWARD ACCEPT
 $command_iptables_legacy -t mangle -P OUTPUT ACCEPT
 $command_iptables_legacy -t mangle -P PREROUTING ACCEPT
 $command_iptables_legacy -t mangle -P POSTROUTING ACCEPT
 $command_ip6tables_legacy -t mangle -P INPUT ACCEPT
 $command_ip6tables_legacy -t mangle -P FORWARD ACCEPT
 $command_ip6tables_legacy -t mangle -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t mangle -P PREROUTING ACCEPT
 $command_ip6tables_legacy -t mangle -P POSTROUTING ACCEPT
 $command_iptables_nft -t raw -P OUTPUT ACCEPT
 $command_iptables_nft -t raw -P PREROUTING ACCEPT
 $command_ip6tables_nft -t raw -P OUTPUT ACCEPT
 $command_ip6tables_nft -t raw -P PREROUTING ACCEPT
 $command_iptables_legacy -t raw -P OUTPUT ACCEPT
 $command_iptables_legacy -t raw -P PREROUTING ACCEPT
 $command_ip6tables_legacy -t raw -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t raw -P PREROUTING ACCEPT
 $command_iptables_nft -t security -P INPUT ACCEPT
 $command_iptables_nft -t security -P FORWARD ACCEPT
 $command_iptables_nft -t security -P OUTPUT ACCEPT
 $command_ip6tables_nft -t security -P INPUT ACCEPT
 $command_ip6tables_nft -t security -P FORWARD ACCEPT
 $command_ip6tables_nft -t security -P OUTPUT ACCEPT
 $command_iptables_legacy -t security -P INPUT ACCEPT
 $command_iptables_legacy -t security -P FORWARD ACCEPT
 $command_iptables_legacy -t security -P OUTPUT ACCEPT
 $command_ip6tables_legacy -t security -P INPUT ACCEPT
 $command_ip6tables_legacy -t security -P FORWARD ACCEPT
 $command_ip6tables_legacy -t security -P OUTPUT ACCEPT
####
####
 echo "$rallica [ OK FIREWALL ERASED ] [ DELETED RULES ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-eraserules:
#############################       english: route: system script, the route option
#############################       spanish: route: script de sistema, la opcion route
#### :rutina-inicial-route:
####
####
#### comments: sed is necesary to full work in graphicall
####
####
 if [ "$first_option" = "route" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ Show route tables ]"
 echo $header_lineal
 case $command_ip in  $NULL) echo "$tab [ Install ip command ]" ; exit ;; esac
 echo "$rallica [ ip route ipv4 ] [ mode simplify ]"
 echo "$($command_ip -4 route)"
 echo $ralla
 echo "$rallica [ ip route ipv6 ] [ mode simplify ]"
 echo "$($command_ip -6 route)"
#### case $($command_route) in $NULL) echo "$tab [ Install route command ]" ; exit ;; esac
#### echo $ralla
#### echo "$rallica [ ip route ipv4 ] [ mode lineal ]"
#### echo "$($command_route -4)"
#### echo $ralla
#### echo "$rallica [ ip route ipv6 ] [ mode lineal]"
#### echo "$($command_route -6)"
 echo $footer_lineal
 exit ; fi
####
####
#### :rutina-final-route:
#############################       english: ss: system script, the sockets option
#############################       spanish: ss: script de sistema, la opcion sockets
#### :rutina-inicial-ss:
####
####
 if [ "$first_option" = "ss" ]; then  $give_cover
 case $command_ss in "$NULL") echo "$tab [ Install ss command ]" ; exit ;; esac
 echo "$ralla [ $first_option ] [ Show sockets with ss ]"
 echo $header_lineal
 echo "$tab [ The ipv6 sockets ]"
 $command_ss -a6
 echo "$ralla"
 echo "$tab [ The ipv4 sockets ]"
 $command_ss -a4
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ss:
#############################       english: lsof: system script, the lsof option
#############################       spanish: lsof: script de sistema, la lsof sockets
#### :rutina-inicial-lsof:
####
####
 if [ "$first_option" = "lsof" ]; then $give_cover
 case $command_lsof in "$NULL") echo "$tab [Install lsof]" ; exit ;; esac
 echo "$ralla [ $first_option ] [ Show sockets with lsof ]"
 echo $header_lineal
 echo "$tab [The sockets with lsof ipv4 ]"
 $command_lsof -i 4
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsof:
#############################      english: netstat: system script, the netstat sockets
#############################      spanish: netstat: script de sistema, el netstat sockets
#### :rutina-inicial-netstat:
####
####
 if [ "$first_option" = "netstat" ]; then  $give_cover
 case $command_netstat in
 "$NULL") echo "$tab [Install netstat]" ; exit ;; esac
 echo "$ralla [ $first_option ] [ Show sockets with netstat ]"
 echo $header_lineal
 echo "$tab [The sockets list with netstat ]"
 $command_netstat -a -4 -6
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-netstat:
#############################      english: info-listen: system script, the netstat sockets
#############################      spanish: info-listen: script de sistema, el netstat sockets
#### :rutina-inicial-info-listen:
####
####
 if [ "$first_option" = "info-listen" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ Show info address proxy ]"
 echo $header_lineal
 echo "$tab info socket list:"
 echo $ralla
 echo "$tab [ Network Listen ] [ Listen ipv4 ]"
 if [ "$command_ss" = "$NULL" ] ; then echo "$tab install ss"; fi
 $command_ss -l4 | sed 's/   / /g'
 echo $ralla
 echo "$tab [ Network Listen ] [ Listen ipv6 ]"
 if [ "$command_ss" = "$NULL" ] ; then echo "$tab install ss"; fi
 $command_ss -l6 | sed 's/   / /g'
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-listen:
#############################      english: info-proxy: system script, the netstat sockets
#############################      spanish: info-proxy: script de sistema, el netstat sockets
#### :rutina-inicial-info-proxy:
####
####
 if [ "$first_option" = "info-proxy" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ Show info address proxy ]"
 echo $header_lineal
 echo "$tab Info address proxy"
 echo "$tab Web http_proxy:    $http_proxy"
 echo "$tab Web https_proxy:   $https_proxy"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-proxy:
#############################      english: netstat-proxy: system script, the netstat sockets
#############################      spanish: netstat-proxy: script de sistema, el netstat sockets
#### :rutina-inicial-netstat-proxy:
####
####
 if [ "$first_option" = "netstat-proxy" ]; then  $give_cover
 case $command_netstat_nat in
 "$NULL") echo "$tab [Install netstat-nat]" ; exit ;; esac
 echo "$ralla [ $first_option ] [ Show sockets with netstat for proxy ]"
 echo $header_lineal
 echo "$tab [ The devices list with netstat for proxy ]"

 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-netstat-proxy:
#############################      english: ipforward-on: active ip forward
#############################      spanish: ipforward-on: activa ip forward
#### :rutina-inicial-ipforward-on:
####
####
 if [ "$first_option" = "ipforward-on" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ Active ip forwading in kernel ]"
 echo $header_lineal
 for a in $($command_sysctl -a | grep -i forwarding | cut -d " " -f 1)
 do $command_sysctl -w $a=1 ; done
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ipforward-on:
#############################      english: ipforward-off: active ip forward
#############################      spanish: ipforward-off: activa ip forward
#### :rutina-inicial-ipforward-off:
####
####
 if [ "$first_option" = "ipforward-off" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ Deactive ip forwading in kernel ]"
 echo $header_lineal
 for a in $($command_sysctl -a | grep -i forwarding | cut -d " " -f 1)
 do $command_sysctl -w $a=0 ; done
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ipforward-off
#############################      english: list-allrules: list all rules
#############################      spanish: list-allrules: list all rules 
#### :rutina-inicial-list-allrules:
####
####
 if [ "$first_option" = "list-allrules" ]; then  $nada
 echo "$ralla [ $first_option ] [ List all rules ]"
 echo $header_lineal
 $fiptables list-arptables
 $fiptables list-ebtables
 $fiptables list-filter4
 $fiptables list-filter6
 $fiptables list-nat4
 $fiptables list-nat6
 $fiptables list-security4
 $fiptables list-security6
 $fiptables list-raw4
 $fiptables list-raw6
 $fiptables list-mangle4
 $fiptables list-mangle6
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-allrules:
#############################  english: list4-ip: system script, the list option
#############################  spanish: list4-ip: script de sistema, la opcion lista
#### :rutina-inicial-list:
####
####
 if [ "$first_option" = "list4-ip" ]; then $give_cover 
 legacycuatro=$("$command_iptables_legacy" -t filter -L INPUT 1 && \
 "$command_iptables_legacy" -t filter -L OUTPUT 1 ) &> /dev/null
 nftcuatro=$("$command_iptables_nft" -t filter -L INPUT 1 && \
 "$command_iptables_nft" -t filter -L OUTPUT 1 ) &> /dev/null
 echo $header_ender
 echo "$ralla [ list ] [ List iptables filter ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 case $legacycuatro in
 "$NULL") echo "$ralla [ Without rules xtables ] [ iptables-legacy ]" ;;
 *)
 echo "$ralla [ With rules xtables ] [ iptables-legacy ]"
 $command_iptables_legacy -t filter -v -L
 ;;
 esac
 echo "$ralla"
 case $nftcuatro in
 "$NULL") echo "$ralla [ Without rules nftables ] [ iptables-nft ]" ;;
 *)
 echo "$ralla [ With rules nftables ] [ iptables-nft ]" 
 $command_iptables_nft -t filter -v -L
 ;;
 esac
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list:
############################ english: list6-ip: list ipv6 rules filter
############################ spanish: list6-ip: lista reglas de filtros de ipv6
#### :rutina-inicial-list6:
####
####
 if [ "$first_option" = "list6-ip" ]; then  $give_cover
 legacyseis=$("$command_ip6tables_legacy" -t filter -L INPUT 1 && \
 "$command_ip6tables_legacy" -t filter -L OUTPUT 1 )
 nftseis=$("$command_ip6tables_nft" -t filter -L INPUT 1 && \
"$command_ip6tables_nft" -t filter -L OUTPUT 1 )
 echo $header_ender
 echo "$ralla [ list6 ] [ List iptables filter ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 case $legacyseis in
 "$NULL") echo "$ralla [ Without rules xtables ] [ iptables-legacy ]" ;;
 *)
 echo "$ralla [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_legacy -v -L
 ;;
 esac
 echo $ralla
 case $nftseis in
 "$NULL") echo "$ralla [ Without rules nftables ] [ iptables-nft ]" ;;
 *)
 echo "$ralla [ With rules nftables ] [ iptables-nft ]" 
 $command_ip6tables_nft -v -L
 ;;
 esac
####
####
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list6:
#############################  english: list-filter4: system script, the list option
#############################  spanish: list-filter4: script de sistema, la opcion lista
#### :rutina-inicial-list-filter4:
####
####
 if [ "$first_option" = "list-filter4" ]; then $give_cover 
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ]"
 $command_iptables_legacy -t filter -v -L
 echo "$ralla"
 echo "$ralla [ With rules nftables ] [ iptables-nft ]" 
 $command_iptables_nft -t filter -v -L
####
####
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-filter4:
############################  english: list-forward: list iptables filter forward rules
############################  spanish: list-forward: lista reglas de iptables filter forward
#### :rutina-inicial-list-forward:
####
####
 if [ "$first_option" = "list-forward" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter forward ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ] [ FORWARD ] $ralla "
 $command_iptables_legacy -t filter -v -L FORWARD
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ] [ FORWARD ] $ralla "
 $command_iptables_nft -t filter -v -L FORWARD
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forward:
############################ english: list-filter6: list ipv6 rules filter
############################ spanish: list-filter6: lista reglas de filtros de ipv6
#### :rutina-inicial-list-filter6:
####
####
 if [ "$first_option" = "list-filter6" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_legacy -v -L
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ]" 
 $command_ip6tables_nft -v -L
####
####
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-filter6:
############################  english: list-forward6: list iptables filter forward rules ipv6
############################  spanish: list-forward6: lista reglas de iptables filter forward ipv6
#### :rutina-inicial-list-forward6:
####
####
 if [ "$first_option" = "list-forward6" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter forward ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ] [ FORWARD ] $ralla "
 $command_ip6tables_legacy -t filter -v -L FORWARD
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ] [ FORWARD ] $ralla "
 $command_ip6tables_nft -t filter -v -L FORWARD
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forward6:
############################ english: list-nat4: list NAT rules of ipv4
############################ spanish: list-nat4: lista reglas de NAT de ipv4
#### :rutina-inicial-list-nat-4:
####
####
 if [ "$first_option" = "list-nat4" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables nat ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ] $ralla  "
 $command_iptables_legacy -t nat -v -L
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ] $ralla "
 $command_iptables_nft -t nat -v -L 
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-nat-4:
############################ english: list-nat6: list NAT rules of ipv6
############################ spanish: list-nat6: lista reglas de NAT de ipv6
#### :rutina-inicial-list-nat6:
####
####
 if [ "$first_option" = "list-nat6" ]; then $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables nat ipv6] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ] $ralla "
 $command_ip6tables_legacy -t nat -v -L 
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ] $ralla "
 $command_ip6tables_nft -t nat -v -L 
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-nat6:
############################# english: listnum: list option numerical filter ipv4
############################# spanish: listnum: lista numeral filter ipv4
#### :rutina-inicial-listnum:
####
####
 if [ "$first_option" = "listnum" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter ipv4 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla [With rules netfilter] [iptables-nft]"  
 $command_iptables_legacy -v -n -L 
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ]"  
 $command_iptables_nft -v -n -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-listnum:
############################  english: list-forwardnum: list iptables filter forward rules in numerical
############################  spanish: list-forwardnum: lista reglas de iptables filter forward in numeros
#### :rutina-inicial-list-forwardnum:
####
####
 if [ "$first_option" = "list-forwardnum" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter forward ipv4 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ] [ FORWARD ] $ralla "
 $command_iptables_legacy -t filter -v -n -L FORWARD
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ] [ FORWARD ] $ralla "
 $command_iptables_nft -t filter -v -n -L FORWARD
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forwardnum:
############################# english: listnum6: list option numerical filter ipv6
############################# spanish: listnum6: lista numeral filter ipv6
#### :rutina-inicial-listnum6:
####
####
 if [ "$first_option" = "listnum6" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter ipv6 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_legacy -v -n -L 
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ]" 
 $command_ip6tables_nft -v -n -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-listnum6:
############################  english: list-forwardnum6: list iptables filter forward rules in numerical ipv6
############################  spanish: list-forwardnum6: lista reglas de iptables filter forward in numeros ipv6
#### :rutina-inicial-list-forwardnum6:
####
####
 if [ "$first_option" = "list-forwardnum6" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables filter forward ipv6 in numerical ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ With rules xtables ] [ iptables-legacy ] [ FORWARD ] $ralla "
 $command_ip6tables_legacy -t filter -v -n -L FORWARD
 echo $ralla
 echo "$ralla [ With rules nftables ] [ iptables-nft ] [ FORWARD ] $ralla "
 $command_ip6tables_nft -t filter -v -n -L FORWARD
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-forwardnum6:
############################       english: list-mangle4: list mangle rules from ipv4
############################       spanish: list-mangle4: lista reglas de mangle de ipv4
#### :rutina-inicial-list-mangle4:
####
####
 if [ "$first_option" = "list-mangle4" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables mangle ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ The xtables ] [ iptables-legacy ] [ MANGLE ] $ralla "
 $command_iptables_legacy -t mangle -v -L
 echo $ralla
 echo "$ralla [ The nftables ] [ iptables-nft ] [ MANGLE ] $ralla "
 $command_iptables_nft -t mangle -v -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-mangle4:
############################       english: list-mangle6: list mangle rules from ipv6
############################       spanish: list-mangle6: lista reglas de mangle de ipv6
#### :rutina-inicial-list-mangle6:
####
####
 if [ "$first_option" = "list-mangle6" ]; then $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables mangle ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla [ The xtables ] [ iptables-legacy ] [ MANGLE ] $ralla "
 $command_ip6tables_legacy -t mangle -v -L
 echo $ralla
 echo "$ralla [ The nftables ] [iptables-nft ] [ MANGLE ] $ralla "
 $command_ip6tables_nft -t mangle -v -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-mangle6:
############################       english: list-raw4: list raw rules from ipv4
############################       spanish: list-raw4: lista reglas raw de ipv4
#### :rutina-inicial-list-raw4:
####
####
 if [ "$first_option" = "list-raw4" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables raw ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo "$ralla  [ The xtables ] [ iptables-legacy ] [ RAW ] $ralla "
 $command_iptables_legacy -t raw -v -L
 echo $ralla
 echo "$ralla [ The nftables ] [ iptables-nft ] [ RAW ] $ralla "
 $command_iptables_nft -t raw -v -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-raw4:
############################       english: list-raw6: list raw rules from ipv6
############################       spanish: list-raw6: lista reglas raw de ipv6
#### :rutina-inicial-list-raw6:
####
####
 if [ "$first_option" = "list-raw6" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables raw ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ The xtables ] [ iptables-legacy ] [ RAW ] $ralla "
 $command_ip6tables_legacy -t raw -v -L
 echo $ralla
 echo "$ralla [ The nftables ] [ iptables-nft ] [ RAW ] $ralla "
 $command_ip6tables_nft -t raw -v -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-raw6:
############################       english: list-security4: list security rules from ipv4
############################       spanish: list-security4: lista reglas de security de ipv4
#### :rutina-inicial-list-security4:
####
####
 if [ "$first_option" = "list-security4" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables security ipv4 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ The xtables ] [ iptables-legacy ] [ SECURITY ] $ralla "
 $command_iptables_legacy -t security -v -L
 echo $ralla
 echo "$ralla [ The nftables ] [ iptables-nft ] [ SECURITY ] $ralla "
 $command_iptables_nft -t security -v -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-security4:
############################       english: list-security6: list security rules from ipv6
############################       spanish: list-security6: lista reglas de security de ipv6
#### :rutina-inicial-list-security6:
####
####
 if [ "$first_option" = "list-security6" ]; then  $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ List iptables security ipv6 ] [ it is sufficent with one: legacy or nft ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ The xtables ] [ iptables-legacy ] [ SECURITY ] $ralla "
 $command_ip6tables_legacy -t security -v -L
 echo $ralla
 echo "$ralla [ The nftables ] [ iptables-nft ] [ SECURITY ] $ralla "
 $command_ip6tables_nft -t security -v -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-security6:
############################       english: list-ebtables: list ebtables rules with mac
############################       spanish: list-ebtables: lista reglas de ebtables with mac
#### :rutina-inicial-list-ebtables:
####
####
 if [ "$first_option" = "list-ebtables" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ List ebtables ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ ebtables: filter ethernet ] [ EBTABLES ] $ralla "
 $command_ebtables -L -t filter
 echo $ralla
 echo "$ralla [ ebtables: nat ethernet ] [ EBTABLES ] $ralla "
 $command_ebtables -L -t nat
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-ebtables:
############################       english: list-arptables: list rules arptables with arp
############################       spanish: list-arptables: lista reglas de arptables with arp
#### :rutina-inicial-list-arptables:
####
####
 if [ "$first_option" = "list-arptables" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ List arptables ipv4 ]"
 echo $header_lineal
 echo $ralla
 echo $ralla
 echo "$ralla [ arptables: filter arptables ] [ ARPTABLES ] $ralla "
 echo $rala
 $command_arptables -L
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-list-arptables:
############################       english: new-full-config: new-full-config option to create new configs
############################       spanish: new-full-config: new-full-config para cear nuevas config
#### :rutina-inicial-new-full-config:
####
####
if [ "$first_option" = "new-full-config" ] && [ "$second_option" = "$NULL" ]  ; then $genfiles ; $give_cover
echo "$cinco Use: $fiptables new-full-config config-new"
exit; fi
####
####
if [ "$first_option" = "new-full-config" ] && [ "$second_option" != "$NULL" ] ; then $genfiles ; $give_cover
archivo="$second_option"
cp "$defaultfullcfg_eng" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modify $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Canceled. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-new-full-config:
############################       english: nueva-completa-config: create new configs
############################       spanish: nueva-completa-config: nueva-completa-config para cear nuevas config
#### :rutina-inicial-nueva-completa-config:
####
####
if [ "$first_option" = "nueva-completa-config" ] && [ "$second_option" = "$NULL" ]  ; then $genfiles ; $give_cover
echo "$cinco Use: $fiptables nueva-completa-config config-nueva"
exit; fi
####
####
if [ "$first_option" = "nueva-completa-config" ] && [ "$second_option" != "$NULL" ] ; then $genfiles ; $give_cover
archivo="$second_option"
cp "$defaultfullcfg_spa" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modificado. $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Cancelado. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-nueva-completa-config:
############################       english: new-mini-config: create new configs
############################       spanish: new--mini config: cea nuevas config
#### :rutina-inicial-new-mini-config:
####
####
if [ "$first_option" = "new-mini-config" ] && [ "$second_option" = "$NULL" ]  ; then $genfiles ; $give_cover
echo "$cinco Use: $fiptables new-mini-config config-new"
exit; fi
####
####
if [ "$first_option" = "new-mini-config" ] && [ "$second_option" != "$NULL" ] ; then $genfiles ; $give_cover
archivo="$second_option"
cp "$defaultminicfg_eng" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modify $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Canceled. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-new-mini-config:
############################       english: nueva-mini-config: create new configs
############################       spanish: nueva-mini-config: crea nuevas config
#### :rutina-inicial-nueva-mini-config:
####
####
if [ "$first_option" = "nueva-mini-config" ] && [ "$second_option" = "$NULL" ]  ; then $genfiles ; $give_cover
echo "$cinco Use: $fiptables nueva-mini-config config-nueva"
exit; fi
####
####
if [ "$first_option" = "nueva-mini-config" ] && [ "$second_option" != "$NULL" ] ; then $genfiles ; $give_cover
archivo="$second_option"
cp "$defaultminicfg_spa" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" 0 0 2> "$directory_config/$archivo"
####
####
if [ -s "$directory_config/$second_option" ]; then $nada 
dialog --msgbox "[ OK. Modificado $second_option ]" 0 0 ; clear
echo $footer_lineal
fi
####
####
if [ ! -s "$directory_config/$second_option" ]; then $nada 
rm "$directory_config/$second_option" &> /dev/null
cp "/tmp/fiptables-$archivo" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[ OK. Cancelado. $second_option ]" 0 0 ; clear
fi
####
####
exit; fi
####
####
#### :rutina-final-nueva-mini-config:
############################       english: modify-config: modify a one config.cfg
############################       spanish: modify-config: modify una configuracion.cfg
#### :rutina-inicial-modify-config:
####
####
if [ "$first_option" = "modify-config" ]; then $genfiles ; $give_cover
cp "$directory_config/$second_option" "/tmp/fiptables-$second_option" &> /dev/null
####
###
if [ ! -f "$directory_config"/"$second_option" ] ; then $nada
echo "$cinco Use: $fiptables modify-config config-existent" ; exit; fi
####
####
if [ -f "$directory_config"/"$second_option" ] ; then $nada
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$second_option" 0 0 2> "$directory_config/$second_option"
clear; fi
####
####
if [  -s "$directory_config/$second_option" ] ; then
dialog --msgbox "[OK file modify config file: $second_option]" 0 0 
clear ; exit ; fi
####
####
if [ ! -s "$directory_config/$second_option" ] ; then $nada
cp "/tmp/fiptables-$second_option" "$directory_config/$second_option" &> /dev/null
dialog --msgbox "[Canceled file modify config file: $second_option]" 0 0 
clear ; exit ; fi
####
####
clear ; exit ; fi
####
####
#### :rutina-final-modify-config:
############################       english: show-config: show a one config
############################       spanish: show-config: muestra una configuracion
#### :rutina-inicial-show-config:
####
####
if [ "$first_option" = "show-config" ] ; then echo $genfiles ; $give_cover
####
####
if [ ! -f "$directory_config"/"$second_option" ] ; then 
echo "$cinco Use: $fiptables show-config config-old" ; exit; fi
####
####
if [ -f "$directory_config"/"$second_option" ] ; then 
cat $directory_config/$second_option ;
echo $footer_lineal ; exit ; fi
####
####
exit; fi
####
####
#### :rutina-final-show-config:
############################       english: del-config: delete a old config
############################       spanish: del-config: elimina una vieja configuracion
#### :rutina-inicial-del-config:
####
####
if [ "$first_option" = "del-config" ]; then $give_cover
####
####
if [ ! -f $directory_config/$second_option ] ; then
echo "$cinco Use: $fiptables del-config config-old" ; exit ; fi
####
####
if [ -f $directory_config/$second_option ] ; then
rm $directory_config/$second_option
echo "$directory_config/$second_option Deleted"
echo $footer_lineal ; exit ; fi
####
####
exit ; fi
####
####
#### :rutina-final-del-config:
############################       english: sudo-auth: the sudo-auth option en english
############################       spanish: sudo-auth: la opcion de sudo-auth en ingles
#### :rutina-inicial-sudo-auth:
####
####
if [ "$first_option" = "sudo-auth" ]; then $give_cover
case $second_option in
"$NULL") echo $head_principal ; echo $header_lineal ; echo "$cinco Use: $fiptables sudo-auth user" ; exit ;;
*) autorizados="$second_option" ;; esac
echo "$autorizados ALL=(root) NOPASSWD: $directory_fiptables/$fiptables " &> /etc/sudoers.d/$fiptables
echo "alias $fiptables='sudo $fiptables'" &>  /etc/bash_completion.d/$fiptables
echo "$cinco $cinco"
echo "$cinco    Ok. $autorizados will use:     $fiptables"
echo "$cinco    Ok. $fiptables will use alias with sudo "
echo "$cinco $cinco"
echo "$rallica [ sudoer file:   /etc/sudoers.d/$fiptables ]"
cat /etc/sudoers.d/$fiptables
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-sudo-auth:
############################       english: sudo-remove: the sudo-remove option en english
############################       spanish: sudo-remove: la opcion de sudo-remove en ingles
#### :rutina-inicial-sudo-remove:
####
####
if [ "$first_option" = "sudo-remove" ]; then $give_cover
rm /etc/sudoers.d/$fiptables
echo "$cinco [ deleted auth sudo ]"
echo "$rallica [ deleted /etc/sudoers.d/$fiptables ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-sudo-remove:
############################       english: sudo-list: the sudo-auth option en english
############################       spanish: sudo-list: la opcion de sudo-auth en ingles
#### :rutina-inicial-sudo-list:
####
####
if [ "$first_option" = "sudo-list" ] && [ -f /etc/sudoers.d/$fiptables ] ; then $give_cover
echo "$ralla [ $first_option ] [ list users with root auth for launch $fiptables ]"
echo "$rallica [ With root sudo for $fiptables from some user ]"
echo "$rallica [ sudoer file:   /etc/sudoers.d/$fiptables ]"
cat /etc/sudoers.d/$fiptables
echo $footer_lineal
exit; fi
####
####
if [ "$first_option" = "sudo-list" ] && [ ! -f /etc/sudoers.d/$fiptables ] ; then $give_cover
echo "$cinco [ list users with root auth for launch $fiptables ]"
echo $header_lineal
echo "$rallica [ Wihtout root sudo from users ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-sudo-list:
############################       english: alias-list: the sudo-auth option en english
############################       spanish: alias-list: la opcion de sudo-auth en ingles
#### :rutina-inicial-alias-list:
####
####
if [ "$first_option" = "alias-list" ]; then $give_cover
echo "$ralla [ $first_option ] [ list alias and autocomplete for $fiptables ]"
echo $header_lineal
echo "$rallica [ alias file:   /etc/bash_completion.d/$fiptables ]"
cat /etc/bash_completion.d/$fiptables
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-alias-list:
############################       english: ipforward-list: the ipforwading option en english
############################       spanish: ipforward-list: la opcion de reenvios  en ingles
#### :rutina-inicial-ipforward-list:
####
####
 if [ "$first_option" = "ipforward-list" ]; then $give_cover
 echo "$ralla [ $first_option ] [ Show ip forwading in kernel ]"
 echo $header_lineal
 echo "$rallica [ Active 1 or deactive 0 for ipforwading with sysctl:     $cinco ]"
 $command_sysctl -a | grep -i forwarding
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ipforward-list:
############################       english: tcpdump: listen at dump from conexiones
############################       spanish: tcpdump: escucha al volcado de conexiones
#### :rutina-inicial-tcpdump:
####
####
 if [ "$first_option" = "tcpdump" ]; then $give_cover
 case $command_tcpdump in "$NULL") echo " Install tcpdump" ; exit ;; esac
 echo "$cinco [ launch several seconds tcpdump ]"
 echo $header_lineal
####
####
 echo "$cinco [ $first_option: ] [ for default max $server_waiting seconds ]"
 echo "$ralla" "$ralla" "$ralla"
 timeout -s SIGINT -v $server_waiting tcpdump -v
 echo "$ralla" "$ralla" "$ralla"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-tcpdump:
############################       english: arp-lan: listen at dump from conexiones
############################       spanish: arp-lan: escucha al volcado de conexiones
#### :rutina-inicial-arp-lan:
####
####
 if [ "$first_option" = "arp-lan" ]; then  $give_cover
 case $command_arp_scan in "$NULL") echo "install arp-scan" ;;
 *)
 echo "$ralla [ $first_option ] [ Show the list arp-scan in the lan ]"
 echo $header_lineal
 echo $rallica
 echo local net: ip lan
 $command_ip -4 route ls | grep -iv default
 echo $rallica
 echo local scan: arp lan
 $command_arp-scan -l -x 
 ;;
 esac
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-arp-lan:
############################       english: show-default: show /etc/default/fwiptables
############################       spanish: show-default: show /etc/default/fwiptables
#### :rutina-inicial-show-default:
####
####
 if [ "$first_option" = "show-default" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the /etc/default/fwiptables ]"
 echo $header_lineal
 cat /etc/default/fwiptables
 echo $footer_lineal
 echo "$rallica [ edit file /etc/default/fwiptables to change variables with: $fiptables modify-default ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-show-default:
############################       english: modify-default: modify /etc/default/fwiptables
############################       spanish: modify-default: modify /etc/default/fwiptables
#### :rutina-inicial-modify-default:
####
####
 if [ "$first_option" = "modify-default" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ modify the /etc/default/fwiptables ]"
 echo $header_lineal
 echo $footer_lineal
 echo "$cinco edit file /etc/default/fwiptables to change variables"
####
####
#### english: make security copy file
#### spanish: hace copia de seguridad
####
####
 cp /etc/default/fwiptables /tmp/fiptables-modify-default
####
####
#### english: edit file
#### spanish: edita el archivo
####
####
 dialog --no-cancel --title "MODIFY FILE /etc/default/fwiptables" \
 --editbox /tmp/fiptables-modify-default 0 0 2> /etc/default/fwiptables
 clear
####
####
#### english: probe all that is correct or recover
#### spanish: prueba que todo es correcto o lo recupera
####
####
 if [ ! -s "/etc/default/fwiptables" ] ; then $nada
 cp /tmp/fiptables-modify-default /etc/default/fwiptables; fi
####
####
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-modify-default:
############################       english: names: file list whith rules in iptables format
############################       spanish: names: lista de archivos con reglas en formato iptables
#### :rutina-inicial-names:
####
####
 if [ "$first_option" = "names" ]; then $genfiles ; $give_cover
 echo "$ralla [ $first_option ] [ List names from firewall saved ]"
 echo $header_lineal
 echo "$cinco $tab [English:] [File list with iptables format in folder:] [$directory_fwrecover]"
 echo "$cinco $tab [Spanish:] [Lista de archivos con iptables formato en carpeta:] [$directory_fwrecover]"
 ls -1 $directory_fwrecover | sed s/\-legacy\-ipv6//g | sed s/\-nft\-ipv6//g | \
 sed s/\-legacy\-ipv4//g | sed s/\-nft\-ipv4//g | \
 sed s/\-arptables//g | sed s/\-ebtables//g | sort -u 
 echo "$rallica [OK FIREWALL NAMES]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-names:
##############################       english: reset: reset counter rules
##############################       spanish: reset: resetea contadores de reglas
#### :rutina-inicial-reset:
####
####
if [ "$first_option" = "reset" ]; then $give_cover
echo "$ralla [ $first_option ] [ Reset the firewall ]"
echo $header_lineal
$fiptables stop &> /dev/null
$fiptables continue &> /dev/null
echo "$rallica [OK FIREWALL RESETED]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-reset:
##############################       english: wizard-mini: wizard-mini
##############################       spanish: wizard-mini: mini-asistente 
#### :rutina-inicial-wizard-mini:
####
####
if [ "$first_option" = "wizard-mini" ]; then $genfiles
archivo="$first_option"
cp "$defaultminicfg_eng" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" \
0 0 2> "$directory_config/$archivo"
clear
if [  -s "$directory_config/$archivo" ]; then $nada ; 
dialog --msgbox "wizard full ready" 0 0 ; clear ; $fiptables custom "$archivo" ; $fiptables listnum ;
else rm "$directory_config/$archivo" ; dialog --msgbox "Wizard full canceled" 0 0 ; clear ; fi
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-wizard-mini:
##############################       english: wizard-full: wizard-full
##############################       spanish: wizard-full: asistente 
#### :rutina-inicial-wizard-full:
####
####
if [ "$first_option" = "wizard-full" ]; then $genfiles
archivo="$first_option"
cp "$defaultfullcfg_eng" "/tmp/fiptables-$archivo"
dialog --no-cancel --title "MODIFY FILE" --editbox "/tmp/fiptables-$archivo" \
0 0 2> "$directory_config/$archivo"
clear
if [  -s "$directory_config/$archivo" ]; then $nada ; 
$dialog --msgbox "Wizard full ready" 0 0 ; clear ; $fiptables custom "$archivo" ; $fiptables listnum ;
else rm "$directory_config/$archivo" ; dialog --msgbox "Wizard full canceled" 0 0 ; clear ; fi
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-wizard-full:
############################       english: load: load the rules in iptables format
############################       spanish: load: carga las reglas en formato iptables
#### :rutina-inicial-load:
####
####
 if [ "$first_option" = "load" ]; then $give_cover ; $give_autosave
####
####
#### English: Void in second option
####
####
 if [ "second_option" = "$NULL" ]; then
 $fiptables names; echo "$cinco [ usage: $fiptables load fw-to-load ] [ See: $fiptables names ]" ; exit ; fi
####
####
#### English if do exist second option in load
####
####
 if [ -f $directory_fwrecover/$second_option-nft-ipv4 ] || [ -f $directory_fwrecover/$second_option-legacy-ipv4 ] ; then 
####
####
#### English: Remove all rules
####
####
 $fiptables eraserules &> /dev/null
####
####
#### English: Load all rules 
####
####
 if [ -f "$directory_fwrecover/$second_option-ebtables" ]; then
 cat $directory_fwrecover/$second_option-ebtables | $command_ebtables-restore &> /dev/null; fi
####
####
 if [ -f "$directory_fwrecover/$second_option-arptables" ]; then
 cat $directory_fwrecover/$second_option-arptables | $command_arptables-restore &> /dev/null; fi
####
#### 
 cat $directory_fwrecover/$second_option-nft-ipv4 |  $command_iptables_nft-restore       
 cat $directory_fwrecover/$second_option-legacy-ipv4 | $command_iptables_legacy-restore  
 cat $directory_fwrecover/$second_option-nft-ipv6 | $command_ip6tables_nft-restore       
 cat $directory_fwrecover/$second_option-legacy-ipv6 | $command_ip6tables_legacy-restore 
 echo "$rallica [ OK FIREWALL LOADED ] [ $second_option ]"
####
####
#### english: if not exists #### spanish: si no existe
####
####
 else
 $fiptables names
 echo "$rallica [ usage: $fiptables load fw-to-load ] [ See: $fiptables names ]"
 fi 
####
####
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-load:
############################       english: save: save the rules in iptables format
############################       spanish: save: guarda las reglas en formato iptables
#### :rutina-inicial-save:
####
####
 if [ "$first_option" = "save" ]; then $give_cover
 case "$second_option" in
 "$NULL") echo "$cinco Use in the command line: $fiptables save fw-to-save" ; exit ;;
 *) archivofin="$second_option" ;; 
 esac
####
####
  if [ "$command_arptables" = "$NULL"  ]; then $nada ; else
  $command_arptables-save          &> $directory_fwrecover/$archivofin-arptables; fi
  if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
 $command_ebtables-save           &> $directory_fwrecover/$archivofin-ebtables; fi
####
####
 $command_iptables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv4     
 $command_iptables_legacy-save    &> $directory_fwrecover/$archivofin-legacy-ipv4  
 $command_ip6tables_nft-save      &> $directory_fwrecover/$archivofin-nft-ipv6     
 $command_ip6tables_legacy-save   &> $directory_fwrecover/$archivofin-legacy-ipv6  
####
####
 echo "$rallica [ OK FIREWALL SAVED ] [ $archivofin ]"
 if [ "$command_arptables" = "$NULL"  ]; then $nada ; else
 ls -l $directory_fwrecover/$archivofin-arptables; fi
 if [ "$command_ebtables"  = "$NULL"  ]; then $nada ; else
 ls -l $directory_fwrecover/$archivofin-ebtables; fi
 ls -l $directory_fwrecover/$archivofin-nft-ipv4
 ls -l $directory_fwrecover/$archivofin-nft-ipv6
 ls -l $directory_fwrecover/$archivofin-legacy-ipv4
 ls -l $directory_fwrecover/$archivofin-legacy-ipv6
 echo "$rallica [ OK FIREWALL LISTED ] [ $archivofin ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-save:
############################       english: show: show the rules from one firewall in iptables format
############################       spanish: show: muestra las reglas de un firewall en formato iptables
#### :rutina-inicial-show:
####
####
 if [ "$first_option" = "show" ]; then $genfiles ; $give_cover
 echo "$ralla [ $first_option ] [ show one firewall saved ]"
 echo $header_lineal
 case "$second_option" in
 "$NULL") $fiptables names; echo "$cinco Use in the command line: $fiptables show file-to-show" ; exit ;;
 *) archivofin=$(sed 's/\///g' <<< "$second_option") ;;
 esac
 ls -l $directory_fwrecover/$archivofin-arptables
 ls -l $directory_fwrecover/$archivofin-ebtables
 ls -l $directory_fwrecover/$archivofin-nft-ipv4
 ls -l $directory_fwrecover/$archivofin-nft-ipv6
 ls -l $directory_fwrecover/$archivofin-legacy-ipv4
 ls -l $directory_fwrecover/$archivofin-legacy-ipv6
 echo "$rallica [ OK FIREWALL LISTED ] [ $archivofin ]"
 echo "$cincuenta $archivofin-arptables"
 cat $directory_fwrecover/$archivofin-arptables
 echo "$cincuenta $archivofin-ebtables"
 cat $directory_fwrecover/$archivofin-ebtables
 echo "$cincuenta $archivofin-nft-ipv4"
 cat $directory_fwrecover/$archivofin-nft-ipv4
 echo "$cincuenta $archivofin-legacy-ipv4"
 cat $directory_fwrecover/$archivofin-legacy-ipv4
 echo "$cincuenta $archivofin-nft-ipv6"
 cat $directory_fwrecover/$archivofin-nft-ipv6
 echo "$cincuenta archivofin-legacy-ipv6"
 cat $directory_fwrecover/$archivofin-legacy-ipv6
 echo "$rallica [ OK FIREWALL READED ] [ $archivofin ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-show:
############################       english: actual: show actuall firewall
############################       spanish: actual: muestra las reglas actuales
#### :rutina-inicial-actual:
####
####
 if [ "$first_option" = "actual" ]; then $genfiles ; $give_cover
 echo "$ralla [ $first_option ] [ show the last firewall saved ]"
 echo $header_lineal
 $command_arptables-save          &> $directory_fwrecover/fiptables-actual-arptables
 $command_ebtables-save           &> $directory_fwrecover/fiptables-actual-ebtables   
 $command_iptables_nft-save       &> $directory_fwrecover/fiptables-actual-nft-ipv4   
 $command_iptables_legacy-save    &> $directory_fwrecover/fiptables-actual-legacy-ipv4
 $command_ip6tables_nft-save      &> $directory_fwrecover/fiptables-actual-nft-ipv6   
 $command_ip6tables_legacy-save   &> $directory_fwrecover/fiptables-actual-legacy-ipv6
 echo "$cincuenta arptables $cinco"
 cat $directory_fwrecover/fiptables-actual-arptables
 echo "$cincuenta ebtables $cinco"
 cat $directory_fwrecover/fiptables-actual-ebtables
 echo "$cincuenta nft with ipv4 $cinco"
 cat $directory_fwrecover/fiptables-actual-nft-ipv4
 echo "$cincuenta legacy with ipv4 $cinco"
 cat $directory_fwrecover/fiptables-actual-legacy-ipv4
 echo "$cincuenta nft with ipv6 $cinco"
 cat $directory_fwrecover/fiptables-actual-nft-ipv6
 echo "$cincuenta legacy with ipv6 $cinco"
 cat $directory_fwrecover/fiptables-actual-legacy-ipv6
 echo "$rallica  [ OK ACTUAL FIREWALL READED ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-actual:
##############################       english: stop: stop firewall
##############################       spanish: stop: para el firewall
#### :rutina-inicial-stop:
####
####
if [ "$first_option" = "stop" ]; then $nada
echo $head_principal
echo "$ralla [ $first_option ] [ Stop the firewall ]"
echo $header_lineal
####
####
#### english: save actual fw #### spanish: guarda actual fw
####
####
$command_arptables-save &> $directory_fwrecover/fiptables-stoped-arptables
$command_ebtables-save &> $directory_fwrecover/fiptables-stoped-ebtables             
$command_iptables_nft-save &> $directory_fwrecover/fiptables-stoped-nft-ipv4         
$command_iptables_legacy-save &> $directory_fwrecover/fiptables-stoped-legacy-ipv4   
$command_ip6tables_nft-save &> $directory_fwrecover/fiptables-stoped-nft-ipv6        
$command_ip6tables_legacy-save &> $directory_fwrecover/fiptables-stoped-legacy-ipv6  
####
####
#### english: erase the rules #### spanish: borra las reglas
####
####
$fiptables eraserules &> /dev/null
echo "$rallica [ OK FIREWALL STOPED ]"
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-stop:
##############################       english: continue: continue the firewall
##############################       spanish: continue: continua el firewall
#### :rutina-inicial-continue:
####
####
 if [ "$first_option" = "continue" ]; then $nada
 echo $head_principal
 echo "$ralla [ $first_option ] [ Continue the stoped firewall ]"
 echo $header_lineal
####
####
#### english: restore last fw #### spanish: restaura el ultimo fw
####
####
 cat $directory_fwrecover/fiptables-stoped-arptables | $command_arptables-restore
 cat $directory_fwrecover/fiptables-stoped-ebtables | $command_ebtables-restore
 cat $directory_fwrecover/fiptables-stoped-nft-ipv4 | $command_iptables_nft-restore  
 cat $directory_fwrecover/fiptables-stoped-legacy-ipv4 | $command_iptables_legacy-restore  
 cat $directory_fwrecover/fiptables-stoped-nft-ipv6 | $command_ip6tables_nft-restore  
 cat $directory_fwrecover/fiptables-stoped-legacy-ipv6 | $command_ip6tables_legacy-restore  
 echo "$rallica [ OK FIREWALL CONTINUED ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-continue:
############################       english: ping-ip4: ping icmp with ipv4
############################       spanish: ping-ip4: ping icmp with ipv6
#### :rutina-inicial-ping-ip4:
####
####
 if [ "$first_option" = "ping-ip4" ]; then $give_cover
 echo "$ralla [ $first_option ]  [ ping ip or host with ipv4 ]"
 echo $header_lineal
 case $command_ping in "$NULL") echo " Install ping" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fiptables stop
 echo "$cinco [ $first_option: ] [ for default max $server_waiting seconds ]"
 echo "$cinco ping -4 -c 5 -A $server_ping_ipv4"
 timeout -s SIGINT -v $server_waiting $command_ping -4 -c 5 -A $server_ping_ipv4
 $fiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ping-ip4:
############################       english: ping-ip6: ping icmp with ipv6
############################       spanish: ping-ip6: ping icmp con ipv6
#### :rutina-inicial-ping-ip6:
####
####
 if [ "$first_option" = "ping-ip6" ]; then $give_cover
 echo "$ralla [ $first_option ] [ ping one ip or host with ipv6 ]"
 echo $header_lineal
 case $command_ping in "$NULL") echo " Install ping" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fiptables stop
 echo "$cinco [ $first_option: ] [ for default max $server_waiting seconds ]"
 echo "$cinco ping -6 -c 5 -A $server_ping_ipv6"
 timeout -s SIGINT -v $server_waiting $command_ping -6 -c 5 -A $server_ping_ipv6
 $fiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ping-ip6:
############################       english: tracetcp-ip4: traceroute with tcp and ipv6
############################       spanish: tracetcp-ip4: traceroute con tcp y ipv4
#### :rutina-inicial-tracetcp-ip4:
####
####
 if [ "$first_option" = "tracetcp-ip4" ]; then $give_cover
 echo "$ralla [ $first_option ] [ trace ip or host with ipv4 ]"
 echo $header_lineal
 case $command_traceroute in "$NULL") echo " Install traceroute" ; exit ;;  esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fiptables stop
 echo "$cinco [ $first_option: ] [ for default max $server_waiting seconds ]"
 echo "$cinco traceroute -4 -T $server_traceroute_ipv4"
 timeout -s SIGINT -v $server_waiting $command_traceroute -4 -T $server_traceroute_ipv4
 echo "$cinco [ $first_option: ] [ for default max $server_waiting seconds ]"
 $fiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-tracetcp-ip4:
############################       english: tracetcp-ip6: traceroute with tcp and ipv6
############################       spanish: tracetcp-ip6: traceroute con tcp e ipv6
#### :rutina-inicial-tracetcp-ip6:
####
####
 if [ "$first_option" = "tracetcp-ip6" ]; then $give_cover
 echo "$ralla [ $first_option ] [ trace one ip or host with ipv6 ]"
 echo $header_lineal
 case $command_traceroute in "$NULL") echo " Install traceroute" ; exit ;; esac
####
####
#### english: launch #### spanish: lanza
####
####
 $fiptables stop
 echo "$cinco [ $first_option: ] [ for default max $server_waiting seconds ]"
 echo "$cinco traceroute -6 -T $server_traceroute_ipv6"
 timeout -s SIGINT -v $server_waiting $command_traceroute -6 -T $server_traceroute_ipv6
 $fiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-tracetcp-ip6:
############################       english: host: host to resolve ip
############################       spanish: host: host to resolve ip
#### :rutina-inicial-host:
####
####
 if [ "$first_option" = "host" ]; then $give_cover
 echo "$ralla [ $first_option ] [ resolve one ip or host ]"
 echo $header_lineal
 case $command_host in "$NULL") echo " Install host" ; exit ;; esac
 case "$second_option" in
 "$NULL") echo "$cinco Please select a one host to launch host"
 echo "$rallica Selecting host to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$cinco host $trazador"
 $command_host $trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-host:
############################       english: dig: host to resolve ip
############################       spanish: dig: host to resolve ip
#### :rutina-inicial-dig:
####
####
 if [ "$first_option" = "dig" ]; then $give_cover
 echo "$ralla [ $first_option ] [ resolve one ip or host ]"
 echo $header_lineal
 case $command_dig in "$NULL") echo " Install dig" ; exit ;; esac
 case "$second_option" in
 "$NULL") echo "$cinco Please select a one host to launch dig"
 echo "$rallica Selecting host to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$cinco dig $trazador"
 $command_dig $trazador | grep ^$trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-dig:
############################       english: resolveip: host to resolve ip and viceversa
############################       spanish: resolveip: host to resolve ip and viceversa
#### :rutina-inicial-resolveip:
####
####
 if [ "$first_option" = "resolveip" ]; then $give_cover
 echo "$ralla [ $first_option ] [ resolve one ip or host ]"
 echo $header_lineal
 case $command_resolveip in "$NULL") echo " Install resolveip" ; exit ;; esac
 case "$second_option" in
 "$NULL") echo "$cinco Please select a one host to launch resolveip"
 echo "$rallica Selecting host to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$cinco resolveip $trazador"
 $command_resolveip $trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-resolveip:
############################       english: geoip: host to resolve and locate
############################       spanish: geoip: host to resolve and locate
#### :rutina-inicial-geoip:
####
####
 if [ "$first_option" = "geoip" ]; then $give_cover
 echo "$ralla [ $first_option ] [ resolve the location to one ip or host ]"
 echo $header_lineal
 case $command_geoiplookup in "$NULL") echo " Install geoip-bin" ; exit  ;; esac
 case "$second_option" in
 "$NULL") echo "$cinco Selecting host geoip to fast.com for default" ; trazador="fast.com" ;;
 *) trazador="$second_option" ;; esac
 echo "$cinco geoiplookup -i $trazador"
 $command_geoiplookup -i $trazador
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-geoip:
############################       english: ntpdate: update the date and time
############################       spanish: ntpdate: actualiza la fecha y hora
#### :rutina-inicial-ntpdate:
####
####
 if [ "$first_option" = "ntpdate" ]; then $nada
 echo "$ralla [ $first_option ] [ update the computer time and date from internet ]"
 echo $header_lineal
 echo "$rallica Old date: $($command_date)"
 echo "$rallica [ Updating the time and the date .. ]"
 pool0=0.debian.pool.ntp.org
 pool1=1.debian.pool.ntp.org
 pool2=2.debian.pool.ntp.org
 pool3=3.debian.pool.ntp.org
 $favorite_date_command $pool0
 echo "$rallica New date: $($command_date)"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ntpdate:
############################       english: scan-tcp: scan one net per tcp
############################       spanish: scan-tcp: rastrea una red por tcp
#### :rutina-inicial-scan-tcp:
####
####
if [ "$first_option" = "scan-tcp" ]; then $give_cover
 echo "$ralla [ $first_option ] [ scan with nmap tcp ]"
 echo $header_lineal
 echo "$cinco [ Usage: ] [ nmap $first_option ip/mask ]"
 echo "$cinco [ Notice:] [ Stoped firewall while launching nmap ]"
 case $command_nmap in $NULL) echo install nmap ; exit ;; esac
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$cincuenta [ Doing nmap ]"
 $command_nmap -sT $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fiptables continue
####
####
 echo "$cinco [ Notice: ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-tcp:
############################       english: scan-syn: scan one net per syn
############################       spanish: scan-syn: rastrea una por peticiones
#### :rutina-inicial-scan-syn:
####
####
 if [ "$first_option" = "scan-syn" ]; then $give_cover
 echo "$ralla [ $first_option ] [ scan with nmap syn ]"
 echo $header_lineal
 echo "$cinco [ Usage: ] [ nmap $first_option ip/mask ]"
 echo "$cinco [ Notice: ] [ Stoped firewall while launch nmap ]"
 case $command_nmap in "$NULL") echo install nmap ; exit ;; esac
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$cincuenta [ Doing nmap ]"
 $command_nmap -sF $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fiptables continue
 echo "$cinco [ Notice: ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-syn:
############################       english: scan-fin: scan one net per conexiones
############################       spanish: scan-fin: rastrea una red por conexiones
#### :rutina-inicial-scan-fin:
####
####
 if [ "$first_option" = "scan-fin" ]; then $give_cover
 echo "$ralla [ $first_option ] [ scan with nmap fin ]"
 echo $header_lineal
 echo "$cinco [ Usage: ] [ nmap $first_option ip/mask ]"
 echo "$cinco [ Notice: ] [ Stoped firewall while launch nmap ]"
 case $command_nmap in "$NULL") echo install nmap ; exit ;; esac
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$cincuenta [ Doing nmap ]"
 $command_nmap -sF $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fiptables continue
####
####
 echo "$cinco [ Notice: ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-fin:
############################       english: scan-udp: scan one net per udp
############################       spanish: scan-udp: rastrea una red por udp
#### :rutina-inicial-scan-udp:
####
####
 if [ "$first_option" = "scan-udp" ]; then $give_cover
 echo "$ralla [ $first_option ] [ scan with nmap udp ]"
 echo $header_lineal
 echo "$cinco [ Usage: ] [ nmap $first_option ip/mask ]"
 echo "$cinco [ Notice: ] [ Stoped firewall while launch nmap ]"
 case $command_nmap in "$NULL") echo install nmap ; exit ;; esac
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
 $fiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$cincuenta [ Doing nmap ]"
 $command_nmap -sU $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fiptables continue
####
####
 echo "$cinco [ Notice: ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-udp:
############################       english: scan-ping: scan one net per ping
############################       spanish: scan-ping: rastrea una red por ping
#### :rutina-inicial-scan-ping:
####
####
 if [ "$first_option" = "scan-ping" ]; then $give_cover
 echo "$ralla [ $first_option ] [ scan with nmap ping ]"
 echo $header_lineal
 echo "$cinco [ Usage: ] [ nmap $first_option ip/mask ]"
 echo "$cinco [ Notice: ] [ Stoped firewall while launch nmap ]"
 case $command_nmap in "$NULL") echo install nmap ; exit ;; esac
####
####
#### english: stop the firewall #### spanish: para el firewall
####
####
$fiptables stop
####
####
#### english: launch nmap #### spanish: lanza nmap
####
####
 echo "$cincuenta [ Doing nmap ]"
 $command_nmap -sn $2
####
####
#### english: continue the firewall #### spanish: continua el firewall
####
####
 $fiptables continue
 echo "$cinco [ Notice: ] [ Reloaded firewall rules after run nmap ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-scan-ping:
############################       english: ram-free: give one freedom to ram innecesary
############################       spanish: ram-free: limpia la memoria ram
#### :rutina-inicial-ram-free:
####
####
 if [ "$first_option" = "ram-free" ]; then $give_cover
 echo "$ralla [ $first_option ] [ freedom from innecesary ram ]"
 echo $header_lineal
 case $command_tee in "$NULL") echo "$cinco Install dd command"; exit ;; esac
 echo " Actual Memory"
 free -hw && sync
 echo 3 | $command_tee /proc/sys/vm/drop_caches &> /dev/null
 echo " Memory ram freedom .. Actual memory now"
 free -hw
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ram-free:
############################       english: disc-speed: Show the speed of disc
############################       spanish: disc-speed: Muestra la velocidad de el disco
#### :rutina-inicial-disc-speed:
####
####
 if [ "$first_option" = "disc-speed" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ test the disc speed ]"
 echo $header_lineal
 case $command_dd in "$NULL") echo "$cinco Install dd command"; exit ;; esac
 echo "$rallica Testing speed with the temporal file /root/borrame.img.img about 100Mb"
####
####
 $command_dd if=/dev/zero of=/root/borrame.img.img status=progress bs=1M count=100
 rm /root/borrame.img.img &> /dev/null
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-disc-speed:
############################       english: ram-speed: Show the speed of ram
############################       spanish: ram-speed: Muestra la velocidad de la ram
#### :rutina-inicial-ram-speed:
####
####
 if [ "$first_option" = "ram-speed" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ test the ram speed ]"
 echo $header_lineal
 case $command_dd in "$NULL") echo "$cinco Install dd command"; exit ;; esac
 case "$(mount | grep -i "/tmp type tmpfs" | wc -l)" 
 in "1")  ;; *) echo "$cinco Mount /tmp with tmpfs so: mount -t tmpfs tmpfs /tmp"; exit ;; esac
 echo "$rallica Test speed with the temporal file /tmp/borrame.img.img about 100Mb"
####
####
 $command_dd if=/dev/zero of=/tmp/borrame.img.img status=progress bs=1M count=100
 rm /tmp/borrame.img.img &> /dev/null
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-ram-speed:
############################       english: gl-speed: show frammes por seconds with mesa graphicall 
############################       spanish: gl-speed: muestra los fotogramas por segundo con graphicos mesa
#### :rutina-inicial-gl-speed:
####
####
 if [ "$first_option" = "gl-speed" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ test gl mesa3D speed ] [ for default max $server_waiting seconds ]"
 echo $header_lineal
 case $command_glxgears in "$NULL") echo "$cinco Install mesa utils"; exit ;; esac
 vblank_mode=0  timeout -s SIGINT -v $server_waiting $command_glxgears
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-gl-speed:
############################       english: radio: url from one radio mp3
############################       spanish: radio: url de una radio en mp3
#### :rutina-inicial-radio:
####
####
 if [ "$first_option" = "radio" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ Listen radio online ]"
 echo "$rallica [ for choose radio see: $fiptables show-default ] [ only protocol http ]"
 echo "$rallica [ Usually it do not working like root, probe as user ]"
 echo "$rallica [ $favorite_radio_command $radio ]"
 echo $header_lineal
 echo $footer_lineal
 sudo -u $(logname) $favorite_radio_command $radio
 exit; fi
####
####
#### :rutina-final-radio:
############################## english: log-fwiptables: Read log /var/log/fwiptables  ##############################
############################## spanish: log-fwiptables: Lee log  /var/log/fwiptables  ##############################
#### :rutina-inicial-log-fwiptables:
####
####
 if [ "$first_option" = "log-fwiptables" ] ; then  $give_cover
 echo "$ralla [ $first_option ] [ show /var/log/fwiptables ]"
 cat /var/log/fwiptables
 echo "$ralla [ this file is /var/log/fwiptables ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-log-fwiptables:
############################       english: log-ssh: log from ssh server
############################       spanish: log-ssh: log desde el servidor de ssh
#### :rutina-inicial-log-ssh:
####
####
 if [ "$first_option" = "log-ssh" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ search sshd in logs ]"
 echo $header_lineal
 find /var/log -maxdepth 5 -type f | xargs zgrep -a -i "ssh"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-log-ssh:
############################       english: log-search: log from a one search
############################       spanish: log-search: log desde una busqueda
#### :rutina-inicial-log-search:
####
####
 if [ "$first_option" = "log-search" ]; then $give_cover
 echo "$cinco [ $first_option $second_option ]  [ search a one pattern in logs ]"
 echo $header_lineal
 case "$second_option" in
 $NULL) echo "$cinco use: $fiptables $first_option pattern" ;;
 *) find /var/log -maxdepth 5 -type f | xargs zgrep -a -i "$second_option" ;;
 esac
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-log-search:
############################       english: dev-version: about of program
############################       spanish: dev-version: acerca del programa
#### :rutina-inicial-dev-version:
####
####
 if [ "$first_option" = "dev-version" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the link to dev version from git repository ]"
 echo $header_lineal
 echo $fweb_development
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-dev-version:
############################       english: dev-changes: changes in the program
############################       spanish: dev-changes: cambios en el programa
#### :rutina-inicial-dev-changes:
####
#### 
 if [ "$first_option" = "dev-changes" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the link to dev-changes from git repository ]"
 echo $header_lineal
 $favorite_text_browser -source $fweb_changes
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-dev-changes:
############################       english: new-versions: about of program
############################       spanish: new-versions: acerca del programa
#### :rutina-inicial-new-versions:
####
####
 if [ "$first_option" = "new-versions" ]; then $give_cover
 echo "$ralla [ $first_option ] [ show the new versions in sourceforge page ]"
 echo $header_lineal
 case $favorite_text_browser in 
 "$NULL") echo "Install a one text browser like:   elinks, or lynx, or links, or links2"; exit; esac
 echo "$rallica list new-versions in the last week with browser $favorite_text_browser"
 echo $ralla
 $favorite_text_browser -dump $fweb_newfiles | egrep fwiptables-v | sed s/\<//g |sed s/\>//g 
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-new-versions:
############################       english: lpinfo: list printers
############################       spanish: lpinfo: lista impresoras
#### :rutina-inicial-lpinfo:
####
####
 if [ "$first_option" = "lpinfo" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ list printers ]"
 echo $header_lineal
 echo $ralla
 lpinfo -v -l
 echo $ralla
 echo " Use lp or lpr to print with those printers, or lpadmin to admin."
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lpinfo:
############################       english: lsblk: list disks
############################       spanish: lsblk: lista discos
#### :rutina-inicial-lsblk:
####
####
 if [ "$first_option" = "lsblk" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ list disks ]"
 echo $header_lineal
 lsblk
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsblk:
############################       english: lsusb: list disks
############################       spanish: lsusb: lista discos
#### :rutina-inicial-lsusb:
####
####
 if [ "$first_option" = "lsusb" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ list usb ]"
 echo $header_lineal
 lsusb
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsusb:
############################       english: lscpu: list cpu
############################       spanish: lscpu: lista cpu
#### :rutina-inicial-lscpu:
####
####
 if [ "$first_option" = "lscpu" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ list cpu ]"
 echo $header_lineal
 lscpu
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lscpu:
############################       english: lspci: list disks
############################       spanish: lspci: lista discos
#### :rutina-inicial-lspci:
####
####
 if [ "$first_option" = "lspci" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ list cpi hardware sockets ]"
 echo $header_lineal
 lspci
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lspci:
############################       english: lsgpu: list gpu
############################       spanish: lsgpu: lista gpu
#### :rutina-inicial-lsgpu:
####
####
 if [ "$first_option" = "lsgpu" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ list gpu ]"
 echo $header_lineal
 lsgpu
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lsgpu:
############################       english: lsusb: list hardware
############################       spanish: lsusb: lista hardware
#### :rutina-inicial-lshw:
####
####
 if [ "$first_option" = "lshw" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ list hardware ]"
 echo $header_lineal
 lshw
 echo $ralla
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-lshw:
############################       english: hosts: show /etc/hosts
############################       spanish: hosts: muestra /etc/hosts
#### :rutina-inicial-hosts:
####
####
 if [ "$first_option" = "hosts" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the file /etc/hosts ]"
 echo $header_lineal
 cat /etc/hosts
 echo $ralla
 echo "$rallica This file is /etc/hosts"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-hosts:
############################       english: protocols: show /etc/protocols
############################       spanish: protocols: muestra /etc/protocols
#### :rutina-inicial-protocols:
####
####
 if [ "$first_option" = "protocols" ]; then  $give_cover
  echo "$ralla [ $first_option ] [ show the file /etc/protocols ]"
 echo $header_lineal
 cat /etc/protocols  | sed s/\&//g 
 echo $ralla
 echo "$rallica This file is /etc/protocols"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-protocols:
############################       english: services: show /etc/services
############################       spanish: services: muestra /etc/services
#### :rutina-inicial-services:
####
####
 if [ "$first_option" = "services" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the file /etc/services ]"
 echo $header_lineal
 cat /etc/services | sed s/\&//g 
 echo $ralla
 echo "$rallica This file is /etc/services"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-services:
############################       english: host.allow: show /etc/host.allow
############################       spanish: host.allow: muestra /etc/host.allow
#### :rutina-inicial-host.allow:
####
####
 if [ "$first_option" = "hosts.allow" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the file /etc/allow ]"
 echo $header_lineal
 cat /etc/hosts.allow
 echo $ralla
 echo "$rallica This file is /etc/hosts.allow"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-host.allow:
############################       english: hosts.deny: show /etc/host.deny
############################       spanish: hosts.deny: muestra /etc/host.deny
#### :rutina-inicial-hosts.deny:
####
####
 if [ "$first_option" = "hosts.deny" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the file /etc/deny ]"
 echo $header_lineal
 cat /etc/hosts.deny
 echo $ralla
 echo "$rallica This file is /etc/hosts.deny"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-hosts.deny:
############################       english: resolv.conf: show /etc/resolv.conf
############################       spanish: resolv.conf: muestra /etc/resolv.conf
#### :rutina-inicial-resolv.conf:
####
####
 if [ "$first_option" = "resolv.conf" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show the file /resolv.conf ]"
 echo $header_lineal
 cat /etc/resolv.conf
 echo $ralla
 echo "$rallica This file is /etc/resolv.conf"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-resolv.conf:
############################       english: about: about of program
############################       spanish: about: acerca del programa
#### :rutina-inicial-about:
####
####
if [ "$first_option" = "about" ]; then  $give_cover
echo "$ralla [ $first_option ] [ about $fiptables ]"
echo $header_lineal
echo
echo "$tab [Fran FireWall iptables Generator]"
echo "$cincuenta"
echo ""
echo "$tab [Exec name]"
echo "  $fiptables"
echo ""
echo "$tab [Program Name]"
echo "  $fprogram"
echo ""
echo "$tab [Program Description]"
echo "  $fdescription"
echo ""
echo "$tab [Program Install]"
echo "  chmod ugo+x $fiptables"
echo "  ./$fiptables install"
echo "  And then fwiptables is in $directory_fiptables/$fiptables"
echo
echo "$tab [Devevelopments version program]"
echo "  The fran iptables ver in development in git code at sourceforge:"
echo "  $fweb_development"
echo ""
echo "$tab [New versions program]"
echo "  The last versions in files repository at sourceforge:"
echo ""
echo "  $fweb_newfiles"
echo ""
echo "$tab [Access web with all versions program]"
echo "  The fran iptables all versions in code repository at sourceforge:"
echo ""
echo "  $fweb_tree"
echo ""
echo "$tab [Git clone with all versions program]"
echo "  The fran iptables all versions in code repository at sourceforge:"
echo ""
echo "  git clone $fweb_git"
echo
echo "$tab [Program License]"
echo "  $flicense"
echo ""
echo "$cincuenta"
echo ""
echo ""
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-about:
############################       english: info-system: get info system
############################       spanish: info-system: da informacion del sistema
#### :rutina-inicial-info-system:
####
####
 if [ "$first_option" = "info-system" ]; then  $give_cover
 echo "$ralla [ $first_option ] [ show info about system ]"
 echo $header_lineal
 echo "$tab [ System info ] [ Distro ] "
 cat /etc/*-release | grep -i pretty_name | cut -d "=" -f 2 | sed 's/\"//g'
 echo $ralla
 echo "$tab [ System info ][ Kernel Linux ]"
 $command_uname -srom
 echo $ralla
 echo "$tab [ Boot system ] [ it works with pid number 1 ]"
 ps -p1 
 echo "$tab Behind /proc/1/com $(cat /proc/1/comm)"
 echo $ralla
 echo "$tab [ System info ] [ Processor ]"
 lscpu | egrep -i "socket|Model name|cpu max"
 echo $ralla
 echo "$tab [ System info ] [ Memory RAM ]"
 free -h
 echo $ralla
 echo "$tab [ System info ] [ Disks ]"
 df -h -x tmpfs
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-system:
############################       english: info-net: get net info
############################       spanish: info-net: da informacion de la red
#### :rutina-inicial-info-net:
####
####
 if [ "$first_option" = "info-net" ]; then $give_cover
 echo "$ralla [ $first_option ] [ show info about net ]"
 echo $header_lineal
 echo $ralla
 echo "$rallica [ DEFAULT NETWORK ] [ INTERNET ROUTE ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab install ip"; fi
 $command_ip -4 route | grep -i default
 $command_ip -6 route | grep -i default
 echo $ralla
 echo "$tab [ Network Route ] [ Route ipv4 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab install ip"; fi
 $command_ip -4 route 
 echo $ralla
 echo "$tab [ Network Route ] [ Route ipv6 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab install ip"; fi
 $command_ip -6 route 
 echo $ralla
 echo "$tab [ Network Listen ] [ Listen ipv4 ]"
 if [ "$command_ss" = "$NULL" ] ; then echo "$tab install ss"; fi
 $command_ss -l4 | sed 's/   / /g'
 echo $ralla
 echo "$tab [ Network Listen ] [ Listen ipv6 ]"
 if [ "$command_ss" = "$NULL" ] ; then echo "$tab install ss"; fi
 $command_ss -l6 | sed 's/   / /g'
 echo $ralla
 echo "$tab [ private ip ] [ address ipv4 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab install ip"; fi
 $command_ip -4 address | grep -i inet | grep -iv "127.0.0.1"
 echo $ralla
 echo "$tab [ private ip ] [ address ipv6 ]"
 if [ "$command_ip" = "$NULL" ] ; then echo "$tab install ip"; fi
 $command_ip -6 address | grep -i inet | grep -iv "::1/128"
 echo $ralla
 echo "$tab [ public ip ] [ address ipv4 ]"
 if [ "$command_curl" = "$NULL" ] ; then echo "$tab install curl"; fi
 public_ip4="$(timeout 5s $command_curl -s -4 http://ifconfig.co/ip -w "\n")"
 echo "$tab $public_ip4"
 echo $ralla
 echo "$tab [ public ip ] [ address ipv6 ]"
 if [ "$command_curl" = "$NULL" ] ; then echo "$tab install curl"; fi
 public_ip6="$(timeout 5s $command_curl -s -6 http://ifconfig.co/ip -w "\n")"
 echo "$tab $public_ip6"
 echo $ralla
 echo "$tab [ proxy ip ] [ address proxy ]"
 echo "$tab Proxy http:    $http_proxy"
 echo "$tab Proxy https:   $https_proxy"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info-net:
############################       english: speed-ip4: speed from internet
############################       spanish: speed-ip4: velocidad desde internet
#### :rutina-inicial-speed-ip4:
####
####
 if [ "$first_option" = "speed-ip4" ]; then $give_cover
 echo "$ralla [ $first_option ] [ test speed ipv4 with internet ]"
 echo $header_lineal
 case "$command_iperf"  in  $NULL) echo "Install Iperf"; exit ;; esac
####
####
 $fiptables stop
 echo "$rallica [ Doing bandwidth in ipv4 to $serverip_iperf_ipv4 ] [ with max $server_waiting seconds ]"
 echo $ralla
 $command_iperf -c $serverip_iperf_ipv4 -t 4 -P 4 -p $serverport_iperf_ipv4 | grep SUM | sed s/SUM/net-speed/g
 $fiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-speed-ip4:
############################       english: speed-ip6: speed from internet
############################       spanish: speed-ip6: velocidad desde internet
#### :rutina-inicial-speed-ip6:
####
####
 if [ "$first_option" = "speed-ip6" ]; then $give_cover
 echo "$ralla [ $first_option ] [ test speed ipv6 with internet ]"
 echo $header_lineal
 case "$command_iperf"  in  $NULL) echo "Install Iperf"; exit ;; esac
####
####
 $fiptables stop
 echo "$rallica [ Doing bandwidth in ipv6 to $serverip_iperf_ipv6 ] [ with max $server_waiting seconds ]"
 echo $ralla
 $command_iperf -c $serverip_iperf_ipv6 -V -t 4 -P 4 -p $serverport_iperf_ipv6 | grep SUM | sed s/SUM/net-speed/g
 $fiptables continue
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-speed-ip6:
############################       english: config-eng: several options to config in english
############################       spanish: config-eng: varias opciones para configurar en ingles
#### :rutina-inicial-config-eng:
####
####
if [ "$first_option" = "config-eng" ]; then $genfiles; $give_cover
 echo "$ralla [ $first_option ] [ show variables cfg from english configuration ]"
 echo $header_lineal
 cat  $defaultfullcfg_eng
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-config-eng:
############################       english: config-spa: several options to config in spanish
############################       spanish: config-spa: varias opciones para configurar en spanish
#### :rutina-inicial-config-spa:
####
####
 if [ "$first_option" = "config-spa" ]; then $genfiles; $give_cover
 echo "$ralla [ $first_option ] [ show variables cfg from spanish configuration ]"
 echo $header_lineal
 cat $defaultfullcfg_spa
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-config-spa:
############################       english: info: information of one utility group
############################       spanish: info: informacion de un grupo de utilidades
#### :rutina-inicial-info:
####
####
 if [ "$first_option" = "info" ]; then $nada
 if [ "$second_option" = "control-guide" ]; then $fiptables control-guide ; exit ; fi
 if [ "$second_option" = "control-rules" ]; then $fiptables control-rules ; exit ; fi
 if [ "$second_option" = "list-rules" ]; then $fiptables list-rules ; exit ; fi
 if [ "$second_option" = "user-interface" ]; then $fiptables user-interface ; exit ; fi
 if [ "$second_option" = "launch-rules" ]; then $fiptables launch-rules ; exit ; fi
 if [ "$second_option" = "launch-custom" ]; then $fiptables launch-custom ; exit ; fi
 if [ "$second_option" = "tool-sockets" ]; then $fiptables tool-sockets ; exit ; fi
 if [ "$second_option" = "tool-forward" ]; then $fiptables tool-forward ; exit ; fi
 if [ "$second_option" = "tool-tcp" ]; then $fiptables tool-tcp ; exit ; fi
 if [ "$second_option" = "tool-udp" ]; then $fiptables tool-udp ; exit ; fi
 if [ "$second_option" = "tool-icmp" ]; then $fiptables tool-icmp ; exit ; fi
 if [ "$second_option" = "tool-nmap" ]; then $fiptables tool-nmap ; exit ; fi
 if [ "$second_option" = "tool-sudo" ]; then $fiptables tool-sudo ; exit ; fi
 if [ "$second_option" = "tool-install" ]; then $fiptables tool-install ; exit ; fi
 if [ "$second_option" = "tool-blacklist" ]; then $fiptables tool-blacklist ; exit ; fi
 if [ "$second_option" = "tool-dev" ]; then $fiptables tool-dev ; exit ; fi
 if [ "$second_option" = "tool-system" ]; then $fiptables tool-system ; exit ; fi
 if [ "$second_option" = "show-hardware" ]; then $fiptables show-hardware ; exit ; fi
 if [ "$second_option" = "show-etc" ]; then $fiptables show-etc ; exit ; fi
 if [ "$second_option" = "show-log" ]; then $fiptables show-log ; exit ; fi
 if [ "$second_option" = "show-about" ]; then $fiptables show-about ; exit ; fi
 if [ "$second_option" = "show-help" ]; then $fiptables show-help ; exit ; fi
####
####
 $give_cover
 echo $header_ender
 echo "$ralla [ $first_option ] [ info group ]"
 echo $header_lineal
 echo $ralla
 echo
 echo "$tab [ launch: ] [ $fiptables info group ]"
 echo
 echo "$tab [ group list: ]"
 echo
echo "$tab" "$tab"  "     | info |                      | Group options |                         "
echo "$tab" "$tab"  "         control-guide   control-rules   user-interface   list-rules         " 
echo "$tab" "$tab"  "         launch-rules    launch-custom   tool-sockets     tool-forward       " 
echo "$tab" "$tab"  "         tool-tcp        tool-udp        tool-icmp        tool-nmap          "
echo "$tab" "$tab"  "         tool-sudo       tool-system     tool-install     tool-blacklist     "
echo "$tab" "$tab"  "         tool-dev        show-hardware   show-etc         show-log           "
echo "$tab" "$tab"  "         tool-about      show-help       show-example                        "
 echo
 echo "$tab [ Example: ] [ $fiptables info user-interface ] [ OR ] [ $fiptables user-interface ]"
 echo $footer_lineal
 exit; fi
####
####
#### :rutina-final-info:
############################       english: help: the help option en english
############################       spanish: help: la opcion de ayuda en ingles
#### :rutina-inicial-help:
####
####
if [ "$first_option" = "help" ]; then $genfiles ; $give_cover
echo "$ralla [ $first_option ]  [ Principal options ] $cinco"
echo
echo
echo "$cinco         [ Launch guide ]"
echo
echo "  info-system: Show info system"
echo "     info-net: Show net info"
echo "  wizard-full: Asistant y launch complete firewall"
echo "  wizard-mini: Asistant y Launch simple firewall"
echo
echo "$cinco         [ Control the iptables rules ]"
echo
echo "         stop: Save and stop firewall iptables"
echo "     continue: Restore the firewall iptables stopped"
echo "        reset: Reset the firewall iptables"
echo "      list-fw: Alias to names"
echo "        names: List the firewall iptables saved"
echo "         show: show one firewall standard"
echo "         save: Save one firewall iptables"
echo "         load: Restore a one firewall iptables"
echo "       actual: show the firewall standard actual"
echo
echo "$cinco         [ List iptables rules] "
echo
echo "               [The filter table with names]"
echo "         list: like list-filter4 but hiding rules no used"
echo "        list6: like list-filter6 but hiding rules not used"
echo
echo "$cinco         [ List the others tables ]"
echo
echo "           listnum: List iptables filter rules from ipv4 in numbers"
echo "   list-forwardnum: List iptables filter rules foward in numbers"
echo "          listnum6: List iptables filter rules from ipv6 in numbers"
echo "  list-forwardnum6: List iptables filter rules forward ipv6 in numbers"
echo "      list-forward: List iptables filter rules forward ipv4"
echo "     list-forward6: List iptables filter rules forward ipv6"
echo
echo "      list-filter4: List iptables filter rules from ipv4"
echo "      list-filter6: List iptables filter rules from ipv6"
echo "         list-nat4: List iptables nat rules from ipv4"
echo "         list-nat6: List iptables nat rules from ipv6"
echo "      list-mangle4: List iptables mangle rules from ipv4"
echo "      list-mangle6: List iptables mangle rules from ipv6"
echo "         list-raw4: List iptables raw rules from ipv4"
echo "         list-raw6: List iptables raw rules from ipv4"
echo "    list-security4: List iptables security rules from ipv4"
echo "    list-security6: List iptables security rules from ipv6"
echo "     list-ebtables: List rules ebtables mac of ethernet"
echo "    list-arptables: List rules arptables arp"
echo
echo "$cinco         [ Launch interface ]"
echo
echo "          cli: alias to cli-menu"
echo "          gui: alias to gui-menu"
echo "     cli-menu: Comand line interface with menus"
echo "     gui-menu: Graphicall interface with menus"
echo "    gui-shell: Graphicall interface with shell"
echo "         text: alias for -text"
echo "          log: alias for -log"
echo "          gui: alias for -gui"
echo "        -text: Output in console, for default in command line"
echo "         -log: Output in file log /var/log/fwiptables"
echo "         -gui: Output in screen graphicall"
echo 
echo "               [ Secondary options ] $cinco"
echo
echo
echo "$cinco         [ Launch iptables rules ]"
echo
echo "   eraserules: Remove the iptables rules in ipv4 and ipv6"
echo "      offline: Launch disconected firewall for all servers and clients except localhost"
echo " allpermisive: Launch a firewall very permisive"
echo "     gamesudp: Launch a firewall like games udp non-root games"
echo "       custom: Configure one custom firewall, made for you with file.cfg"
echo "    clientweb: Launch a firewall like web client and ssh client"
echo "    serverweb: Launch a firewall like web server and ssh server"
echo "  serversamba: Launch a firewall like server and client for samba and ssh"
echo "  serverprint: Launch a firewall like server ipp, printer and ssh"
echo "    serverssh: Launch a firewall like server ssh"
echo
echo "$cinco         [ tool config ]"
echo
echo "       new-full-config: Create a new configfile.cfg in english"
echo " nueva-completa-config: Create a new configfile.cfg in spanish"
echo "       new-mini-config: Create a new basic configfile.cfg in english"
echo "     nueva-mini-config: Create a new basic configfile.cfg in spanish"
echo "           list-config: List config files cfg"
echo "         modify-config: Edit one config.cfg"
echo "           show-config: Show one config.cfg"
echo "            del-config: Delete one configuration file"
echo
echo "$cinco         [ List sockets ]"
echo
echo "            route: Show net devices and ip route tables"
echo "               ss: Show net sockets with command ss"
echo "             lsof: Show net sockets with command lsof"
echo "          netstat: Show net sockets with command netstat"
echo "      netstat-nat: Show net sockets with command netstat-nat"
echo "          tcpdump: Listen the connections"
echo "          arp-lan: List the conentions arp in lan"
echo "       info-proxy: List system proxy"
echo "      info-listen: List system listen socket list"
echo
echo "$cinco         [ Tool forward ]"
echo
echo " ipforward-list: Show kernel config about forward"
echo "   ipforward-on: Active kernel config about forward"
echo "  ipforward-off: Deactive kernel config about forward"
echo
echo "$cinco         [ Tool tcp ]"
echo
echo " tracetcp-ip4: Trace route a one host with ipv4 tcp"
echo " tracetcp-ip6: Trace route a one host with ipv6 tcp"
echo "    speed-ip4: Test the bandwidth with ipv4"
echo "    speed-ip6: Test the bandwidth with ipv6"
echo
echo "$cinco         [ Tool udp ]"
echo
echo "         host: Resolve one host"
echo "          dig: Resolve one host"
echo "    resolveip: Resolve one host and viceversa"
echo "        geoip: Locate a one host or ip"
echo "      ntpdate: Update the date from ntp server"
echo 
echo "$cinco         [ Tool icmp ]"
echo
echo "     ping-ip4: Do a one ping with to one host with ipv4 icmp"
echo "     ping-ip6: Do a one ping with to one host with ipv6 icmp"
echo
echo "$cinco         [ Tool nmap ]"
echo 
echo "     scan-tcp: Scan a host/mask per tcp protocol"
echo "     scan-syn: Scan a host/mask per syn socket"
echo "     scan-fin: Scan a host/mask per fin socket"
echo "     scan-udp: Scan a host/mask per udp protocol"
echo "    scan-ping: Scan a host/mask per ping udp"
echo
echo "$cinco         [ Tool sudo ]"
echo
echo "    sudo-auth: Allow sudo to other choosed users"
echo "  sudo-remove: Remove sudo to other choosed users"
echo "    sudo-list: List sudo to other choosed users"
echo
echo "$cinco         [ Tool system ]"
echo
echo "      ram-free: Clean for innecesary memory"
echo "     ram-speed: Show the speed of ram"
echo "    disc-speed: Show the speed of disc"
echo "      gl-speed: Show frammes for seconds with mesa graphicall"
echo "         radio: connect to one server mp3, see $fiptables default"
echo
echo "$cinco         [ Tool Install ]"
echo
echo "      install: Install this program actual"
echo "howto-upgrade: Howto install the latest version"
echo "      upgrade: Upgrade at the latest version"
echo
echo "$cinco         [ Tool blacklist ]"
echo
echo " blacklist-list: List options to block dangerous hosts"
echo "   blacklist-on: Write one /etc/hosts with block a dangerous sites"
echo "  blacklist-off: Return to /etc/hosts for default"
echo
echo "$cinco         [ Tool dev ]"
echo
echo " new-versions: Show the last versions"
echo "  dev-version: Show the link at the developer version"
echo "  dev-changes: Show the last changes"
echo "         code: Show the source code for one option"
echo
echo "$cinco         [ Show hardware ]"
echo
echo "          lpinfo: Show the device printers"
echo "           lsblk: Show the device disks"
echo "           lsusb: Show the devices usb"
echo "           lscpu: Show the devices cpu"
echo "           lsgpu: Show the devices gpu"
echo "           lspci: Show the devices pci"
echo "            lshw: Show the hardware devices"
echo
echo "$cinco         [ Show etc ]"
echo
echo "           hosts: Show /etc/hosts, hosts local and statics host"
echo "      protocolos: Show /etc/protocols, protocols names"
echo "        services: Show /etc/services, ports names"
echo "     hosts.allow: Show /etc/hosts.allow, hosts allowed in some own server"
echo "      hosts.deny: Show /etc/hosts.deny, hosts drops in some own server"
echo "     resolv.conf: Show /etc/resolv.conf, it are the dns configured"
echo "    show-default: Show /etc/default/fwiptables, show variables for fwiptables"
echo "  modify-default: Modify /etc/default/fwiptables, modify variables for fwiptables"
echo
echo "$cinco         [ Show log ]"
echo
echo " log-fwiptables: Show /var/log/fwiptables"
echo "        log-ssh: Search the logs from sshd for /var/log"
echo "     log-search: Search the logs from a input pattern for /var/log"
echo
echo "$cinco         [ Show about ]"
echo
echo "          about: About info"
echo "        version: Info version program actual"
echo "        depends: Show depends"
echo "       examples: Show examples"
echo "   new-versions: Show the last versions"
echo "     config-eng: config example with comments in english"
echo "     config-spa: config example with comments in spanish"
echo
echo "$cinco         [ Show help ]"
echo
echo "   full-options: Show full options"
echo "           help: Show help in english"
echo "          ayuda: Show help in spanish"
echo ""
echo "$cincuenta The second option: (optional)"
echo ""
echo "    if launch without specific the config it takes $defaultcfg"
echo "    you can  modify and create the files in the folder $directory_config"
echo ""
echo "$cincuenta Examples"
echo ""
echo " $fiptables custom server-example1.cfg     [Configure firewall custom]"
echo " $fiptables eraserules                     [Remove iptables rules]"
echo " $fiptables list                           [List iptables rules]"
echo " $fiptables help                           [Show this help in english]"
echo ""
echo "$cincuenta Examples of variables to the configs files $cinco"
echo
cat $defaultfullcfg_eng
echo
echo " $fiptables notes:"
echo
echo
echo "$cincuenta  [vpn]"
echo
echo "     Host [vpn] excepcionals hosts has conection allowed in firewall"
echo ""
echo "$cincuenta  [blacklist]"
echo
echo "     Host [blacklist] excepcionals hosts has conection dropped in firewall"
echo ""
echo "$cincuenta  [uid and/or gid excepcional]"
echo
echo "     User and/or group excepcional have output conection allowed in firewall"
echo
echo "$cincuenta  [iptables netftilter]"
echo
echo "     iptables-legacy   is    support for xtables "
echo "     iptables-nft      is    support for nftables "
echo
echo "$cincuenta  [client firewall needs in udp ports]"
echo
echo "     This port is necesary to update the date  : ntp"
echo "     This port is necesary to dhcp and get ip  : bootpc"
echo "     This port is necesary to domain resolver  : domain"
echo
echo "$cincuenta  [Ipv6 needs protocols]"
echo
echo "     Necesary protocol: ipv6-icmp"
echo "     Ipv6 works too with: ipv4 procotols"
echo
echo "$cincuenta  [License]"
echo ""
echo "  Download the latest version $fprogram from sourceforge"
echo "  $fweb_latest"
echo "  $flicense"
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-help:
############################       english: ayuda: the help option in spanish
############################       spanish: ayuda: la opcion de ayuda en español
#### :rutina-inicial-ayuda:
####
####
if [ "$first_option" = "ayuda" ]; then $genfiles; $give_cover
echo "$ralla [ $first_option ] [ Opciones principales ] $cinco"
echo
echo "$cinco         [ Lanzar guia ]"
echo
echo "  info-system: Muestra la informacion del sistema"
echo "     info-net: Muestra informacion de la red"
echo "  wizard-full: Asistente y lanza completo cortafuegos"
echo "  wizard-mini: Asistente y lanza simple cortafuegos"
echo
echo "$cinco         [ Controla las reglas de iptables ]"
echo
echo "         stop: Para las reglas del firewall"
echo "     continue: Continua las reglas del firewall"
echo "        reset: Resetea las reglas del firewall"
echo "      list-fw: Apodo a names"
echo "        names: Lista los archivos de firewall estandard"
echo "         show: Muestra las reglas del firewall estandard especificado" 
echo "         save: Guarda las reglas de firewall estandard especificado"
echo "         load: Reculpera firewall estandard especificado"
echo "       actual: Muestra el contenido del firewall estandard actual"
echo
echo "$cinco         [ Lista las reglas de tablas de iptables ]"
echo
echo "               La tabla de filtros con nombres"
echo "         list: similar a list-filter4 pero esconde reglas no usadas" 
echo "        list6: similar a list-filter6 pero esconde reglas no usadas"
echo
echo "$cinco         [ Lista Las otras tablas de iptables ]"
echo
echo "           listnum: Lista las reglas de ipv4 de filtros en numeros"
echo "   list-forwardnum: Lista las reglas de ipv4 de filtros de reenvio en numeros"
echo "          list6num: Lista las reglas de ipv6 de filtros en numeros"
echo "  list-forward6num: Lista las reglas de ipv6 de filtros de reenvio en numeros"
echo "      list-forward: Lista las reglas de ipv4 de filtros de reenvio"
echo "     list-forward6: Lista las reglas de ipv6 de filtros de reenvio"
echo
echo "   list-filter4: Lista las reglas de ipv4 de filtros iptables"
echo "   list-filter6: Lista las reglas de ipv6 de filtros iptables"
echo "      list-nat4: Lista las reglas de ipv4 de nat iptables"
echo "      list-nat6: Lista las reglas de ipv6 de nat iptables"
echo "   list-mangle4: Lista las reglas de ipv4 de mangle iptables"
echo "   list-mangle6: Lista las reglas de ipv6 de mangle iptables"
echo "      list-raw4: Lista las reglas de ipv4 de raw iptables"
echo "      list-raw6: Lista las reglas de ipv6 de raw iptables"
echo " list-security4: lista las reglas de ip4 de security iptables"
echo " list-security6: Lista las reglas de ip6 de security iptables"
echo "  list-ebtables: Lista las reglas mac de ethernet"
echo " list-arptables: Lista las reglas de arp arptables"
echo
echo "$cinco         [ Lanza interfaz ]"
echo
echo "          cli: apodo de cli-menu"
echo "          gui: apodo de gui-menu"
echo "     cli-menu: modo texto with menus"
echo "     gui-menu: Graficos con menus"
echo "    gui-shell: Graficos con entorno de comandos"
echo "         text: apodo de -text"
echo "          gui: apodo de -gui"
echo "          log: apodo de -log"
echo "        -text: Salida a consola, por defecto en linea de comandos"
echo "         -gui: Salida a graficos"
echo "         -log: Salida a archivo log en /var/log/fwiptables"
echo
echo
echo "               [ Opciones secundarias ] $cinco"
echo
echo "$cinco         [ Lanza reglas de iptables ]"
echo
echo "   eraserules: Borra las reglas de iptables de ipv4 y de ipv6"
echo "      offline: Lanza un desconectado cortafuegos de todo excepto localhost"
echo " allpermisive: Lanza el cortafuegos muy permisivo"
echo "    clientweb: Lanza el cortafuegos como cliente web y ssh"
echo "    serverweb: Lanza el cortafuegos como servidor web y ssh"
echo "  serversamba: Lanza un cortafuegos como servidor y cliente samba y ssh"
echo "     gamesudp: Lanza el cortafuegos como cliente de juegos udp no-root"
echo "  serverprint: Lanza un firewall como servidor ipp, printer y ssh"
echo "    serverssh: Lanza un firewall como servidor ssh"
echo "       custom: lanza el cortafuegos especificando un archivo.cfg"
echo
echo "$cinco         [ Herramienta de configuraciones ]"
echo
echo "       new-full-config: Crea una nueva configuracion.cfg en ingles"
echo " nueva-completa-config: Crea una nueva configuracion.cfg en español"
echo "       new-mini-config: Crea una nueva basica configuracion.cfg en ingles"
echo "     nueva-mini-config: Crea una nueva basica configuracion.cfg en español"
echo "           list-config: Lista los archivos de configuracion cfg"
echo "         modify-config: Edita una existente configuracion.cfg"
echo "           show-config: Muestra una existente configuracion.cfg"
echo "            del-config: Borra unaa existente configuracion.cfg"
echo
echo "$cinco         [ Lista las conexiones abiertas ]"
echo
echo "             route: Muestra los dispositivos de red y la tabla de rutas"
echo "                ss: Muestra las conexiones con comando ss"
echo "           netstat: Muestra las conexiones con comando netstat"
echo "       netstat-nat: Muestra las conexiones con comando netstat-nat"
echo "              lsof: Muestra las conexiones con command lsof"
echo "           tcpdump: Escuchar las conexiones ip"
echo "           arp-lan: Lista las conexiones arp in lan"
echo "        info-proxy: Lista proxy del sistema"
echo "       info-listen: Lista sockets a la escucha del sistema"
echo
echo "$cinco         [ Herramienta de ip forwading ]"
echo
echo "  ipforward-list: Muestra la configuracion del kernel sobre reenvios ip"
echo "    ipforward-on: Activa la configuracion del kernel sobre reenvios ip"
echo "   ipforward-off: Desactiva la configuracion del kernel sobre reenvios ip"
echo
echo "$cinco         [ Herramienta tcp ]"
echo
echo " tracetcp-ip4: Traza ruta a una host con ipv4 tcp"
echo " tracetcp-ip6: Traza ruta a una host con ipv6 tcp"
echo "    speed-ip4: Testea el ancho de banda con ipv4"
echo "    speed-ip6: Testea el ancho de banda con ipv6"
echo
echo "$cinco         [ Herramienta udp ]"
echo
echo "         host: Resuelve la ip de un host"
echo "          dig: Resuelve la ip de un host"
echo "    resolveip: Resuelve la ip de un host y viceversa"
echo "        geoip: Localiza una ip o host"
echo "      ntpdate: Actualiza la fecha desde un ntp server"
echo 
echo "$cinco         [ Herramienta icmp ]"
echo
echo "     ping-ip4: Hace un ping a una host con ipv4 icmp"
echo "     ping-ip6: Hace un ping a una host con ipv6 icmp"
echo
echo "$cinco         [ Herramienta nmap ]"
echo 
echo "     scan-tcp: Rastrea una host/mask por tcp protocolo"
echo "     scan-syn: Rastrea una host/mask por syn socket"
echo "     scan-fin: Rastrea una host/mask por fin socket"
echo "     scan-udp: Rastrea una host/mask por udp protocolo"
echo "    scan-ping: Rastrea una host/mask por ping udp"
echo
echo "$cinco         [ Herramienta de autorizacion ]"
echo
echo "    sudo-auth: Permite autorizacion de usuarios elegidos"
echo "  sudo-remove: Borra la autorizacion otorgada"
echo "    sudo-list: Lista autorizacion de usuarios elegidos"
echo
echo "$cinco         [ Herramienta de sistema ]"
echo
echo "      ram-free: Libera la memoria innecesaria"
echo "     ram-speed: Muestra la velocidad de la ram"
echo "    disc-speed: Muestra la velocidad de el disco"
echo "      gl-speed: Muestra fotogramas por segundo con graficos mesa"
echo "         radio: connecta a on servidor mp3, see $fiptables default"
echo
echo "$cinco         [ Herramienta de instalacion ]"
echo
echo "      install: Instala este programa actual"
echo "      upgrade: Actualiza a la ultima version"
echo "howto-upgrade: Indicacion para actualizar"
echo
echo "$cinco         [ Herramienta de lista de bloqueo ]"
echo
echo " blacklist-list: Lista de opciones para bloquear hosts peligrosas"
echo "   blacklist-on: Escribe un /etc/hosts con bloqueo a hosts peligrosas"
echo "  blacklist-off: Vuelve a /etc/hosts por defecto"
echo
echo "$cinco         [ Herramienta de desarrollador ]"
echo
echo " new-versions: Muestra las ultimas versiones"
echo "  dev-version: Muestra en enlace a la version de desarrollo"
echo "  dev-changes: Muestra los ultimos cambios"
echo "         code: Muestra el codigo fuente para una opcion"
echo
echo "$cinco        [ Herramienta de informacion del hardware ]"
echo
echo "              lpinfo: Muestra los dispositivos de impresora"
echo "               lsblk: Muestra los dispositivos de disco"
echo "               lsusb: Muestra los dispositivos de usb"
echo "               lscpu: Muestra los dispositivos cpu"
echo "               lsgpu: Muestra los dispositivos gpu"
echo "               lspci: Muestra los dispositivos pci"
echo "                lshw: Muestra los dispositivos de hardware"
echo
echo "$cinco         [ Mostrar etc ]"
echo
echo "           hosts: Muestra /etc/hosts, hosts locales y hosts estaticos"
echo "      protocolos: Muestra /etc/protocols, nombres de protocolos"
echo "        services: Muestra /etc/services, nombres de puertos y servicios"
echo "     hosts.allow: Muestra /etc/hosts.allow, hosts permitidas en algunos propios servidores"
echo "      hosts.deny: Muestra /etc/hosts.deny, hosts denegadas en algunos propios servidores"
echo "     resolv.conf: Muestra /etc/resolv.conf, este es el dns configurado"
echo "    show-default: Muestra /etc/default/fwiptables, muestra variables en fwiptables"
echo "  modify-default: Modifica /etc/default/fwiptables, modifica variables en fwiptables"
echo
echo "$cinco         [ Mostrar log ]"
echo
echo " log-fwiptables: Muestra /var/log/fwiptables"
echo "        log-ssh: Busca los logs de sshd en /var/log"
echo "     log-search: Busca los logs dando un patron para /var/log"
echo
echo "$cinco         [ Mostrar acerca ]"
echo
echo "          About: Acerca de "
echo "        version: Informacion de la actual version"
echo "        Depends: Muestra las dependencias"
echo "       examples: Muestra ejemplos"
echo "   new-versions: Muestra las ultimas versiones"
echo "     config-eng: Ejemplo de config con comentarios en ingles"
echo "     config-spa: Ejemplo de config con comentarios en castellano"
echo
echo "$cinco         [ Mostrar ayuda ]"
echo
echo "   full-options: Muestra las opciones"
echo "           help: Muestra la ayuda en ingles"
echo "          ayuda: Muestra la ayuda en español"
echo
echo "$cincuenta La segunda opcion (opcional)"
echo ""
echo "    si lanzas sin especificar una config tomara por defecto $defaultcfg"
echo "    Puedes modificar y crear archivos en la carpeta $directory_config"
echo
echo "$cincuenta Ejemplos"
echo
echo "   $fiptables custom games-example1.cfg    [lanza un firewall modificado]"
echo "   $fiptables eraserules                   [Borra las reglas de iptables] "
echo "   $fiptables list                         [Lista las reglas de iptables] "
echo "   $fiptables help                         [Muestra la ayuda en ingles] "
echo
echo "$cincuenta  Ejemplos de las variables de configuración $cinco"
echo
cat $defaultfullcfg_spa
echo
echo " Notas de $fiptables :"
echo
echo
echo "$cincuenta  [vpn]"
echo
echo "     Host [vpn] excepcionales tienen conexion permitida en el firewall"
echo
echo "$cincuenta  [blacklist]"
echo
echo "     Host [blacklist] excepcionales tienen conexion denegada en el firewall"
echo
echo "$cincuenta  [uid y/o gid excepcional]"
echo
echo "     Usuario y/o grupo excepcional tienen conexion de salida permitida en el firewall"
echo
echo "$cincuenta  [iptables netftilter]"
echo
echo "     iptables-legacy   es    soporte para xtables "
echo "     iptables-nft      es    soporte para nftables "
echo
echo "$cincuenta  [Puertos cliente udp necesarios]"
echo
echo "     necesario para actualizar la fecha :   ntp"
echo "     necesario para dhcp y conseguir ip :   bootpc"
echo "     necesario para resolver dominios   :   domain"
echo
echo "$cincuenta  [Protocolos necesarios para ipv6]"
echo
echo "     Necesario protocolo: ipv6-icmp"
echo "     Ipv6 funciona tambien con: ipv4 procolos"
echo
echo "$cincuenta  [Licencia]"
echo
echo "  Descarga la ultima version de $fprogram desde la web de sourceforge "
echo "  $fweb_latest"
echo "  $flicense"
echo
echo $footer_lineal
exit; fi
####
####
#### :rutina-final-ayuda:
############################       english: default: without other valid options
############################	   spanish: default: sin otra valida opcion
####
####
if [ "$launch_iptables" = "" ] ; then $nada ; else 
echo "$rallica Choose a one valid option .. "; $fiptables $default_security ; exit ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####           Knowed now sure that:         launch_iptables=""                                 ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules ..                                                          ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
#### english: autosave #### spanish: autoguarda
$give_autosave
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall with designed previous             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema con diseño previo             ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
########################################     english: ipv4 iptables allpermisisive:
########################################     spanish: ipv4 iptables todo permisivo
####
####
#### legacy ip4
####
####
if [ "$first_option" = "allpermisive" ]; then $fiptables eraserules ; echo $head_principal
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
$input_state  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A FORWARD \
-j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT \
$input_state -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT \
-j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A FORWARD \
-j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables allpermisisive
########################################     spanish: ipv6 iptables todo permisivo
####
####
#### legacy ip6
####
####
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A INPUT  \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A INPUT \
$input_state -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A FORWARD \
-j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT   \
$input_state -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A OUTPUT  \
-j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A FORWARD \
-j ACCEPT &> /dev/null
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL ALLPERMISIVE ]"
exit; fi
####
####
########################################     english: ipv4 iptables clientweb:
########################################     spanish: ipv4 iptables clientweb:
####
####
#### legacy ip4
####
####
if [ "$first_option" = "clientweb" ]; then $fiptables eraserules ; echo $head_principal
port_udp="domain,bootpc,ntp,https" ; port_tcp="http,https,ssh" ;
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $port_tcp -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables clientweb:
########################################     spanish: ipv6 iptables clientweb:
####
####
#### legacy ip6
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL CLIENTWEB ]" ; exit ; fi
####
####
########################################     english: ipv4 iptables serverweb:
########################################     spanish: ipv4 iptables serverweb
####
####
#### legacy ip4
####
####
if [ "$first_option" = "serverweb" ]; then $fiptables eraserules ; echo $head_principal
client_port_udp="domain,bootpc,ntp,https" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="http,https,ssh" ;
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables serverweb:
########################################     spanish: ipv6 iptables serverweb 
####
####
#### legacy ip6
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### english: allow ping 
#### spanish: permite ping
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
#### english: close #### spanish cierra 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL SERVERWEB ]"
exit; fi
####
####
########################################     english: ipv4 iptables serversamba:
########################################     spanish: ipv4 iptables servidor samba
####
####
#### legacy ip4
####
####
if [ "$first_option" = "serversamba" ]; then $fiptables eraserules ; echo $head_principal
client_tcp="http,https,ssh,ldap,ldaps,microsoft-ds" ;
client_udp="domain,bootpc,ntp,https,ldap,ldaps,137:139" ;
server_tcp="ssh,ldap,ldaps,microsoft-ds" ; 
server_udp="ntp,domain,ldap,ldaps,137:139" ; 
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports $server_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables serversamba:
########################################     spanish: ipv6 iptables serversamba 
####
####
#### legacy ip6
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports $client_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $server_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $client_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $server_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports $client_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $server_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $client_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $server_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports $client_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -j ACCEPT &> /dev/null
####
####
#### english: allow ping 
#### spanish: permite ping
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
#### english: close 
#### spanish cierra 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL SERVERSAMBA ]"
exit; fi
####
####
########################################     english: ipv4 iptables serverprint:
########################################     spanish: ipv4 iptables serverprint
####
####
#### legacy ip4
####
####
if [ "$first_option" = "serverprint" ]; then $fiptables eraserules ; echo $head_principal
client_port_udp="domain,bootpc,ntp,https" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh,printer,ipp" ;
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables serverprint:
########################################     spanish: ipv6 iptables serverprint
####
####
#### legacy ip6
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### english: allow ping 
#### spanish: permite ping
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
#### english: close #### spanish cierra 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL SERVERPRINT ]"
exit; fi
####
####
########################################     english: ipv4 iptables serverssh:
########################################     spanish: ipv4 iptables serverssh
####
####
#### legacy ip4
####
####
if [ "$first_option" = "serverssh" ]; then $fiptables eraserules ; echo $head_principal
client_port_udp="domain,bootpc,ntp,https" ;
client_port_tcp="http,https,ssh" ;
server_port_tcp="ssh" ;
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables serverssh:
########################################     spanish: ipv6 iptables serverssh 
####
####
#### legacy ip6
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports $server_port_tcp -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $client_port_udp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $client_port_tcp -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports $server_port_tcp -j ACCEPT &> /dev/null
####
####
#### english: allow ping 
#### spanish: permite ping
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
#### english: close #### spanish cierra 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL SERVERSSH ]"
exit; fi
####
####


########################################     english: ipv4 iptables gamesudp:
########################################     spanish: ipv4 iptables gamesudp
####
####
#### legacy ip4
####
####
if [ "$first_option" = "gamesudp" ]; then $fiptables eraserules ; echo $head_principal
####
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p tcp -m multiport --sports http,https,ssh -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --sports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --dports http,https,ssh -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --dports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p udp -m multiport --dports 1025:65000 -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports 1025:65000 -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p tcp -m multiport --sports http,https,ssh -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --sports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --dports http,https,ssh -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --dports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p udp -m multiport --dports 1025:65000 -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports 1025:65000 -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables gamesudp
########################################     spanish: ipv6 iptables gamesudp
####
####
#### legacy ip6
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --sports http,https,ssh -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --sports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --dports http,https,ssh -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --dports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT \
-p udp -m multiport --dports 1025:65000 -j RETURN &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports 1025:65000 -j RETURN &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A INPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --sports http,https,ssh -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p udp -m multiport --sports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --dports http,https,ssh -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --dports domain,bootpc,ntp,https -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A INPUT \
-p udp -m multiport --dports 1025:65000 -j RETURN &> /dev/null
$allow_nft  $allow_ipv6   $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports 1025:65000 -j RETURN &> /dev/null
####
####
#### english: allow ping 
#### spanish: permite ping
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4   $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4   $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv4   $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
#### english: close #### spanish cierra 
####
####
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT -p ipv6-icmp -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL GAMESUDP ]"
exit; fi
####
####
########################################     english: ipv4 iptables offline:
########################################     spanish: ipv4 iptables desconectado
####
####
#### legacy ip4
####
####
if [ "$first_option" = "offline" ]; then $fiptables eraserules ; echo $head_principal
####
####
$allow_legacy $allow_ipv4  $command_iptables_legacy -A INPUT  \
-s 127.0.0.1 -d 127.0.0.1   -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
#### nft ip4
####
####
$allow_nft $allow_ipv4   $command_iptables_nft -A INPUT   \
-s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4   $command_iptables_nft -A OUTPUT  \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
####
####
########################################     english: ipv6 iptables offline
########################################     spanish: ipv6 iptables desconectado
####
####
#### legacy ip6
####
####
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A INPUT  \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy $allow_ipv6   $command_ip6tables_legacy -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
#### nft ip6
####
####
$allow_nft $allow_ipv6   $command_ip6tables_nft -A INPUT  \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft $allow_ipv6   $command_ip6tables_nft -A OUTPUT \
-s ::1 -d ::1  -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT -j DROP   &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT -j DROP  &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A INPUT -j DROP         &> /dev/null
$allow_nft  $allow_ipv4     $command_iptables_nft -A OUTPUT -j DROP        &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT -j DROP  &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A INPUT -j DROP        &> /dev/null
$allow_nft  $allow_ipv6     $command_ip6tables_nft -A OUTPUT -j DROP       &> /dev/null
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL OFFLINE ]"
exit; fi
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          ready to launch rules CUSTOM                                                      ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####                                                                                            ###############
####  english: Options for launch rules:     system firewall custom                             ###############
####  spanish: Opciones para lanzar reglas:  firewall del sistema custom                        ###############
####                                                                                            ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
##############################       english: overwrite system varibles with the config cfg
##############################       spanish: sobreescribe las variables con la config cfg
####
####
if [ "$first_option" = "custom" ]; then if [ -f $directory_config/$second_option ]; 
then source $directory_config/$second_option &> /dev/null ; else echo "$cinco File do not exits"; exit ; fi ; fi
####
####
##############################      english: compatibility with old variables, backward compatibility      #####################
##############################      spanish: compatibilidad con viejas ariables, retrocompatibilidad       #####################
####
####
####      #### english: probe version config_variable_version
####      #### spanish: prueba version config_variable_version
####
####
if [ "$first_option" = "custom" ]; then $nada
 config_variable_two="$(cat $directory_config/$second_option | grep -i config_variable_version=2 | wc -l)"
if [ "$config_variable_two" = "1" ]; then config_variable_version="2" ; fi ; fi
####
####
####      #### english: config variable version
####      #### spanish: configura variable version
####
####
if [ $config_variable_version = "1" ]; then
 config_input_state="$input_state" ;
 config_output_state="$output_state" ;
 config_input_bandwidth="$bandwidth_input" ;
 config_output_bandwidth="$bandwidth_output" ;
 config_input_maxconnect="$maxconnect_input" ; 
 config_output_maxconnect="$maxconect_output" ;
 config_net_vpn="$vpn" ;
 config_net_blacklist="$blacklist" ;
 config_output_uid="$output_uid" ;
 config_output_gid="$output_gid" ;
 config_others_protocols="$others_protocols" ;
 echo "$cinco [ Runing rules with old variables version $config_variable_version ]"
fi
####
####
if [ $config_variable_version = "2" ]; then $nada
#### echo "$cinco [ Runing rules with the actual variables version $config_variable_version ]"
fi 
####
####
##############################      english: selective state of intput/oputut          #####################
##############################      spanish: estado selectivo de entrada/salida        #####################
####
####
if [ "$allow_input_state" = "$NULL" ]  ; then config_input_state="-m state --state $config_input_state"   ;
else config_input_state="$NULL"  ; fi
if [ "$allow_output_state" = "$NULL" ] ; then config_output_state="-m state --state $config_output_state" ;
else config_output_state="$NULL" ; fi
####
####
##############################      english: output_uid or output_gid for input established status        #####################
##############################      spanish: usuario o grupo para establecidos de entrada de estado        #####################
####
####
config_uid_gid=no
if [ "$allow_output_uid" = "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
if [ "$allow_output_gid" = "$NULL" ]; then config_uid_gid="" ; else $nada ; fi
####
####
###############################################################################################################
###############################################################################################################
####                                                                                            ###############
####          launching rules ..                                                                ###############
####                                                                                            ###############
###############################################################################################################
###############################################################################################################
####
####
############################       english: iptables rules ipv4  iptables-legacy
############################       spanish: reglas de iptables ipv4   iptables-legacy
####
####
#### english: erase all rules
#### spanish: borra todas las reglas
####
####
$fiptables eraserules
####
####
#######################################        english: ebtables mac rules
#######################################        spanish: ebtables mac rules
####
####
$allow_mac_whitelist $command_ebtables -A INPUT  -s $config_mac_whitelist  -j ACCEPT &> /dev/null
$allow_mac_whitelist $command_ebtables -A OUTPUT -d $config_mac_whitelist  -j ACCEPT &> /dev/null
####
####
$allow_mac_blacklist $command_ebtables -A INPUT  -s $config_mac_blacklist  -j DROP   &> /dev/null
$allow_mac_blacklist $command_ebtables -A OUTPUT -d $config_mac_blacklist  -j DROP   &> /dev/null
####
####
#######################################        english: Accept  localhost rules
#######################################        spanish: aceptar reglas localhost
####
####
$allow_legacy   $command_iptables_legacy -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_legacy   $command_iptables_legacy -A OUTPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
####
####
$allow_legacy   $command_ip6tables_legacy -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_legacy   $command_ip6tables_legacy -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
$allow_nft  $command_iptables_nft -A INPUT  -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
$allow_nft  $command_iptables_nft -A OUTPUT -s 127.0.0.1 -d 127.0.0.1  -j ACCEPT &> /dev/null
####
####
$allow_nft  $command_ip6tables_nft -A INPUT  -s ::1 -d ::1  -j ACCEPT &> /dev/null
$allow_nft  $command_ip6tables_nft -A OUTPUT -s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#######################################        english: limit bandwidth in kb/s
#######################################        spanish: limitar ancho de banda en kb/s
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
####
####
$allow_ipv4 $allow_legacy $allow_input_bandwidth $command_iptables_legacy     -A  INPUT \
-m hashlimit --hashlimit-above   "$config_input_bandwidth"kb/sec \
--hashlimit-name maxinputlegacy  -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_bandwidth $command_iptables_legacy    -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip --hashlimit-name maxoutputlegacy -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_bandwidth $command_iptables_nft           -A INPUT \
-m hashlimit    --hashlimit-above "$config_input_bandwidth"kb/sec  \
--hashlimit-name maxinputnft  -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_bandwidth $command_iptables_nft          -A OUTPUT \
-m hashlimit  --hashlimit-above "$config_output_bandwidth"kb/sec \
--hashlimit-mode dstip  --hashlimit-name maxoutputnft -j DROP &> /dev/null
####
####
#### english: ipv6 bandwidth
#### spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_bandwidth $command_ip6tables_legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_bandwidth $command_ip6tables_legacy -A OUTPUT \
-m hashlimit --hashlimit-above  "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_bandwidth $command_ip6tables_nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_bandwidth $command_ip6tables_nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput -j DROP &> /dev/null
####
####
#######################################        english: limit number of all connections
#######################################        spanish: limitar numero de conexiones totales
####
####
#### english: ipv4  bandwidth
#### spanish: ipv4  ancho de banda
$allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect   -j DROP  &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_output_maxconnect $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j DROP &> /dev/null
####
####
#### english: ipv6 bandwidth
#### spanish: ipv6 ancho de banda
####
####
$allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect  -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_output_maxconnect $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT  \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft  -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect      -j DROP &> /dev/null
####
####
####################################### english: Drop rules for blacklist
####################################### spanish: reglas de denegar para lista negra
####
####
for one_blacklist in $(echo $config_net_blacklist | sed 's/,/ /g')
####
####
#### ipv4
####
####
do
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_blacklist $command_iptables_legacy  -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_blacklist $command_iptables_nft     -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_blacklist $command_ip6tables_legacy -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A INPUT  \
-s $one_blacklist -j DROP &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_blacklist $command_ip6tables_nft    -A OUTPUT \
-d $one_blacklist -j DROP &> /dev/null
done
#### 
####
####################################### english: Accept rules for vpn
####################################### spanish: reglas de aceptar para vpn
####
####
for one_vpn in $(echo $config_net_vpn | sed 's/,/ /g') 
#### ipv4
####
do
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv4 $allow_legacy $allow_net_vpn $command_iptables_legacy  -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv4 $allow_nft    $allow_net_vpn $command_iptables_nft     -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
####
####
#### ipv6
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv6 $allow_legacy $allow_net_vpn $command_ip6tables_legacy -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  INPUT  \
-s $one_vpn -j ACCEPT &> /dev/null
####
####
$allow_ipv6 $allow_nft    $allow_net_vpn $command_ip6tables_nft    -A  OUTPUT \
-d $one_vpn -j ACCEPT &> /dev/null
done
####
####
####################################### english: rules to allow client ports
####################################### spanish: reglas para permitir puertos cliente
####
####
#### ipv4 legacy
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft
####
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4     $command_iptables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv4_client -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv     $command_iptables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv4_client -j ACCEPT &> /dev/null
$allow_nft $allow_ipv     $command_iptables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv4_client -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
#### ipv6 nft
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p udp -m multiport $config_input_state --sports $client_udp -s $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p tcp -m multiport $config_input_state --sports $client_tcp -s $net_ipv6_client -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport $config_output_state --dports $client_udp -d $net_ipv6_client -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport $config_output_state --dports $client_tcp -d $net_ipv6_client -j ACCEPT &> /dev/null
####
####
####################################### english: rules to log servers
####################################### spanish: reglas para logear servers
####
####
#### ipv4
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A INPUT  \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft    -A OUTPUT \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
#### ipv6
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_legacy  $allow_ipv6   $command_ip6tables_legacy -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p tcp  -m multiport --dports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A INPUT   \
-p udp  -m multiport --dports $logserver_udp -j LOG --log-prefix "$logserver_prefix_input" &> /dev/null
####
####
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p tcp -m multiport --sports $logserver_tcp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
$allow_nft     $allow_ipv6   $command_ip6tables_nft    -A OUTPUT  \
-p udp -m multiport --sports $logserver_udp -j LOG --log-prefix "$logserver_prefix_output" &> /dev/null
####
####
####################################### english: rules for max tries for ssh
####################################### spanish: reglas for max ties for ssh
####
####
if [ "$allow_maxtries_ssh" = "" ]; then $nada
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
$allow_nft  $allow_ipv4  $command_iptables_nft -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
$allow_nft  $allow_ipv6  $command_ip6tables_nft -A INPUT \
-p tcp -m multiport --dport ssh -m state --state NEW -m recent \
--set --name count-tries-ssh &> /dev/null
####
####
$allow_legacy  $allow_ipv4  $command_iptables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
$allow_nft     $allow_ipv4  $command_iptables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
$allow_legacy  $allow_ipv6  $command_ip6tables_legacy -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
$allow_nft     $allow_ipv6  $command_ip6tables_nft -A INPUT \
-m recent --name count-tries-ssh --update --seconds 3600 \
--hitcount $config_maxtries_ssh -j DROP &> /dev/null
fi
####
####
####################################### english: rules allow server ports
####################################### spanish: reglas para permitir puertos servidor 
####
####
#### ipv4 legacy
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv4 $command_iptables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT &> /dev/null
####
#### 
#### ipv4 nft
####
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p udp -m multiport --dports $server_udp -s $net_ipv4_server -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A INPUT \
-p tcp -m multiport --dports $server_tcp -s $net_ipv4_server -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv4_server -j ACCEPT &> /dev/null
$allow_nft $allow_ipv4 $command_iptables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv4_server -j ACCEPT &> /dev/null
####
####
#### ipv6 legacy
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT &> /dev/null
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT &> /dev/null
####
####
#### ipv6 nft
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p udp -m multiport --dports $server_udp -s $net_ipv6_server -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A INPUT  \
-p tcp -m multiport --dports $server_tcp -s $net_ipv6_server -j ACCEPT &> /dev/null
####
####
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p udp -m multiport --sports $server_udp -d $net_ipv6_server -j ACCEPT &> /dev/null
$allow_nft  $allow_ipv6 $command_ip6tables_nft -A OUTPUT \
-p tcp -m multiport --sports $server_tcp -d $net_ipv6_server -j ACCEPT &> /dev/null
####
####
####################################### english: rules from input of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de entrada de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy -A INPUT  \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping $command_iptables_legacy -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $config_uid_gid $command_iptables_legacy -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols $command_iptables_legacy -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
####################################### english: rules from output of legacy ipv4 for ping, uid, gid and protocols
####################################### spanish: reglas de salida de legacy ipv4 para ping, uid, gid y protocolos
####
####
$allow_legacy  $allow_ipv4 $allow_output_ping  $command_iptables_legacy   -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_input_ping  $command_iptables_legacy -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_uid $command_iptables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv4 $allow_output_gid $command_iptables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv4 $allow_others_protocols      $command_iptables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
####################################### english: ipv6 filter legacy rules input and output for ping, uid, gid and protocols
####################################### spanish: ipv6 filtros legacy reglas de entrada y salida para ping, uid, gid y protocolos
####
#### 
#### english: ipv6 filter legacy rules input 
#### spanish: ipv6 filtros de legacy reglas de entrada
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping      $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping    $command_ip6tables_legacy -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $config_uid_gid $command_ip6tables_legacy -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A INPUT \
-p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_legacy  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv6 filter legacy rules output
#### spanish: ipv6 filtros legacy reglas de salida
####
####
$allow_legacy  $allow_ipv6 $allow_output_ping  $command_ip6tables_legacy   -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_input_ping  $command_ip6tables_legacy -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_uid $command_ip6tables_legacy   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $allow_output_gid $command_ip6tables_legacy   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
$allow_legacy  $allow_ipv6 $command_ip6tables_legacy -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $others_protocols | sed 's/,/ /g') ;
do $allow_legacy6  $allow_ipv6 $allow_others_protocols      $command_ip6tables_legacy -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
############################       english: iptables rules ipv4  iptables-nft for ping, uid, gid and protocols
############################       spanish: reglas de iptables ipv4 iptables-nft para ping, uid, gid y protocolos
####
####
#### english: ipv4 filter nft rules input
#### spanish: ipv4 filter nft reglas de entrada
####
####
$allow_nft $allow_ipv4 $allow_output_ping     $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping   $command_iptables_nft -A INPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $config_uid_gid $command_iptables_nft -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols       $command_iptables_nft -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv4 filter nft rules output
#### spanish: ipv4 filter nft reglas de salida
####
####
$allow_nft $allow_ipv4 $allow_output_ping    $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_input_ping  $command_iptables_nft -A OUTPUT \
-p icmp --icmp-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_uid $command_iptables_nft   -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv4 $allow_output_gid $command_iptables_nft   -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv4 $allow_others_protocols      $command_iptables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
########## english: ipv6 filter nft rules input and output for ping, uid, gid and protocols
########## spanish: ipv6 filtros nft relgas de entrada y salida para ping, uid, gid y protocolos
####
####
#### ipv6 filter nft rules input
#### ipv6 filtros nft reglas d entrada
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A INPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $config_uid_gid $command_ip6tables_nft -A INPUT \
-m state --state related,established -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A INPUT \
-p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A INPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
#### english: ipv6 filter nft rules output
#### spanish: ipv6 filtros nft reglas de salida
####
####
$allow_nft $allow_ipv6 $allow_output_ping      $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-request -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_input_ping    $command_ip6tables_nft -A OUTPUT \
-p icmpv6 --icmpv6-type echo-reply -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_uid     $command_ip6tables_nft -A OUTPUT \
-m owner --uid-owner $config_output_uid -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $allow_output_gid     $command_ip6tables_nft -A OUTPUT \
-m owner --gid-owner $config_output_gid -j ACCEPT &> /dev/null
####
####
$allow_nft $allow_ipv6 $command_ip6tables_nft -A OUTPUT -p ipv6-icmp -j ACCEPT &> /dev/null
####
####
for one_protocol in $(echo $config_others_protocols | sed 's/,/ /g') ;
do $allow_nft $allow_ipv6 $allow_others_protocols      $command_ip6tables_nft -A OUTPUT \
-p $one_protocol -j ACCEPT &> /dev/null
done
####
####
########################################## english: nat for ipv4 and ipv6
########################################## spanish: nat para ipv4 y ipv6
####
####
#### english: nat DELETED
#### spanish: borrado nat
####
####
#### $command_iptables_nft -t nat -F
#### $command_iptables_legacy -t nat -F
#### $command_ip6tables_nft -t nat -F
#### $command_ip6tables_legacy -t nat -F
####
####
#### english: do masquerade nat ip4 and ip6 ALLOW GATEWAY
#### spanish: hace nat masquerade ip4 y ip6 PERMITIR GATEWAY
####
####
 $allow_nft    $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
 -A POSTROUTING -j MASQUERADE &>/dev/null
 $allow_legacy $allow_ipv4 $allow_gateway_ip4 $command_iptables_legacy -t nat \
 -A POSTROUTING -j MASQUERADE &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A POSTROUTING -j MASQUERADE     &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A POSTROUTING -j MASQUERADE     &>/dev/null
####
####
 $allow_nft $allow_ipv4    $allow_gateway_ip4 $command_iptables_nft -t nat \
 -A PREROUTING -j ACCEPT      &>/dev/null
 $allow_legacy $allow_ipv4     $allow_gateway_ip4 $command_iptables_legacy -t nat \
 -A PREROUTING -j ACCEPT   &>/dev/null
####
####
$allow_nft $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j ACCEPT     &>/dev/null
$allow_legacy $allow_ipv6 $allow_gateway_ip6 $command_ip6tables_legacy -t nat \
-A PREROUTING -j ACCEPT  &>/dev/null
####
####
####
####
#### english: do DMZ nat ip4 and ip6 ALLOW GATEWAY SERVER IN LAN
#### spanish: hace nat DMZ ip4 y ip6 PERMITIR GATEWAY SERVER IN LAN
####
####
$allow_nft    $allow_ipv4    $allow_dmz_ip4 $command_iptables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4   &>/dev/null
$allow_legacy $allow_ipv4    $allow_dmz_ip4 $command_iptables_legacy -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip4   &>/dev/null
####
####
$allow_nft $allow_ipv6    $allow_dmz_ip6 $command_ip6tables_nft -t nat \
-A PREROUTING -j DNAT --to-destination $config_dmz_ip6      &>/dev/null
$allow_legacy $allow_ipv6 $allow_dmz_ip6 $command_ip6tables_legacy -t nat \
-A PERROUTING -j DNAT --to-destination $config_dmz_ip6   &>/dev/null
####
####
######################################## english: iptables ipv4 and ipv6 with forward rules ALLOW FORWARD
######################################## spanish: iptables ipv4 y ipv6 con reglas de reenvio PERMITIR FORWARD
####
####
#### english: deactive for default with forward or without forward
#### spanish: desactiva por defecto con reenvio o sin reenvio
####
####
$command_sysctl -w net.ipv4.conf.all.forwarding=0 &> /dev/null
$command_sysctl -w net.ipv6.conf.all.forwarding=0 &> /dev/null
####
####
####   Active when there is forward
$ipv4 $allow_forward $command_sysctl -w net.ipv4.conf.all.forwarding=1 &> /dev/null
$ipv6 $allow_forward $command_sysctl -w net.ipv6.conf.all.forwarding=1 &> /dev/null
####
####
####   ipv4 filter legacy rules forward
$allow_legacy $allow_forward_ip4 $command_iptables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter legacy rules forward
$allow_legacy $allow_forward_ip6 $command_ip6tables_legacy -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv4 filter nft rules forward
$allow_nft $allow_forward_ip4 $command_iptables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
####   ipv6 filter nft rules forward
$allow_nft $allow_forward_ip6 $command_ip6tables_nft -A FORWARD -j ACCEPT &> /dev/null
####
####
#######################################       iptables ipv4 and ipv6 closed with drop input, and drop forward, and drop output rules
#######################################       iptables ipv4 y ipv6 cierran la entrada, reemvio y salida con reglas de dropeo
####
####
#### ipv4 drop rules iptables-legacy
$allow_legacy $command_iptables_legacy -A INPUT -j DROP &> /dev/null
$allow_legacy $command_iptables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_legacy $command_iptables_legacy -A FORWARD -j DROP &> /dev/null
####
####
#### ipv6 drop rules iptables-legacy
$allow_legacy $command_ip6tables_legacy -A INPUT -j DROP &> /dev/null
$allow_legacy $command_ip6tables_legacy -A OUTPUT -j DROP &> /dev/null
$allow_legacy $command_ip6tables_legacy -A FORWARD -j DROP &> /dev/null
####
####
#### ipv4 drop rules iptables-nft
$allow_nft $command_iptables_nft -A INPUT -j DROP &> /dev/null
$allow_nft $command_iptables_nft -A OUTPUT -j DROP &> /dev/null
$allow_nft $command_iptables_nft -A FORWARD -j DROP &> /dev/null
####
#### ipv6 drop rules iptables-nft
$allow_nft $command_ip6tables_nft -A INPUT -j DROP &> /dev/null
$allow_nft $command_ip6tables_nft -A OUTPUT -j DROP &> /dev/null
$allow_nft $command_ip6tables_nft -A FORWARD -j DROP &> /dev/null
####
####
########################################       english: iptables ipv4 and ipv6 with variable input_all
########################################       english: iptables ipv4 y ipv6 con variable input_all
####
####
#### english: nft INPUT deleted
#### spanish: nft INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F INPUT  &> /dev/null
####
####
#### english: legacy INPUT deleted
#### spanish: legacy INPUT borradas
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F INPUT  &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F INPUT  &> /dev/null
####
####
#### english: nft INPUT 127.0.0.1 accept
#### spanish: nft INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT 127.0.0.1 accept
#### spanish: legacy INPUT ::1 acepta
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy4 INPUT  limit bandwidth
#### spanish: legacy6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_bandwidth iptables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_bandwidth ip6tables-legacy -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
#### english: nft4 INPUT limit bandwidth
#### spanish: nft6 INPUT limita ancho de banda
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_bandwidth iptables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_bandwidth ip6tables-nft -A  INPUT \
-m hashlimit --hashlimit-above "$config_input_bandwidth"kb/sec --hashlimit-name maxinput  -j DROP &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $allow_input_maxconnect  $command_iptables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j DROP  &> /dev/null
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_input_maxconnect $command_iptables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $allow_input_maxconnect  $command_ip6tables_legacy -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect  -j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $allow_input_maxconnect $command_ip6tables_nft   -A INPUT \
-m connlimit --connlimit-above $config_input_maxconnect       -j DROP &> /dev/null
####
####
#### english: nft INPUT ACCEPT all or input_state
#### spanish: nft INPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
$config_input_state -j ACCEPT &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_nft $allow_ipv4 $command_iptables_nft -t filter -A INPUT \
-j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A INPUT \
-j DROP &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_input_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A INPUT \
-j DROP &> /dev/null
$launch_custom $allow_input_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A INPUT \
-j DROP &> /dev/null
####
####
####
####
########################################       english: iptables ipv4 and ipv6 with variable output_all
########################################       english: iptables ipv4 y ipv6 con variable output_all
####
####
#### english: nft OUTPUT deleted
#### spanish: nft OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -F OUTPUT  &> /dev/null
####
####
#### english: legacy OUTPUT deleted
#### spanish: legacy OUTPUT borradas
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -F OUTPUT  &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -F OUTPUT  &> /dev/null
####
####
#### english: nft OUTPUT 127.0.0.1 accept
#### spanish: nft OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy OUTPUT 127.0.0.1 accept
#### spanish: legacy OUTPUT ::1 acepta
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter -A OUTPUT \
-s 127.0.0.1 -d 127.0.0.1 -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
-s ::1 -d ::1 -j ACCEPT &> /dev/null
####
####
#### english: legacy4 OUTPUT  limit bandwidth
#### spanish: legacy6 OUTPUT limita ancho de banda
####
#### 
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_bandwidth iptables-legacy -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_bandwidth ip6tables-legacy -A  OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
####
####
#### english: nft4 OUTPUT limit bandwidth
#### spanish: nft6 OUTPUT limita ancho de banda
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_bandwidth iptables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_bandwidth ip6tables-nft -A OUTPUT \
-m hashlimit --hashlimit-above "$config_output_bandwidth"kb/sec --hashlimit-name maxoutput  -j DROP &> /dev/null
####
####
#### english: ipv4  limit conections numbers
#### spanish: ipv4  limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $allow_output_maxconnect  $command_iptables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP  &> /dev/null
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $allow_output_maxconnect $command_iptables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
####
####
#### english: ipv6 limit conections numbers
#### spanish: ipv6 limita numero de conexiones
####
####
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $allow_output_maxconnect  $command_ip6tables_legacy -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $allow_output_maxconnect $command_ip6tables_nft   -A OUTPUT \
-m connlimit --connlimit-above $config_output_maxconnect  -j DROP &> /dev/null
####
####
#### english: nft OUTPUT ACCEPT all or input_state
#### spanish: nft OUTPUT acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
####
####
#### english: legacy INPUT ACCEPT all or input_state
#### spanish: entrada acepta todo o estado de entrada
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy -t filter  -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT \
$input_state -j ACCEPT &> /dev/null
####
####
#### english: nft INPUT DROP all
#### spanish: nft INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_nft $command_iptables_nft -t filter -A OUTPUT  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_nft $command_ip6tables_nft -t filter -A OUTPUT  -j DROP &> /dev/null
####
####
#### english: legacy INPUT DROP all
#### spanish: legacy INPUT deniega todo
####
####
$launch_custom $allow_output_all $allow_ipv4 $allow_legacy $command_iptables_legacy  -t filter -A OUTPUT  -j DROP &> /dev/null
$launch_custom $allow_output_all $allow_ipv6 $allow_legacy $command_ip6tables_legacy -t filter -A OUTPUT  -j DROP &> /dev/null
####
####
########################################       english: show text when active custom rules
########################################       spanish: muestra texto cuando activas las custom reglas
####
####  
echo $head_principal
if [ -f "$directory_config/$second_option" ]; then $nada
echo "$rallica [ OK LAUNCH RULES ] [ LAUNCHED FIREWALL CUSTOM ] [$second_option]"
exit ; else $nada ; fi
####
####
#######################
####     left script
#######################
####
####
#######################         english: End of script
#######################         spanish: Fin del script
####    
####
####    Git mini tutorial:
####
####
####    Download repository: Repository git.code.sf.net/p/f-iptables/code
####
####    Download f-iptables repository to folder user       :     git clone https://git.code.sf.net/p/f-iptables/code
####    Recover f-iptables repository to folder user        :     git fetch
####
####    upload repository: Repository git.code.sf.net/p/f-iptables/code
####    Upload f-iptables repository from local repository  :     git commit -a ; git push ;
####
####    Create repository local: /var/git/repository.localhost
####
####    mkdir /var/git/repository.localhost
####    cd /var/git/repository.localhost
####    git init --bare
####    chmod user /var/git/repository.localhost -R
####    service ssh start or systemctl restart ssh
####
####
#######################
#######################
####
####
exit
